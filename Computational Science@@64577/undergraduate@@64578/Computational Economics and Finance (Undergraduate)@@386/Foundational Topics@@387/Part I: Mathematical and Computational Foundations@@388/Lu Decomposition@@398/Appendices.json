{"hands_on_practices": [{"introduction": "Mastering any new technique begins with the fundamentals. This first practice problem focuses on the foundational skill of performing an LU decomposition directly, separating a matrix $A$ into its lower ($L$) and upper ($U$) triangular components using the Doolittle method. This hands-on calculation is crucial for building an intuitive understanding of how the factorization works before applying it to more complex problems. [@problem_id:2186375]", "id": "2186375", "problem": "In numerical linear algebra, the factorization of a matrix into a product of a lower triangular matrix and an upper triangular matrix is a fundamental operation. This factorization is known as LU decomposition and is used in various algorithms, such as solving systems of linear equations.\n\nConsider the matrix $A$ given by:\n$$\nA = \\begin{pmatrix} 3 & -1 & 2 \\\\ 6 & 1 & 9 \\\\ -9 & 5 & -5 \\end{pmatrix}\n$$\nThis matrix can be uniquely factorized into the product $A = LU$, where $L$ is a unit lower triangular matrix (i.e., with ones on the diagonal) and $U$ is an upper triangular matrix. The general forms for these $3 \\times 3$ matrices are:\n$$\nL = \\begin{pmatrix} 1 & 0 & 0 \\\\ l_{21} & 1 & 0 \\\\ l_{31} & l_{32} & 1 \\end{pmatrix}, \\quad U = \\begin{pmatrix} u_{11} & u_{12} & u_{13} \\\\ 0 & u_{22} & u_{23} \\\\ 0 & 0 & u_{33} \\end{pmatrix}\n$$\nDetermine the numerical values for the off-diagonal elements of matrix $L$ and all elements of matrix $U$ for the given matrix $A$. Express your final answer as a single row matrix containing these nine values in the specific order $(l_{21}, l_{31}, l_{32}, u_{11}, u_{12}, u_{13}, u_{22}, u_{23}, u_{33})$. Express all fractional values in their simplest form.\n\n", "solution": "We use the Doolittle LU factorization with $L$ unit lower triangular and $U$ upper triangular, satisfying $A=LU$. With\n$$\nL=\\begin{pmatrix}1&0&0\\\\ l_{21}&1&0\\\\ l_{31}&l_{32}&1\\end{pmatrix},\\quad\nU=\\begin{pmatrix}u_{11}&u_{12}&u_{13}\\\\ 0&u_{22}&u_{23}\\\\ 0&0&u_{33}\\end{pmatrix},\n$$\nthe product $LU$ gives, row by row:\n- Row 1: $[u_{11},u_{12},u_{13}]=[3,-1,2]$, hence $u_{11}=3$, $u_{12}=-1$, $u_{13}=2$.\n- Row 2, column 1: $l_{21}u_{11}=a_{21}=6$, so $l_{21}=\\frac{a_{21}}{u_{11}}=\\frac{6}{3}=2$.\n- Row 3, column 1: $l_{31}u_{11}=a_{31}=-9$, so $l_{31}=\\frac{a_{31}}{u_{11}}=\\frac{-9}{3}=-3$.\n- Row 2, column 2: $l_{21}u_{12}+u_{22}=a_{22}=1$, so $u_{22}=a_{22}-l_{21}u_{12}=1-2(-1)=3$.\n- Row 2, column 3: $l_{21}u_{13}+u_{23}=a_{23}=9$, so $u_{23}=a_{23}-l_{21}u_{13}=9-2\\cdot 2=5$.\n- Row 3, column 2: $l_{31}u_{12}+l_{32}u_{22}=a_{32}=5$, so $l_{32}=\\frac{a_{32}-l_{31}u_{12}}{u_{22}}=\\frac{5-(-3)(-1)}{3}=\\frac{5-3}{3}=\\frac{2}{3}$.\n- Row 3, column 3: $l_{31}u_{13}+l_{32}u_{23}+u_{33}=a_{33}=-5$, so\n$$\nu_{33}=a_{33}-l_{31}u_{13}-l_{32}u_{23}=-5-(-3\\cdot 2)-\\left(\\frac{2}{3}\\cdot 5\\right)=-5+6-\\frac{10}{3}=1-\\frac{10}{3}=-\\frac{7}{3}.\n$$\n\nTherefore, in the required order $(l_{21}, l_{31}, l_{32}, u_{11}, u_{12}, u_{13}, u_{22}, u_{23}, u_{33})$, the values are\n$$\n\\begin{pmatrix}\n2 & -3 & \\frac{2}{3} & 3 & -1 & 2 & 3 & 5 & -\\frac{7}{3}\n\\end{pmatrix}.\n$$", "answer": "$$\\boxed{\\begin{pmatrix}2 & -3 & \\frac{2}{3} & 3 & -1 & 2 & 3 & 5 & -\\frac{7}{3}\\end{pmatrix}}$$"}, {"introduction": "With the basic factorization process in hand, we can now explore its primary application: solving systems of linear equations efficiently. This exercise demonstrates how the $LU$ decomposition transforms a single complex problem, $A\\mathbf{x} = \\mathbf{b}$, into two much simpler triangular systems that can be solved sequentially using forward and backward substitution. This practice solidifies the connection between the decomposition and its practical utility in finding solutions to economic and financial models. [@problem_id:12944]", "id": "12944", "problem": "A system of linear equations can be represented in matrix form as $A\\mathbf{x} = \\mathbf{b}$. A powerful method for solving such a system is LU decomposition, where the matrix $A$ is decomposed into the product of a lower triangular matrix $L$ and an upper triangular matrix $U$, such that $A = LU$.\n\nThe original system $A\\mathbf{x} = \\mathbf{b}$ can then be rewritten as $LU\\mathbf{x} = \\mathbf{b}$. This equation can be solved in two steps:\n1.  Define an intermediate vector $\\mathbf{y} = U\\mathbf{x}$.\n2.  First, solve the system $L\\mathbf{y} = \\mathbf{b}$ for $\\mathbf{y}$ using forward substitution.\n3.  Then, solve the system $U\\mathbf{x} = \\mathbf{y}$ for $\\mathbf{x}$ using backward substitution.\n\nConsider the following system of linear equations:\n$$\n\\begin{align*}\n2x_1 + x_2 + x_3 &= 5 \\\\\n4x_1 - 6x_2 &= -2 \\\\\n-2x_1 + 7x_2 + 2x_3 &= 9\n\\end{align*}\n$$\nThis system can be written as $A\\mathbf{x} = \\mathbf{b}$ where:\n$$\nA = \\begin{pmatrix} 2 & 1 & 1 \\\\ 4 & -6 & 0 \\\\ -2 & 7 & 2 \\end{pmatrix}, \\quad \\mathbf{x} = \\begin{pmatrix} x_1 \\\\ x_2 \\\\ x_3 \\end{pmatrix}, \\quad \\mathbf{b} = \\begin{pmatrix} 5 \\\\ -2 \\\\ 9 \\end{pmatrix}\n$$\nFirst, find the LU decomposition of matrix $A$, where $L$ is a lower triangular matrix with ones on the diagonal (Doolittle decomposition), and $U$ is an upper triangular matrix. Then, use this decomposition to solve for the vector $\\mathbf{x}$.\n\nYour task is to derive the value of the expression $x_1 + 2x_2 + 3x_3$.\n\n", "solution": "We seek $L,U$ with $A=LU$, where \n$$L=\\begin{pmatrix}1&0&0\\\\l_{21}&1&0\\\\l_{31}&l_{32}&1\\end{pmatrix},\\quad\nU=\\begin{pmatrix}u_{11}&u_{12}&u_{13}\\\\0&u_{22}&u_{23}\\\\0&0&u_{33}\\end{pmatrix}.$$\n\nMatch $A=\\begin{pmatrix}2&1&1\\\\4&-6&0\\\\-2&7&2\\end{pmatrix}$:\n\n1. First row of $U$:\n$$u_{11}=2,\\quad u_{12}=1,\\quad u_{13}=1.$$\n\n2. Column‚Äê1 of $L$:\n$$l_{21}=\\frac{a_{21}}{u_{11}}=\\frac{4}{2}=2,\\quad\nl_{31}=\\frac{a_{31}}{u_{11}}=\\frac{-2}{2}=-1.$$\n\n3. Second row/column:\n$$u_{22}=a_{22}-l_{21}u_{12}=-6-2\\cdot1=-8,\\quad\nu_{23}=a_{23}-l_{21}u_{13}=0-2\\cdot1=-2.$$\n$$l_{32}=\\frac{a_{32}-l_{31}u_{12}}{u_{22}}=\\frac{7-(-1)\\cdot1}{-8}=\\frac{8}{-8}=-1.$$\n\n4. Last diagonal:\n$$u_{33}=a_{33}-l_{31}u_{13}-l_{32}u_{23}\n=2-(-1)\\cdot1-(-1)\\cdot(-2)=2+1-2=1.$$\n\nThus\n$$L=\\begin{pmatrix}1&0&0\\\\2&1&0\\\\-1&-1&1\\end{pmatrix},\\quad\nU=\\begin{pmatrix}2&1&1\\\\0&-8&-2\\\\0&0&1\\end{pmatrix}.$$\n\nNext solve $L\\mathbf y=\\mathbf b$ with $\\mathbf b=(5,-2,9)^T$ by forward substitution:\n$$y_1=5,\\quad\ny_2=-2-2\\,y_1=-2-10=-12,\\quad\ny_3=9-(-1)\\,y_1-(-1)\\,y_2=9+5-12=2.$$\n\nThen solve $U\\mathbf x=\\mathbf y$ by back substitution:\n$$x_3=2,\\quad\n-8x_2-2x_3=-12\\implies-8x_2-4=-12\\implies x_2=1,$$\n$$2x_1+x_2+x_3=5\\implies2x_1+1+2=5\\implies x_1=1.$$\n\nFinally,\n$$x_1+2x_2+3x_3=1+2\\cdot1+3\\cdot2=9.$$", "answer": "$$\\boxed{9}$$"}, {"introduction": "Theory and manual calculation provide the foundation, but the true power of LU decomposition is realized in computational applications. This advanced practice challenges you to solve several systems of linear equations, representing different economic scenarios, by leveraging a computer's ability to perform the $PA=LU$ factorization. You will encounter not only a standard case but also an ill-conditioned system, highlighting the critical importance of numerical stability and robust algorithms in modern computational finance. [@problem_id:2407888]", "id": "2407888", "problem": "Consider the linear systems that arise from static competitive equilibrium conditions represented in linearized form as the matrix equation $A x = b$, where $A \\in \\mathbb{R}^{n \\times n}$ is nonsingular and $b \\in \\mathbb{R}^{n}$ is a given vector of net demand shocks. For each system, suppose there exists a permutation matrix $P \\in \\mathbb{R}^{n \\times n}$, a unit lower-triangular matrix $L \\in \\mathbb{R}^{n \\times n}$, and an upper-triangular matrix $U \\in \\mathbb{R}^{n \\times n}$ such that $P A = L U$. Your task is to compute the unique solution $x \\in \\mathbb{R}^{n}$ that satisfies $A x = b$ for each of the following test cases.\n\nTest Suite:\n1. Case $1$ (general invertible system, $n = 3$):\n   $$A_1 = \\begin{bmatrix}\n   4 & 1 & -1\\\\\n   2 & 5 & 1\\\\\n   1 & -1 & 3\n   \\end{bmatrix}, \\quad\n   b_1 = \\begin{bmatrix}\n   10\\\\\n   10\\\\\n   10\n   \\end{bmatrix}.$$\n\n2. Case $2$ (ill-conditioned but nonsingular system, $n = 3$):\n   $$A_2 = \\begin{bmatrix}\n   10^{-4} & 1 & 1\\\\\n   1 & 1 & 1\\\\\n   1 & 1 & 1.0001\n   \\end{bmatrix}, \\quad\n   b_2 = \\begin{bmatrix}\n   1\\\\\n   2\\\\\n   3\n   \\end{bmatrix}.$$\n\n3. Case $3$ (larger, sparse and diagonally dominant system, $n = 5$):\n   $$A_3 = \\begin{bmatrix}\n   10 & 2 & 0 & 0 & 1\\\\\n   3 & 9 & 1 & 0 & 0\\\\\n   0 & 1 & 7 & 2 & 0\\\\\n   0 & 0 & 3 & 4 & 1\\\\\n   1 & 0 & 0 & 2 & 8\n   \\end{bmatrix}, \\quad\n   b_3 = \\begin{bmatrix}\n   7\\\\\n   8\\\\\n   9\\\\\n   10\\\\\n   11\n   \\end{bmatrix}.$$\n\nFor each case $k \\in \\{1,2,3\\}$, compute the vector $x_k \\in \\mathbb{R}^{n_k}$ that satisfies $A_k x_k = b_k$. Your program must use, for each $A_k$, a factorization of the form $P_k A_k = L_k U_k$ provided by a standard numerical library and obtain $x_k$ by solving the associated triangular linear systems implied by the factorization.\n\nFinal output format: Your program should produce a single line of output containing the results as a comma-separated list enclosed in square brackets. Each result must be an inner list representing the entries of $x_k$ rounded to exactly $6$ decimal places, with no spaces anywhere in the output. For example, if there were two cases with solutions $\\begin{bmatrix} 1 \\\\ 2 \\end{bmatrix}$ and $\\begin{bmatrix} 3 \\\\ 4 \\end{bmatrix}$, the required output would be \"[[1.000000,2.000000],[3.000000,4.000000]]\".", "solution": "The problem statement is parsed and validated.\n\nGivens:\nThe problem is to solve the linear system $A x = b$ for three distinct cases.\nThe methodology is specified as using the $P A = L U$ decomposition, where $P$ is a permutation matrix, $L$ is a unit lower-triangular matrix, and $U$ is an upper-triangular matrix.\n\nCase $1$: $n=3$.\n$$A_1 = \\begin{bmatrix}\n4 & 1 & -1\\\\\n2 & 5 & 1\\\\\n1 & -1 & 3\n\\end{bmatrix}, \\quad\nb_1 = \\begin{bmatrix}\n10\\\\\n10\\\\\n10\n\\end{bmatrix}.$$\n\nCase $2$: $n=3$.\n$$A_2 = \\begin{bmatrix}\n10^{-4} & 1 & 1\\\\\n1 & 1 & 1\\\\\n1 & 1 & 1.0001\n\\end{bmatrix}, \\quad\nb_2 = \\begin{bmatrix}\n1\\\\\n2\\\\\n3\n\\end{bmatrix}.$$\n\nCase $3$: $n=5$.\n$$A_3 = \\begin{bmatrix}\n10 & 2 & 0 & 0 & 1\\\\\n3 & 9 & 1 & 0 & 0\\\\\n0 & 1 & 7 & 2 & 0\\\\\n0 & 0 & 3 & 4 & 1\\\\\n1 & 0 & 0 & 2 & 8\n\\end{bmatrix}, \\quad\nb_3 = \\begin{bmatrix}\n7\\\\\n8\\\\\n9\\\\\n10\\\\\n11\n\\end{bmatrix}.$$\n\nValidation:\nThe problem is scientifically grounded, well-posed, objective, and self-contained. It describes a standard task in numerical linear algebra with direct applications in computational economics and finance. The matrices given are nonsingular, ensuring a unique solution exists for each case. The determinant of $A_1$ is $66$, the determinant of $A_2$ is approximately $-10^{-4}$, and $A_3$ is an irreducibly diagonally dominant matrix, which guarantees it is nonsingular. Case $2$ is noted as ill-conditioned, which is a valid and important scenario for testing the robustness of numerical algorithms. The problem does not violate any scientific principles and is structured for a unique, meaningful solution.\n\nVerdict:\nThe problem is deemed valid. A solution will be provided.\n\nPrinciple of Solution:\nThe task is to find the vector $x \\in \\mathbb{R}^{n}$ that satisfies the linear matrix equation $A x = b$ for a given nonsingular matrix $A \\in \\mathbb{R}^{n \\times n}$ and vector $b \\in \\mathbb{R}^{n}$. The specified method is via LU decomposition with partial pivoting. This factorization has the form $P A = L U$, where $P$ is a permutation matrix that encodes row interchanges, $L$ is a unit lower-triangular matrix, and $U$ is an upper-triangular matrix.\n\nThe procedure is as follows:\n$1$. Start with the system $A x = b$.\n$2$. Premultiply by the permutation matrix $P$ to get $P A x = P b$.\n$3$. Substitute the factorization $P A = L U$ into the equation: $L U x = P b$.\n$4$. This equation is solved in a two-stage process. First, define an intermediate vector $y = U x$. The system becomes $L y = P b$.\n$5$. Solve for $y$. Since $L$ is a lower-triangular matrix, this system can be solved efficiently using forward substitution. The elements of $y$ are computed sequentially:\n$$y_i = ( (P b)_i - \\sum_{j=1}^{i-1} L_{ij} y_j ) / L_{ii}$$\nSince $L$ is unit lower-triangular, $L_{ii} = 1$ for all $i$.\n\n$6$. Once $y$ is determined, solve the system $U x = y$ for the final solution vector $x$. Since $U$ is an upper-triangular matrix, this is solved efficiently using backward substitution. The elements of $x$ are computed in reverse order:\n$$x_i = ( y_i - \\sum_{j=i+1}^{n} U_{ij} x_j ) / U_{ii}$$\n\nThe use of partial pivoting (the $P$ matrix) is essential for numerical stability. It ensures that when performing Gaussian elimination to find the factors $L$ and $U$, the pivot element (the diagonal element $U_{kk}$) is the largest in its column (below the diagonal). This mitigates the amplification of rounding errors, which is particularly critical for ill-conditioned systems, such as the one presented in Case $2$.\n\nFor Case $2$, the matrix $A_2$ is severely ill-conditioned. Standard double-precision floating-point arithmetic (e.g., `float64`) may be insufficient to resolve the solution accurately, even with pivoting. Catastrophic cancellation can occur, leading to a computed solution with a large residual error. A rigorous approach requires higher-precision arithmetic to obtain the correct result. This demonstrates a fundamental principle of numerical analysis: the interplay between algorithm stability, machine precision, and problem conditioning.\n\nFor Case $3$, the matrix $A_3$ is diagonally dominant. Such matrices are inherently well-behaved, and LU decomposition is a very stable and efficient method for them.\n\nThe implementation will use a standard numerical library that provides robust functions for LU factorization with pivoting and for solving the resulting triangular systems. This directly maps to the theoretical procedure described. For the ill-conditioned case, increased arithmetic precision will be programmatically employed to ensure a correct result.", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\nfrom scipy import linalg\n\ndef solve_system(A, b):\n    \"\"\"\n    Solves the linear system Ax = b using LU decomposition with partial pivoting.\n    \n    This function explicitly uses the method described in the problem:\n    1. Factor PA = LU using a library function.\n    2. Solve Ly = Pb and Ux = y using a library function that takes the LU factors.\n    \n    For ill-conditioned matrices, higher precision arithmetic is necessary to\n    obtain a correct result.\n    \"\"\"\n    try:\n        # First attempt with standard double precision (float64)\n        lu, piv = linalg.lu_factor(A.astype(np.float64))\n        x = linalg.lu_solve((lu, piv), b.astype(np.float64))\n        # Verify the residual for ill-conditioned case. If it's large, redo with higher precision.\n        if np.linalg.norm(A @ x - b) > 1e-4:\n             raise np.linalg.LinAlgError(\"High residual, retrying with long double.\")\n    except (np.linalg.LinAlgError, FloatingPointError):\n        # Fallback to higher precision (longdouble) if standard precision fails\n        # or produces a result with a large error, which is characteristic of\n        # ill-conditioned systems like Case 2.\n        A_high_prec = A.astype(np.longdouble)\n        b_high_prec = b.astype(np.longdouble)\n        lu, piv = linalg.lu_factor(A_high_prec)\n        x = linalg.lu_solve((lu, piv), b_high_prec)\n        \n    return x\n\ndef solve():\n    \"\"\"\n    Defines and solves the test cases provided in the problem statement.\n    \"\"\"\n    # Define the test cases from the problem statement.\n    test_cases = [\n        (\n            np.array([\n                [4, 1, -1],\n                [2, 5, 1],\n                [1, -1, 3]\n            ]),\n            np.array([10, 10, 10])\n        ),\n        (\n            np.array([\n                [1e-4, 1, 1],\n                [1, 1, 1],\n                [1, 1, 1.0001]\n            ]),\n            np.array([1, 2, 3])\n        ),\n        (\n            np.array([\n                [10, 2, 0, 0, 1],\n                [3, 9, 1, 0, 0],\n                [0, 1, 7, 2, 0],\n                [0, 0, 3, 4, 1],\n                [1, 0, 0, 2, 8]\n            ]),\n            np.array([7, 8, 9, 10, 11])\n        ),\n    ]\n\n    # Store results for final printing.\n    formatted_results = []\n    \n    for A, b in test_cases:\n        # Calculate the solution vector x for the current case.\n        solution_vector = solve_system(A, b)\n        \n        # Format the solution vector to exactly 6 decimal places.\n        formatted_vector = [f\"{val:.6f}\" for val in solution_vector]\n        \n        # Enclose the formatted vector in brackets as a string.\n        formatted_results.append(f\"[{','.join(formatted_vector)}]\")\n\n    # Final print statement in the exact required format.\n    # e.g., [[1.0,2.0],[3.0,4.0]]\n    print(f\"[{','.join(formatted_results)}]\")\n\nsolve()\n\n```"}]}