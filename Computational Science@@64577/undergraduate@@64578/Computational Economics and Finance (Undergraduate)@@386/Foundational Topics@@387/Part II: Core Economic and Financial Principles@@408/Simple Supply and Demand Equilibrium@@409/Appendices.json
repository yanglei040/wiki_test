{"hands_on_practices": [{"introduction": "Our exploration of market equilibrium begins by challenging the assumption of perfectly continuous supply curves. In many real-world industries, firms face significant operational thresholds, such as a minimum production batch size or the baseline output needed to run a factory efficiently. This practice [@problem_id:2429894] models such a scenario by introducing a discontinuity in the supply function. The key skill you will develop is to first calculate the hypothetical, unconstrained equilibrium and then use conditional logic to test its feasibility against the production minimum, correctly identifying either an active market or a shutdown equilibrium.", "id": "2429894", "problem": "Consider a single-good competitive market with a downward-sloping linear inverse demand curve and an upward-sloping linear inverse supply curve, where the unique supplier is a factory that cannot operate below a minimum operational capacity. Let $Q$ denote quantity and $P$ denote price.\n\nDemand is given by the inverse demand function $P_{D}(Q) = \\alpha - \\beta Q$ for $Q \\ge 0$, where $\\alpha > 0$ and $\\beta > 0$. The choke price is $P_{choke} = \\alpha$, at which the demanded quantity is $0$.\n\nSupply is characterized by a minimum operational capacity constraint: if the factory operates, it must produce at least $Q_{min}$ units. When operating, the inverse supply is $P_{S}(Q) = \\gamma + \\delta Q$ for $Q \\ge Q_{min}$, with $\\gamma \\ge 0$ and $\\delta > 0$. If the factory does not operate, market supply is $Q_{S} = 0$.\n\nA market equilibrium $(Q^{*}, P^{*})$ satisfies market clearing and feasibility: either (i) the factory operates and $Q^{*} \\ge Q_{min}$ with $P^{*} = P_{D}(Q^{*}) = P_{S}(Q^{*})$ and $P^{*} \\ge 0$, or (ii) the factory does not operate, $Q^{*} = 0$, and the price must clear the market with zero demand, in which case choose the smallest nonnegative price that clears, namely $P^{*} = P_{choke} = \\alpha$.\n\nYour task is to write a program that, for each parameter set $(\\alpha, \\beta, \\gamma, \\delta, Q_{min})$ below, computes the equilibrium pair $(Q^{*}, P^{*})$ according to the definition above. Report each $Q^{*}$ and $P^{*}$ rounded to six decimal places.\n\nTest Suite (each tuple is $(\\alpha, \\beta, \\gamma, \\delta, Q_{min})$):\n\n- Case A: $(\\alpha, \\beta, \\gamma, \\delta, Q_{min}) = ($100$, $1$, $10$, $1$, $20$)$.\n- Case B: $(\\alpha, \\beta, \\gamma, \\delta, Q_{min}) = ($100$, $1$, $10$, $1$, $60$)$.\n- Case C: $(\\alpha, \\beta, \\gamma, \\delta, Q_{min}) = ($90$, $1.5$, $30$, $0.5$, $20$)$.\n- Case D (boundary): $(\\alpha, \\beta, \\gamma, \\delta, Q_{min}) = ($110$, $2$, $10$, $2$, $25$)$.\n- Case E (standard with $Q_{min} = 0$): $(\\alpha, \\beta, \\gamma, \\delta, Q_{min}) = ($80$, $2$, $20$, $4$, $0$)$.\n- Case F (no positive-quantity intersection): $(\\alpha, \\beta, \\gamma, \\delta, Q_{min}) = ($5$, $2$, $10$, $3$, $1$)$.\n\nFinal Output Format:\nYour program should produce a single line of output containing the results as a comma-separated list of pairs enclosed in square brackets, in the same order as the cases above, where each pair is $[Q^{*},P^{*}]$ with both entries rounded to six decimal places. For example, a valid output with placeholder numbers would look like $[[x_{1},y_{1}],[x_{2},y_{2}],\\dots,[x_{6},y_{6}]]$.", "solution": "The supplied problem will first be subject to rigorous validation.\n\n### Step 1: Extract Givens\nThe problem provides the following data and definitions:\n- **Inverse Demand Function**: $P_{D}(Q) = \\alpha - \\beta Q$ for $Q \\ge 0$, with parameters $\\alpha > 0$, $\\beta > 0$.\n- **Inverse Supply Function**: $P_{S}(Q) = \\gamma + \\delta Q$ for $Q \\ge Q_{min}$, with parameters $\\gamma \\ge 0$, $\\delta > 0$.\n- **Minimum Operational Capacity**: $Q_{min}$. If the factory does not operate, supply is $Q_{S} = 0$.\n- **Equilibrium Definition**: A market equilibrium $(Q^{*}, P^{*})$ is a pair that satisfies one of two conditions:\n    1.  Factory operates: $Q^{*} \\ge Q_{min}$, $P^{*} = P_{D}(Q^{*}) = P_{S}(Q^{*})$, and $P^{*} \\ge 0$.\n    2.  Factory does not operate: $Q^{*} = 0$, with market-clearing price $P^{*} = P_{choke} = \\alpha$.\n- **Test Suite**:\n    - Case A: $(\\alpha, \\beta, \\gamma, \\delta, Q_{min}) = (100, 1, 10, 1, 20)$\n    - Case B: $(\\alpha, \\beta, \\gamma, \\delta, Q_{min}) = (100, 1, 10, 1, 60)$\n    - Case C: $(\\alpha, \\beta, \\gamma, \\delta, Q_{min}) = (90, 1.5, 30, 0.5, 20)$\n    - Case D: $(\\alpha, \\beta, \\gamma, \\delta, Q_{min}) = (110, 2, 10, 2, 25)$\n    - Case E: $(\\alpha, \\beta, \\gamma, \\delta, Q_{min}) = (80, 2, 20, 4, 0)$\n    - Case F: $(\\alpha, \\beta, \\gamma, \\delta, Q_{min}) = (5, 2, 10, 3, 1)$\n\n### Step 2: Validate Using Extracted Givens\nThe problem is subjected to validation against the established criteria.\n\n- **Scientifically Grounded**: The problem describes a simple supply and demand model with linear functions and a minimum production constraint. These are standard, fundamental concepts in microeconomics. It is scientifically sound.\n- **Well-Posed**: The problem is specified with mathematical precision. The functions, parameters, and equilibrium conditions are defined without ambiguity. The parameter constraints ($\\alpha > 0, \\beta > 0, \\delta > 0, \\gamma \\ge 0$) ensure the economic sense of downward-sloping demand and upward-sloping supply. The two-part definition of equilibrium covers all possibilities and provides a unique outcome for each case. The problem is well-posed.\n- **Objective**: The problem statement is purely quantitative and definitional. It contains no subjective language or opinion-based claims. It is objective.\n\nThe problem exhibits no flaws such as scientific unsoundness, incompleteness, or ambiguity. It is a formalizable problem within the specified domain of computational economics.\n\n### Step 3: Verdict and Action\nThe problem is **valid**. A solution will be formulated.\n\n### Solution Formulation\nThe determination of the market equilibrium $(Q^*, P^*)$ requires a systematic evaluation based on the provided definitions. Two possible types of equilibrium exist: one with positive production, and one with zero production (shutdown).\n\nFirst, we identify a potential equilibrium with positive production. According to the definition, this occurs if there is a quantity $Q_e$ such that the market clears, i.e., $P_D(Q_e) = P_S(Q_e)$. This is the unconstrained equilibrium point. We solve for this quantity, which we denote as $Q_e$:\n$$\n\\alpha - \\beta Q_e = \\gamma + \\delta Q_e\n$$\n$$\n\\alpha - \\gamma = (\\beta + \\delta) Q_e\n$$\n$$\nQ_e = \\frac{\\alpha - \\gamma}{\\beta + \\delta}\n$$\nSince $\\beta > 0$ and $\\delta > 0$, the denominator $(\\beta + \\delta)$ is always positive. The corresponding equilibrium price, $P_e$, is found by substituting $Q_e$ back into either the demand or supply function:\n$$\nP_e = P_D(Q_e) = \\alpha - \\beta \\left( \\frac{\\alpha - \\gamma}{\\beta + \\delta} \\right) = \\frac{\\alpha(\\beta + \\delta) - \\beta(\\alpha - \\gamma)}{\\beta + \\delta} = \\frac{\\alpha\\delta + \\beta\\gamma}{\\beta + \\delta}\n$$\nGiven the constraints $\\alpha > 0, \\beta > 0, \\delta > 0, \\gamma \\ge 0$, the price $P_e$ is always non-negative.\n\nThe problem states that for a positive-production equilibrium, we must have $Q^* \\ge Q_{min}$. The only candidate for such an equilibrium is $(Q_e, P_e)$, because only at this point is the condition $P_D(Q^*) = P_S(Q^*)$ satisfied. Therefore, the central logical test is whether this unconstrained equilibrium $(Q_e, P_e)$ is feasible given the minimum capacity constraint $Q_{min}$.\n\nThis leads to a simple, dichotomous logic:\n\n**Case 1: The unconstrained equilibrium is feasible.**\nThis condition holds if and only if $Q_e \\ge Q_{min}$.\nIf this is true, the factory can and will produce at the market-clearing quantity $Q_e$. All conditions for an operating equilibrium are met: $Q_e \\ge Q_{min}$, $P_D(Q_e) = P_S(Q_e)$, and $P_e \\ge 0$.\nThus, the market equilibrium is $(Q^*, P^*) = (Q_e, P_e)$.\n\n**Case 2: The unconstrained equilibrium is not feasible.**\nThis condition holds if and only if $Q_e < Q_{min}$. This covers two scenarios:\n  a) The curves intersect at a positive quantity that is too small ($0 \\le Q_e < Q_{min}$).\n  b) The curves do not intersect at a non-negative quantity ($\\alpha \\le \\gamma$, leading to $Q_e \\le 0$).\n\nIn either scenario, the only point where $P_D(Q) = P_S(Q)$ occurs at a quantity less than $Q_{min}$. For any quantity $Q \\ge Q_{min}$, it holds that $Q > Q_e$. Since the function $P_D(Q) - P_S(Q) = (\\alpha - \\gamma) - (\\beta + \\delta)Q$ is strictly decreasing in $Q$, for any $Q > Q_e$ we have $P_D(Q) < P_S(Q)$. This means that for any production level at or above the minimum capacity, the price consumers are willing to pay is less than the price the supplier requires. Production is therefore unprofitable at any feasible level. The factory will not operate.\n\nIn this case, the market defaults to the shutdown equilibrium defined in the problem statement: market supply is zero, and the equilibrium is $(Q^*, P^*) = (0, \\alpha)$.\n\n**Algorithmic Summary:**\n1. Given parameters $(\\alpha, \\beta, \\gamma, \\delta, Q_{min})$, calculate the unconstrained equilibrium quantity $Q_e = \\frac{\\alpha - \\gamma}{\\beta + \\delta}$.\n2. If $Q_e \\ge Q_{min}$, the equilibrium is $Q^* = Q_e$ and $P^* = \\alpha - \\beta Q_e$.\n3. If $Q_e < Q_{min}$, the equilibrium is $Q^* = 0$ and $P^* = \\alpha$.\n\nThis procedure will be implemented to solve for the given test cases. All results will be rounded to six decimal places as required.", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Computes the market equilibrium for a set of supply and demand parameters\n    with a minimum production capacity constraint.\n    \"\"\"\n    # Define the test cases from the problem statement as tuples of\n    # (alpha, beta, gamma, delta, Q_min).\n    test_cases = [\n        (100.0, 1.0, 10.0, 1.0, 20.0),   # Case A\n        (100.0, 1.0, 10.0, 1.0, 60.0),   # Case B\n        (90.0, 1.5, 30.0, 0.5, 20.0),   # Case C\n        (110.0, 2.0, 10.0, 2.0, 25.0),   # Case D (boundary)\n        (80.0, 2.0, 20.0, 4.0, 0.0),    # Case E (standard with Q_min=0)\n        (5.0, 2.0, 10.0, 3.0, 1.0),    # Case F (no positive-quantity intersection)\n    ]\n\n    results = []\n    \n    for case in test_cases:\n        alpha, beta, gamma, delta, q_min = case\n\n        # The denominator (beta + delta) is always positive given the problem constraints\n        # (beta > 0, delta > 0).\n        denominator = beta + delta\n\n        # Calculate the unconstrained equilibrium quantity, Q_e, where the\n        # supply and demand curves intersect.\n        # Q_e = (alpha - gamma) / (beta + delta)\n        q_e = (alpha - gamma) / denominator\n\n        q_star, p_star = 0.0, 0.0\n\n        # The core logic is to check if the unconstrained equilibrium is feasible.\n        # An operating equilibrium is only possible at the intersection point (Q_e, P_e).\n        # If Q_e is less than the minimum required production Q_min, then no\n        # production is profitable, and the market shuts down.\n        if q_e >= q_min:\n            # Case 1: The unconstrained equilibrium is feasible.\n            # The market operates at this point.\n            q_star = q_e\n            # Calculate the price P* using the inverse demand function.\n            p_star = alpha - beta * q_star\n        else:\n            # Case 2: The unconstrained equilibrium is not feasible (Q_e < Q_min).\n            # For any Q >= Q_min, P_D(Q) < P_S(Q), so production is not viable.\n            # The market shuts down as per the problem definition.\n            q_star = 0.0\n            p_star = alpha\n        \n        # Format the result for the current case as a string \"[Q*,P*]\" with\n        # values rounded to six decimal places.\n        results.append(f\"[{q_star:.6f},{p_star:.6f}]\")\n\n    # Final print statement must produce a single line with the specified format:\n    # [[Q1,P1],[Q2,P2],...,[QN,PN]]\n    print(f\"[{','.join(results)}]\")\n\nsolve()\n```"}, {"introduction": "Next, we question one of the most fundamental tenets of microeconomics: the law of demand. For certain \"Veblen goods,\" a higher price can paradoxically enhance a product's appeal, causing demand to increase with price over a specific range. This exercise [@problem_id:2429850] provides a framework for modeling this unusual behavior using a cubic polynomial demand function. Solving for equilibrium in such a market reveals the fascinating possibility of multiple market-clearing prices, requiring you to find all valid mathematical roots and then systematically filter them based on economic constraints, such as non-negative prices ($P^{\\ast} \\ge 0$) and quantities ($Q^{\\ast} \\ge 0$).", "id": "2429850", "problem": "Consider a single-commodity market with inverse-free price $P \\ge 0$ and quantities $Q \\ge 0$. A competitive equilibrium is any pair $(P^{\\ast}, Q^{\\ast})$ with $P^{\\ast} \\ge 0$ and $Q^{\\ast} \\ge 0$ such that quantity demanded equals quantity supplied at $P^{\\ast}$, that is $Q_d(P^{\\ast}) = Q_s(P^{\\ast}) = Q^{\\ast}$. For a Veblen good, demand may increase with price over a non-empty price interval. Model demand and supply as follows:\n- Demand: $Q_d(P) = \\alpha - \\beta P + \\gamma P^2 - \\delta P^3$ with parameters $\\alpha > 0$, $\\beta > 0$, $\\gamma > 0$, $\\delta > 0$. This specification allows a Veblen region because $Q_d'(P) = -\\beta + 2 \\gamma P - 3 \\delta P^2$ can be positive on a non-empty interval whenever the discriminant of the quadratic condition $-\\beta + 2 \\gamma P - 3 \\delta P^2 > 0$ is positive.\n- Supply: $Q_s(P) = s_0 + s_1 P$ with parameters $s_0 \\in \\mathbb{R}$ and $s_1 > 0$.\n\nYour task is to compute, from first principles, all competitive equilibria $(P^{\\ast}, Q^{\\ast})$ for each parameter set in the test suite below. An equilibrium $(P^{\\ast}, Q^{\\ast})$ must satisfy $P^{\\ast} \\ge 0$, $Q^{\\ast} \\ge 0$, and $Q_d(P^{\\ast}) = Q_s(P^{\\ast})$. If no such pair exists, the output for that test case is the empty list.\n\nTest suite (each case is $(\\alpha, \\beta, \\gamma, \\delta, s_0, s_1)$, in that order):\n- Case $1$: $(\\alpha, \\beta, \\gamma, \\delta, s_0, s_1) = (\\,\\$120\\$, \\$60\\$, \\$12\\$, \\$0.6\\$, \\$20\\$, \\$8\\$\\,)$.\n- Case $2$: $(\\alpha, \\beta, \\gamma, \\delta, s_0, s_1) = (\\,\\$120\\$, \\$60\\$, \\$12\\$, \\$0.6\\$, \\$-33.6\\$, \\$16.8\\$\\,)$. This case is calibrated so that the supply curve is tangent to the demand curve at a positive price, thereby creating a boundary condition with a repeated root.\n- Case $3$: $(\\alpha, \\beta, \\gamma, \\delta, s_0, s_1) = (\\,\\$120\\$, \\$60\\$, \\$12\\$, \\$0.6\\$, \\$0\\$, \\$25\\$\\,)$.\n- Case $4$: $(\\alpha, \\beta, \\gamma, \\delta, s_0, s_1) = (\\,\\$120\\$, \\$60\\$, \\$12\\$, \\$0.6\\$, \\$250\\$, \\$15\\$\\,)$.\n\nOutput specification:\n- For each test case, produce the list of all equilibria as $[ [P_1^{\\ast}, Q_1^{\\ast}], [P_2^{\\ast}, Q_2^{\\ast}], \\dots ]$ ordered by strictly increasing price $P_i^{\\ast}$, where each number is printed with exactly six digits after the decimal point.\n- Aggregate all test case outputs into a single line as a list of lists: $[ \\text{case1\\_list}, \\text{case2\\_list}, \\text{case3\\_list}, \\text{case4\\_list} ]$.\n- If a test case has no equilibrium, output the empty list $[\\ ]$ for that case.\n- The final printed line must contain no spaces. For example, an output with two cases might look like $[[[P^{\\ast}_1,Q^{\\ast}_1]],[]]$, with each $P^{\\ast}_i$ and $Q^{\\ast}_i$ shown to exactly six decimal places.\n\nThere are no physical units in this problem. All results must be real numbers and adhere to the nonnegativity constraints $P^{\\ast} \\ge 0$ and $Q^{\\ast} \\ge 0$.", "solution": "A competitive equilibrium for this market is a pair $(P^{\\ast}, Q^{\\ast})$ that satisfies the defining conditions $P^{\\ast} \\ge 0$, $Q^{\\ast} \\ge 0$, and $Q_d(P^{\\ast}) = Q_s(P^{\\ast}) = Q^{\\ast}$. Given demand $Q_d(P) = \\alpha - \\beta P + \\gamma P^2 - \\delta P^3$ with $\\alpha > 0$, $\\beta > 0$, $\\gamma > 0$, $\\delta > 0$, and supply $Q_s(P) = s_0 + s_1 P$ with $s_1 > 0$, the Veblen property arises because the derivative of demand is\n$$\nQ_d'(P) = -\\beta + 2 \\gamma P - 3 \\delta P^2,\n$$\nwhich is a concave quadratic function of $P$. When its discriminant is positive, there exists a non-empty interval $(P_L, P_H)$ for which $Q_d'(P) > 0$, and the demand curve is upward-sloping on $(P_L, P_H)$.\n\nEquilibria arise at prices $P$ solving the equality condition $Q_d(P) = Q_s(P)$. Define\n$$\ng(P) \\equiv Q_d(P) - Q_s(P) = \\alpha - \\beta P + \\gamma P^2 - \\delta P^3 - s_0 - s_1 P.\n$$\nRearranging terms yields a cubic polynomial equation in $P$,\n$$\n-\\delta P^3 + \\gamma P^2 - (\\beta + s_1) P + (\\alpha - s_0) = 0.\n$$\nLet the coefficients in descending powers of $P$ be $[-\\delta,\\ \\gamma,\\ -(\\beta + s_1),\\ (\\alpha - s_0)]$. The real roots of this polynomial are all candidate equilibrium prices. Because prices and quantities must be nonnegative, we impose the feasibility constraints $P^{\\ast} \\ge 0$ and $Q^{\\ast} = Q_s(P^{\\ast}) = s_0 + s_1 P^{\\ast} \\ge 0$ to filter out inadmissible roots. When a root has multiplicity greater than one (e.g., tangency), it represents a single equilibrium price and should not be duplicated. The corresponding equilibrium quantity $Q^{\\ast}$ is then given by $Q^{\\ast} = Q_s(P^{\\ast})$.\n\nAlgorithmic plan grounded in these principles:\n- For each test case, form the cubic coefficient vector $[-\\delta,\\ \\gamma,\\ -(\\beta + s_1),\\ (\\alpha - s_0)]$.\n- Compute all complex roots of the cubic, extract real roots by requiring the imaginary part to be numerically negligible, and sort them in nondecreasing order.\n- Impose $P^{\\ast} \\ge 0$ and $Q^{\\ast} = s_0 + s_1 P^{\\ast} \\ge 0$ to enforce feasibility.\n- Deduplicate nearly identical prices to handle repeated roots (tangencies).\n- Report all $(P^{\\ast}, Q^{\\ast})$ pairs, ordered by $P^{\\ast}$, rounding each number to exactly six decimal places.\n\nApplying this method to the test suite:\n- Case $1$: $(\\alpha, \\beta, \\gamma, \\delta, s_0, s_1) = (\\,\\$120\\$, \\$60\\$, \\$12\\$, \\$0.6\\$, \\$20\\$, \\$8\\$\\,)$. The cubic equation is $-\\$0.6\\$ P^3 + \\$12\\$ P^2 - \\$68\\$ P + \\$100\\$ = 0$, which has three distinct real roots satisfying $P^{\\ast} \\ge 0$. All corresponding quantities $Q^{\\ast} = \\$20\\$ + \\$8\\$ P^{\\ast}$ are nonnegative, so there are three admissible equilibria. Numerically, these occur at prices approximately $P^{\\ast} \\approx \\$2.291600\\$, $P^{\\ast} \\approx \\$6.490000\\$, and $P^{\\ast} \\approx \\$11.229900\\$, with quantities $Q^{\\ast} \\approx \\$38.332800\\$, $Q^{\\ast} \\approx \\$71.920000\\$, and $Q^{\\ast} \\approx \\$109.839200\\$, respectively.\n- Case $2$: $(\\alpha, \\beta, \\gamma, \\delta, s_0, s_1) = (\\,\\$120\\$, \\$60\\$, \\$12\\$, \\$0.6\\$, \\$-33.6\\$, \\$16.8\\$\\,)$. The cubic is $-\\$0.6\\$ P^3 + \\$12\\$ P^2 - \\$76.8\\$ P + \\$153.6\\$ = 0$. This configuration is a boundary (tangency) case. Indeed, $Q_d'(P) = -\\$60\\$ + \\$24\\$ P - \\$1.8\\$ P^2$ and $Q_s'(P) = \\$16.8\\$, so at $P = \\$8\\$, $Q_d'(8) = \\$16.8\\$ = Q_s'(8)$ and $Q_d(8) = \\$100.8\\$ = Q_s(8)$, demonstrating a repeated root at $P^{\\ast} = \\$8\\$ (tangent equilibrium). Factoring confirms $-\\$0.6\\$ (P - \\$8\\$)^2 (P - \\$4\\$) = 0$, so the other equilibrium is $P^{\\ast} = \\$4\\$ with $Q^{\\ast} = \\$33.6\\$. Both equilibria satisfy nonnegativity.\n- Case $3$: $(\\alpha, \\beta, \\gamma, \\delta, s_0, s_1) = (\\,\\$120\\$, \\$60\\$, \\$12\\$, \\$0.6\\$, \\$0\\$, \\$25\\$\\,)$. The cubic is $-\\$0.6\\$ P^3 + \\$12\\$ P^2 - \\$85\\$ P + \\$120\\$ = 0$. There is exactly one admissible intersection on $P \\ge 0$; numerically, $P^{\\ast} \\approx \\$1.850700\\$, with $Q^{\\ast} = \\$25\\$ \\cdot P^{\\ast} \\approx \\$46.267500\\$. The other roots are not admissible on $P \\ge 0$ or are complex.\n- Case $4$: $(\\alpha, \\beta, \\gamma, \\delta, s_0, s_1) = (\\,\\$120\\$, \\$60\\$, \\$12\\$, \\$0.6\\$, \\$250\\$, \\$15\\$\\,)$. The cubic is $-\\$0.6\\$ P^3 + \\$12\\$ P^2 - \\$75\\$ P - \\$130\\$ = 0$. For all $P \\ge 0$, $Q_s(P)$ exceeds $Q_d(P)$, so there is no admissible equilibrium $(P^{\\ast}, Q^{\\ast})$ with $P^{\\ast} \\ge 0$ and $Q^{\\ast} \\ge 0$. The correct output for this case is the empty list.\n\nThe program computes the real roots, enforces feasibility, deduplicates tangency cases, orders equilibria by price, and prints the required single-line, no-space, list-of-lists output with each number rounded to exactly six decimal places.", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef find_equilibria(alpha, beta, gamma, delta, s0, s1, imag_tol=1e-9, p_tol=1e-7):\n    \"\"\"\n    Solve for all competitive equilibria (P*, Q*) given parameters of\n    Qd(P) = alpha - beta*P + gamma*P**2 - delta*P**3\n    Qs(P) = s0 + s1*P\n    Returns a list of [P*, Q*] pairs with P*, Q* rounded to 6 decimals.\n    \"\"\"\n    # Coefficients for g(P) = Qd(P) - Qs(P) = 0 in descending powers of P\n    # g(P) = -delta*P^3 + gamma*P^2 - (beta + s1)*P + (alpha - s0)\n    coefs = np.array([-delta, gamma, -(beta + s1), (alpha - s0)], dtype=float)\n\n    # Compute all roots of the cubic\n    roots = np.roots(coefs)\n\n    # Extract real roots within tolerance\n    real_ps = sorted(r.real for r in roots if abs(r.imag) <= imag_tol)\n\n    # Filter feasible equilibria: P >= 0 and Q >= 0\n    eqs = []\n    for p in real_ps:\n        if p >= -1e-10:  # allow tiny negative numerical noise\n            p_val = 0.0 if abs(p) < 1e-12 else p\n            q_val = s0 + s1 * p_val\n            if q_val >= -1e-10:\n                eqs.append((p_val, q_val))\n\n    # Sort by price\n    eqs.sort(key=lambda x: x[0])\n\n    # Deduplicate near-equal prices (handle repeated roots/tangency)\n    dedup = []\n    for p_val, q_val in eqs:\n        if not dedup:\n            dedup.append((p_val, q_val))\n        else:\n            p_prev, q_prev = dedup[-1]\n            if abs(p_val - p_prev) <= p_tol:\n                # Merge duplicates by averaging to reduce numerical jitter\n                merged_p = 0.5 * (p_prev + p_val)\n                merged_q = 0.5 * (q_prev + q_val)\n                dedup[-1] = (merged_p, merged_q)\n            else:\n                dedup.append((p_val, q_val))\n\n    # Round to 6 decimals\n    rounded = [[round(p, 6), round(s0 + s1 * p, 6)] for (p, _) in dedup]\n    return rounded\n\ndef format_output(all_results):\n    \"\"\"\n    Format nested list of results with no spaces and exactly six decimals.\n    all_results: list of test case results, each a list of [P, Q] lists.\n    \"\"\"\n    def fmt_num(x):\n        return f\"{x:.6f}\"\n\n    def fmt_case(case):\n        # case is a list of [P, Q]\n        pairs = []\n        for P, Q in case:\n            pairs.append(f\"[{fmt_num(P)},{fmt_num(Q)}]\")\n        return \"[\" + \",\".join(pairs) + \"]\"\n\n    return \"[\" + \",\".join(fmt_case(case) for case in all_results) + \"]\"\n\ndef solve():\n    # Define the test cases from the problem statement:\n    # Each tuple is (alpha, beta, gamma, delta, s0, s1)\n    test_cases = [\n        (120.0, 60.0, 12.0, 0.6, 20.0, 8.0),      # Case 1: three intersections\n        (120.0, 60.0, 12.0, 0.6, -33.6, 16.8),    # Case 2: tangency + one more\n        (120.0, 60.0, 12.0, 0.6, 0.0, 25.0),      # Case 3: single intersection\n        (120.0, 60.0, 12.0, 0.6, 250.0, 15.0),    # Case 4: no equilibrium\n    ]\n\n    results = []\n    for alpha, beta, gamma, delta, s0, s1 in test_cases:\n        equilibria = find_equilibria(alpha, beta, gamma, delta, s0, s1)\n        results.append(equilibria)\n\n    # Final print statement in the exact required format (single line, no spaces).\n    print(format_output(results))\n\nif __name__ == \"__main__\":\n    solve()\n```"}, {"introduction": "In our final practice, we delve into markets with network externalities, a feature common in technology and social media platforms where a product's value to a user depends on the total number of users. This creates an elegant feedback loop: demand depends on the equilibrium quantity, which in turn is determined by demand. This exercise [@problem_id:2429889] demonstrates how to resolve this interdependence by formulating a fixed-point problem and deriving a \"reduced-form\" inverse demand curve. We will then apply this sophisticated model to a classic policy question—calculating the deadweight loss from a tax—to illustrate how advanced equilibrium analysis serves as a crucial tool for modern welfare economics.", "id": "2429889", "problem": "Consider a single-good competitive market with linear supply and linear demand subject to a linear network externality on the demand side. There is a specific (per-unit) tax charged to consumers. You must compute, numerically and exactly, the deadweight loss (DWL) of the tax for several parameter sets.\n\nFundamental primitives and definitions:\n- The inverse supply schedule is given by $P_S(Q) = s_0 + s_1 Q$, where $s_1 > 0$, $Q \\ge 0$, and $P_S(Q)$ is the price received by producers.\n- The direct demand with a linear network externality is given by $Q_D(P_c, Q) = a - b P_c + m Q$, where $b > 0$, $m < 1$, $Q \\ge 0$, and $P_c$ is the price paid by consumers. The parameter $m$ captures the network effect: a higher $m$ increases demand as the equilibrium quantity $Q$ rises.\n- A specific tax with rate $t \\ge 0$ is levied on consumers, so that consumers pay $P_c = P + t$ while producers receive $P$, where $P$ is the market price consistent with the supply schedule.\n- Market equilibrium under any tax rate $t$ is defined by the fixed-point system $Q = Q_D(P + t, Q)$ and $P = P_S(Q)$, together with the feasibility constraint $Q \\ge 0$.\n- Total surplus at a given equilibrium quantity $Q$ is defined as the area between the private marginal willingness-to-pay schedule (inverse demand) and the inverse supply schedule, that is, the definite integral over quantity of inverse demand minus inverse supply from $0$ to $Q$. Deadweight loss (DWL) of the tax is the loss in total surplus that is not offset by government revenue, equivalently the difference between the no-tax total surplus and the with-tax total surplus that includes government revenue.\n\nTasks:\n1. Starting from the fundamental definitions above, derive the reduced-form inverse demand (private marginal willingness-to-pay as a function of $Q$) that is consistent with the fixed-point demand $Q_D(P_c, Q)$ and the linear network externality parameter $m$. Then, using the condition $P_S(Q) = P$, formulate the no-tax equilibrium quantity $Q_0$ and the with-tax equilibrium quantity $Q_t$ as functions of the primitives $(a, b, m, s_0, s_1, t)$, imposing the feasibility constraint $Q \\ge 0$.\n2. Using the standard total surplus definition as the definite integral from $0$ to $Q$ of inverse demand minus inverse supply, express deadweight loss (DWL) as a function of $Q_0$ and $Q_t$ and the primitives $(a, b, m, s_0, s_1)$. Ensure that your implementation correctly handles corner cases with $Q_0 = 0$ or $Q_t = 0$.\n3. Implement a program that computes the deadweight loss for each parameter set in the test suite below. Express each result as a floating-point number rounded to six decimal places.\n\nParameter constraints:\n- $b > 0$, $s_1 > 0$, $m < 1$, $t \\ge 0$. Choose the principal equilibrium satisfying $Q \\ge 0$.\n\nTest suite (each test case is a tuple $(a, b, m, s_0, s_1, t)$):\n- Happy path with interior solutions: $(\\$100\\$, \\$2\\$, \\$0.2\\$, \\$10\\$, \\$1\\$, \\$5\\$)$.\n- Zero-tax boundary (DWL should be zero): $(\\$80\\$, \\$1.5\\$, \\$0.5\\$, \\$5\\$, \\$0.5\\$, \\$0\\$)$.\n- High-tax corner causing no trade with tax: $(\\$60\\$, \\$1\\$, \\$0.3\\$, \\$20\\$, \\$0.8\\$, \\$50\\$)$.\n- Strong network effect near the boundary $m \\to 1$: $(\\$100\\$, \\$3\\$, \\$0.95\\$, \\$5\\$, \\$0.2\\$, \\$2\\$)$.\n- Negative network effect (congestion): $(\\$90\\$, \\$2\\$, \\$-0.3\\$, \\$8\\$, \\$0.4\\$, \\$4\\$)$.\n\nFinal output format:\n- Your program should produce a single line of output containing the results as a comma-separated list enclosed in square brackets, in the same order as the test suite, for example, $[r_1,r_2,r_3,r_4,r_5]$, where each $r_i$ is the deadweight loss for test case $i$, rounded to six decimal places.\n- No other output should be printed.", "solution": "The problem statement is subjected to validation.\n\nStep 1: Extract Givens\n- Inverse supply schedule: $P_S(Q) = s_0 + s_1 Q$, with $s_1 > 0$, $Q \\ge 0$.\n- Direct demand with network externality: $Q_D(P_c, Q) = a - b P_c + m Q$, with $b > 0$, $m < 1$, $Q \\ge 0$.\n- Specific tax on consumers: Tax rate $t \\ge 0$. Consumer price $P_c = P + t$. Producer price is $P$. Market price $P$ is consistent with supply, so $P = P_S(Q)$.\n- Market equilibrium condition: A fixed point $(P, Q)$ satisfying $Q = Q_D(P + t, Q)$ and $P = P_S(Q)$, with $Q \\ge 0$.\n- Total surplus at quantity $Q$: Area between private marginal willingness-to-pay schedule and inverse supply schedule, from $0$ to $Q$.\n- Deadweight loss (DWL): Loss in total surplus not offset by government revenue.\n- Task 1: Derive the reduced-form inverse demand, and expressions for no-tax equilibrium quantity $Q_0$ and with-tax equilibrium quantity $Q_t$.\n- Task 2: Express DWL as a function of $Q_0$, $Q_t$, and primitives.\n- Task 3: Implement a program to compute DWL for given parameter sets.\n- Parameter constraints: $b > 0$, $s_1 > 0$, $m < 1$, $t \\ge 0$.\n- Test suite:\n    1. $(a, b, m, s_0, s_1, t) = (100, 2, 0.2, 10, 1, 5)$\n    2. $(a, b, m, s_0, s_1, t) = (80, 1.5, 0.5, 5, 0.5, 0)$\n    3. $(a, b, m, s_0, s_1, t) = (60, 1, 0.3, 20, 0.8, 50)$\n    4. $(a, b, m, s_0, s_1, t) = (100, 3, 0.95, 5, 0.2, 2)$\n    5. $(a, b, m, s_0, s_1, t) = (90, 2, -0.3, 8, 0.4, 4)$\n\nStep 2: Validate Using Extracted Givens\nThe problem is scientifically grounded, well-posed, and objective. It is a standard microeconomic model of supply and demand with a network externality and taxation. All terms are defined formally and without ambiguity. The parameters are constrained ($s_1 > 0, b > 0, m < 1$) to ensure well-behaved supply and demand functions, leading to a unique, stable equilibrium. The tasks are a direct application of economic principles to the given model. There are no factual errors, contradictions, or missing information. The problem is a formal exercise in computational economics.\n\nStep 3: Verdict and Action\nThe problem is valid. A solution will be provided.\n\nThe analysis proceeds in three parts as requested.\n\nFirst, we derive the reduced-form inverse demand schedule, which represents the private marginal willingness-to-pay. This is found by rearranging the direct demand function, $Q = a - b P_c + m Q$, to solve for the consumer price $P_c$ as a function of quantity $Q$.\n$$Q(1-m) = a - b P_c$$\n$$b P_c = a - (1-m)Q$$\nThe inverse demand schedule, which we denote $P_D(Q)$, is therefore:\n$$P_D(Q) = \\frac{a}{b} - \\frac{1-m}{b}Q$$\nSince $m < 1$ and $b > 0$, the slope $-\\frac{1-m}{b}$ is negative, which is consistent with a downward-sloping demand curve. The inverse supply schedule is given as $P_S(Q) = s_0 + s_1 Q$.\n\nSecond, we determine the market equilibrium quantity. Equilibrium occurs where the quantity demanded equals the quantity supplied. The price consumers are willing to pay, $P_D(Q)$, must equal the price suppliers require, $P_S(Q)$, plus any per-unit tax, $t$. The equilibrium condition is $P_D(Q) = P_S(Q) + t$.\nSubstituting the expressions for $P_D(Q)$ and $P_S(Q)$:\n$$\\frac{a}{b} - \\frac{1-m}{b}Q = (s_0 + s_1 Q) + t$$\nWe solve for the equilibrium quantity $Q$, which we denote $Q_t$ for a tax rate $t$:\n$$\\frac{a}{b} - s_0 - t = s_1 Q + \\frac{1-m}{b}Q$$\n$$\\frac{a - bs_0 - bt}{b} = \\left(\\frac{bs_1 + 1 - m}{b}\\right)Q_t$$\n$$Q_t = \\frac{a - bs_0 - bt}{1 - m + bs_1}$$\nThe denominator $1 - m + bs_1$ is strictly positive given $m < 1$, $b > 0$, and $s_1 > 0$. The quantity $Q_t$ must be non-negative. Therefore, the equilibrium quantity is:\n$$Q_t = \\max\\left(0, \\frac{a - bs_0 - bt}{1 - m + bs_1}\\right)$$\nThe no-tax equilibrium quantity, $Q_0$, is the special case where $t=0$:\n$$Q_0 = \\max\\left(0, \\frac{a - bs_0}{1 - m + bs_1}\\right)$$\n\nThird, we derive the formula for deadweight loss (DWL). DWL is the loss of total surplus resulting from the tax. Total surplus is the area between the private inverse demand curve $P_D(Q)$ and the inverse supply curve $P_S(Q)$. The tax causes the quantity to move from the efficient level $Q_0$ to the distorted level $Q_t$. The DWL is the surplus lost on this quantity reduction, which is the definite integral of the difference between the demand and supply curves from $Q_t$ to $Q_0$.\n$$DWL = \\int_{Q_t}^{Q_0} [P_D(Q) - P_S(Q)] dQ$$\nLet the integrand be $f(Q) = P_D(Q) - P_S(Q)$.\n$$f(Q) = \\left(\\frac{a}{b} - \\frac{1-m}{b}Q\\right) - (s_0 + s_1 Q) = \\left(\\frac{a}{b} - s_0\\right) - \\left(s_1 + \\frac{1-m}{b}\\right)Q$$\nThis is a linear function of $Q$. The integral represents the area of a trapezoid. A more robust method is to use this functional form directly. Let $C_1 = s_1 + \\frac{1-m}{b}$ be the magnitude of the slope of $f(Q)$. The integral becomes:\n$$DWL = \\int_{Q_t}^{Q_0} f(Q) dQ = \\left[\\left(\\frac{a}{b} - s_0\\right)Q - \\frac{1}{2}\\left(s_1 + \\frac{1-m}{b}\\right)Q^2\\right]_{Q_t}^{Q_0}$$\nThis expression can be simplified. Note that $Q_0 - Q_t = \\frac{bt}{1 - m + bs_1} = \\frac{t}{C_1}$. The area of the trapezoid is also given by $\\frac{1}{2}(f(Q_t) + f(Q_0))(Q_0 - Q_t)$.\nIf $Q_0 > 0$, then $f(Q_0) = P_D(Q_0) - P_S(Q_0) = 0$.\nIf $Q_t > 0$, then $f(Q_t) = P_D(Q_t) - P_S(Q_t) = t$. In this interior case, $DWL = \\frac{1}{2}(t+0)(Q_0 - Q_t)$.\nHowever, if the tax is prohibitive such that $Q_t=0$ while $Q_0>0$, this simple formula is incorrect. The DWL becomes the entire initial surplus.\nA universally correct formula is derived from the properties of the linear functions:\n$$DWL = \\frac{1}{2} C_1 (Q_0 - Q_t)^2 = \\frac{1}{2} \\left(s_1 + \\frac{1-m}{b}\\right) (Q_0 - Q_t)^2$$\nThis formula correctly computes the area of the surplus triangle/trapezoid for all cases, including interior solutions ($Q_t > 0$), corner solutions where the tax drives quantity to zero ($Q_t = 0$), and the no-tax case ($t=0$, where $Q_t=Q_0$ and $DWL=0$).\n\nThe computational algorithm is as follows:\n1. For each set of parameters $(a, b, m, s_0, s_1, t)$:\n2. Calculate the common denominator: $D = 1 - m + b s_1$.\n3. Calculate the no-tax equilibrium quantity: $Q_0 = \\max(0, (a - b s_0) / D)$.\n4. Calculate the with-tax equilibrium quantity: $Q_t = \\max(0, (a - b s_0 - b t) / D)$.\n5. Calculate the slope coefficient: $C_1 = s_1 + (1 - m) / b$.\n6. Calculate the deadweight loss: $DWL = 0.5 \\times C_1 \\times (Q_0 - Q_t)^2$.\n7. Round the final $DWL$ to six decimal places.\n\nThis procedure is implemented below.", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Computes the deadweight loss of a per-unit tax in a market with a\n    linear network externality.\n    \"\"\"\n\n    # Define the test cases from the problem statement.\n    # Each tuple is (a, b, m, s0, s1, t)\n    test_cases = [\n        (100.0, 2.0, 0.2, 10.0, 1.0, 5.0),    # Happy path\n        (80.0, 1.5, 0.5, 5.0, 0.5, 0.0),    # Zero-tax boundary\n        (60.0, 1.0, 0.3, 20.0, 0.8, 50.0),   # High-tax corner\n        (100.0, 3.0, 0.95, 5.0, 0.2, 2.0),   # Strong network effect\n        (90.0, 2.0, -0.3, 8.0, 0.4, 4.0),    # Negative network effect\n    ]\n\n    results = []\n    for params in test_cases:\n        a, b, m, s0, s1, t = params\n\n        # The model assumes b > 0, s1 > 0, m < 1.\n        # These are crucial for a well-defined equilibrium.\n        \n        # Denominator in the quantity expressions. It is always positive\n        # under the given parameter constraints.\n        denom = 1 - m + b * s1\n\n        # Calculate no-tax equilibrium quantity (Q_0)\n        # Q_0 = max(0, (a - b*s0) / denom)\n        q0_numerator = a - b * s0\n        q0 = 0.0\n        if q0_numerator > 0:\n            q0 = q0_numerator / denom\n\n        # Calculate with-tax equilibrium quantity (Q_t)\n        # Q_t = max(0, (a - b*s0 - b*t) / denom)\n        qt_numerator = a - b * s0 - b * t\n        qt = 0.0\n        if qt_numerator > 0:\n            qt = qt_numerator / denom\n            \n        # The deadweight loss is the area of a triangle/trapezoid representing\n        # the loss in total surplus. The robust formula for linear curves is:\n        # DWL = 0.5 * C1 * (Q0 - Qt)^2\n        # where C1 is the sum of the magnitudes of the slopes of the inverse\n        # supply and inverse demand curves.\n        # C1 = s1 + (1 - m) / b\n        c1 = s1 + (1 - m) / b\n        \n        # Calculate the quantity difference\n        quantity_diff = q0 - qt\n        \n        # Calculate the deadweight loss\n        dwl = 0.5 * c1 * (quantity_diff ** 2)\n        \n        # Format the result to six decimal places\n        results.append(f\"{dwl:.6f}\")\n\n    # Final print statement in the exact required format.\n    print(f\"[{','.join(results)}]\")\n\nsolve()\n```"}]}