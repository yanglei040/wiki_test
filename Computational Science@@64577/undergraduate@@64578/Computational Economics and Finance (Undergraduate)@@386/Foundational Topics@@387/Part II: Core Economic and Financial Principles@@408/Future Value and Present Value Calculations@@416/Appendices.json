{"hands_on_practices": [{"introduction": "The core of asset valuation lies in accurately projecting and discounting future cash flows. This practice moves beyond simple annuities to a more realistic scenario: pricing a bond with non-standard features. You will calculate the present value of a step-up coupon bond where the tax rate itself is a function of the coupon's size, requiring careful period-by-period analysis before applying the fundamental discounting principle [@problem_id:2395387].", "id": "2395387", "problem": "An investor evaluates a step-up coupon bond with face value $F = 1{,}000$ and maturity of $N = 6$ years. The coupon schedule is as follows: for years $t = 1, 2, 3$ the annual coupon rate is $0.03$ of face value, and for years $t = 4, 5, 6$ the annual coupon rate is $0.07$ of face value. Coupon taxation applies only to coupon payments and is levied at receipt as a step function of the coupon amount $C$ in that period:\n$$\n\\tau(C) = \n\\begin{cases}\n0.10, & \\text{if } 0 \\le C \\le 40, \\\\\n0.20, & \\text{if } 40 < C \\le 60, \\\\\n0.35, & \\text{if } C > 60.\n\\end{cases}\n$$\nThe redemption of principal at maturity is untaxed. The investor discounts cash flows using a flat effective annual yield $y = 0.06$. Compute the present value (PV) in dollars of the bond by discounting the after-tax coupon cash flows and the untaxed redemption of principal at the yield $y$. Round your answer to four significant figures. Express the final amount in dollars.", "solution": "The problem is subjected to validation and is found to be valid. It is a well-posed problem in computational finance, grounded in established principles of present value analysis, and contains all necessary and consistent information for its solution.\n\nThe present value ($PV$) of a bond is the sum of its future cash flows, each discounted to its value at time $t=0$. The cash flows consist of periodic after-tax coupon payments and the final redemption of principal. The general formula for the present value is:\n$$\nPV = \\sum_{t=1}^{N} \\frac{CF_t}{(1+y)^t}\n$$\nwhere $CF_t$ is the total cash flow received at the end of year $t$, $N$ is the number of years to maturity, and $y$ is the annual effective yield used for discounting.\n\nFirst, we must determine the cash flows for each year. The bond has a face value $F = \\$1{,}000$ and a maturity of $N = 6$ years. The discount yield is $y = 0.06$.\n\nStep 1: Calculate coupon payments and after-tax cash flows for years $t = 1, 2, 3$.\nThe annual coupon rate is given as $0.03$. The coupon amount $C_1$ is:\n$$\nC_1 = 0.03 \\times F = 0.03 \\times 1000 = 30\n$$\nTo find the after-tax cash flow, we apply the given tax function $\\tau(C)$:\n$$\n\\tau(C) = \n\\begin{cases}\n0.10, & \\text{if } 0 \\le C \\le 40 \\\\\n0.20, & \\text{if } 40 < C \\le 60 \\\\\n0.35, & \\text{if } C > 60\n\\end{cases}\n$$\nFor $C_1 = 30$, the tax rate is $\\tau(30) = 0.10$.\nThe after-tax cash flow, $CF_1$, for each of the first three years is:\n$$\nCF_1 = C_1 \\times (1 - \\tau(C_1)) = 30 \\times (1 - 0.10) = 30 \\times 0.90 = \\$27\n$$\n\nStep 2: Calculate coupon payments and after-tax cash flows for years $t = 4, 5, 6$.\nThe annual coupon rate is given as $0.07$. The coupon amount $C_2$ is:\n$$\nC_2 = 0.07 \\times F = 0.07 \\times 1000 = 70\n$$\nFor $C_2 = 70$, the tax rate is $\\tau(70) = 0.35$.\nThe after-tax cash flow from the coupon, $CF_2$, for each of the last three years is:\n$$\nCF_2 = C_2 \\times (1 - \\tau(C_2)) = 70 \\times (1 - 0.35) = 70 \\times 0.65 = \\$45.50\n$$\n\nStep 3: Identify the total cash flow stream.\nThe cash flow at time $t$ consists of the after-tax coupon. At maturity ($t=6$), the cash flow also includes the untaxed redemption of the principal $F = 1000$.\nThe stream of total cash flows ($CF_t$) is:\n- For $t = 1, 2, 3$: $CF_t = \\$27$\n- For $t = 4, 5$: $CF_t = \\$45.50$\n- For $t = 6$: $CF_6 = (\\text{after-tax coupon}) + (\\text{principal}) = 45.50 + 1000 = \\$1045.50$\n\nStep 4: Calculate the present value.\nThe present value is the sum of the discounted cash flows:\n$$\nPV = \\frac{27}{(1+0.06)^1} + \\frac{27}{(1+0.06)^2} + \\frac{27}{(1+0.06)^3} + \\frac{45.5}{(1+0.06)^4} + \\frac{45.5}{(1+0.06)^5} + \\frac{1045.5}{(1+0.06)^6}\n$$\nThis calculation can be organized by separating the two series of coupon payments and the final principal payment.\nThe PV can be expressed as the sum of the present value of all six after-tax coupons and the present value of the principal:\n$$\nPV = \\left( \\sum_{t=1}^{3} \\frac{27}{(1.06)^t} + \\sum_{t=4}^{6} \\frac{45.5}{(1.06)^t} \\right) + \\frac{1000}{(1.06)^6}\n$$\nWe use the formula for the present value of an ordinary annuity, $PV_A = P \\times \\frac{1 - (1+y)^{-n}}{y}$, where $P$ is the periodic payment. Let $a_{\\overline{n}|y} = \\frac{1 - (1+y)^{-n}}{y}$.\n\nThe present value of the first three coupons is:\n$$\nPV_{\\text{coupons}, 1-3} = 27 \\times a_{\\overline{3}|0.06} = 27 \\times \\frac{1 - (1.06)^{-3}}{0.06} \\approx 27 \\times 2.673012 = 72.171324\n$$\nThe present value of the coupons for years $4, 5, 6$ is a deferred annuity. Its value can be found by taking the difference between a $6$-year annuity and a $3$-year annuity:\n$$\nPV_{\\text{coupons}, 4-6} = 45.5 \\times (a_{\\overline{6}|0.06} - a_{\\overline{3}|0.06})\n$$\n$a_{\\overline{6}|0.06} = \\frac{1 - (1.06)^{-6}}{0.06} \\approx 4.917324$\n$$\nPV_{\\text{coupons}, 4-6} \\approx 45.5 \\times (4.917324 - 2.673012) = 45.5 \\times 2.244312 = 102.116196\n$$\nThe total present value of all after-tax coupons is:\n$$\nPV_{\\text{coupons}} \\approx 72.171324 + 102.116196 = 174.28752\n$$\nThe present value of the principal redemption is:\n$$\nPV_{\\text{principal}} = \\frac{1000}{(1.06)^6} \\approx 1000 \\times 0.70496054 = 704.96054\n$$\nThe total present value of the bond is the sum of these components:\n$$\nPV = PV_{\\text{coupons}} + PV_{\\text{principal}} \\approx 174.28752 + 704.96054 = 879.24806\n$$\nThe problem requires the answer to be rounded to four significant figures. The calculated value is $879.24806$. The first four significant figures are $8, 7, 9, 2$. The fifth digit is $4$, so we round down.\n$$\nPV \\approx 879.2\n$$\nThe present value of the bond is expressed in dollars.", "answer": "$$\n\\boxed{879.2}\n$$"}, {"introduction": "Real-world financial scenarios often involve uncertainty and changing conditions, which are best handled computationally. This exercise transitions from manual calculation to algorithmic thinking by modeling an annuity whose payments are contingent on a firm's performance and must be discounted using time-varying interest rates. By writing a program to handle these complexities, you will develop the practical skills needed to value more flexible and realistic cash flow streams [@problem_id:2395348].", "id": "2395348", "problem": "You are asked to write a complete, runnable program that computes the present value of a contingent annuity with end-of-period payments that are skipped if a specified condition is not met. The condition is that a firmâ€™s quarterly profit must be at or above a given threshold for a fixed payment to be made at the end of that quarter; otherwise, the payment is skipped for that quarter. All payments occur at the end of each quarter. All interest rates must be treated as decimals (not with a percentage sign). Assume that for every period $t$ the one-period gross return satisfies $1 + r_t > 0$. The program must not require any user input.\n\nFundamental base. Use the following foundation: the time value of money under deterministic, discrete compounding and absence of arbitrage. Specifically, a present amount $v$ that is invested and compounded at per-period risk-free rates $r_1, r_2, \\dots, r_t$ accumulates after $t$ periods to $v \\cdot \\prod_{i=1}^{t} (1 + r_i)$. Use this foundation to reason about how to value cash flows that occur at future dates in present terms.\n\nProblem setup. For a finite horizon of $N$ quarters, you are given:\n- A constant end-of-quarter payment amount $A$ (in currency units).\n- A profit sequence $\\{P_t\\}_{t=1}^{N}$, where $P_t$ is the profit observed during quarter $t$.\n- A threshold $\\theta$ (in the same units as $\\{P_t\\}$). The payment for quarter $t$ is made if and only if $P_t \\ge \\theta$; otherwise, the payment is skipped.\n- A deterministic sequence of per-quarter risk-free rates $\\{r_t\\}_{t=1}^{N}$ (each expressed as a decimal, not a percentage).\n\nYour task is to compute the present value at time $t = 0$ of the annuity that pays $A$ at the end of each quarter $t$ such that $P_t \\ge \\theta$, and pays $0$ otherwise, discounted using the given rate term structure $\\{r_t\\}$.\n\nCoverage and test suite. Implement your program to compute the present value for each of the following parameter sets. In all cases, the payment condition uses the inclusive rule $P_t \\ge \\theta$ and payments occur at the end of each quarter $t \\in \\{1,2,\\dots,N\\}$.\n\n- Test case $1$ (happy path, constant positive rates, mixed pay/skip):\n  - $A = 100$\n  - $\\theta = 2.5$\n  - $\\{P_t\\}_{t=1}^{5} = [3, 2, 4, 1, 5]$\n  - $\\{r_t\\}_{t=1}^{5} = [0.01, 0.01, 0.01, 0.01, 0.01]$\n- Test case $2$ (boundary: zero rates, equality to threshold triggers pay):\n  - $A = 50$\n  - $\\theta = 2$\n  - $\\{P_t\\}_{t=1}^{3} = [2, 2, 2]$\n  - $\\{r_t\\}_{t=1}^{3} = [0.0, 0.0, 0.0]$\n- Test case $3$ (no payments ever made):\n  - $A = 500$\n  - $\\theta = 10$\n  - $\\{P_t\\}_{t=1}^{4} = [1, 1, 1, 1]$\n  - $\\{r_t\\}_{t=1}^{4} = [0.05, 0.05, 0.05, 0.05]$\n- Test case $4$ (time-varying rates including a small negative rate, many pays):\n  - $A = 123.45$\n  - $\\theta = 2$\n  - $\\{P_t\\}_{t=1}^{6} = [5, 0, 3, 2, 2, 10]$\n  - $\\{r_t\\}_{t=1}^{6} = [0.02, 0.03, -0.005, 0.01, 0.0, 0.04]$\n- Test case $5$ (all pay with moderate positive rates, equality to threshold):\n  - $A = 200$\n  - $\\theta = 10$\n  - $\\{P_t\\}_{t=1}^{2} = [10, 10]$\n  - $\\{r_t\\}_{t=1}^{2} = [0.05, 0.05]$\n\nFinal output format. Your program should produce a single line of output containing the results as a comma-separated list enclosed in square brackets, with each numeric result rounded to six decimal places. For example, $[\\text{result}_1,\\text{result}_2,\\text{result}_3,\\text{result}_4,\\text{result}_5]$. The program must compute and print, in order, one present value for each test case above. No other text should be printed.", "solution": "The problem statement has been analyzed and is determined to be valid. It is scientifically grounded in the principles of financial mathematics, is well-posed with all necessary data and unambiguous conditions, and is expressed objectively. The problem is solvable as stated.\n\nThe task is to compute the present value ($PV$) of a contingent annuity over a finite horizon of $N$ quarters. The annuity provides a payment of amount $A$ at the end of each quarter $t$ if and only if the firm's profit for that quarter, $P_t$, is greater than or equal to a specified threshold, $\\theta$. The valuation must account for a deterministic but potentially time-varying sequence of per-quarter risk-free interest rates, $\\{r_t\\}_{t=1}^{N}$.\n\nThe fundamental principle for this calculation is the additivity of present values. The total present value of a stream of cash flows is the sum of the present values of each individual cash flow.\n\nFirst, we formalize the cash flow, $C_t$, that occurs at the end of each quarter $t \\in \\{1, 2, \\dots, N\\}$. According to the problem's contingency rule, the cash flow is either $A$ or $0$. This can be expressed mathematically using an indicator function, $I(\\cdot)$, which takes the value $1$ if its argument is true and $0$ otherwise.\n\n$$C_t = A \\cdot I(P_t \\ge \\theta)$$\n\nNext, we must determine the present value of each cash flow $C_t$. The problem specifies the framework of discrete compounding with a term structure of one-period rates $\\{r_t\\}$. A future value at time $t$, let us call it $FV_t$, is related to its present value at time $t=0$, $PV_0$, by the formula:\n\n$$FV_t = PV_0 \\cdot \\prod_{i=1}^{t} (1 + r_i)$$\n\nThis formula describes how a present sum accumulates value over time. To find the present value of a cash flow $C_t$ received at a future time $t$, we must reverse this process, which is known as discounting. By rearranging the formula, the present value of $C_t$ is:\n\n$$PV(C_t) = \\frac{C_t}{\\prod_{i=1}^{t} (1 + r_i)}$$\n\nThe term in the denominator, $\\prod_{i=1}^{t} (1 + r_i)$, is the cumulative accumulation factor up to time $t$. Its reciprocal, $D_t = 1 / \\prod_{i=1}^{t} (1 + r_i)$, is the discount factor for time $t$. The problem states that $1 + r_t > 0$ for all $t$, which ensures the discount factor is always well-defined and positive.\n\nBy the principle of value additivity, the total present value of the entire contingent annuity is the sum of the present values of the cash flows for each quarter from $t=1$ to $N$:\n\n$$PV_{total} = \\sum_{t=1}^{N} PV(C_t) = \\sum_{t=1}^{N} C_t \\cdot D_t$$\n\nSubstituting our expressions for $C_t$ and $D_t$, we arrive at the complete formula for the desired present value:\n\n$$PV_{total} = \\sum_{t=1}^{N} \\left( A \\cdot I(P_t \\ge \\theta) \\cdot \\frac{1}{\\prod_{i=1}^{t} (1 + r_i)} \\right)$$\n\nTo implement this calculation algorithmically, we proceed as follows for each test case:\n1.  Let the sequences of profits and rates be represented as arrays $\\{P_t\\}_{t=1}^{N}$ and $\\{r_t\\}_{t=1}^{N}$.\n2.  First, we establish the sequence of contingent cash flows. For each $t$ from $1$ to $N$, we check if $P_t \\ge \\theta$. If true, the cash flow is $A$; otherwise, it is $0$. This generates a sequence of cash flows $\\{C_t\\}_{t=1}^{N}$.\n3.  Next, we compute the term structure of discount factors. The discount factor for each period $t$ depends on the cumulative product of the gross returns $(1 + r_i)$. Let $Z_t = \\prod_{i=1}^{t} (1 + r_i)$ be the cumulative accumulation factor. This can be computed iteratively, where $Z_t = Z_{t-1} \\cdot (1 + r_t)$, with an initial $Z_0=1$. The discount factor is then $D_t = 1/Z_t$.\n4.  For each quarter $t$, we calculate the discounted cash flow by multiplying the cash flow $C_t$ by the corresponding discount factor $D_t$.\n5.  Finally, we sum these discounted cash flows over all $N$ quarters to obtain the total present value.\n\nThis procedure, based on first principles of asset valuation, will be applied to each of the provided test cases to yield the final numerical solutions.", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Computes the present value of a contingent annuity for several test cases.\n    \"\"\"\n    # Define the test cases from the problem statement.\n    test_cases = [\n        # Test case 1\n        {'A': 100, 'theta': 2.5, 'P_t': [3, 2, 4, 1, 5], 'r_t': [0.01, 0.01, 0.01, 0.01, 0.01]},\n        # Test case 2\n        {'A': 50, 'theta': 2, 'P_t': [2, 2, 2], 'r_t': [0.0, 0.0, 0.0]},\n        # Test case 3\n        {'A': 500, 'theta': 10, 'P_t': [1, 1, 1, 1], 'r_t': [0.05, 0.05, 0.05, 0.05]},\n        # Test case 4\n        {'A': 123.45, 'theta': 2, 'P_t': [5, 0, 3, 2, 2, 10], 'r_t': [0.02, 0.03, -0.005, 0.01, 0.0, 0.04]},\n        # Test case 5\n        {'A': 200, 'theta': 10, 'P_t': [10, 10], 'r_t': [0.05, 0.05]}\n    ]\n\n    results = []\n    for case in test_cases:\n        # Extract parameters for the current test case\n        A = case['A']\n        theta = case['theta']\n        P_t = np.array(case['P_t'])\n        r_t = np.array(case['r_t'])\n\n        # Step 1: Determine the contingent cash flows for each period.\n        # The cash flow is 'A' if P_t >= theta, and 0 otherwise.\n        # This is achieved by creating a boolean mask and multiplying by A.\n        payment_occurs_mask = (P_t >= theta)\n        cash_flows = A * payment_occurs_mask\n\n        # Step 2: Calculate the discount factor for each period.\n        # The discount factor for period t is 1 / product(1+r_i) for i from 1 to t.\n        \n        # Gross returns for each period (1 + r_t)\n        gross_returns = 1 + r_t\n        \n        # Cumulative product of gross returns gives the denominator of the discount factor.\n        # np.cumprod([g1, g2, g3]) yields [g1, g1*g2, g1*g2*g3]\n        discount_denominators = np.cumprod(gross_returns)\n        \n        # Step 3: Calculate the present value of each cash flow\n        discounted_cash_flows = cash_flows / discount_denominators\n        \n        # Step 4: Sum the present values of all cash flows to get the total PV\n        total_pv = np.sum(discounted_cash_flows)\n        \n        # Format the result to six decimal places and append to the list\n        results.append(f\"{total_pv:.6f}\")\n\n    # Final print statement in the exact required format.\n    print(f\"[{','.join(results)}]\")\n\nsolve()\n```"}, {"introduction": "Valuation models are built on assumptions about how we perceive time and value. This advanced practice challenges the standard exponential discounting model by introducing quasi-hyperbolic, or $\\beta$-$\\delta$, discounting from behavioral economics. You will price a hypothetical derivative whose payoff depends on the divergence between these two models, offering a tangible way to explore how different theories of time preference can lead to different financial outcomes [@problem_id:2395311].", "id": "2395311", "problem": "Consider a finite, deterministic cash flow stream $\\{c_t\\}_{t=0}^{N}$ occurring at integer times $t=0,1,\\ldots,N$. Define two present values computed at time $0$ for the same stream:\n1. Exponential-discount present value: $PV_{\\exp} = \\sum_{t=0}^{N} \\dfrac{c_t}{(1+r_{\\exp})^t}$, where $r_{\\exp} \\ge 0$ is the per-period exponential discount rate expressed as a decimal.\n2. Quasi-hyperbolic (QH) present value: $PV_{\\mathrm{QH}} = c_0 + \\beta \\sum_{t=1}^{N} \\delta^t c_t$, where $\\beta \\in (0,1]$ is the present-bias factor and $\\delta \\in (0,1)$ is the long-run discount factor per period, both expressed as decimals.\n\nConsider a derivative that, at maturity time $\\tau \\in \\{0,1,2,\\ldots\\}$, pays the European call payoff on the difference between these present values:\n$$\n\\text{Payoff} = \\max\\big(PV_{\\exp} - PV_{\\mathrm{QH}} - K,\\, 0\\big),\n$$\nwhere $K \\ge 0$ is a strike parameter specified in currency units. The time-$0$ price of this derivative, denoted $P_0$, is obtained by discounting this deterministic payoff at the continuously known per-period risk-free rate $r_{\\mathrm{rf}} \\ge 0$ (expressed as a decimal) over $\\tau$ periods under discrete compounding:\n$$\nP_0 = \\dfrac{\\max\\big(PV_{\\exp} - PV_{\\mathrm{QH}} - K,\\, 0\\big)}{(1+r_{\\mathrm{rf}})^{\\tau}}.\n$$\n\nYour task is to implement a program that, for each specified test case, computes $PV_{\\exp}$, $PV_{\\mathrm{QH}}$, the payoff, and returns the derivative price $P_0$ according to the formula above. All monetary values are in arbitrary but consistent currency units and must be returned as real numbers.\n\nUse the following test suite. Each test case is a tuple consisting of the ordered elements $\\big(\\{c_t\\}_{t=0}^{N}, r_{\\exp}, \\beta, \\delta, K, \\tau, r_{\\mathrm{rf}}\\big)$:\n- Test case $1$: $\\big([100, 50, 50, 50, 50],\\, 0.05,\\, 0.7,\\, 0.95,\\, 0.0,\\, 3,\\, 0.03\\big)$.\n- Test case $2$: $\\big([0, 100, 100],\\, 0.10,\\, 1.0,\\, 0.99,\\, 0.0,\\, 2,\\, 0.05\\big)$.\n- Test case $3$: $\\big([0, 0, 0, 0],\\, 0.08,\\, 0.5,\\, 0.90,\\, 0.0,\\, 1,\\, 0.02\\big)$.\n- Test case $4$: $\\big([0, 30, 30, 30, 30, 30],\\, 0.02,\\, 0.6,\\, 0.90,\\, 70.0,\\, 1,\\, 0.01\\big)$.\n- Test case $5$: $\\big([10, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5],\\, 0.03,\\, 0.5,\\, 0.97,\\, 0.0,\\, 0,\\, 0.04\\big)$.\n\nAll rates $r_{\\exp}$, $\\beta$, $\\delta$, and $r_{\\mathrm{rf}}$ must be interpreted as decimals (for example, $0.05$ for five one-hundredths). Angles are not involved. No physical units beyond currency are required.\n\nFinal output format: Your program should produce a single line of output containing the $5$ derivative prices corresponding to the $5$ test cases, as a comma-separated list enclosed in square brackets, with each number rounded to six decimal places, for example $[1.234567,0.000000,9.876543]$.", "solution": "The problem statement is evaluated for validity.\n\n**Step 1: Extract Givens**\n- A finite, deterministic cash flow stream: $\\{c_t\\}_{t=0}^{N}$ at integer times $t=0,1,\\ldots,N$.\n- Exponential-discount present value: $PV_{\\exp} = \\sum_{t=0}^{N} \\dfrac{c_t}{(1+r_{\\exp})^t}$.\n- Per-period exponential discount rate: $r_{\\exp} \\ge 0$.\n- Quasi-hyperbolic (QH) present value: $PV_{\\mathrm{QH}} = c_0 + \\beta \\sum_{t=1}^{N} \\delta^t c_t$.\n- Present-bias factor: $\\beta \\in (0,1]$.\n- Long-run discount factor per period: $\\delta \\in (0,1)$.\n- Derivative payoff at maturity $\\tau$: $\\text{Payoff} = \\max\\big(PV_{\\exp} - PV_{\\mathrm{QH}} - K,\\, 0\\big)$.\n- Maturity time: $\\tau \\in \\{0,1,2,\\ldots\\}$.\n- Strike parameter: $K \\ge 0$.\n- Time-$0$ derivative price: $P_0 = \\dfrac{\\max\\big(PV_{\\exp} - PV_{\\mathrm{QH}} - K,\\, 0\\big)}{(1+r_{\\mathrm{rf}})^{\\tau}}$.\n- Per-period risk-free rate: $r_{\\mathrm{rf}} \\ge 0$.\n- Test cases as tuples of $\\big(\\{c_t\\}_{t=0}^{N}, r_{\\exp}, \\beta, \\delta, K, \\tau, r_{\\mathrm{rf}}\\big)$:\n    - Case $1$: $\\big([100, 50, 50, 50, 50],\\, 0.05,\\, 0.7,\\, 0.95,\\, 0.0,\\, 3,\\, 0.03\\big)$\n    - Case $2$: $\\big([0, 100, 100],\\, 0.10,\\, 1.0,\\, 0.99,\\, 0.0,\\, 2,\\, 0.05\\big)$\n    - Case $3$: $\\big([0, 0, 0, 0],\\, 0.08,\\, 0.5,\\, 0.90,\\, 0.0,\\, 1,\\, 0.02\\big)$\n    - Case $4$: $\\big([0, 30, 30, 30, 30, 30],\\, 0.02,\\, 0.6,\\, 0.90,\\, 70.0,\\, 1,\\, 0.01\\big)$\n    - Case $5$: $\\big([10, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5],\\, 0.03,\\, 0.5,\\, 0.97,\\, 0.0,\\, 0,\\, 0.04\\big)$\n\n**Step 2: Validate Using Extracted Givens**\nThe problem is subjected to validation against the required criteria.\n1.  **Scientifically Grounded**: The concepts of exponential and quasi-hyperbolic discounting are standard, well-established models in behavioral economics and finance. The problem is based on sound, recognized principles.\n2.  **Well-Posed**: All formulas are explicitly defined. The inputs are provided in a complete and self-contained manner for each test case. For any given input tuple, the output is uniquely determinable through direct computation.\n3.  **Objective**: The problem is stated using precise mathematical notation and objective, formal language. There is no subjectivity or ambiguity.\n4.  **Completeness and Consistency**: The problem is self-contained. All necessary parameters ($c_t, r_{\\exp}, \\beta, \\delta, K, \\tau, r_{\\mathrm{rf}}$) are provided for each calculation. The provided test data are consistent with the parameter constraints (e.g., for test case $2$, $\\beta=1.0$ is within the allowed range of $\\beta \\in (0,1]$).\n5.  **Structure and Feasibility**: The problem is well-structured and computationally feasible. The calculations involve finite sums and basic arithmetic operations, which pose no implementation difficulties.\n\n**Step 3: Verdict and Action**\nThe problem is **valid**. It is scientifically sound, well-posed, objective, and complete. A computational solution is not only possible but directly follows from the provided definitions. I will now proceed with the anaytical construction of the solution.\n\nThe task is to compute the time-$0$ price, $P_0$, of a European-style derivative for several test cases. The price $P_0$ is the discounted value of a deterministic payoff that depends on the difference between two present value calculations of a given cash flow stream. The computational procedure for a single test case is as follows.\n\nFirst, we compute the exponential-discount present value, $PV_{\\exp}$. Given a cash flow stream $\\{c_t\\}_{t=0}^{N}$ and a per-period exponential discount rate $r_{\\exp}$, the value is calculated by summing the discounted cash flows:\n$$\nPV_{\\exp} = \\sum_{t=0}^{N} \\frac{c_t}{(1+r_{\\exp})^t}\n$$\nThe summation extends from $t=0$ to $N$, where $N$ is the final time index of the cash flow stream, corresponding to a list of length $N+1$.\n\nSecond, we compute the quasi-hyperbolic present value, $PV_{\\mathrm{QH}}$. This model incorporates a present-bias factor $\\beta$ and a long-run discount factor $\\delta$. The cash flow at $t=0$, $c_0$, is not discounted relative to the present moment. All future cash flows ($t \\ge 1$) are discounted by both the present-bias factor $\\beta$ and the time-dependent factor $\\delta^t$:\n$$\nPV_{\\mathrm{QH}} = c_0 + \\beta \\sum_{t=1}^{N} \\delta^t c_t\n$$\nNote that the summation for the discounted portion begins at $t=1$. If the cash flow stream only contains an element at $t=0$ (i.e., $N=0$), the summation term is zero.\n\nThird, we calculate the derivative's payoff at its maturity time $\\tau$. The derivative is a European call option on the difference $PV_{\\exp} - PV_{\\mathrm{QH}}$ with a strike parameter $K$. The payoff is therefore:\n$$\n\\text{Payoff} = \\max\\big(PV_{\\exp} - PV_{\\mathrm{QH}} - K,\\, 0\\big)\n$$\nThis value represents the amount the derivative holder receives at time $\\tau$, which is non-negative by definition.\n\nFinally, we compute the time-$0$ price of the derivative, $P_0$, by discounting this deterministic payoff back from time $\\tau$ to time $0$. The discounting is performed using the per-period risk-free rate $r_{\\mathrm{rf}}$ under discrete compounding:\n$$\nP_0 = \\frac{\\text{Payoff}}{(1+r_{\\mathrm{rf}})^{\\tau}}\n$$\nIf $\\tau=0$, the payoff is not discounted, as $(1+r_{\\mathrm{rf}})^0 = 1$.\n\nThe algorithm implemented will iterate through each provided test case, apply these four sequential calculations, and store the resulting value of $P_0$. The final output will be a collection of these prices, formatted as specified.", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Computes the price of a derivative based on the difference between\n    exponential and quasi-hyperbolic present values for a series of test cases.\n    \"\"\"\n    # Define the test cases from the problem statement.\n    # Each case is a tuple: (cash_flows, r_exp, beta, delta, K, tau, r_rf)\n    test_cases = [\n        ([100, 50, 50, 50, 50], 0.05, 0.7, 0.95, 0.0, 3, 0.03),\n        ([0, 100, 100], 0.10, 1.0, 0.99, 0.0, 2, 0.05),\n        ([0, 0, 0, 0], 0.08, 0.5, 0.90, 0.0, 1, 0.02),\n        ([0, 30, 30, 30, 30, 30], 0.02, 0.6, 0.90, 70.0, 1, 0.01),\n        ([10, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5], 0.03, 0.5, 0.97, 0.0, 0, 0.04)\n    ]\n\n    results = []\n    for case in test_cases:\n        cash_flows, r_exp, beta, delta, K, tau, r_rf = case\n        \n        # Step 1: Compute the exponential-discount present value (PV_exp)\n        # PV_exp = sum_{t=0 to N} [c_t / (1 + r_exp)^t]\n        pv_exp = sum(\n            c / ((1 + r_exp)**t) for t, c in enumerate(cash_flows)\n        )\n        \n        # Step 2: Compute the quasi-hyperbolic present value (PV_QH)\n        # PV_QH = c_0 + beta * sum_{t=1 to N} [delta^t * c_t]\n        c0 = cash_flows[0] if len(cash_flows) > 0 else 0\n        \n        # Summation part starts from t=1\n        sum_part_qh = 0\n        if len(cash_flows) > 1:\n            sum_part_qh = sum(\n                (delta**t) * c for t, c in enumerate(cash_flows) if t > 0\n            )\n\n        pv_qh = c0 + beta * sum_part_qh\n        \n        # Step 3: Compute the derivative's payoff at maturity tau\n        # Payoff = max(PV_exp - PV_QH - K, 0)\n        payoff = max(pv_exp - pv_qh - K, 0)\n        \n        # Step 4: Compute the time-0 price of the derivative (P0)\n        # P0 = Payoff / (1 + r_rf)^tau\n        price = payoff / ((1 + r_rf)**tau)\n        \n        results.append(price)\n\n    # Final print statement in the exact required format.\n    # The output is a comma-separated list of prices rounded to six decimal places.\n    print(f\"[{','.join(f'{r:.6f}' for r in results)}]\")\n\nsolve()\n```"}]}