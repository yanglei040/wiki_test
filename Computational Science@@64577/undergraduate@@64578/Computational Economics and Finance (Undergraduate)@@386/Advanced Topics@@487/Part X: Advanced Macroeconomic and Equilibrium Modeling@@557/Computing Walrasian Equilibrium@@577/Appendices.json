{"hands_on_practices": [{"introduction": "This practice serves as a foundational exercise where you will construct a Walrasian equilibrium from first principles in an economy with a finite set of production technologies. This hands-on problem helps translate the geometric intuition of an equilibrium—the tangency between the Production Possibility Frontier and a consumer's indifference curve—into a concrete computational algorithm. By methodically checking the vertices and facets of the production set, you will develop a robust method for locating the equilibrium price and allocation. [@problem_id:2382212]", "id": "2382212", "problem": "Consider an Arrow–Debreu competitive economy with one consumer who owns one firm that can produce two consumption goods using a finite set of linear technologies and a single capacity constraint, leading to a piecewise linear Production Possibility Frontier (PPF). All markets are for the two consumption goods only; there is no factor market. The consumer has strictly positive Cobb–Douglas preferences. You will compute a Walrasian equilibrium (WE), defined as a price vector and an allocation such that the firm maximizes profit given prices within the feasible production set, the consumer maximizes utility subject to the budget set with income equal to firm profit (distributed entirely to the consumer), and markets for both goods clear.\n\nFundamental base:\n- The consumer’s demand is obtained by maximizing Cobb–Douglas utility subject to the budget constraint.\n- The firm’s supply is obtained by maximizing profit over a convex feasible production set generated by mixing available linear technologies subject to a single resource capacity.\n- A Walrasian equilibrium (WE) is a set of prices and allocations that simultaneously satisfy individual optimality and market clearing.\n\nEconomy specification:\n- There are two goods. The firm has a finite set of available technologies indexed by $k \\in \\{1,\\dots,K\\}$. Each technology $k$ converts one unit of a generic, fixed, non-traded capacity into a net output vector $a_k = (a_{k1}, a_{k2}) \\in \\mathbb{R}_{+}^2$. Let the total capacity be $\\bar{L} > 0$. The firm chooses nonnegative activity levels $x_k \\ge 0$ with $\\sum_{k=1}^K x_k \\le \\bar{L}$ to produce $y = \\sum_{k=1}^K x_k a_k$.\n- The single consumer has utility $u(c_1,c_2) = c_1^{\\alpha} c_2^{1-\\alpha}$ with $\\alpha \\in (0,1)$ over consumption vector $c = (c_1,c_2)$. The consumer owns $100\\%$ of the firm, has no other endowments, and thus has income equal to firm profit.\n\nPrices:\n- Let the price vector be $p = (p_1,p_2) \\in \\mathbb{R}_{++}^2$. Without loss of generality, normalize $p_1 = 1$ and write $p_2 = q$ with $q > 0$.\n\nProgramming challenge:\n- For each parameter set below, compute one Walrasian equilibrium. Your program must determine a price ratio $q$ and a production plan $y = (y_1,y_2)$ on the piecewise linear PPF that clear markets when the consumer optimizes given income equal to firm profit at those prices. You must base your computation on first principles stated above. The economy is single-consumer and single-firm; thus a WE exists for the test instances below, with prices normalized by $p_1 = 1$ and $p_2 = q$.\n\nTest suite (three independent cases):\n- Case A:\n  - Technologies: $a_1 = (2.0, 0.5)$, $a_2 = (1.0, 1.2)$, $a_3 = (0.3, 2.0)$.\n  - Capacity: $\\bar{L} = 10$.\n  - Preference weight: $\\alpha = 0.5$.\n- Case B:\n  - Technologies: $a_1 = (1.2, 0.3)$, $a_2 = (0.9, 0.9)$.\n  - Capacity: $\\bar{L} = 5$.\n  - Preference weight: $\\alpha = 0.9$.\n- Case C:\n  - Technologies: $a_1 = (1.0, 0.4)$, $a_2 = (0.2, 1.3)$.\n  - Capacity: $\\bar{L} = 12$.\n  - Preference weight: $\\alpha = 0.1$.\n\nComputational requirements and acceptance checks:\n- Use the firm’s profit maximization at given $q$ over the convex hull of available technologies with the capacity constraint to produce a profit-maximizing $y$ (allowing mixing of technologies).\n- Use the consumer’s Cobb–Douglas demand at prices $(1,q)$ with income equal to firm profit to obtain $c$.\n- Enforce market clearing by requiring $c = y$ in both coordinates; if the profit-maximizing set includes multiple optimal technologies at prices $(1,q)$, you must select a convex combination that clears markets if feasible.\n- Your algorithm must be general for any finite technology set with two goods satisfying the above structure.\n\nFinal outputs:\n- For each case, output the triple $[q,y_1,y_2]$ where $q$ is the equilibrium price ratio with $p_1 = 1$, and $(y_1,y_2)$ is the equilibrium production/consumption vector. All three numbers must be floating-point values rounded to six decimal places.\n- Your program should produce a single line of output containing the results as a comma-separated list of these triples enclosed in square brackets, in the order Case A, Case B, Case C. For example: $[[q_A,y_{A1},y_{A2}],[q_B,y_{B1},y_{B2}],[q_C,y_{C1},y_{C2}]]$.\n- There are no physical units involved.\n\nYour program must be self-contained and require no input. It must implement the above logic and produce the single specified output line for the given test suite. The answers for each case must be lists of three floats as defined above.", "solution": "The problem presented is a well-posed instance of computing a Walrasian Equilibrium in a single-consumer, single-firm Arrow-Debreu economy. It is scientifically grounded in established microeconomic theory and provides a complete, consistent set of parameters. Therefore, a rigorous solution can be derived from first principles.\n\nThe economy consists of two goods, indexed $1$ and $2$. Normalizing the price of good $1$ to $p_1 = 1$, the price vector is $p = (1, q)$, where $q = p_2 > 0$ is the relative price of good $2$.\n\nThe core of the analysis rests on three pillars: firm behavior, consumer behavior, and market clearing.\n\n**1. Firm's Profit Maximization**\n\nThe firm possesses a set of $K$ linear production technologies. Each technology $k$ is represented by a vector $a_k = (a_{k1}, a_{k2})$, which transforms one unit of a single, non-traded resource (capacity) into a bundle of goods. With a total capacity of $\\bar{L}$, the firm chooses activity levels $x_k \\ge 0$ for each technology, subject to the capacity constraint $\\sum_{k=1}^K x_k \\le \\bar{L}$. The resulting production vector is $y = (y_1, y_2) = \\sum_{k=1}^K x_k a_k$. The set of all feasible production vectors forms the Production Possibility Set (PPS), which is a convex polytope. Its upper-right boundary is the Production Possibility Frontier (PPF).\n\nThe firm's objective is to maximize profit, $\\pi = p \\cdot y = y_1 + q y_2$. Substituting the expression for $y$:\n$$\n\\pi(q) = \\max_{\\{x_k\\}} \\sum_{k=1}^K x_k (a_{k1} + q a_{k2}) \\quad \\text{subject to} \\quad \\sum_{k=1}^K x_k \\le \\bar{L}, \\quad x_k \\ge 0.\n$$\nTo maximize this linear objective, the firm will allocate its entire capacity $\\bar{L}$ to the technology $k^*$ that yields the highest revenue per unit of capacity, $r_k(q) = a_{k1} + q a_{k2}$.\n- If a unique technology $k^*$ maximizes $r_k(q)$, the firm specializes, producing at a vertex of the PPF: $y^S(q) = \\bar{L} a_{k^*}$.\n- If two technologies, say $k_i$ and $k_j$, yield the same maximal revenue, i.e., $a_{i1} + q a_{i2} = a_{j1} + q a_{j2}$, any convex combination of these technologies is optimal. This corresponds to producing on a facet (line segment) of the PPF connecting the points $\\bar{L} a_i$ and $\\bar{L} a_j$. The price ratio $q$ at which this occurs is determined by the technologies themselves:\n$$\nq = - \\frac{a_{j1} - a_{i1}}{a_{j2} - a_{i2}}\n$$\nThis value of $q$ is the negative reciprocal of the slope of the PPF segment connecting $\\bar{L} a_i$ and $\\bar{L} a_j$.\n\n**2. Consumer's Utility Maximization**\n\nThe single consumer has Cobb-Douglas preferences, described by the utility function $u(c_1, c_2) = c_1^{\\alpha} c_2^{1-\\alpha}$, where $\\alpha \\in (0,1)$. The consumer owns the firm and has no other source of income. Thus, the consumer's income $I$ is the firm's profit, $I = \\pi$. The budget constraint is $c_1 + q c_2 = \\pi$.\n\nMaximizing Cobb-Douglas utility subject to a budget constraint yields the well-known demand functions:\n$$\nc_1 = \\frac{\\alpha I}{p_1} = \\alpha \\pi\n$$\n$$\nc_2 = \\frac{(1-\\alpha) I}{p_2} = \\frac{(1-\\alpha) \\pi}{q}\n$$\nA key property of these demands is that the ratio of expenditures on the two goods is constant:\n$$\n\\frac{p_2 c_2}{p_1 c_1} = \\frac{q c_2}{c_1} = \\frac{1-\\alpha}{\\alpha}\n$$\nThis is equivalent to the marginal rate of substitution (MRS) equaling the price ratio: $\\text{MRS} = \\frac{\\partial u / \\partial c_1}{\\partial u / \\partial c_2} = \\frac{\\alpha}{1-\\alpha}\\frac{c_2}{c_1} = \\frac{p_1}{p_2} = \\frac{1}{q}$.\n\n**3. Market Clearing and Walrasian Equilibrium**\n\nIn equilibrium, markets must clear, which in this single-consumer aconomy means consumption equals production: $c = y$. Let the equilibrium allocation be $y^* = (y_1^*, y_2^*)$. This allocation must lie on the PPF and satisfy the consumer's optimality condition. Substituting $y^*$ into the consumer's optimality condition provides a direct link between the equilibrium allocation and the equilibrium price ratio $q^*$:\n$$\n\\frac{q^* y_2^*}{y_1^*} = \\frac{1-\\alpha}{\\alpha} \\quad \\implies \\quad q^* = \\frac{1-\\alpha}{\\alpha} \\frac{y_1^*}{y_2^*}\n$$\nThe equilibrium is a pair $(q^*, y^*)$ that simultaneously satisfies firm profit maximization and this market clearing condition. This implies that at the equilibrium allocation $y^*$, the slope of the consumer's indifference curve must equal the slope of the PPF, and both must equal the negative of the price ratio, $-1/q^*$.\n\n**Algorithmic Approach**\n\nThe algorithm determines the equilibrium by systematically checking the two possibilities for the location of the equilibrium allocation on the PPF: at a vertex or on a segment.\n\n**Case 1: Equilibrium at a PPF Vertex**\nAn equilibrium occurs at a vertex $y^* = \\bar{L} a_k$ if, at the price ratio $q^*$ implied by consumer optimality at this point, the firm finds it optimal to specialize in technology $k$.\n1.  For a given technology $k$, define the potential equilibrium point $y^* = \\bar{L} a_k$.\n2.  Calculate the price ratio that would make the consumer choose this point: $q^* = \\frac{1-\\alpha}{\\alpha} \\frac{y_1^*}{y_2^*}$.\n3.  Verify if, at this price $q^*$, technology $k$ is indeed the most profitable. This is true if $r_k(q^*) \\ge r_j(q^*)$ for all other technologies $j=1,\\ldots,K$. If this condition holds, an equilibrium is found.\n\n**Case 2: Equilibrium on a PPF Segment**\nAn equilibrium occurs on a segment connecting $\\bar{L} a_i$ and $\\bar{L} a_j$ if the firm is indifferent between these two technologies, and the resulting consumption point lies on this segment.\n1.  For a pair of technologies $(i, j)$, calculate the unique price ratio $q^*$ that makes the firm indifferent: $q^* = -(a_{j1}-a_{i1})/(a_{j2}-a_{i2})$. We only consider pairs where $q^* > 0$.\n2.  Verify that this pair actually forms an edge on the PPF by checking that no other technology $k$ is strictly more profitable at this price $q^*$.\n3.  If the pair forms an edge, determine the consumption point $(y_1^*, y_2^*)$ by finding the intersection of the consumer's demand ray, $y_2 = \\left(\\frac{1-\\alpha}{\\alpha}\\frac{1}{q^*}\\right) y_1$, and the line segment defined by $\\bar{L}a_i$ and $\\bar{L}a_j$.\n4.  If this intersection point falls within the bounds of the segment, an equilibrium is found.\n\nThis systematic search is guaranteed to find the unique equilibrium for the specified economic structure. The implementation will iterate through all technologies and pairs of technologies to identify which of these two cases holds for each test suite.", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef compute_equilibrium(technologies: list[tuple[float, float]], L_bar: float, alpha: float) -> list[float]:\n    \"\"\"\n    Computes the Walrasian equilibrium for a single-consumer, single-firm economy.\n\n    Args:\n        technologies: A list of (good1, good2) output tuples per unit of capacity.\n        L_bar: Total capacity.\n        alpha: The consumer's preference parameter for good 1 in the Cobb-Douglas utility.\n\n    Returns:\n        A list containing the equilibrium price ratio [q] and allocation [y1, y2].\n    \"\"\"\n    techs = np.array(technologies, dtype=np.float64)\n    num_techs = len(techs)\n    \n    # Consumer's expenditure ratio from utility maximization\n    if alpha == 0 or alpha == 1:\n        raise ValueError(\"alpha must be in (0,1)\")\n    expenditure_ratio = (1 - alpha) / alpha\n    \n    # Epsilon for robust floating-point comparisons\n    epsilon = 1e-9\n\n    # Case 1: Check for equilibrium at a vertex (specialization in one technology)\n    for i in range(num_techs):\n        y = L_bar * techs[i]\n        y1, y2 = y[0], y[1]\n\n        # Cobb-Douglas implies interior solution, so y1 and y2 must be positive.\n        if y1 < epsilon or y2 < epsilon:\n            continue\n\n        # Price ratio q implied by consumer choosing point y\n        q_consumer = expenditure_ratio * (y1 / y2)\n\n        # Check if firm would choose technology i at this price q\n        revenue_i = techs[i, 0] + q_consumer * techs[i, 1]\n        is_optimal_for_firm = True\n        for j in range(num_techs):\n            if i == j:\n                continue\n            revenue_j = techs[j, 0] + q_consumer * techs[j, 1]\n            if revenue_j > revenue_i + epsilon:\n                is_optimal_for_firm = False\n                break\n        \n        if is_optimal_for_firm:\n            return [q_consumer, y1, y2]\n\n    # Case 2: Check for equilibrium on a segment (diversification between two technologies)\n    for i in range(num_techs):\n        for j in range(i + 1, num_techs):\n            tech_i = techs[i]\n            tech_j = techs[j]\n\n            # Price ratio q implied by firm's indifference between tech i and j\n            # a_i1 + q*a_i2 = a_j1 + q*a_j2  => q*(a_i2 - a_j2) = a_j1 - a_i1\n            delta_a2 = tech_i[1] - tech_j[1]\n            if abs(delta_a2) < epsilon:\n                continue  # Technologies have same good 2 output, can't solve for q this way\n\n            delta_a1 = tech_j[0] - tech_i[0]\n            q_firm = delta_a1 / delta_a2\n\n            if q_firm < epsilon:\n                continue  # Price must be positive\n\n            # Check if this pair (i,j) constitutes an edge of the PPF at this price\n            revenue_ij = tech_i[0] + q_firm * tech_i[1]\n            is_ppf_edge = True\n            for k in range(num_techs):\n                if k == i or k == j:\n                    continue\n                revenue_k = techs[k, 0] + q_firm * techs[k, 1]\n                if revenue_k > revenue_ij + epsilon:\n                    is_ppf_edge = False\n                    break\n            \n            if not is_ppf_edge:\n                continue\n\n            # If it is an edge, find the market-clearing allocation on this segment\n            y_i = L_bar * tech_i\n            y_j = L_bar * tech_j\n            \n            # Slope of the PPF segment\n            if abs(y_j[0] - y_i[0]) < epsilon:\n                continue # Vertical segment\n            m_seg = (y_j[1] - y_i[1]) / (y_j[0] - y_i[0])\n\n            # Slope of the consumer's demand ray\n            m_ray = expenditure_ratio / q_firm\n\n            if abs(m_ray - m_seg) < epsilon:\n                continue # Parallel lines, no unique intersection\n\n            # Find intersection of the two lines\n            # y = m_ray * x\n            # y - y_i[1] = m_seg * (x - y_i[0])\n            # m_ray*x - y_i[1] = m_seg*x - m_seg*y_i[0]\n            # (m_ray - m_seg)*x = y_i[1] - m_seg*y_i[0]\n            y1_eq = (y_i[1] - m_seg * y_i[0]) / (m_ray - m_seg)\n            y2_eq = m_ray * y1_eq\n\n            # Check if the intersection point lies on the segment\n            y1_min = min(y_i[0], y_j[0])\n            y1_max = max(y_i[0], y_j[0])\n            \n            if y1_min - epsilon <= y1_eq <= y1_max + epsilon:\n                return [q_firm, y1_eq, y2_eq]\n                \n    # This part should not be reached given the problem guarantees a solution exists.\n    return []\n\ndef solve():\n    \"\"\"\n    Main function to run the test suite and print the results.\n    \"\"\"\n    test_cases = [\n        # Case A\n        {'id': 'A', 'techs': [(2.0, 0.5), (1.0, 1.2), (0.3, 2.0)], 'L_bar': 10.0, 'alpha': 0.5},\n        # Case B\n        {'id': 'B', 'techs': [(1.2, 0.3), (0.9, 0.9)], 'L_bar': 5.0, 'alpha': 0.9},\n        # Case C\n        {'id': 'C', 'techs': [(1.0, 0.4), (0.2, 1.3)], 'L_bar': 12.0, 'alpha': 0.1},\n    ]\n\n    results = []\n    for case in test_cases:\n        eq = compute_equilibrium(case['techs'], case['L_bar'], case['alpha'])\n        if eq:\n            results.append(eq)\n\n    # Format the final output string as per requirements\n    formatted_results = [f\"[{res[0]:.6f},{res[1]:.6f},{res[2]:.6f}]\" for res in results]\n    print(f\"[{','.join(formatted_results)}]\")\n\nsolve()\n```"}, {"introduction": "This practice introduces a complication that challenges standard equilibrium analysis: increasing returns to scale. You will investigate how such non-convexity in production can lead to a discontinuous supply function, which may result in multiple equilibria, a unique equilibrium, or no equilibrium at all. This exercise highlights the critical role of a model's underlying assumptions and demonstrates how to characterize the full set of market outcomes when those assumptions are relaxed. [@problem_id:2382190]", "id": "2382190", "problem": "You are given a two-good pure exchange-production economy with one produced good and one numeraire good. The numeraire good has price normalized to $1$, and the produced good has price $p&gt;0$. There are $n$ identical consumers and a single firm. The objective is to compute all Walrasian equilibrium prices and to characterize the multiplicity (uniqueness, non-existence, or a continuum) of equilibria. Your program must compute the equilibrium price set for each test case and aggregate all results as specified.\n\nFundamental base and core definitions:\n- A Walrasian equilibrium is a price vector and allocation such that each consumer maximizes utility subject to budget feasibility at those prices, each firm maximizes profits given prices, and all markets clear.\n- Consumer preferences are quasi-linear in the numeraire to avoid income effects on the produced good; hence, the produced-good demand depends only on $p$.\n- The firm is a price taker and chooses output $y\\ge 0$ to maximize profits $\\pi(y;p)=p\\,y-C(y)$.\n\nConsumer side:\n- For each of $n$ identical consumers, preferences are represented by\n$$u(x_0,x_1)=x_0 + a\\,x_1 - \\tfrac{1}{2} b\\,x_1^2,$$\nwith $x_0\\ge 0$ the numeraire consumption and $x_1\\ge 0$ the produced-good consumption. The optimal produced-good demand (Marshallian) at price $p$ is\n$$x_1^d(p) = \\max\\left\\{\\frac{a-p}{b},\\,0\\right\\}.$$\nAggregate demand is $D(p)=n\\,x_1^d(p)=n\\max\\left\\{\\frac{a-p}{b},0\\right\\}.$\n\nProduction side:\n- The single firm has a non-convex cost with increasing returns to scale over an initial range and convex costs thereafter. The cost function $C(y)$ for output $y\\ge 0$ is\n$$\nC(y) = \\begin{cases}\n0, & y=0,\\\\\nF + c_1\\,y - \\tfrac{1}{2} k\\,y^2, & 0 &lt; y \\le \\bar y,\\\\\nF + c_1 \\bar y - \\tfrac{1}{2} k \\bar y^2 + m_2 (y - \\bar y) + \\tfrac{1}{2} d (y - \\bar y)^2, & y &gt; \\bar y,\n\\end{cases}\n$$\nwhere parameters satisfy $F\\ge 0$, $c_1&gt;0$, $k&gt;0$, $d&gt;0$, and $\\bar y&gt;0$. The constant $m_2$ is set to $m_2 = c_1 - k \\bar y$ so that the marginal cost is continuous at $y=\\bar y$. The middle branch, with $0&lt;y\\le \\bar y$, exhibits decreasing marginal cost ($k&gt;0$) and hence increasing returns to scale over that range; the last branch is convex and has increasing marginal cost.\n\nFirm problem and best response:\n- Given price $p$, profits are $\\pi(y;p)=p\\,y-C(y)$. On $0&lt;y\\le\\bar y$ the profit function is a convex quadratic in $y$, so its maximum over that interval lies at the endpoints $y=0$ or $y=\\bar y$. On $y\\ge \\bar y$ the profit function is strictly concave, with unique maximizer\n$$\ny^{\\text{high}}(p) = \\bar y + \\frac{p - m_2}{d},\n$$\nwhenever $p &gt; m_2$, and $y=\\bar y$ when $p \\le m_2$. Let $B = F + c_1 \\bar y - \\tfrac{1}{2} k \\bar y^2$. The associated maximum profit on the high branch equals\n$$\n\\pi^{\\text{high}}(p) = p\\,\\bar y - B + \\frac{(p - m_2)^2}{2d}.\n$$\nDefine the entry price $p^{\\text{ent}}$ as the smallest $p$ such that $\\pi^{\\text{high}}(p)\\ge 0$. It is the positive root of the quadratic\n$$\n\\frac{1}{2d}(p - m_2)^2 + \\bar y\\,p - B = 0.\n$$\nFor $p &lt; p^{\\text{ent}}$, the firm shuts down with $y=0$; for $p \\ge p^{\\text{ent}}$, the profit-maximizing output is\n$$\ny^*(p) = \\bar y + \\frac{p - m_2}{d}.\n$$\n\nEquilibrium conditions:\n- Market clearing in the produced good requires $y = D(p)$.\n- Consequently, for $p \\ge p^{\\text{ent}}$ and $p &lt; a$, the produced-good market clearing equation is the linear identity\n$$\n\\bar y + \\frac{p - m_2}{d} = \\frac{n(a - p)}{b}.\n$$\nIf its unique solution $p^\\star$ lies in the feasibility window $p^\\star \\in [p^{\\text{ent}},a)$, then there is a unique positive-trade Walrasian equilibrium at price $p^\\star$. If, instead, $a &lt; p^{\\text{ent}}$, then for any $p\\in [a,p^{\\text{ent}})$ both demand and supply are zero, yielding a continuum of zero-trade Walrasian equilibria supported by any $p$ in that interval. If neither condition holds, there is no Walrasian equilibrium.\n\nYour task:\n- Implement an algorithm that, for each test case, performs the following.\n  1. Compute $m_2=c_1-k\\bar y$ and $B=F + c_1 \\bar y - \\tfrac{1}{2} k \\bar y^2$.\n  2. Compute the entry price $p^{\\text{ent}}$ as the positive root of $\\tfrac{1}{2d}(p - m_2)^2 + \\bar y\\,p - B=0$.\n  3. If $a &lt; p^{\\text{ent}}$, report the interval endpoints $[a, p^{\\text{ent}})$ representing a continuum of zero-trade equilibria.\n  4. Else compute\n     $$\n     p^\\star = \\frac{d\\,n\\,a + b\\,m_2 - d\\,b\\,\\bar y}{\\,b + d\\,n\\,}.\n     $$\n     If $p^\\star \\in [p^{\\text{ent}}, a)$, report the unique equilibrium price $p^\\star$; otherwise report that no equilibrium exists.\n\nNumerical and output requirements:\n- All floating-point outputs must be rounded to six decimal places.\n- Your program must not read any input.\n- Your program should produce a single line of output containing the results for all test cases as a Python-style list, with each test case producing one of the following:\n  - A two-element list $[L,U]$ representing the continuum of zero-trade Walrasian equilibrium prices $[L,U)$ if $a &lt; p^{\\text{ent}}$ and no positive-trade equilibrium exists.\n  - A one-element list $[p^\\star]$ if a unique positive-trade equilibrium exists.\n  - An empty list $[]$ if no Walrasian equilibrium exists.\n- Angle measures are not involved. No physical units are involved.\n\nTest suite:\n- Technology (common to all cases): $F=1.0$, $c_1=2.0$, $k=0.3$, $\\bar y=3.0$, $d=1.5$, $n=2$.\n- Case 1 (continuum of equilibria): $a=1.6$, $b=0.5$.\n- Case 2 (unique equilibrium): $a=4.0$, $b=0.5$.\n- Case 3 (no equilibrium): $a=2.0$, $b=2.5$.\n\nFinal output format:\n- Your program should produce a single line of output containing the results as a comma-separated list enclosed in square brackets. Each element corresponds to one test case, in the order given above. For example:\n\"[ [L,U], [p_star], [] ]\"\nwith each floating-point number rounded to six decimal places.", "solution": "The problem presented requires the computation of Walrasian equilibrium prices in a two-good economy with a single firm exhibiting non-convex production technology and $n$ identical consumers with quasi-linear preferences. The analysis is grounded in fundamental microeconomic principles. A Walrasian equilibrium is established when all agents optimize their respective objectives (utility for consumers, profit for the firm) and all markets clear.\n\nWe begin by formalizing the behavior of consumers and the firm, which gives rise to aggregate demand and supply functions for the produced good. The price of the numeraire good is normalized to $1$, and we seek the equilibrium price $p>0$ for the produced good.\n\n**Consumer Behavior and Aggregate Demand**\n\nEach of the $n$ identical consumers has a quasi-linear utility function, $u(x_0, x_1) = x_0 + a x_1 - \\tfrac{1}{2} b x_1^2$, where $x_0$ is the numeraire and $x_1$ is the produced good. Consumers maximize this utility subject to their budget constraint. The quasi-linear form ensures there are no income effects on the demand for good $1$, simplifying the analysis. The first-order condition for an interior solution for $x_1$ is given by equating the marginal rate of substitution to the price ratio, $\\frac{\\partial u / \\partial x_1}{\\partial u / \\partial x_0} = \\frac{p}{1}$, which yields $a - b x_1 = p$. Solving for $x_1$ gives the individual demand $x_1 = \\frac{a-p}{b}$. This holds as long as $p < a$, which is the consumer's choke price (the price at which demand becomes zero). For $p \\ge a$, demand is zero. Thus, the individual demand function is:\n$$x_1^d(p) = \\max\\left\\{0, \\frac{a-p}{b}\\right\\}$$\nThe aggregate demand from all $n$ consumers is simply $n$ times the individual demand:\n$$D(p) = n x_1^d(p) = n \\max\\left\\{0, \\frac{a-p}{b}\\right\\}$$\nThis is a downward-sloping linear function of $p$ for $p < a$ and zero for $p \\ge a$.\n\n**Firm Behavior and Supply**\n\nThe single firm's production is characterized by a non-convex cost function $C(y)$. This function creates a region of increasing returns to scale for output $y \\in (0, \\bar{y}]$ and a region of decreasing returns for $y > \\bar{y}$. The firm is a price-taker and chooses its output level $y \\ge 0$ to maximize profit, $\\pi(y; p) = p y - C(y)$.\n\nThe problem simplifies the firm's decision-making process. On the interval $y \\in (0, \\bar{y}]$, the profit function $\\pi(y;p) = py - (F + c_1 y - \\tfrac{1}{2} k y^2)$ is a convex quadratic in $y$ (since $k>0$), so its maximum must occur at the boundaries of its domain. The choice is between shutting down ($y=0$, profit $\\pi=0$) and producing on the convex cost branch ($y > \\bar{y}$).\n\nFor $y > \\bar{y}$, the profit function $\\pi(y;p)$ is strictly concave in $y$ (since $d>0$). The first-order condition $\\frac{\\partial \\pi}{\\partial y} = p - C'(y) = 0$ yields the profit-maximizing output level on this branch:\n$$p = m_2 + d(y - \\bar{y}) \\implies y^{\\text{high}}(p) = \\bar{y} + \\frac{p - m_2}{d}$$\nThis is valid for $p > m_2$, where $m_2 = c_1 - k\\bar{y}$ is the marginal cost at $y=\\bar{y}$. The associated maximum profit is $\\pi^{\\text{high}}(p) = p y^{\\text{high}}(p) - C(y^{\\text{high}}(p))$. As shown in the problem statement derivation, this can be written as $\\pi^{\\text{high}}(p) = p\\bar{y} - B + \\frac{(p - m_2)^2}{2d}$, where $B = F + c_1 \\bar y - \\tfrac{1}{2} k \\bar y^2$.\n\nThe firm will only choose to produce this positive output if the resulting profit is non-negative, i.e., $\\pi^{\\text{high}}(p) \\ge 0$. The entry price, $p^{\\text{ent}}$, is defined as the threshold at which the firm is indifferent between shutting down and producing. This occurs when $\\pi^{\\text{high}}(p^{\\text{ent}}) = 0$. This condition gives a quadratic equation for $p$:\n$$\\frac{1}{2d}(p - m_2)^2 + \\bar{y} p - B = 0$$\nSince $C(0)=0$ and so $\\pi(0)=0$, and we generally assume $B > 0$ (due to fixed costs $F$), we have $\\pi^{\\text{high}}(0) = -B < 0$. The quadratic function for $\\pi^{\\text{high}}(p)$ opens upwards, so it will have one negative and one positive root, or two positive roots. The economically relevant entry price is the higher positive root, above which profit becomes and stays positive. The problem simplifies this by referring to \"the positive root\". For the given parameters, there is indeed only one positive root.\n\nThe firm's supply function $y^*(p)$ is thus given as a discontinuous function:\n$$y^*(p) = \\begin{cases} 0, & p < p^{\\text{ent}} \\\\ \\bar{y} + \\frac{p - m_2}{d}, & p \\ge p^{\\text{ent}} \\end{cases}$$\nThis supply function jumps from $0$ to a positive value at $p=p^{\\text{ent}}$, which is a characteristic feature of non-convex production technologies.\n\n**Walrasian Equilibrium**\n\nA Walrasian equilibrium is a price $p^*$ where the market for the produced good clears, i.e., aggregate demand equals aggregate supply: $D(p^*) = y^*(p^*)$.\n\nWe analyze two main cases:\n1.  **Zero-Trade Equilibria (Continuum):** If the consumers' choke price $a$ is less than the firm's entry price $p^{\\text{ent}}$, i.e., $a < p^{\\text{ent}}$, then for any price $p$ in the interval $[a, p^{\\text{ent}})$, both demand and supply are zero. $D(p)=0$ because $p \\ge a$, and $y^*(p)=0$ because $p < p^{\\text{ent}}$. Since the market clears at $0=0$, any price in this range constitutes a Walrasian equilibrium. This results in a continuum of zero-trade equilibria.\n\n2.  **Positive-Trade Equilibrium (Unique or None):** If $a \\ge p^{\\text{ent}}$, there is a potential for an equilibrium with positive production and consumption. Such an equilibrium price $p^\\star$ must satisfy $D(p^\\star) = y^*(p^\\star)$, with $D(p^\\star) > 0$ and $y^*(p^\\star) > 0$. This requires $p^\\star < a$ (for positive demand) and $p^\\star \\ge p^{\\text{ent}}$ (for positive supply). Equating the positive-trade expressions for supply and demand:\n    $$\\frac{n(a - p^\\star)}{b} = \\bar{y} + \\frac{p^\\star - m_2}{d}$$\n    This is a linear equation in $p^\\star$. Solving for $p^\\star$ yields:\n    $$n d (a - p^\\star) = b(d\\bar{y} + p^\\star - m_2)$$\n    $$n d a - n d p^\\star = b d \\bar{y} + b p^\\star - b m_2$$\n    $$n d a - b d \\bar{y} + b m_2 = (b + n d)p^\\star$$\n    $$p^\\star = \\frac{n d a + b m_2 - b d \\bar{y}}{b + n d}$$\n    A unique positive-trade equilibrium exists at this price $p^\\star$ if and only if it falls within the valid price window, i.e., $p^\\star \\in [p^{\\text{ent}}, a)$. If $p^\\star$ falls outside this interval, no positive-trade equilibrium exists. Since we are in the case $a \\ge p^{\\text{ent}}$, there is no price range for a zero-trade equilibrium either. Thus, if $p^\\star \\notin [p^{\\text{ent}}, a)$, no Walrasian equilibrium exists at all.\n\n**Algorithm Summary**\n\nThe algorithm to determine the equilibrium price set for a given test case is:\n1.  Calculate technology-dependent constants: $m_2 = c_1 - k\\bar{y}$ and $B = F + c_1\\bar{y} - \\tfrac{1}{2}k\\bar{y}^2$.\n2.  Set up the quadratic equation for the entry price: $p^2 + (2d\\bar{y} - 2m_2)p + (m_2^2 - 2dB) = 0$. Solve for its roots and identify $p^{\\text{ent}}$ as the unique positive root.\n3.  Compare the consumer choke price $a$ with $p^{\\text{ent}}$.\n    - If $a < p^{\\text{ent}}$, a continuum of equilibria exists on $[a, p^{\\text{ent}})$. Report the interval endpoints.\n    - If $a \\ge p^{\\text{ent}}$, calculate the potential equilibrium price $p^\\star$ using the derived formula. Then, check if $p^\\star \\in [p^{\\text{ent}}, a)$.\n        - If it is, a unique equilibrium exists at $p^\\star$. Report this price.\n        - If it is not, no equilibrium exists. Report this outcome.\nThe provided Python code implements this logic systematically for each test case.", "answer": "```python\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Computes the Walrasian equilibrium price(s) for a series of test cases\n    in a two-good pure exchange-production economy.\n    \"\"\"\n\n    # Common technology parameters for all test cases\n    F = 1.0\n    c1 = 2.0\n    k = 0.3\n    y_bar = 3.0\n    d = 1.5\n    n = 2\n\n    test_cases = [\n        # Case 1 (continuum of equilibria)\n        {'a': 1.6, 'b': 0.5},\n        # Case 2 (unique equilibrium)\n        {'a': 4.0, 'b': 0.5},\n        # Case 3 (no equilibrium)\n        {'a': 2.0, 'b': 2.5},\n    ]\n\n    # Calculate intermediate technology constants\n    m2 = c1 - k * y_bar\n    B = F + c1 * y_bar - 0.5 * k * y_bar**2\n\n    # Set up and solve the quadratic equation for the entry price p_ent:\n    # (1/(2d))*(p-m2)^2 + y_bar*p - B = 0\n    # This simplifies to a standard quadratic form A*p^2 + B*p + C = 0\n    # A*p^2 + B_poly*p + C_poly = 0 where A=1\n    # p^2 - 2*m2*p + m2^2 + 2*d*y_bar*p - 2*d*B = 0\n    # p^2 + (2*d*y_bar - 2*m2)*p + (m2^2 - 2*d*B) = 0\n    poly_coeffs = [\n        1,\n        2 * d * y_bar - 2 * m2,\n        m2**2 - 2 * d * B\n    ]\n    roots = np.roots(poly_coeffs)\n    \n    # p_ent is the positive root. For the given parameters, one root is positive\n    # and one is negative.\n    p_ent = max(roots)\n\n    results = []\n    for case in test_cases:\n        a = case['a']\n        b = case['b']\n\n        # Case 1: Continuum of zero-trade equilibria\n        if a < p_ent:\n            # The interval is [a, p_ent)\n            results.append([a, p_ent])\n        else:\n            # Case 2: Potential for a unique positive-trade equilibrium\n            # Calculate p_star by equating supply and demand\n            p_star_num = d * n * a + b * m2 - d * b * y_bar\n            p_star_den = b + d * n\n            \n            # Avoid division by zero, although not expected with problem params\n            if p_star_den == 0:\n                results.append([])\n                continue # Should not happen with b>0, d>0, n>0\n\n            p_star = p_star_num / p_star_den\n\n            # Check if p_star falls in the valid range [p_ent, a)\n            if p_ent <= p_star < a:\n                results.append([p_star])\n            else:\n                # No equilibrium exists\n                results.append([])\n\n    # Format the final output string as per requirements\n    formatted_parts = []\n    for res in results:\n        if not res:\n            formatted_parts.append(\"[]\")\n        else:\n            formatted_numbers = [f\"{num:.6f}\" for num in res]\n            formatted_parts.append(f\"[{', '.join(formatted_numbers)}]\")\n    \n    final_output = f\"[{', '.join(formatted_parts)}]\"\n    print(final_output)\n\nsolve()\n```"}, {"introduction": "This final practice moves into the realm of applied general equilibrium (AGE) modeling, a powerful tool for policy analysis. You will compute the equilibrium in an economy that includes a government with a progressive income tax and lump-sum transfers, requiring you to set up and solve a system of non-linear equations. This problem demonstrates how to implement a fixed-point algorithm to analyze the economy-wide effects of realistic fiscal policies, a core task in modern computational economics. [@problem_id:2382171]", "id": "2382171", "problem": "Consider an exchange-production economy with a single consumption good and a time endowment for each agent. There are $2$ agents indexed by $i \\in \\{1,2\\}$. Each agent $i$ chooses consumption $c_i \\ge 0$ and leisure $\\ell_i \\in [0,1]$. Labor supply is $h_i = 1 - \\ell_i \\in [0,1]$. The single consumption good is produced from aggregate labor with linear technology $y = h_1 + h_2$. The price of the consumption good is normalized to $1$ and the pre-tax wage is $w = 1$. The government imposes a progressive income tax on each agent’s labor income according to the function\n$$\nT(I) = \\theta I + \\kappa \\max\\{0, I - I_0\\}^2,\n$$\nwhere $\\theta \\in [0,1)$, $\\kappa \\ge 0$, and $I_0 \\ge 0$ are parameters, and $I$ denotes the agent’s labor income. Tax revenue is rebated as an equal lump-sum transfer to both agents so that the per-capita transfer is\n$$\n\\tau = \\frac{1}{2}\\left(T(w h_1) + T(w h_2)\\right).\n$$\nGiven a transfer $\\tau$, agent $i$ has the budget constraint\n$$\nc_i \\le w h_i - T(w h_i) + \\tau,\n$$\nand preferences represented by the utility function\n$$\nu_i(c_i,\\ell_i) = \\alpha_i \\ln c_i + (1 - \\alpha_i) \\ln \\ell_i,\n$$\nwith $\\alpha_i \\in (0,1)$.\n\nA competitive equilibrium with taxes is a triple $(h_1^\\ast,h_2^\\ast,\\tau^\\ast)$ such that for each $i \\in \\{1,2\\}$, given $\\tau^\\ast$, the choice $h_i^\\ast \\in [0,1]$ solves the agent’s utility maximization problem subject to the budget constraint and non-negativity of consumption and leisure, and the government budget is balanced with $\\tau^\\ast = \\frac{1}{2}\\left(T(h_1^\\ast)+T(h_2^\\ast)\\right)$. Goods market clearing $c_1^\\ast + c_2^\\ast = y^\\ast$ must hold, with $y^\\ast = h_1^\\ast + h_2^\\ast$, and is implied by feasibility and the government budget balance. The price normalization is $1$ and all quantities are dimensionless.\n\nYour task is to write a complete program that, for each parameter set in the test suite below, computes a competitive equilibrium with taxes, and outputs the equilibrium vector $[h_1^\\ast,h_2^\\ast,\\tau^\\ast]$ with each entry rounded to $6$ decimal places. For each test case, the agent’s optimal consumption equals the right-hand side of the budget constraint at the chosen labor supply, i.e., $c_i^\\ast = w h_i^\\ast - T(w h_i^\\ast) + \\tau^\\ast$, and $\\ell_i^\\ast = 1 - h_i^\\ast$.\n\nTest suite (each line is one test case specifying $(\\alpha_1,\\alpha_2,\\theta,\\kappa,I_0)$):\n- Case A (baseline symmetric preferences and progressive tax): $(0.5, 0.5, 0.2, 0.3, 0.5)$.\n- Case B (asymmetric preferences and same tax): $(0.3, 0.7, 0.2, 0.3, 0.5)$.\n- Case C (more progressive tax): $(0.5, 0.5, 0.4, 0.6, 0.3)$.\n- Case D (no tax benchmark): $(0.5, 0.5, 0.0, 0.0, 0.0)$.\n- Case E (flat tax benchmark): $(0.8, 0.2, 0.1, 0.0, 0.0)$.\n\nFor each test case, your program must compute a competitive equilibrium with taxes and produce the vector $[h_1^\\ast,h_2^\\ast,\\tau^\\ast]$ rounded to $6$ decimal places. Your program should produce a single line of output containing the results for the five test cases as a comma-separated list enclosed in square brackets, where each element is the $3$-vector for the corresponding case. For example, the final output must have the form\n$[\\,[h_1^\\ast,h_2^\\ast,\\tau^\\ast],\\,[h_1^\\ast,h_2^\\ast,\\tau^\\ast],\\,[h_1^\\ast,h_2^\\ast,\\tau^\\ast],\\,[h_1^\\ast,h_2^\\ast,\\tau^\\ast],\\,[h_1^\\ast,h_2^\\ast,\\tau^\\ast]\\,]$,\nwith all numbers shown as decimal floats rounded to $6$ decimal places. Angles are not involved. Percentages, if any, must be expressed as decimals, not with a percentage sign.", "solution": "The problem statement is subjected to validation.\n\n### Step 1: Extract Givens\n\n- **Economy**: Exchange-production economy with a single consumption good and time endowment.\n- **Agents**: $2$ agents indexed by $i \\in \\{1,2\\}$.\n- **Choices**: Consumption $c_i \\ge 0$, leisure $\\ell_i \\in [0,1]$. Labor supply is $h_i = 1 - \\ell_i \\in [0,1]$.\n- **Production Technology**: $y = h_1 + h_2$.\n- **Prices**: Price of consumption good is normalized to $1$. Pre-tax wage is $w = 1$.\n- **Tax Function**: $T(I) = \\theta I + \\kappa \\max\\{0, I - I_0\\}^2$, with parameters $\\theta \\in [0,1)$, $\\kappa \\ge 0$, $I_0 \\ge 0$. $I$ is labor income.\n- **Government Transfer**: Per-capita lump-sum transfer $\\tau = \\frac{1}{2}\\left(T(w h_1) + T(w h_2)\\right)$.\n- **Budget Constraint**: $c_i \\le w h_i - T(w h_i) + \\tau$. Assumed to hold with equality: $c_i^\\ast = w h_i^\\ast - T(w h_i^\\ast) + \\tau^\\ast$.\n- **Preferences**: Utility function $u_i(c_i,\\ell_i) = \\alpha_i \\ln c_i + (1 - \\alpha_i) \\ln \\ell_i$, with preference parameter $\\alpha_i \\in (0,1)$.\n- **Equilibrium Definition**: A competitive equilibrium with taxes is a triple $(h_1^\\ast,h_2^\\ast,\\tau^\\ast)$ such that:\n    1. For each agent $i$, given $\\tau^\\ast$, $h_i^\\ast$ solves the agent's utility maximization problem.\n    2. The government budget is balanced: $\\tau^\\ast = \\frac{1}{2}\\left(T(h_1^\\ast)+T(h_2^\\ast)\\right)$.\n    3. Goods market clearing $c_1^\\ast + c_2^\\ast = h_1^\\ast + h_2^\\ast$ holds.\n- **Task**: For a given set of parameters $(\\alpha_1,\\alpha_2,\\theta,\\kappa,I_0)$, compute the equilibrium vector $[h_1^\\ast,h_2^\\ast,\\tau^\\ast]$.\n- **Test Cases**:\n    - Case A: $(0.5, 0.5, 0.2, 0.3, 0.5)$\n    - Case B: $(0.3, 0.7, 0.2, 0.3, 0.5)$\n    - Case C: $(0.5, 0.5, 0.4, 0.6, 0.3)$\n    - Case D: $(0.5, 0.5, 0.0, 0.0, 0.0)$\n    - Case E: $(0.8, 0.2, 0.1, 0.0, 0.0)$\n\n### Step 2: Validate Using Extracted Givens\n\nThe problem is analyzed against the validation criteria.\n- **Scientifically Grounded**: The problem describes a standard general equilibrium model used in public finance and computational economics. The utility function (Cobb-Douglas), production function (linear), and tax-and-transfer system are all conventional and well-understood constructs. The problem is scientifically sound.\n- **Well-Posed**: The problem asks for the computation of a competitive equilibrium, which is equivalent to finding a fixed point of a continuous mapping on a compact and convex set. By Brouwer's fixed-point theorem, an equilibrium is guaranteed to exist. For standard parameterizations, uniqueness is also expected. The objective is clearly defined. The problem is well-posed.\n- **Objective**: The problem is stated using precise mathematical language, free from any subjective or ambiguous terminology.\n- **Completeness and Consistency**: All necessary functions, parameters, and equilibrium conditions are explicitly provided. The test suite is fully specified. The statement that goods market clearing is implied by other conditions (Walras's Law) is correct and standard. The problem is self-contained and consistent.\n\n### Step 3: Verdict and Action\n\nThe problem is valid. It is a standard, well-posed problem in computational economics. Proceeding to solution.\n\n### Solution\n\nThe task is to find a competitive equilibrium $(h_1^\\ast, h_2^\\ast, \\tau^\\ast)$ for a specified economic environment. The equilibrium is characterized by a set of conditions that must hold simultaneously: optimization by each agent and government budget balance. We formulate this as a fixed-point problem and solve it numerically.\n\n**1. Agent's Optimization Problem**\n\nEach agent $i \\in \\{1,2\\}$ chooses labor supply $h_i \\in [0,1]$ to maximize their utility. With the wage $w=1$, the agent's problem is to maximize:\n$$ u_i(c_i, \\ell_i) = \\alpha_i \\ln c_i + (1 - \\alpha_i) \\ln \\ell_i $$\nsubject to the constraints:\n$$ c_i = h_i - T(h_i) + \\tau $$\n$$ \\ell_i = 1 - h_i $$\n$$ c_i > 0, \\ell_i > 0 $$\nSubstituting the constraints into the utility function, the problem becomes choosing $h_i \\in (0,1)$ to maximize:\n$$ V(h_i; \\tau) = \\alpha_i \\ln(h_i - T(h_i) + \\tau) + (1 - \\alpha_i) \\ln(1 - h_i) $$\nwhere the tax function is $T(h_i) = \\theta h_i + \\kappa \\max\\{0, h_i - I_0\\}^2$.\n\n**2. First-Order Condition (FOC)**\n\nFor an interior solution $h_i \\in (0,1)$, the first-order condition for utility maximization is $\\frac{dV}{dh_i} = 0$. The derivative of the tax function, representing the marginal tax rate (MTR), is:\n$$ T'(h_i) = \\frac{dT}{dh_i} = \\theta + 2\\kappa \\max\\{0, h_i - I_0\\} $$\nDifferentiating the utility $V(h_i; \\tau)$ with respect to $h_i$ yields the FOC:\n$$ \\frac{\\partial V}{\\partial h_i} = \\frac{\\alpha_i}{c_i} (1 - T'(h_i)) - \\frac{1 - \\alpha_i}{1 - h_i} = 0 $$\nThis condition states that the marginal rate of substitution between consumption and leisure must equal the net-of-tax wage rate, which is $1-T'(h_i)$. Rearranging, we get an implicit equation for the optimal $h_i$ given $\\tau$:\n$$ h_i - T(h_i) + \\tau = \\frac{\\alpha_i}{1-\\alpha_i} (1 - h_i) (1 - T'(h_i)) $$\n\n**3. Equilibrium System and Computational Strategy**\n\nThe competitive equilibrium is a vector $(h_1^\\ast, h_2^\\ast, \\tau^\\ast)$ that simultaneously solves the two agents' FOCs and the government budget constraint:\n1. $h_1^\\ast - T(h_1^\\ast) + \\tau^\\ast - \\frac{\\alpha_1}{1-\\alpha_1} (1 - h_1^\\ast) (1 - T'(h_1^\\ast)) = 0$\n2. $h_2^\\ast - T(h_2^\\ast) + \\tau^\\ast - \\frac{\\alpha_2}{1-\\alpha_2} (1 - h_2^\\ast) (1 - T'(h_2^\\ast)) = 0$\n3. $\\tau^\\ast = \\frac{1}{2}(T(h_1^\\ast) + T(h_2^\\ast))$\n\nThis system is solved numerically as a fixed-point problem. Let $H = (h_1, h_2)$ be a vector of labor supplies. We seek a fixed point $H^\\ast$ such that $H^\\ast = F(H^\\ast)$, where the mapping $F: [0,1]^2 \\to [0,1]^2$ is defined by:\n1. Given a guess $H = (h_1, h_2)$, calculate the corresponding transfer: $\\tau(H) = \\frac{1}{2}(T(h_1) + T(h_2))$.\n2. For each agent $i$, find the optimal labor supply $h_i'$ that solves their utility maximization problem given this transfer $\\tau(H)$. This defines the new vector $H' = F(H) = (h_1', h_2')$.\n\nThe fixed point is found by searching for a root of the function $E(H) = F(H) - H = 0$. This is a two-dimensional root-finding problem, which we solve using `scipy.optimize.root`.\n\n**4. Agent's Best Response Computation**\n\nThe core of the mapping $F$ is computing the agent's best-response labor supply $h_i'(\\tau)$.\n- **Corner Solution**: An agent may choose not to work ($h_i'=0$). This occurs if the marginal utility from the first infinitesimal amount of work is non-positive. At $h_i \\to 0$, this condition is $\\frac{\\partial V}{\\partial h_i}|_{h_i \\to 0^+} \\le 0$. Assuming $I_0 > 0$ or $\\kappa=0$, this simplifies to $\\tau \\ge \\frac{\\alpha_i(1-\\theta)}{1-\\alpha_i}$. If this inequality holds, the optimal labor supply is $h_i' = 0$.\n- **Interior Solution**: If the condition for a corner solution is not met, the optimal $h_i'$ is an interior solution in $(0,1)$ that solves the FOC. Let us define the function $G_i(h; \\tau)$:\n  $$ G_i(h; \\tau) = h - T(h) + \\tau - \\frac{\\alpha_i}{1-\\alpha_i} (1 - h) (1 - T'(h)) $$\n  We need to find the root of $G_i(h; \\tau) = 0$. Since this is a nonlinear equation due to the structure of $T(h)$ and $T'(h)$, we use a numerical 1D root finder, `scipy.optimize.brentq`. This method requires an interval where the function changes sign. Given that an interior solution exists, $G_i(h; \\tau)$ will be negative near $h=0$ and positive near $h=1$ (as long as consumption remains positive), ensuring a root can be found in $(0,1)$.\n\nThe overall algorithm consists of an outer loop that calls a root-finding routine (`root`) on the system $E(H) = 0$. Inside the definition of $E(H)$, for each agent, we first check for a corner solution. If the solution is interior, we call a nested root-finding routine (`brentq`) to solve the agent's FOC for their optimal labor supply. This process is repeated for all test cases.", "answer": "```python\nimport numpy as np\nfrom scipy.optimize import root, brentq\n\ndef solve():\n    \"\"\"\n    Computes the competitive equilibrium for an exchange-production economy with taxes.\n    The solution is found by solving a fixed-point problem for the agents' labor supplies.\n    \"\"\"\n\n    test_cases = [\n        (0.5, 0.5, 0.2, 0.3, 0.5),  # Case A\n        (0.3, 0.7, 0.2, 0.3, 0.5),  # Case B\n        (0.5, 0.5, 0.4, 0.6, 0.3),  # Case C\n        (0.5, 0.5, 0.0, 0.0, 0.0),  # Case D\n        (0.8, 0.2, 0.1, 0.0, 0.0),  # Case E\n    ]\n    \n    results = []\n\n    def T_func(h, theta, kappa, I0):\n        \"\"\"Computes the tax on labor income.\"\"\"\n        h = np.asanyarray(h)\n        income_above_threshold = np.maximum(0, h - I0)\n        return theta * h + kappa * income_above_threshold**2\n\n    def T_prime_func(h, theta, kappa, I0):\n        \"\"\"Computes the marginal tax rate.\"\"\"\n        h = np.asanyarray(h)\n        return theta + 2 * kappa * np.maximum(0, h - I0)\n\n    def compute_equilibrium(alpha1, alpha2, theta, kappa, I0):\n        \"\"\"\n        Calculates the equilibrium (h1*, h2*, tau*) for a given set of parameters.\n        \"\"\"\n        \n        def solve_agent_h(alpha, tau):\n            \"\"\"\n            Calculates an agent's optimal labor supply h for a given transfer tau.\n            This involves checking for a corner solution (h=0) or finding the root\n            of the first-order condition for an interior solution.\n            \"\"\"\n            # The agent's FOC implies h=0 if the marginal utility of working is non-positive at h->0.\n            # This corresponds to G(h->0) >= 0. For h<=I0, T'(h)=theta.\n            # The check_val is derived from the FOC at h -> 0.\n            # If tau is high enough, agent prefers not to work.\n            if theta < 1:\n                check_val = alpha * (1 - theta) / (1 - alpha)\n                if tau >= check_val:\n                    return 0.0\n            \n            # Define the function G(h) = 0 from the agent's first-order condition.\n            def G(h_val):\n                # Ensure h_val is within the valid domain.\n                if h_val <= 1e-12: return -1.0  # Guide solver towards positive h\n                if h_val >= 1.0 - 1e-12: return 1.0 # Guide solver away from h=1\n\n                th = T_func(h_val, theta, kappa, I0)\n                consumption = h_val - th + tau\n\n                # If consumption is non-positive, this choice is infeasible.\n                # Utility is -inf, so agent would reduce labor.\n                # The FOC function value should be large and positive.\n                if consumption <= 0:\n                    return 1e9\n\n                th_prime = T_prime_func(h_val, theta, kappa, I0)\n                \n                # FOC: c_i = (alpha_i/(1-alpha_i)) * (1-h_i) * (1-T'(h_i))\n                foc_lhs = consumption\n                foc_rhs = (alpha / (1 - alpha)) * (1 - h_val) * (1 - th_prime)\n                \n                return foc_lhs - foc_rhs\n\n            # Use brentq to find the root of G(h) for an interior solution.\n            # The search interval is (0, 1). The logic above ensures a root exists\n            # in this interval if the corner solution check fails.\n            try:\n                h_solution = brentq(G, 1e-9, 1.0 - 1e-9, xtol=1e-12, rtol=1e-12)\n                return h_solution\n            except ValueError:\n                # This case should ideally not be reached given the model's structure\n                # and the corner solution check.\n                return 0.0\n\n        def system_of_equations(h_vec):\n            \"\"\"\n            Defines the system of equations H_new - H = 0 for the fixed-point solver.\n            H = [h1, h2]. H_new is the vector of best-response labor supplies.\n            \"\"\"\n            h1, h2 = h_vec\n            \n            # Penalize out-of-bound values during iteration\n            if not (0 <= h1 <= 1 and 0 <= h2 <= 1):\n                return [1e6, 1e6]\n\n            # 1. Calculate transfer tau from current labor supplies h1, h2.\n            current_tau = 0.5 * (T_func(h1, theta, kappa, I0) + T_func(h2, theta, kappa, I0))\n            \n            # 2. Calculate each agent's optimal labor supply given the transfer.\n            h1_new = solve_agent_h(alpha1, current_tau)\n            h2_new = solve_agent_h(alpha2, current_tau)\n            \n            # 3. Return the error vector for the root finder.\n            return [h1_new - h1, h2_new - h2]\n\n        # Initial guess for the root finder. [0.5, 0.5] is a neutral starting point.\n        initial_guess = np.array([0.5, 0.5])\n        \n        # Use scipy's root finder to solve the system F(H) - H = 0.\n        solution = root(system_of_equations, initial_guess, method='hybr', tol=1e-10)\n\n        if not solution.success:\n            # Fallback to an initial guess based on no-tax solution if first fails\n            solution = root(system_of_equations, np.array([alpha1, alpha2]), method='hybr', tol=1e-10)\n            if not solution.success:\n                 # In case of persistent failure, which shouldn't happen for these parameters.\n                 raise RuntimeError(f\"Equilibrium computation failed for parameters: {alpha1, alpha2, theta, kappa, I0}\")\n\n        h1_star, h2_star = solution.x\n        \n        # Calculate the final equilibrium transfer tau*.\n        tau_star = 0.5 * (T_func(h1_star, theta, kappa, I0) + T_func(h2_star, theta, kappa, I0))\n\n        return [h1_star, h2_star, tau_star]\n\n    for case_params in test_cases:\n        alpha1, alpha2, theta, kappa, I0 = case_params\n        eq = compute_equilibrium(alpha1, alpha2, theta, kappa, I0)\n        results.append(eq)\n\n    # Format the output string exactly as required.\n    formatted_results = []\n    for res in results:\n        # Round each element to 6 decimal places and format into a string \"[v1,v2,v3]\"\n        formatted_res = f\"[{res[0]:.6f},{res[1]:.6f},{res[2]:.6f}]\"\n        formatted_results.append(formatted_res)\n\n    print(f\"[{','.join(formatted_results)}]\")\n\nsolve()\n```"}]}