{"hands_on_practices": [{"introduction": "We begin with the most fundamental application of Lagrange's method: interpolating between two known data points. This exercise introduces a hypothetical scenario where we must estimate a stock's price during a trading halt, given only the last price before the halt and the first price after [@problem_id:2405262]. By applying the principle of a unique polynomial of minimal degree, this practice solidifies the connection between the general Lagrange formula and simple linear interpolation, a cornerstone of financial modeling.", "id": "2405262", "problem": "A single-name equity is halted between timestamps $\\tau_{0}$ and $\\tau_{1}$. The last transaction before the halt at time $\\tau_{0}$ prints at price $p(\\tau_{0}) = \\$\\,103.64$, and the first transaction after trading resumes at time $\\tau_{1}$ prints at price $p(\\tau_{1}) = \\$\\,98.92$. Assume there are no splits, dividends, or corporate actions during the halt and that the latent price path over the halt is modeled by the unique polynomial of minimal degree that matches the observed endpoint prices.\n\nDefine $t$ as elapsed time in seconds since $\\tau_{0}$, so that $t = 0$ corresponds to $\\tau_{0}$ and $t = \\Delta$ corresponds to $\\tau_{1}$. Suppose the halt length is $\\Delta = 900$ seconds. Compute the imputed latent price at $t^{\\ast} = 540$ seconds after the halt begins under the modeling assumption above.\n\nRound your answer to $4$ significant figures. Express your answer in United States dollars (USD).", "solution": "The problem statement is subjected to rigorous validation before any attempt at a solution.\n\nStep 1: Extract Givens\n- Start time of halt: $\\tau_{0}$\n- End time of halt: $\\tau_{1}$\n- Price at start of halt: $p(\\tau_{0}) = 103.64$\n- Price at end of halt: $p(\\tau_{1}) = 98.92$\n- Modeling assumption: The latent price path is modeled by the unique polynomial of minimal degree that matches the observed endpoint prices.\n- Time coordinate definition: $t$ is elapsed time in seconds since $\\tau_{0}$, so $t=0$ corresponds to $\\tau_{0}$ and $t=\\Delta$ corresponds to $\\tau_{1}$.\n- Halt duration: $\\Delta = 900$ seconds.\n- Target time for price imputation: $t^{\\ast} = 540$ seconds.\n\nStep 2: Validate Using Extracted Givens\nThe problem is scientifically grounded, well-posed, and objective. It poses a standard problem in numerical interpolation as applied to a simplified financial model. The core instruction—to find a price using the \"unique polynomial of minimal degree\"—has a precise mathematical meaning. For two given data points, this corresponds to a unique polynomial of degree one, which is a straight line. All data required for the calculation are provided, and there are no internal contradictions or ambiguities. The problem is therefore deemed valid.\n\nStep 3: Verdict and Action\nThe problem is valid. A solution will now be derived.\n\nThe problem requires the imputation of a latent equity price during a trading halt. The governing modeling assumption is that the price path, which we denote as $P(t)$, is described by the unique polynomial of minimal degree that connects the observed prices at the boundaries of the halt interval.\n\nWe are given two data points in the time-price coordinate system $(t, P(t))$:\n1.  At the beginning of the halt, $t_0 = 0$, the price is $P(t_0) = P(0) = 103.64$.\n2.  At the end of the halt, $t_1 = \\Delta = 900$, the price is $P(t_1) = P(900) = 98.92$.\n\nA unique polynomial that passes through $n$ distinct points has a degree of at most $n-1$. In this scenario, we have $n=2$ points: $(t_0, P(t_0))$ and $(t_1, P(t_1))$. Consequently, the polynomial of minimal degree is of degree $2-1 = 1$. This is a linear function.\n\nThe general form of the Lagrange interpolating polynomial for two points $(x_0, y_0)$ and $(x_1, y_1)$ provides the required unique linear function:\n$$ P(t) = y_0 \\frac{t-x_1}{x_0-x_1} + y_1 \\frac{t-x_0}{x_1-x_0} $$\nThis construction ensures that $P(x_0)=y_0$ and $P(x_1)=y_1$.\n\nSubstituting our specific values, where the independent variable is time $t$:\n- $(x_0, y_0) = (t_0, P(t_0)) = (0, 103.64)$\n- $(x_1, y_1) = (t_1, P(t_1)) = (900, 98.92)$\n\nThe polynomial for the latent price path is:\n$$ P(t) = 103.64 \\cdot \\frac{t-900}{0-900} + 98.92 \\cdot \\frac{t-0}{900-0} $$\nSimplifying this expression yields the formula for linear interpolation:\n$$ P(t) = 103.64 \\left( \\frac{900-t}{900} \\right) + 98.92 \\left( \\frac{t}{900} \\right) $$\nThis can be written as:\n$$ P(t) = 103.64 \\left( 1 - \\frac{t}{900} \\right) + 98.92 \\left( \\frac{t}{900} \\right) $$\nWe are required to compute the imputed price at the target time $t^{\\ast} = 540$ seconds. We substitute $t = 540$ into the polynomial expression:\n$$ P(540) = 103.64 \\left( 1 - \\frac{540}{900} \\right) + 98.92 \\left( \\frac{540}{900} \\right) $$\nFirst, we simplify the fractional term:\n$$ \\frac{540}{900} = \\frac{54}{90} = \\frac{6 \\times 9}{10 \\times 9} = \\frac{6}{10} = 0.6 $$\nNow, we substitute this value back into the equation for $P(540)$:\n$$ P(540) = 103.64 (1 - 0.6) + 98.92 (0.6) $$\n$$ P(540) = 103.64 (0.4) + 98.92 (0.6) $$\nPerforming the multiplications:\n$$ 103.64 \\times 0.4 = 41.456 $$\n$$ 98.92 \\times 0.6 = 59.352 $$\nAdding these products gives the exact imputed price:\n$$ P(540) = 41.456 + 59.352 = 100.808 $$\nThe problem requires the answer to be rounded to $4$ significant figures. The calculated value is $100.808$. The first four significant digits are $1$, $0$, $0$, and $8$. The fifth significant digit is $0$, which is less than $5$. Therefore, we do not round up the last significant digit.\nThe resulting price, rounded to $4$ significant figures, is $100.8$.", "answer": "$$\n\\boxed{100.8}\n$$"}, {"introduction": "Building on the linear case, this practice explores what happens when we have an additional data point, allowing for a more nuanced, non-linear model. We will construct a quadratic path for a firm's cash balance over a fiscal quarter using three discrete observations [@problem_id:2405264]. This exercise goes beyond simple interpolation by requiring you to analyze the resulting polynomial to find its minimum value, demonstrating how these models can be used for critical business analysis and optimization.", "id": "2405264", "problem": "A firm’s cash balance $B(t)$, measured in millions of United States Dollar (USD), is observed at three times during a standard $13$-week fiscal quarter. At the start of the quarter ($t=0$ weeks), the balance is $9.5$. At mid-quarter ($t=6.5$ weeks), the balance is $6.2$. At the end of the quarter ($t=13$ weeks), the balance is $11.3$. Assume that over the quarter the balance $B(t)$ varies smoothly and is exactly represented by a quadratic polynomial in $t$ that coincides with these three observations.\n\nDetermine the time $t_{\\min}$ in weeks within the interval $[0,13]$ at which the balance attains its minimum value under this quadratic model. Provide only the numerical value of $t_{\\min}$, expressed in weeks, and round your answer to four significant figures.", "solution": "The problem will first be subjected to rigorous validation.\n\nStep 1: Extract Givens\nThe givens provided in the problem statement are as follows:\n- A firm’s cash balance is denoted by $B(t)$, measured in millions of USD.\n- Time $t$ is measured in weeks.\n- The fiscal quarter is $13$ weeks long, so the domain of interest for $t$ is the interval $[0, 13]$.\n- At $t=0$ weeks, the balance is $B(0) = 9.5$.\n- At $t=6.5$ weeks, the balance is $B(6.5) = 6.2$.\n- At $t=13$ weeks, the balance is $B(13) = 11.3$.\n- The function $B(t)$ is assumed to be a quadratic polynomial in $t$.\n- The objective is to find the time $t_{\\min}$ within $[0,13]$ at which the balance is minimum.\n- The final answer for $t_{\\min}$ must be a numerical value rounded to four significant figures.\n\nStep 2: Validate Using Extracted Givens\nThe problem is evaluated against the required criteria:\n- **Scientifically Grounded**: The problem is a mathematical modeling exercise. Using a polynomial to interpolate a finite set of data points is a standard and fundamental technique in numerical analysis and applied mathematics. It does not violate any scientific principles.\n- **Well-Posed**: The problem provides three distinct data points $(t, B(t))$, which uniquely determine a polynomial of degree at most two. A quadratic function has a single extremum (a vertex), which can be found analytically. The request is to find the time of the minimum within a specified closed interval. The problem is well-defined and has a unique solution.\n- **Objective**: The problem statement is composed of objective, quantifiable data and a clear, unambiguous modeling assumption (\"is exactly represented by a quadratic polynomial\"). There is no subjective or opinion-based language.\n\nThe problem does not exhibit any of the flaws listed for invalidation. It is mathematically sound, complete, and unambiguous.\n\nStep 3: Verdict and Action\nThe problem is deemed **valid**. A solution will be derived.\n\nThe balance $B(t)$ is modeled by a quadratic polynomial of the form:\n$$B(t) = at^2 + bt + c$$\nwhere $a$, $b$, and $c$ are constants to be determined. We use the three given data points to establish a system of linear equations.\n\nThe data points are $(t_0, B_0) = (0, 9.5)$, $(t_1, B_1) = (6.5, 6.2)$, and $(t_2, B_2) = (13, 11.3)$.\n\n1.  For the point $(0, 9.5)$:\n    $$B(0) = a(0)^2 + b(0) + c = 9.5$$\n    This immediately yields $c = 9.5$.\n\n2.  For the point $(6.5, 6.2)$:\n    $$B(6.5) = a(6.5)^2 + b(6.5) + 9.5 = 6.2$$\n    $$a(42.25) + b(6.5) = 6.2 - 9.5$$\n    $$42.25a + 6.5b = -3.3$$\n    It is computationally advantageous to use fractions. $t_1 = 6.5 = \\frac{13}{2}$, so $t_1^2 = \\frac{169}{4} = 42.25$.\n    $$\\frac{169}{4}a + \\frac{13}{2}b = -\\frac{33}{10}$$\n\n3.  For the point $(13, 11.3)$:\n    $$B(13) = a(13)^2 + b(13) + 9.5 = 11.3$$\n    $$a(169) + b(13) = 11.3 - 9.5$$\n    $$169a + 13b = 1.8$$\n    Using fractions, $1.8 = \\frac{18}{10} = \\frac{9}{5}$.\n    $$169a + 13b = \\frac{9}{5}$$\n\nWe now have a system of two linear equations for $a$ and $b$:\n(I) $\\frac{169}{4}a + \\frac{13}{2}b = -\\frac{33}{10}$\n(II) $169a + 13b = \\frac{9}{5}$\n\nFrom equation (II), we can multiply by $\\frac{1}{13}$:\n$$13a + b = \\frac{9}{5 \\times 13} = \\frac{9}{65}$$\nSo, $b = \\frac{9}{65} - 13a$.\n\nLet us multiply equation (I) by $4$:\n$$169a + 26b = -\\frac{33 \\times 4}{10} = -\\frac{132}{10} = -\\frac{66}{5}$$\nThis is equation (I').\nFrom equation (II), we can multiply by $2$:\n$$338a + 26b = \\frac{18}{5}$$\nThis is equation (II').\n\nSubtracting (I') from (II'):\n$$(338a - 169a) + (26b - 26b) = \\frac{18}{5} - (-\\frac{66}{5})$$\n$$169a = \\frac{18 + 66}{5} = \\frac{84}{5}$$\n$$a = \\frac{84}{5 \\times 169} = \\frac{84}{845}$$\n\nNow, we find $b$ using $169a + 13b = \\frac{9}{5}$:\n$$169\\left(\\frac{84}{845}\\right) + 13b = \\frac{9}{5}$$\n$$\\frac{169 \\times 84}{5 \\times 169} + 13b = \\frac{9}{5}$$\n$$\\frac{84}{5} + 13b = \\frac{9}{5}$$\n$$13b = \\frac{9}{5} - \\frac{84}{5} = -\\frac{75}{5} = -15$$\n$$b = -\\frac{15}{13}$$\n\nThus, the quadratic polynomial is:\n$$B(t) = \\frac{84}{845}t^2 - \\frac{15}{13}t + 9.5$$\nTo find the time $t_{\\min}$ at which the balance is minimum, we must find the vertex of this parabola. The time coordinate of the vertex of a parabola $y = at^2+bt+c$ is given by $t = -\\frac{b}{2a}$. Since the coefficient $a = \\frac{84}{845} > 0$, the parabola opens upwards, and its vertex corresponds to a global minimum.\n\n$$t_{\\min} = -\\frac{-\\frac{15}{13}}{2 \\left(\\frac{84}{845}\\right)} = \\frac{\\frac{15}{13}}{\\frac{168}{845}}$$\nNoting that $845 = 5 \\times 169 = 5 \\times 13^2$, we can simplify:\n$$t_{\\min} = \\frac{15}{13} \\times \\frac{845}{168} = \\frac{15}{13} \\times \\frac{5 \\times 13^2}{168} = \\frac{15 \\times 5 \\times 13}{168} = \\frac{975}{168}$$\nTo simplify the fraction, we find the greatest common divisor of the numerator and denominator. Both are divisible by $3$:\n$975 = 3 \\times 325$\n$168 = 3 \\times 56$\n$$t_{\\min} = \\frac{325}{56}$$\nNow we compute the numerical value:\n$$t_{\\min} = \\frac{325}{56} \\approx 5.8035714...$$\nThe calculated time $t_{\\min}$ is within the specified interval $[0, 13]$.\nThe problem requires the answer to be rounded to four significant figures. The first four significant figures are $5$, $8$, $0$, and $3$. The fifth digit is $5$, which requires rounding up the last significant digit.\nTherefore, $t_{\\min} \\approx 5.804$.", "answer": "$$\\boxed{5.804}$$"}, {"introduction": "While powerful, high-degree polynomial interpolation can suffer from severe instability, a phenomenon known as Runge's phenomenon. This coding-based practice dives into this critical issue by having you approximate a smooth, realistic implied volatility smile using an increasing number of interpolation points [@problem_id:2405227]. You will compare the potentially unstable results from simple equispaced nodes with the remarkably stable and accurate results from Chebyshev nodes, revealing why a thoughtful choice of sample points is paramount in practical applications.", "id": "2405227", "problem": "Consider the problem of approximating an implied volatility smile as a function of normalized log-moneyness on a bounded interval. Let the ground-truth implied volatility function be the smooth mapping $\\sigma:[-1,1]\\to\\mathbb{R}_{+}$ defined by\n$$\n\\sigma(x)=a+\\frac{b}{1+c x^{2}}+\\frac{d\\,x}{1+e x^{2}},\n$$\nwith parameters $a=0.20$, $b=0.25$, $c=25$, $d=-0.10$, and $e=4$. This function represents a stylized volatility smile with a central peak and a mild negative skew, and satisfies $\\sigma(x)&gt;0$ for all $x\\in[-1,1]$.\n\nFor an integer polynomial degree $n\\ge 0$, define $m=n+1$ interpolation nodes $\\{x_i\\}_{i=0}^{m-1}$ on $[-1,1]$, construct the corresponding function values $y_i=\\sigma(x_i)$, and form the unique degree-$n$ Lagrange interpolation polynomial $p(x)$ that satisfies $p(x_i)=y_i$ for all $i$. Consider two distinct choices of nodes:\n- Equispaced nodes: $x_i=-1+\\dfrac{2i}{m-1}$ for $i\\in\\{0,1,\\dots,m-1\\}$.\n- Chebyshev nodes of the first kind: $x_i=\\cos\\!\\left(\\dfrac{2i+1}{2m}\\pi\\right)$ for $i\\in\\{0,1,\\dots,m-1\\}$.\n\nEvaluate stability and accuracy on a uniform evaluation grid $\\mathcal{G}$ of size $N=2001$ over $[-1,1]$, that is, $\\mathcal{G}=\\left\\{-1+\\dfrac{2j}{N-1}:j\\in\\{0,1,\\dots,N-1\\}\\right\\}$. For each degree $n$ and for each node choice, compute:\n- The root mean squared error (RMSE), defined as $\\sqrt{\\dfrac{1}{N}\\sum_{x\\in\\mathcal{G}}\\left(p(x)-\\sigma(x)\\right)^{2}}$.\n- The maximum absolute error, defined as $\\max_{x\\in\\mathcal{G}}\\left|p(x)-\\sigma(x)\\right|$.\n- The count of negative interpolated values on the grid, defined as $\\#\\{x\\in\\mathcal{G}:p(x)\\le 0\\}$.\n\nFor each test case below, report the following five quantities in order:\n$F$, $C_{\\text{equi}}$, $C_{\\text{cheb}}$, $E_{\\text{equi}}$, $E_{\\text{cheb}}$, where\n- $F$ is the improvement factor $F=\\dfrac{\\text{RMSE}_{\\text{equi}}}{\\text{RMSE}_{\\text{cheb}}}$,\n- $C_{\\text{equi}}$ is the integer count of grid points where the equispaced-node interpolant is nonpositive,\n- $C_{\\text{cheb}}$ is the integer count of grid points where the Chebyshev-node interpolant is nonpositive,\n- $E_{\\text{equi}}$ is the maximum absolute error of the equispaced-node interpolant,\n- $E_{\\text{cheb}}$ is the maximum absolute error of the Chebyshev-node interpolant.\n\nAll floating-point outputs must be rounded to $6$ decimal places. All integer outputs must be exact integers.\n\nTest suite:\n- Case A (happy path with clear improvement): $n=16$.\n- Case B (moderate degree): $n=8$.\n- Case C (extreme degree challenging stability): $n=24$.\n- Case D (low degree boundary case): $n=2$.\n\nYour program should produce a single line of output containing the results for the test cases in the order A, B, C, D, aggregated as a Python-style list of per-case five-element lists, with floating-point numbers rounded to $6$ decimals and integers unrounded. The program must not read any input and must not produce any additional text beyond this single line.", "solution": "The problem statement has been critically evaluated and is determined to be **valid**. It is a well-posed, scientifically grounded, and objective problem in numerical analysis, applied to a standard model in computational finance. All necessary parameters and definitions are provided, and there are no internal contradictions or violations of scientific principles. We may, therefore, proceed with the derivation of a solution.\n\nThe objective is to analyze the performance of Lagrange polynomial interpolation for approximating a stylized implied volatility function, $\\sigma(x)$, on the interval $[-1, 1]$. The performance is compared for two different choices of interpolation nodes: equispaced nodes and Chebyshev nodes.\n\nThe ground-truth function is given by\n$$\n\\sigma(x) = a + \\frac{b}{1+c x^{2}} + \\frac{d\\,x}{1+e x^{2}}\n$$\nwith constant parameters $a=0.20$, $b=0.25$, $c=25$, $d=-0.10$, and $e=4$. This function is smooth and strictly positive on the domain $x \\in [-1, 1]$.\n\nFor a given polynomial degree $n$, we construct an interpolating polynomial $p(x)$ of degree at most $n$ that passes through a set of $m=n+1$ points $\\{ (x_i, y_i) \\}_{i=0}^{m-1}$, where $y_i = \\sigma(x_i)$. The uniqueness of such a polynomial is guaranteed.\n\nThe two choices for interpolation nodes $\\{x_i\\}$ are:\n$1$. **Equispaced nodes**: These are defined as $x_i = -1 + \\frac{2i}{m-1}$ for $i \\in \\{0, 1, \\dots, m-1\\}$. While simple to construct, polynomial interpolation at these nodes is known to be unstable for high degrees, leading to large oscillations near the endpoints of the interval. This is the well-documented Runge phenomenon.\n$2$. **Chebyshev nodes of the first kind**: These are defined as the roots of the degree-$m$ Chebyshev polynomial $T_m(x)$, given by $x_i = \\cos\\left(\\frac{2i+1}{2m}\\pi\\right)$ for $i \\in \\{0, 1, \\dots, m-1\\}$. These nodes are more densely clustered near the endpoints $x = \\pm 1$, a property that can be proven to minimize the maximum interpolation error over the class of all possible node choices and to mitigate the Runge phenomenon, yielding a much more stable and accurate approximation.\n\nThe algorithmic procedure to solve the problem for each test case, defined by a degree $n$, is as follows:\n\nFirst, we define a fine, uniform evaluation grid $\\mathcal{G} = \\left\\{-1+\\frac{2j}{N-1}:j \\in \\{0, 1, \\dots, N-1\\}\\right\\}$ with $N=2001$ points.\n\nFor each of the two node types (equispaced and Chebyshev):\n- We generate the $m=n+1$ interpolation nodes $\\{x_i\\}$.\n- We compute the corresponding function values $y_i = \\sigma(x_i)$.\n- We construct the Lagrange interpolating polynomial $p(x)$. For computational stability and efficiency, we use the barycentric form of the interpolating polynomial. The `scipy.interpolate.BarycentricInterpolator` class is suitable for this purpose.\n- We evaluate the resulting polynomial $p(x)$ and the true function $\\sigma(x)$ on all points of the grid $\\mathcal{G}$.\n- Based on these evaluations, we compute three metrics:\n    - The Root Mean Squared Error (RMSE): $\\sqrt{\\frac{1}{N}\\sum_{x\\in\\mathcal{G}}\\left(p(x)-\\sigma(x)\\right)^{2}}$.\n    - The Maximum Absolute Error: $E = \\max_{x\\in\\mathcal{G}}\\left|p(x)-\\sigma(x)\\right|$.\n    - The count of nonpositive values: $C = \\#\\{x\\in\\mathcal{G}:p(x)\\le 0\\}$. This metric is particularly relevant as volatility must be positive, and nonpositive interpolated values are a clear sign of instability and model failure.\n\nFinally, for each test case corresponding to a degree $n \\in \\{16, 8, 24, 2\\}$, we calculate the five required quantities:\n- The improvement factor $F = \\frac{\\text{RMSE}_{\\text{equi}}}{\\text{RMSE}_{\\text{cheb}}}$.\n- The nonpositive value counts for both node choices, $C_{\\text{equi}}$ and $C_{\\text{cheb}}$.\n- The maximum absolute errors for both node choices, $E_{\\text{equi}}$ and $E_{\\text{cheb}}$.\n\nThe floating-point results ($F$, $E_{\\text{equi}}$, $E_{\\text{cheb}}$) are rounded to $6$ decimal places, while the integer counts ($C_{\\text{equi}}$, $C_{\\text{cheb}}$) are reported exactly. The final output is an aggregation of these five-element lists for all test cases, presented in the specified order A, B, C, D.", "answer": "```python\nimport numpy as np\nfrom scipy.interpolate import BarycentricInterpolator\n\ndef solve():\n    \"\"\"\n    Solves the interpolation problem for all test cases and prints the result.\n    \"\"\"\n    # Parameters for the volatility function sigma(x)\n    A = 0.20\n    B = 0.25\n    C = 25\n    D = -0.10\n    E = 4\n    \n    # Size of the evaluation grid\n    N_GRID = 2001\n\n    def sigma(x: np.ndarray) -> np.ndarray:\n        \"\"\"\n        Calculates the ground-truth implied volatility function.\n        Vectorized to operate on NumPy arrays.\n        \"\"\"\n        return A + B / (1 + C * x**2) + D * x / (1 + E * x**2)\n\n    def compute_metrics(n: int, node_type: str) -> tuple[float, float, int]:\n        \"\"\"\n        Computes interpolation errors and stability metrics for a given degree and node type.\n        \n        Args:\n            n: The polynomial degree.\n            node_type: A string, either 'equispaced' or 'chebyshev'.\n            \n        Returns:\n            A tuple containing (rmse, max_absolute_error, nonpositive_count).\n        \"\"\"\n        m = n + 1\n\n        # 1. Generate interpolation nodes\n        if node_type == 'equispaced':\n            interp_nodes = np.linspace(-1, 1, m)\n        elif node_type == 'chebyshev':\n            i = np.arange(m)\n            interp_nodes = np.cos((2 * i + 1) * np.pi / (2 * m))\n        else:\n            raise ValueError(\"Unknown node type specified.\")\n\n        # 2. Compute function values at nodes\n        interp_values = sigma(interp_nodes)\n\n        # 3. Construct the barycentric interpolator\n        poly = BarycentricInterpolator(interp_nodes, interp_values)\n\n        # 4. Define evaluation grid and evaluate the interpolant and true function\n        eval_grid = np.linspace(-1, 1, N_GRID)\n        p_vals = poly(eval_grid)\n        sigma_vals = sigma(eval_grid)\n\n        # 5. Compute performance and stability metrics\n        errors = p_vals - sigma_vals\n        rmse = np.sqrt(np.mean(errors**2))\n        max_abs_error = np.max(np.abs(errors))\n        nonpositive_count = np.sum(p_vals <= 0)\n\n        return rmse, max_abs_error, int(nonpositive_count)\n\n    # Test cases are defined by the polynomial degree n. Order: A, B, C, D.\n    test_cases_n = [16, 8, 24, 2]\n    \n    all_results = []\n\n    for n in test_cases_n:\n        # Compute metrics for equispaced nodes\n        rmse_equi, max_err_equi, count_equi = compute_metrics(n, 'equispaced')\n        \n        # Compute metrics for Chebyshev nodes\n        rmse_cheb, max_err_cheb, count_cheb = compute_metrics(n, 'chebyshev')\n\n        # Calculate improvement factor. Handle case where denominator is zero.\n        if rmse_cheb > 0:\n            improvement_factor = rmse_equi / rmse_cheb\n        else:\n            improvement_factor = 1.0 if rmse_equi == 0 else float('inf')\n\n        # Assemble the results for the current test case, rounding floats\n        # Order: F, C_equi, C_cheb, E_equi, E_cheb\n        case_result = [\n            round(improvement_factor, 6),\n            count_equi,\n            count_cheb,\n            round(max_err_equi, 6),\n            round(max_err_cheb, 6)\n        ]\n        all_results.append(case_result)\n    \n    # Format the final output string as a list of lists, without spaces.\n    # e.g., [[val1,val2,...],[val1,val2,...]]\n    final_output_str = str(all_results).replace(\" \", \"\")\n    print(final_output_str)\n\nsolve()\n```"}]}