{"hands_on_practices": [{"introduction": "Many real-world decisions, especially in finance and project management, are governed by logical rules: projects might be mutually exclusive, or one might be a prerequisite for another. A core skill in linear programming is translating these qualitative conditions into the quantitative language of mathematics. This exercise [@problem_id:2406839] provides a practical scenario in capital budgeting to help you master the art of converting logical requirements into the linear constraints of an Integer Linear Programming model.", "id": "2406839", "problem": "A capital budgeting unit in a financial firm must decide which investment projects to undertake in the next period. There are four candidate projects, labeled $A$, $B$, $C$, and $D$. For each project $i \\in \\{A,B,C,D\\}$, define a binary decision variable $x_i \\in \\{0,1\\}$, where $x_i=1$ if and only if project $i$ is selected and $x_i=0$ otherwise. The selection must satisfy the following logical requirements, which the firm intends to encode in an Integer Linear Programming (ILP) model:\n\n(i) Projects $A$ and $B$ are mutually exclusive.\n\n(ii) Project $C$ can be undertaken only if project $B$ is undertaken.\n\n(iii) At least one of projects $A$ or $D$ must be chosen.\n\n(iv) At most $2$ projects can be undertaken in total.\n\nWhich one of the following sets of linear constraints, used together with the binary restrictions $x_A,x_B,x_C,x_D \\in \\{0,1\\}$, correctly models all four requirements?\n\nA. \n$$\n\\begin{aligned}\n&x_A + x_B \\le 1,\\\\\n&x_C \\le x_B,\\\\\n&x_A + x_D \\ge 1,\\\\\n&x_A + x_B + x_C + x_D \\le 2.\n\\end{aligned}\n$$\n\nB.\n$$\n\\begin{aligned}\n&x_A + x_B \\le 1,\\\\\n&x_B \\le x_C,\\\\\n&x_A + x_D \\ge 1,\\\\\n&x_A + x_B + x_C + x_D \\le 2.\n\\end{aligned}\n$$\n\nC.\n$$\n\\begin{aligned}\n&x_A + x_B \\ge 1,\\\\\n&x_C \\le x_B,\\\\\n&x_A + x_D = 1,\\\\\n&x_A + x_B + x_C + x_D \\le 2.\n\\end{aligned}\n$$\n\nD.\n$$\n\\begin{aligned}\n&x_A x_B = 0,\\\\\n&x_C \\ge x_B,\\\\\n&x_A + x_D \\ge 1,\\\\\n&x_A + x_B + x_C + x_D = 2.\n\\end{aligned}\n$$", "solution": "The problem statement must first undergo a rigorous validation to ensure it is scientifically sound, self-contained, and well-posed before any attempt at a solution.\n\n**Step 1: Extract Givens**\n\nThe problem provides the following data and definitions:\n- Four candidate projects: $A$, $B$, $C$, $D$.\n- Binary decision variables: $x_i \\in \\{0,1\\}$ for $i \\in \\{A,B,C,D\\}$. $x_i=1$ if project $i$ is selected, and $x_i=0$ otherwise.\n- Four logical requirements to be encoded in an Integer Linear Programming (ILP) model:\n    (i) Projects $A$ and $B$ are mutually exclusive.\n    (ii) Project $C$ can be undertaken only if project $B$ is undertaken.\n    (iii) At least one of projects $A$ or $D$ must be chosen.\n    (iv) At most $2$ projects can be undertaken in total.\n\n**Step 2: Validate Using Extracted Givens**\n\nThe problem is subjected to scrutiny based on established principles of mathematical modeling and operations research.\n\n- **Scientific Grounding**: The problem resides within the standard framework of Integer Linear Programming, a well-established discipline in applied mathematics and computational economics. The task of translating logical conditions into linear inequalities is a fundamental and valid exercise in this field.\n- **Well-Posedness**: The problem asks for the correct set of linear constraints to represent a given set of logical conditions. This is a clearly defined task with a determinable correct answer. The logical conditions are not inherently contradictory. For instance, selecting project $D$ alone ($x_D=1$, $x_A=x_B=x_C=0$) satisfies all four requirements: (i) $0+0=0 \\le 1$; (ii) $x_C=0$, so the condition is trivially met; (iii) $0+1=1 \\ge 1$; (iv) total of $1$ project is $\\le 2$. Thus, a feasible solution space exists.\n- **Objectivity**: The problem statement uses precise, unambiguous language common in mathematical and financial modeling. There are no subjective or opinion-based elements.\n\nThe problem exhibits no flaws. It is not scientifically unsound, non-formalizable, incomplete, unrealistic, or ill-posed. It is a standard problem in the formulation of ILP models.\n\n**Step 3: Verdict and Action**\n\nThe problem statement is **valid**. We may proceed with the derivation and analysis.\n\n**Derivation of Constraints**\n\nWe will translate each logical requirement into a linear inequality constraint involving the binary variables $x_A, x_B, x_C, x_D$.\n\n(i) **Projects $A$ and $B$ are mutually exclusive.**\nThis means that it is not possible to select both projects simultaneously. If $x_A=1$, then $x_B$ must be $0$. If $x_B=1$, then $x_A$ must be $0$. It is also permissible for both to be $0$. The sum of these binary variables cannot exceed $1$.\nThis is correctly captured by the linear inequality:\n$$x_A + x_B \\le 1$$\n\n(ii) **Project $C$ can be undertaken only if project $B$ is undertaken.**\nThis is a conditional statement: \"If $C$ is undertaken, then $B$ must be undertaken.\" In terms of the decision variables, if $x_C=1$, then we must have $x_B=1$. If $x_C=0$, this requirement imposes no restriction on $x_B$. Let's test the inequality $x_C \\le x_B$:\n- If $x_C=1$, the inequality becomes $1 \\le x_B$. Since $x_B$ is binary, this forces $x_B=1$. This is correct.\n- If $x_C=0$, the inequality becomes $0 \\le x_B$. This is always true for a binary variable, allowing $x_B$ to be either $0$ or $1$. This is also correct.\nThus, the correct constraint is:\n$$x_C \\le x_B$$\n\n(iii) **At least one of projects $A$ or $D$ must be chosen.**\nThis means that we must select project $A$, or project $D$, or possibly both. The sum of the corresponding decision variables must be at least $1$.\nThe correct constraint is:\n$$x_A + x_D \\ge 1$$\n\n(iv) **At most $2$ projects can be undertaken in total.**\nThe total number of selected projects is the sum of all decision variables, $x_A + x_B + x_C + x_D$. This sum must not exceed $2$.\nThe correct constraint is:\n$$x_A + x_B + x_C + x_D \\le 2$$\n\nCombining these results, the correct set of linear constraints is:\n$$\n\\begin{aligned}\n&x_A + x_B \\le 1\\\\\n&x_C \\le x_B\\\\\n&x_A + x_D \\ge 1\\\\\n&x_A + x_B + x_C + x_D \\le 2\n\\end{aligned}\n$$\n\n**Evaluation of Provided Options**\n\nNow, we evaluate each option against our derived set of correct constraints.\n\n**A.**\n$$\n\\begin{aligned}\n&x_A + x_B \\le 1\\\\\n&x_C \\le x_B\\\\\n&x_A + x_D \\ge 1\\\\\n&x_A + x_B + x_C + x_D \\le 2\n\\end{aligned}\n$$\nThis set of constraints perfectly matches the one we derived from first principles. Each constraint correctly models the corresponding logical requirement.\nVerdict: **Correct**.\n\n**B.**\n$$\n\\begin{aligned}\n&x_A + x_B \\le 1\\\\\n&x_B \\le x_C\\\\\n&x_A + x_D \\ge 1\\\\\n&x_A + x_B + x_C + x_D \\le 2\n\\end{aligned}\n$$\nThe second constraint, $x_B \\le x_C$, models the condition \"Project $B$ can be undertaken only if project $C$ is undertaken.\" This is the inverse of requirement (ii). Therefore, this option is incorrect.\nVerdict: **Incorrect**.\n\n**C.**\n$$\n\\begin{aligned}\n&x_A + x_B \\ge 1\\\\\n&x_C \\le x_B\\\\\n&x_A + x_D = 1\\\\\n&x_A + x_B + x_C + x_D \\le 2\n\\end{aligned}\n$$\nThe first constraint, $x_A + x_B \\ge 1$, models \"at least one of $A$ or $B$ must be chosen,\" which contradicts the mutual exclusivity of requirement (i). The third constraint, $x_A + x_D = 1$, models \"exactly one of $A$ or $D$ must be chosen,\" which is more restrictive than requirement (iii), \"at least one.\" Both of these constraints are incorrect.\nVerdict: **Incorrect**.\n\n**D.**\n$$\n\\begin{aligned}\n&x_A x_B = 0\\\\\n&x_C \\ge x_B\\\\\n&x_A + x_D \\ge 1\\\\\n&x_A + x_B + x_C + x_D = 2\n\\end{aligned}\n$$\nThe first constraint, $x_A x_B = 0$, is a **non-linear** constraint. The problem specifies an Integer **Linear** Programming (ILP) model, for which all constraints must be linear. The second constraint, $x_C \\ge x_B$, is equivalent to $x_B \\le x_C$ and incorrectly models requirement (ii). The fourth constraint, $x_A + x_B + x_C + x_D = 2$, models \"exactly $2$ projects must be undertaken,\" which is more restrictive than requirement (iv), \"at most $2$.\" This option contains multiple errors and invalid formulations for an ILP.\nVerdict: **Incorrect**.", "answer": "$$\\boxed{A}$$"}, {"introduction": "Building on the fundamentals of logical constraints, we now tackle a common feature in economic decision-making: the fixed cost. Decisions like whether to open a new factory or launch a new product line involve a large, one-time investment, a \"yes/no\" choice that fundamentally alters the problem's cost structure. This practice [@problem_id:2406916] challenges you to formulate a classic 'make-or-buy' problem, correctly linking a binary decision variable to its capacity and fixed-cost implications.", "id": "2406916", "problem": "A single-product firm must satisfy deterministic demand $D$ over one planning period. The firm can either build a new factory and produce in-house, or buy units from an external supplier. If the firm builds the factory, it incurs a fixed cost $F$ and can produce up to capacity $K$ units at a variable cost $c$ per unit. Buying from the external supplier costs $s$ per unit and has no capacity limit. All demand must be satisfied in the period, there are no backorders and no lost sales. The firm seeks to meet demand at minimum total cost.\n\nLet $x$ denote in-house production, $z$ denote purchases from the external supplier, and $y \\in \\{0,1\\}$ indicate whether the factory is built ($y=1$) or not ($y=0$). Which of the following mixed-integer linear program (MILP) formulations correctly models this yes or no factory decision, including the large fixed cost and the capacity linkage?\n\nA.\nMinimize total cost\n$$\\min\\; c\\,x + s\\,z + F\\,y$$\nsubject to\n$$x + z = D,$$\n$$x \\le K\\,y,$$\n$$x \\ge 0,\\; z \\ge 0,\\; y \\in \\{0,1\\}.$$\n\nB.\nMinimize total cost\n$$\\min\\; c\\,x + s\\,z + F\\,y$$\nsubject to\n$$x + z = D,$$\n$$x \\ge K\\,y,$$\n$$x \\ge 0,\\; z \\ge 0,\\; y \\in \\{0,1\\}.$$\n\nC.\nMinimize total cost\n$$\\min\\; c\\,x + s\\,z + F\\,x$$\nsubject to\n$$x + z = D,$$\n$$x \\le K,$$\n$$x \\ge 0,\\; z \\ge 0,\\; y \\in \\{0,1\\}.$$\n\nD.\nMinimize total cost\n$$\\min\\; c\\,x + s\\,z$$\nsubject to\n$$x + z = D,$$\n$$x \\le K\\,y + K,$$\n$$x \\ge 0,\\; z \\ge 0,\\; y \\in \\{0,1\\}.$$", "solution": "The problem statement will first be subjected to a rigorous validation process.\n\n**Step 1: Extract Givens**\n\nThe problem provides the following information:\n-   Demand to be satisfied: $D$ (deterministic).\n-   Planning periods: $1$.\n-   Fixed cost to build factory: $F$.\n-   Factory capacity: $K$ units.\n-   Variable cost of in-house production: $c$ per unit.\n-   Cost of external supply: $s$ per unit.\n-   External supply capacity: unlimited.\n-   Requirement: All demand must be satisfied. No backorders or lost sales.\n-   Objective: Minimize total cost.\n-   Decision variables:\n    -   $x$: quantity produced in-house.\n    -   $z$: quantity purchased from external supplier.\n    -   $y$: binary variable, $y \\in \\{0,1\\}$, where $y=1$ indicates the factory is built, and $y=0$ indicates it is not.\n\n**Step 2: Validate Using Extracted Givens**\n\n1.  **Scientific Groundedness**: The problem is a classic \"make-or-buy\" or \"fixed-charge\" problem from the field of operations research, specifically mixed-integer linear programming. It is firmly based on established mathematical modeling principles. It is scientifically valid.\n2.  **Well-Posedness**: The objective is clearly defined (minimize cost), and the relationships between decisions and costs are specified. The problem asks for a mathematical formulation, which is a standard and well-posed task in this domain.\n3.  **Objectivity**: The problem is stated using precise, objective terminology common in mathematics and economics. There is no subjective or ambiguous language.\n4.  **Completeness**: The problem provides all necessary parameters ($D, F, K, c, s$) and decision variables ($x, z, y$) to construct the requested mathematical model. It is self-contained.\n5.  **Realism and Feasibility**: While simplifying assumptions such as deterministic demand are made, these are standard in introductory models of this type and do not represent a scientific or logical flaw. The construct is a valid abstraction for decision analysis.\n\n**Step 3: Verdict and Action**\n\nThe problem statement is valid. It is a well-defined, standard problem in mixed-integer linear programming. I will proceed to derive the correct formulation and evaluate the given options.\n\n**Derivation of the Correct Formulation**\n\nThe model must capture three aspects: the total cost, the demand satisfaction, and the logic of the factory construction decision.\n\n1.  **Objective Function**: The goal is to minimize total cost. The total cost is the sum of the variable production cost, the external purchase cost, and the fixed factory cost.\n    -   Variable production cost: $c \\cdot x$.\n    -   External purchase cost: $s \\cdot z$.\n    -   Fixed factory cost: This cost $F$ is incurred only if the factory is built. The binary variable $y$ is designed for this: the cost is $F$ if $y=1$ and $0$ if $y=0$. This is mathematically expressed as $F \\cdot y$.\n    -   Thus, the objective function to minimize is: $\\min\\; c\\,x + s\\,z + F\\,y$.\n\n2.  **Constraints**:\n    -   **Demand Satisfaction**: The total quantity of units sourced from in-house production ($x$) and external supply ($z$) must exactly meet the demand $D$. Since costs are positive, any production in excess of demand would be suboptimal, so the constraint can be stated as an equality: $x + z = D$.\n    -   **Capacity and Factory Logic**: This is the critical linkage. In-house production ($x$) is possible only if the factory is built ($y=1$).\n        -   If $y=0$ (factory not built), then production must be zero: $x=0$.\n        -   If $y=1$ (factory built), then production is limited by the capacity $K$: $x \\le K$.\n        These two conditions must be captured by a single constraint (or set of constraints) that is linear. The standard way to model this is with the \"big-M\" constraint: $x \\le M \\cdot y$. Here, the parameter $K$ is a known upper bound on production $x$, so it serves perfectly as $M$. The constraint is $x \\le K \\cdot y$.\n        Let us verify its logic:\n        -   If $y=0$, the constraint becomes $x \\le K \\cdot 0$, which simplifies to $x \\le 0$. Combined with the non-negativity constraint $x \\ge 0$, this correctly forces $x=0$.\n        -   If $y=1$, the constraint becomes $x \\le K \\cdot 1$, or $x \\le K$. This correctly imposes the production capacity limit.\n    -   **Variable Domains**: The production and purchase quantities cannot be negative, and the factory decision is binary.\n        -   $x \\ge 0$.\n        -   $z \\ge 0$.\n        -   $y \\in \\{0, 1\\}$.\n\n**Complete Formulation**:\nThe correct MILP formulation is:\nMinimize total cost\n$$\\min\\; c\\,x + s\\,z + F\\,y$$\nsubject to\n$$x + z = D,$$\n$$x \\le K\\,y,$$\n$$x \\ge 0,\\; z \\ge 0,\\; y \\in \\{0,1\\}.$$\n\n**Evaluation of Options**\n\n-   **Option A**:\n    $$\\min\\; c\\,x + s\\,z + F\\,y$$\n    subject to\n    $$x + z = D,$$\n    $$x \\le K\\,y,$$\n    $$x \\ge 0,\\; z \\ge 0,\\; y \\in \\{0,1\\}.$$\n    This formulation is identical to the one derived from first principles. The objective function correctly sums all costs. The first constraint ensures demand satisfaction. The second constraint, $x \\le K\\,y$, correctly links the production quantity $x$ to the factory decision variable $y$. If $y=0$, $x=0$; if $y=1$, $x \\le K$. The domain constraints are correct.\n    **Verdict: Correct.**\n\n-   **Option B**:\n    $$\\min\\; c\\,x + s\\,z + F\\,y$$\n    subject to\n    $$x + z = D,$$\n    $$x \\ge K\\,y,$$\n    $$x \\ge 0,\\; z \\ge 0,\\; y \\in \\{0,1\\}.$$\n    The constraint $x \\ge K\\,y$ is fundamentally flawed. If the factory is built ($y=1$), it incorrectly forces production to be at least the capacity $K$ ($x \\ge K$), whereas the problem states production is *up to* capacity. If the factory is not built ($y=0$), the constraint becomes $x \\ge 0$, which is redundant and fails to force production to be zero ($x=0$). This formulation does not model the problem correctly.\n    **Verdict: Incorrect.**\n\n-   **Option C**:\n    $$\\min\\; c\\,x + s\\,z + F\\,x$$\n    subject to\n    $$x + z = D,$$\n    $$x \\le K,$$\n    $$x \\ge 0,\\; z \\ge 0,\\; y \\in \\{0,1\\}.$$\n    This formulation contains multiple errors. The objective function models the fixed cost as $F \\cdot x$, as if $F$ were a variable cost per unit of production, which contradicts the definition of $F$ as a fixed cost. Furthermore, the decision variable $y$ is \"dangling\"—it appears in the list of variables but does not feature in the objective function or any constraint. Therefore, it has no influence on the solution. The constraint $x \\le K$ is always active, incorrectly implying that capacity $K$ is available regardless of whether the factory is built.\n    **Verdict: Incorrect.**\n\n-   **Option D**:\n    $$\\min\\; c\\,x + s\\,z$$\n    subject to\n    $$x + z = D,$$\n    $$x \\le K\\,y + K,$$\n    $$x \\ge 0,\\; z \\ge 0,\\; y \\in \\{0,1\\}.$$\n    This formulation is also flawed. First, the objective function completely omits the fixed cost $F \\cdot y$, meaning the cost of building the factory is never accounted for. Second, the capacity constraint $x \\le K\\,y + K$ is nonsensical. If $y=0$ (factory not built), it becomes $x \\le K$, incorrectly allowing in-house production. If $y=1$ (factory built), it becomes $x \\le 2K$, which is a violation of the stated capacity $K$.\n    **Verdict: Incorrect.**", "answer": "$$\\boxed{A}$$"}, {"introduction": "After learning to formulate models, the next step is to solve them and extract meaningful economic insights. This hands-on practice [@problem_id:2406884] puts you in the role of an analyst solving the classic 'diet problem' using computational tools. Beyond just finding a single optimal solution, you will perform a sensitivity analysis to see how the optimal food choices and total cost react to price changes, a vital skill for practical economic and financial modeling.", "id": "2406884", "problem": "Consider a cost-minimization diet model formulated as a Linear Programming (LP) problem for five foods: avocado, chicken breast, black beans, white rice, and broccoli. Let the decision variables be the nonnegative consumption quantities in servings, denoted by $x_{A}$ (avocado), $x_{C}$ (chicken), $x_{B}$ (beans), $x_{R}$ (rice), and $x_{Br}$ (broccoli). Nutrient contributions per serving are as follows: avocado provides $240$ kilocalories, $3$ grams of protein, $22$ grams of fat, and $10$ grams of fiber; chicken provides $200$ kilocalories, $35$ grams of protein, $5$ grams of fat, and $0$ grams of fiber; beans provide $180$ kilocalories, $12$ grams of protein, $1$ gram of fat, and $12$ grams of fiber; rice provides $220$ kilocalories, $4$ grams of protein, $1$ gram of fat, and $1$ gram of fiber; broccoli provides $55$ kilocalories, $4$ grams of protein, $0$ grams of fat, and $5$ grams of fiber. The daily minimum requirements are $2000$ kilocalories, $50$ grams of protein, $44$ grams of fat, and $30$ grams of fiber. The total cost to be minimized is $c_{A} x_{A} + 2.5 x_{C} + 1.2 x_{B} + 0.6 x_{R} + 0.8 x_{Br}$, where $c_{A} \\ge 0$ is the avocado price per serving and the other prices are fixed in the same monetary unit per serving. The model is\n$$\n\\min_{x_{A},x_{C},x_{B},x_{R},x_{Br} \\ge 0} \\; c_{A} x_{A} + 2.5 x_{C} + 1.2 x_{B} + 0.6 x_{R} + 0.8 x_{Br}\n$$\nsubject to the nutrient requirements\n$$\n240 x_{A} + 200 x_{C} + 180 x_{B} + 220 x_{R} + 55 x_{Br} \\ge 2000,\n$$\n$$\n3 x_{A} + 35 x_{C} + 12 x_{B} + 4 x_{R} + 4 x_{Br} \\ge 50,\n$$\n$$\n22 x_{A} + 5 x_{C} + 1 x_{B} + 1 x_{R} + 0 x_{Br} \\ge 44,\n$$\n$$\n10 x_{A} + 0 x_{C} + 12 x_{B} + 1 x_{R} + 5 x_{Br} \\ge 30.\n$$\nAll servings are dimensionless counts of servings, and costs are in a consistent monetary unit per serving. For each specified avocado price $c_{A}$, the model has a well-defined optimal solution.\n\nTask: Perform a sensitivity analysis on the avocado objective coefficient $c_{A}$ by solving the above problem for a set of avocado prices $c_{A}$, and, for each case, return the optimal avocado quantity $x_{A}^{\\star}$ (in servings) and the optimal minimum total cost $z^{\\star}$ (in the same monetary unit). Report $x_{A}^{\\star}$ and $z^{\\star}$ rounded to $4$ decimal places.\n\nTest suite of avocado prices to be analyzed:\n- Happy-path moderate price: $c_{A} = 1.00$.\n- Low price (edge toward avocado-dominant): $c_{A} = 0.50$.\n- Mid-high price below a likely basis change: $c_{A} = 10.00$.\n- High price above a likely basis change: $c_{A} = 12.00$.\n- Very high price (edge toward excluding avocado): $c_{A} = 25.00$.\n\nFinal output format: Your program should produce a single line of output containing the results as a comma-separated list of pairs $[x_{A}^{\\star},z^{\\star}]$, enclosed in square brackets, in the exact same order as the test suite. Round each number to $4$ decimal places. For example: $[[0.0000,123.4567],[1.2345,67.8901]]$.", "solution": "Problem validation is performed first, as is mandatory.\n\nStep 1: Extract Givens\n\n- **Decision Variables**: Non-negative consumption quantities in servings: $x_{A}$ (avocado), $x_{C}$ (chicken), $x_{B}$ (beans), $x_{R}$ (rice), $x_{Br}$ (broccoli), where $x_{A}, x_{C}, x_{B}, x_{R}, x_{Br} \\ge 0$.\n- **Nutrient Contributions per serving**:\n    - Avocado: $240$ kilocalories, $3$ grams protein, $22$ grams fat, $10$ grams fiber.\n    - Chicken: $200$ kilocalories, $35$ grams protein, $5$ grams fat, $0$ grams fiber.\n    - Beans: $180$ kilocalories, $12$ grams protein, $1$ gram fat, $12$ grams fiber.\n    - Rice: $220$ kilocalories, $4$ grams protein, $1$ gram fat, $1$ gram fiber.\n    - Broccoli: $55$ kilocalories, $4$ grams protein, $0$ grams fat, $5$ grams fiber.\n- **Daily Minimum Requirements**: $\\ge 2000$ kilocalories, $\\ge 50$ grams protein, $\\ge 44$ grams fat, $\\ge 30$ grams fiber.\n- **Objective Function**: Minimize total cost $c_{A} x_{A} + 2.5 x_{C} + 1.2 x_{B} + 0.6 x_{R} + 0.8 x_{Br}$, where $c_{A} \\ge 0$.\n- **Linear Programming Model**:\n$$\n\\min_{x_{A},x_{C},x_{B},x_{R},x_{Br} \\ge 0} \\; c_{A} x_{A} + 2.5 x_{C} + 1.2 x_{B} + 0.6 x_{R} + 0.8 x_{Br}\n$$\nSubject to:\n$$\n240 x_{A} + 200 x_{C} + 180 x_{B} + 220 x_{R} + 55 x_{Br} \\ge 2000\n$$\n$$\n3 x_{A} + 35 x_{C} + 12 x_{B} + 4 x_{R} + 4 x_{Br} \\ge 50\n$$\n$$\n22 x_{A} + 5 x_{C} + 1 x_{B} + 1 x_{R} + 0 x_{Br} \\ge 44\n$$\n$$\n10 x_{A} + 0 x_{C} + 12 x_{B} + 1 x_{R} + 5 x_{Br} \\ge 30\n$$\n- **Task**: For a given set of $c_{A}$ values, find the optimal avocado quantity $x_{A}^{\\star}$ and the optimal minimum cost $z^{\\star}$, rounded to $4$ decimal places.\n- **Test Suite**: $c_{A} \\in \\{1.00, 0.50, 10.00, 12.00, 25.00\\}$.\n\nStep 2: Validate Using Extracted Givens\n\nThe problem is a classic \"diet problem\" formulated as a linear programming task. This is a standard and well-understood problem in operations research and computational economics.\n\n- **Scientifically Grounded**: The problem is based on the established mathematical theory of linear programming. The nutritional data and dietary requirements are reasonable and serve as a valid basis for the model. It does not violate any scientific principles.\n- **Well-Posed**: The problem is a standard-form linear program. The feasible region, defined by the intersection of linear inequalities, is convex and non-empty. The objective function is linear. Since the costs and decision variables are non-negative, the objective function is bounded below on the feasible region. The problem statement correctly asserts that a well-defined optimal solution exists for each specified price $c_{A}$.\n- **Objective**: The problem is specified with mathematical precision, using unambiguous variables, coefficients, and constraints. It is free of subjective claims.\n\nThe problem passes all validation criteria. It is self-contained, consistent, scientifically sound, and well-posed.\n\nStep 3: Verdict and Action\n\nThe problem is deemed **valid**. A solution will be provided.\n\nThe problem requires solving a linear programming (LP) model for several instances, each defined by a different cost coefficient $c_A$ for the variable $x_A$. This is a sensitivity analysis on an objective function coefficient.\n\nThe LP model can be expressed in matrix form. Let the vector of decision variables be $\\mathbf{x} = [x_{A}, x_{C}, x_{B}, x_{R}, x_{Br}]^T$. The objective is to minimize the total cost $z = \\mathbf{c}^T \\mathbf{x}$, where the cost vector is $\\mathbf{c} = [c_{A}, 2.5, 1.2, 0.6, 0.8]^T$.\n\nThe constraints are of the form $\\mathbf{A}\\mathbf{x} \\ge \\mathbf{b}$, where the constraint matrix $\\mathbf{A}$ and the requirements vector $\\mathbf{b}$ are given by:\n$$\n\\mathbf{A} = \\begin{pmatrix}\n240 & 200 & 180 & 220 & 55 \\\\\n3 & 35 & 12 & 4 & 4 \\\\\n22 & 5 & 1 & 1 & 0 \\\\\n10 & 0 & 12 & 1 & 5\n\\end{pmatrix},\n\\quad\n\\mathbf{b} = \\begin{pmatrix}\n2000 \\\\\n50 \\\\\n44 \\\\\n30\n\\end{pmatrix}\n$$\nThe decision variables must also satisfy the non-negativity constraint $\\mathbf{x} \\ge \\mathbf{0}$.\n\nTo solve this problem computationally, we use the `linprog` function from the `scipy.optimize` library in Python. This function is designed to solve minimization problems of the form:\nMinimize $\\mathbf{c}^T \\mathbf{x}$ subject to $\\mathbf{A}_{ub} \\mathbf{x} \\le \\mathbf{b}_{ub}$ and $\\mathbf{A}_{eq} \\mathbf{x} = \\mathbf{b}_{eq}$, with bounds on $\\mathbf{x}$.\n\nOur problem's constraints are of the \"greater than or equal to\" type, $\\mathbf{A}\\mathbf{x} \\ge \\mathbf{b}$. These must be converted to the \"less than or equal to\" form required by the `linprog` function. This is achieved by multiplying the inequality by $-1$, which reverses the inequality sign:\n$$\n\\mathbf{A}\\mathbf{x} \\ge \\mathbf{b} \\iff -\\mathbf{A}\\mathbf{x} \\le -\\mathbf{b}\n$$\nTherefore, we will pass $\\mathbf{A}_{ub} = -\\mathbf{A}$ and $\\mathbf{b}_{ub} = -\\mathbf{b}$ to the solver. The non-negativity constraint $x_i \\ge 0$ is handled by setting the `bounds` for each variable to $(0, \\infty)$.\n\nThe solution algorithm is as follows:\n1. Define the constant matrices $\\mathbf{A}$ and $\\mathbf{b}$ as NumPy arrays.\n2. Define the list of test values for the avocado price $c_A$: $\\{1.00, 0.50, 10.00, 12.00, 25.00\\}$.\n3. Iterate through each value of $c_A$ in the test suite.\n4. In each iteration, construct the corresponding cost vector $\\mathbf{c}$.\n5. Call `scipy.optimize.linprog` with the cost vector $\\mathbf{c}$, the transformed constraint matrix $-\\mathbf{A}$, the transformed requirements vector $-\\mathbf{b}$, and the non-negativity bounds. The `highs` method is a modern, efficient, and robust choice for the solver.\n6. From the result object returned by the solver, extract the optimal quantity of avocado, $x_A^\\star$, which is the first element of the solution vector $\\mathbf{x}^\\star$, and the optimal minimum cost, $z^\\star$.\n7. Store the pair $[x_A^\\star, z^\\star]$.\n8. After processing all values of $c_A$, format the collected results into a single string as specified: a list of pairs, with each numerical value rounded to $4$ decimal places.\nThis procedure systematically performs the requested sensitivity analysis and produces the required output.", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\nfrom scipy.optimize import linprog\n\ndef solve():\n    \"\"\"\n    Solves a cost-minimization diet problem for a range of avocado prices.\n\n    The problem is formulated as a Linear Program (LP) and solved using\n    scipy.optimize.linprog.\n    \"\"\"\n    \n    # Define the constant constraint matrix A and requirements vector b.\n    # The columns correspond to [avocado, chicken, beans, rice, broccoli].\n    # The rows correspond to [kilocalories, protein, fat, fiber].\n    A_mat = np.array([\n        [240.0, 200.0, 180.0, 220.0, 55.0],  # Kilocalories\n        [3.0,   35.0,  12.0,  4.0,   4.0],   # Protein (g)\n        [22.0,  5.0,   1.0,   1.0,   0.0],   # Fat (g)\n        [10.0,  0.0,   12.0,  1.0,   5.0]    # Fiber (g)\n    ])\n    \n    # Daily minimum requirements vector b.\n    b_vec = np.array([2000.0, 50.0, 44.0, 30.0])\n    \n    # Fixed costs for non-avocado foods (per serving).\n    # [chicken, beans, rice, broccoli]\n    c_others = [2.5, 1.2, 0.6, 0.8]\n    \n    # Test suite of avocado prices (c_A) to be analyzed.\n    test_cases = [1.00, 0.50, 10.00, 12.00, 25.00]\n    \n    results = []\n    \n    for c_A in test_cases:\n        # Construct the full cost vector c for the current c_A.\n        c_vec = np.array([c_A] + c_others)\n        \n        # The linprog function solves minimization problems with constraints of\n        # the form A_ub @ x <= b_ub. Our problem has A @ x >= b, which is\n        # equivalent to -A @ x <= -b.\n        # We also enforce non-negativity constraints via the bounds parameter.\n        res = linprog(c=c_vec, \n                      A_ub=-A_mat, \n                      b_ub=-b_vec, \n                      bounds=(0, None), \n                      method='highs')\n        \n        if res.success:\n            # The optimal quantity of avocado (x_A) is the first element of the solution vector.\n            x_A_star = res.x[0]\n            # The optimal cost (z*) is the function value at the optimum.\n            z_star = res.fun\n            results.append([x_A_star, z_star])\n        else:\n            # The problem statement guarantees a solution exists, so this path\n            # should ideally not be taken. We include it for robustness.\n            results.append([float('nan'), float('nan')])\n            \n    # Format the results into the required string format.\n    # e.g., [[x1, z1], [x2, z2], ...] with numbers rounded to 4 decimal places.\n    formatted_pairs = [f\"[{x:.4f},{z:.4f}]\" for x, z in results]\n    \n    # Final print statement in the exact required format.\n    print(f\"[{','.join(formatted_pairs)}]\")\n\nsolve()\n```"}]}