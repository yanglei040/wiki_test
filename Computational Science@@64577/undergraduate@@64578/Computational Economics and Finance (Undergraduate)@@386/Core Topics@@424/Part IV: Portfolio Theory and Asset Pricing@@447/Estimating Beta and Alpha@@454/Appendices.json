{"hands_on_practices": [{"introduction": "Before we can estimate beta from market data, it's crucial to understand what it represents. An asset's equity beta, $\\beta_E$, reflects not only its underlying business risk but also the financial risk introduced by its capital structure. This practice guides you through the essential process of deleveraging beta—calculating a firm's asset beta, $\\beta_A$, from its equity beta—to isolate the company's intrinsic operational risk, independent of its financing decisions. [@problem_id:2390287]", "id": "2390287", "problem": "A single-business firm is financed with both equity and fixed-rate, interest-bearing debt. An analyst estimates the firm’s equity beta by running a linear regression of the firm’s monthly equity excess returns on the market’s monthly excess returns over a sufficiently long sample and obtains an equity beta estimate of $1.35$. The current market value of equity is $700$ million and the current market value of interest-bearing debt is $300$ million. The statutory corporate tax rate is $0.25$. Assume the firm’s debt beta is approximately $0$ and that the present value of the corporate interest tax shield has the same risk as the debt. Under these conditions, compute the firm’s asset beta (also called the unlevered beta). Round your answer to four significant figures.", "solution": "The problem requires the computation of a firm's asset beta, also known as the unlevered beta, which we will denote as $\\beta_A$. This is a measure of the systematic risk of the firm's assets, independent of its capital structure. We are given the firm's equity beta, $\\beta_E$, which reflects the risk to equity holders and is influenced by financial leverage.\n\nThe core principle is that the systematic risk of the firm's assets must equal the weighted-average systematic risk of the claims against those assets. The claims consist of debt and equity. However, with corporate taxes, the use of debt creates an interest tax shield, which is a valuable asset. Therefore, a more complete representation of the firm's value must account for this tax shield.\n\nThe total market value of the levered firm, $V_L$, is the sum of the market value of its equity, $E$, and debt, $D$.\n$$V_L = E + D$$\nThe beta of the levered firm's assets, $\\beta_L$, is the weighted average of the betas of its equity and debt:\n$$\\beta_L = \\frac{E}{E+D}\\beta_E + \\frac{D}{E+D}\\beta_D$$\nThe levered firm's assets can also be decomposed into the unlevered assets (the value of the firm as if it were all-equity financed, $V_U$) and the present value of the interest tax shield, $V_{TS}$.\n$$V_L = V_U + V_{TS}$$\nFrom this perspective, the beta of the levered firm's assets is also a weighted average of the betas of the unlevered assets, $\\beta_U$ (or $\\beta_A$), and the tax shield, $\\beta_{TS}$:\n$$\\beta_L = \\frac{V_U}{V_L}\\beta_U + \\frac{V_{TS}}{V_L}\\beta_{TS}$$\nBy equating the two expressions for $\\beta_L$ and multiplying by $V_L = E+D$, we obtain the fundamental relationship for the components' betas and values:\n$$E\\beta_E + D\\beta_D = V_U\\beta_U + V_{TS}\\beta_{TS}$$\nThe problem provides crucial simplifying assumptions. First, the firm's debt beta is approximately zero:\n$$\\beta_D \\approx 0$$\nSecond, the present value of the tax shield has the same risk as the debt. This implies their betas are equal:\n$$\\beta_{TS} = \\beta_D$$\nCombining these two assumptions, we conclude that the beta of the tax shield is also zero:\n$$\\beta_{TS} \\approx 0$$\nSubstituting $\\beta_D = 0$ and $\\beta_{TS} = 0$ into our fundamental beta equation:\n$$E\\beta_E + D(0) = V_U\\beta_U + V_{TS}(0)$$\n$$E\\beta_E = V_U\\beta_U$$\nThe asset beta we seek is $\\beta_A = \\beta_U$. To solve for it, we must express $V_U$ in terms of known quantities. From the value decomposition, $V_U = V_L - V_{TS} = (E+D) - V_{TS}$. The value of the tax shield, $V_{TS}$, under the common assumption of perpetual debt, is the tax rate multiplied by the value of debt:\n$$V_{TS} = \\tau_c D$$\nSubstituting this into the expression for $V_U$:\n$$V_U = E + D - \\tau_c D = E + D(1-\\tau_c)$$\nNow we substitute this expression for $V_U$ back into our simplified beta equation:\n$$E\\beta_E = (E + D(1-\\tau_c))\\beta_U$$\nSolving for $\\beta_U$, which is the asset beta $\\beta_A$:\n$$\\beta_A = \\beta_U = \\frac{E}{E + D(1-\\tau_c)}\\beta_E$$\nWe are given the following values:\nEquity beta, $\\beta_E = 1.35$\nMarket value of equity, $E = 700$ million\nMarket value of debt, $D = 300$ million\nCorporate tax rate, $\\tau_c = 0.25$\n\nWe substitute these values into the derived formula for the asset beta:\n$$\\beta_A = \\frac{700}{700 + 300(1 - 0.25)}\\times 1.35$$\n$$\\beta_A = \\frac{700}{700 + 300(0.75)}\\times 1.35$$\n$$\\beta_A = \\frac{700}{700 + 225}\\times 1.35$$\n$$\\beta_A = \\frac{700}{925}\\times 1.35$$\nCalculating the numerical value:\n$$\\beta_A \\approx 0.75675675... \\times 1.35$$\n$$\\beta_A \\approx 1.02162162...$$\nThe problem requires the answer to be rounded to four significant figures. The fifth significant figure is $6$, so we round up the fourth digit.\n$$\\beta_A \\approx 1.022$$\nThis result is logical, as the asset beta ($1.022$) must be lower than the equity beta ($1.35$) for a levered firm, reflecting the removal of financial risk.", "answer": "$$\\boxed{1.022}$$"}, {"introduction": "Standard beta estimation via Ordinary Least Squares (OLS) regression relies on the assumption of synchronous trading, where asset and market prices are recorded simultaneously. In reality, this often isn't the case for thinly traded stocks, which can lead to biased estimates. This computational exercise introduces the Dimson regression, a practical econometric solution that corrects for this non-synchronous data problem by including lagged and lead market returns in the model, thereby yielding a more robust beta estimate. [@problem_id:2390296]", "id": "2390296", "problem": "You are given a linear return model for a thinly traded asset that allows for non-synchronous trading between the asset and the market by including one-period lags and leads of the market return. For a time index $t \\in \\{1,2,\\ldots,T\\}$, the model is\n$$\nR_{i,t} \\;=\\; \\alpha_i \\;+\\; \\beta_{-1} R_{m,t-1} \\;+\\; \\beta_{0} R_{m,t} \\;+\\; \\beta_{+1} R_{m,t+1} \\;+\\; \\varepsilon_t,\n$$\nwhere $R_{i,t}$ is the asset return and $R_{m,t}$ is the market return, both expressed in decimal form. The unknown parameters are the intercept $\\alpha_i$ and the three slope coefficients $\\beta_{-1}$, $\\beta_{0}$, and $\\beta_{+1}$. The Dimson beta is defined as the sum $\\beta_{-1} + \\beta_{0} + \\beta_{+1}$. Assume the parameters are estimated by minimizing the sum of squared residuals over the set of time indices for which all regressors are defined, that is $t \\in \\{2,3,\\ldots,T-1\\}$. All returns are given in decimal form (for example, a one percent return is $0.01$, not $1$ or $1\\%$).\n\nYour task is to, for each test case below, estimate $\\alpha_i$ and the Dimson beta $\\beta_{-1} + \\beta_{0} + \\beta_{+1}$ using the ordinary least squares definition stated above, where the objective is to minimize\n$$\n\\sum_{t=2}^{T-1} \\Big(R_{i,t} - \\alpha_i - \\beta_{-1} R_{m,t-1} - \\beta_{0} R_{m,t} - \\beta_{+1} R_{m,t+1}\\Big)^2.\n$$\n\nUse only the indices $t \\in \\{2,3,\\ldots,T-1\\}$ in the estimation for each test case. No data outside this index range should contribute to the objective.\n\nTest Suite:\n- Test case $1$ (general case, moderate length): Let $T=8$. Market return series $R_{m,1:T}$ is $\\{0.018,\\,-0.012,\\,0.031,\\,0.004,\\,-0.023,\\,0.009,\\,0.042,\\,-0.035\\}$. Asset return series $R_{i,1:T}$ is $\\{0.00000,\\,-0.01185,\\,0.03200,\\,0.01710,\\,-0.02415,\\,-0.00065,\\,0.05520,\\,0.00000\\}$.\n- Test case $2$ (boundary length sufficient to estimate all parameters): Let $T=6$. Market return series $R_{m,1:T}$ is $\\{0.014,\\,-0.025,\\,0.019,\\,-0.006,\\,0.037,\\,-0.011\\}$. Asset return series $R_{i,1:T}$ is $\\{0.00000,\\,-0.00450,\\,-0.01150,\\,-0.01100,\\,0.00050,\\,0.00000\\}$.\n- Test case $3$ (only intercept present in the data-generating relation): Let $T=7$. Market return series $R_{m,1:T}$ is $\\{0.005,\\,-0.008,\\,0.013,\\,-0.021,\\,0.017,\\,0.002,\\,-0.009\\}$. Asset return series $R_{i,1:T}$ is $\\{0.00240,\\,0.00240,\\,0.00240,\\,0.00240,\\,0.00240,\\,0.00240,\\,0.00240\\}$.\n\nRequired final output format:\n- Your program should produce a single line of output containing the results as a comma-separated list enclosed in square brackets. Each test case should contribute a pair consisting of the estimated intercept $\\alpha_i$ and the estimated Dimson beta $\\beta_{-1} + \\beta_{0} + \\beta_{+1}$, in that order.\n- Each floating-point number must be rounded to exactly $6$ decimal places and printed in fixed-point notation.\n- Concretely, the output must have the form\n$[[\\widehat{\\alpha}_1,\\widehat{\\beta}^{\\text{Dimson}}_1],[\\widehat{\\alpha}_2,\\widehat{\\beta}^{\\text{Dimson}}_2],[\\widehat{\\alpha}_3,\\widehat{\\beta}^{\\text{Dimson}}_3]]$\nwith no spaces anywhere in the line.\n\nThe answer for each test case must be a pair of floats in the specified format, and the aggregated output must be a single line as specified above.", "solution": "The problem statement has been validated and is deemed valid. It is a well-posed problem in computational finance, grounded in established econometric principles, with all necessary data and definitions provided.\n\nThe problem requires the estimation of parameters for a linear regression model using Ordinary Least Squares (OLS). The model, which accounts for non-synchronous trading, is specified as:\n$$\nR_{i,t} = \\alpha_i + \\beta_{-1} R_{m,t-1} + \\beta_{0} R_{m,t} + \\beta_{+1} R_{m,t+1} + \\varepsilon_t\n$$\nwhere $R_{i,t}$ is the return of asset $i$ at time $t$, $R_{m,t}$ is the market return at time $t$, and $\\varepsilon_t$ is a random error term. The parameters to be estimated are the intercept $\\alpha_i$ and the slope coefficients $\\beta_{-1}$, $\\beta_{0}$, and $\\beta_{+1}$.\n\nThe estimation is based on minimizing the sum of squared residuals (SSR) over the time indices $t \\in \\{2, 3, \\ldots, T-1\\}$. This corresponds to the standard OLS procedure. The problem can be expressed in matrix form as:\n$$\n\\mathbf{y} = \\mathbf{X}\\mathbf{b} + \\mathbf{e}\n$$\nThe OLS estimator $\\hat{\\mathbf{b}}$ for the parameter vector $\\mathbf{b}$ is the vector that minimizes the squared norm of the residual vector, $\\|\\mathbf{y} - \\mathbf{X}\\mathbf{b}\\|^2$.\n\nFor each test case with a total time series length of $T$, we construct the vectors and matrices using the data for which all regressors are available, i.e., for $t \\in \\{2, 3, \\ldots, T-1\\}$. This provides $N = T-2$ observations for the regression.\n\nThe dependent variable vector $\\mathbf{y}$ is a column vector of asset returns from time $t=2$ to $t=T-1$:\n$$\n\\mathbf{y} = \\begin{pmatrix} R_{i,2} \\\\ R_{i,3} \\\\ \\vdots \\\\ R_{i,T-1} \\end{pmatrix}\n$$\nThis vector has dimensions $(T-2) \\times 1$.\n\nThe parameter vector $\\mathbf{b}$ contains the unknown coefficients:\n$$\n\\mathbf{b} = \\begin{pmatrix} \\alpha_i \\\\ \\beta_{-1} \\\\ \\beta_{0} \\\\ \\beta_{+1} \\end{pmatrix}\n$$\nThis vector has dimensions $4 \\times 1$.\n\nThe design matrix $\\mathbf{X}$ is constructed from the regressors. It contains a column of ones for the intercept $\\alpha_i$, and columns for the lagged, contemporaneous, and lead market returns ($R_{m,t-1}, R_{m,t}, R_{m,t+1}$). Each row corresponds to a specific time $t$:\n$$\n\\mathbf{X} = \\begin{pmatrix}\n1 & R_{m,1} & R_{m,2} & R_{m,3} \\\\\n1 & R_{m,2} & R_{m,3} & R_{m,4} \\\\\n\\vdots & \\vdots & \\vdots & \\vdots \\\\\n1 & R_{m,T-2} & R_{m,T-1} & R_{m,T}\n\\end{pmatrix}\n$$\nThis matrix has dimensions $(T-2) \\times 4$.\n\nThe OLS estimate $\\hat{\\mathbf{b}}$ is given by the solution to the normal equations:\n$$\n\\hat{\\mathbf{b}} = (\\mathbf{X}^T \\mathbf{X})^{-1} \\mathbf{X}^T \\mathbf{y}\n$$\nA unique solution exists if the matrix $\\mathbf{X}^T \\mathbf{X}$ is invertible, which requires the number of observations $N = T-2$ to be at least the number of parameters $k=4$, and the columns of $\\mathbf{X}$ to be linearly independent. All test cases satisfy the condition $T-2 \\ge 4$: for $T=8$, $N=6$; for $T=6$, $N=4$; for $T=7$, $N=5$.\n\nOnce the parameter vector $\\hat{\\mathbf{b}} = [\\hat{\\alpha}_i, \\hat{\\beta}_{-1}, \\hat{\\beta}_{0}, \\hat{\\beta}_{+1}]^T$ is estimated, the required outputs can be calculated:\n$1$. The estimated intercept is the first element of the vector: $\\hat{\\alpha}_i = \\hat{\\mathbf{b}}_1$.\n$2$. The estimated Dimson beta is the sum of the estimated slope coefficients: $\\hat{\\beta}^{\\text{Dimson}} = \\hat{\\beta}_{-1} + \\hat{\\beta}_{0} + \\hat{\\beta}_{+1} = \\hat{\\mathbf{b}}_2 + \\hat{\\mathbf{b}}_3 + \\hat{\\mathbf{b}}_4$.\n\nThe algorithmic procedure is as follows:\nFor each test case:\n$1$. Given the time series $R_{m,1:T}$ and $R_{i,1:T}$, construct the vector $\\mathbf{y}$ from $R_{i,t}$ for $t \\in \\{2, \\ldots, T-1\\}$.\n$2$. Construct the matrix $\\mathbf{X}$ where each row $j$ (corresponding to time $t=j+2$) is $[1, R_{m,t-1}, R_{m,t}, R_{m,t+1}]$.\n$3$. Solve the linear least squares problem to find $\\hat{\\mathbf{b}}$. This is best done using a numerically stable algorithm, such as one based on QR decomposition, which is implemented in standard numerical libraries.\n$4$. Extract $\\hat{\\alpha}_i$ and compute $\\hat{\\beta}^{\\text{Dimson}}$ from the resulting vector $\\hat{\\mathbf{b}}$.\n$5$. Format the results as required.", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Solves the Dimson-beta estimation problem for a set of test cases.\n    \"\"\"\n    \n    # Define the test cases from the problem statement.\n    test_cases = [\n        {\n            \"T\": 8,\n            \"Rm\": [0.018, -0.012, 0.031, 0.004, -0.023, 0.009, 0.042, -0.035],\n            \"Ri\": [0.00000, -0.01185, 0.03200, 0.01710, -0.02415, -0.00065, 0.05520, 0.00000]\n        },\n        {\n            \"T\": 6,\n            \"Rm\": [0.014, -0.025, 0.019, -0.006, 0.037, -0.011],\n            \"Ri\": [0.00000, -0.00450, -0.01150, -0.01100, 0.00050, 0.00000]\n        },\n        {\n            \"T\": 7,\n            \"Rm\": [0.005, -0.008, 0.013, -0.021, 0.017, 0.002, -0.009],\n            \"Ri\": [0.00240, 0.00240, 0.00240, 0.00240, 0.00240, 0.00240, 0.00240]\n        }\n    ]\n\n    results_as_strings = []\n    \n    for case in test_cases:\n        T = case[\"T\"]\n        Rm = np.array(case[\"Rm\"])\n        Ri = np.array(case[\"Ri\"])\n        \n        # The regression is run over indices t from 2 to T-1.\n        # This corresponds to 0-based array indices from 1 to T-2.\n        \n        # Dependent variable vector y from Ri_t for t in {2, ..., T-1}\n        # Array indices: Ri[1], ..., Ri[T-2]\n        y = Ri[1:T-1]\n        \n        # Design matrix X\n        # For each t in {2, ..., T-1}, the regressors are 1, R_m,t-1, R_m,t, R_m,t+1\n        # which corresponds to array indices Rm[t-2], Rm[t-1], Rm[t].\n        X_rows = []\n        for t_idx in range(1, T - 1): # Corresponds to t = 2, ..., T-1\n            # t = t_idx + 1\n            # R_m,t-1 -> Rm[t-2] -> Rm[t_idx-1]\n            # R_m,t   -> Rm[t-1] -> Rm[t_idx]\n            # R_m,t+1 -> Rm[t]   -> Rm[t_idx+1]\n            row = [1.0, Rm[t_idx - 1], Rm[t_idx], Rm[t_idx + 1]]\n            X_rows.append(row)\n        \n        X = np.array(X_rows)\n        \n        # Solve the ordinary least squares problem y = Xb + e for b\n        # np.linalg.lstsq is numerically stable for this task.\n        coeffs, _, _, _ = np.linalg.lstsq(X, y, rcond=None)\n        \n        # The coefficients are [alpha_i, beta_-1, beta_0, beta_+1]\n        alpha_i = coeffs[0]\n        dimson_beta = coeffs[1] + coeffs[2] + coeffs[3]\n        \n        # Format the result pair as a string and add to the list\n        pair_str = f\"[{alpha_i:.6f},{dimson_beta:.6f}]\"\n        results_as_strings.append(pair_str)\n\n    # Final print statement in the exact required format.\n    print(f\"[{','.join(results_as_strings)}]\")\n\nsolve()\n```"}, {"introduction": "Once we have reliable methods to estimate beta for individual assets, we can test the central prediction of the Capital Asset Pricing Model (CAPM): that systematic risk, measured by beta, is the only risk factor that commands a premium in the cross-section of returns. This capstone exercise will guide you in implementing the complete Fama-MacBeth two-step regression procedure, a cornerstone of empirical asset pricing. By doing so, you will test the validity of the Security Market Line and determine if the price of risk in a simulated market aligns with theory. [@problem_id:2390281]", "id": "2390281", "problem": "You are asked to implement a complete and reproducible empirical test of the Capital Asset Pricing Model (CAPM) Security Market Line using the Fama and MacBeth two-step regression procedure from first principles. Work entirely with simulated returns generated from a well-specified single-factor data-generating process, using a fixed pseudo-random seed for each test case to ensure determinism. All returns must be expressed as decimals, not as percentages.\n\nDefine the following objects. For each asset index $i \\in \\{1,\\dots,N\\}$ and time index $t \\in \\{1,\\dots,T\\}$, let $R_{i,t}^{e}$ denote the asset’s excess return over the risk-free rate, and let $F_{t}$ denote the market excess return. The data-generating process is\n$$\nR_{i,t}^{e} \\;=\\; \\alpha_{i} \\;+\\; \\beta_{i} \\, F_{t} \\;+\\; \\varepsilon_{i,t},\n$$\nwith $\\varepsilon_{i,t} \\sim \\mathcal{N}(0,\\sigma_{e,i}^{2})$ independently across $i$ and $t$, and $F_{t} \\sim \\mathcal{N}(\\mu_{M},\\sigma_{M}^{2})$ independently across $t$. The risk-free rate is set to zero so that excess returns coincide with raw returns. The CAPM Security Market Line imposes $\\alpha_{i}=0$ for all $i$ and states that the cross-sectional expected excess return is linear in $\\beta_{i}$ with zero intercept and slope equal to $\\mathbb{E}[F_{t}]$.\n\nImplement the following definitions precisely for each test case:\n1. Use the first $W$ periods to estimate $\\widehat{\\beta}_{i}$ for each asset $i$ by ordinary least squares in the time-series regression\n$$\nR_{i,t}^{e} \\;=\\; a_{i} \\;+\\; b_{i} \\, F_{t} \\;+\\; u_{i,t}, \\quad t=1,\\dots,W,\n$$\nand set $\\widehat{\\beta}_{i} \\equiv b_{i}$.\n2. For each period $t = W\\!+\\!1,\\dots,T$, run the cross-sectional regression across assets\n$$\nR_{i,t}^{e} \\;=\\; \\gamma_{0,t} \\;+\\; \\gamma_{1,t} \\, \\widehat{\\beta}_{i} \\;+\\; \\eta_{i,t},\n$$\nto obtain period-$t$ estimates $\\widehat{\\gamma}_{0,t}$ and $\\widehat{\\gamma}_{1,t}$.\n3. Let $T_{\\text{cs}} \\equiv T - W$. Compute the time-series averages of the cross-sectional parameters,\n$$\n\\bar{\\gamma}_{0} \\;=\\; \\frac{1}{T_{\\text{cs}}} \\sum_{t=W+1}^{T} \\widehat{\\gamma}_{0,t}, \n\\qquad\n\\bar{\\gamma}_{1} \\;=\\; \\frac{1}{T_{\\text{cs}}} \\sum_{t=W+1}^{T} \\widehat{\\gamma}_{1,t}.\n$$\n4. Compute the Fama and MacBeth standard errors using the time-series variability of the cross-sectional estimates,\n$$\n\\widehat{\\mathrm{se}}(\\bar{\\gamma}_{j}) \\;=\\; \\frac{s(\\widehat{\\gamma}_{j,\\cdot})}{\\sqrt{T_{\\text{cs}}}}, \n\\quad j \\in \\{0,1\\},\n$$\nwhere $s(\\widehat{\\gamma}_{j,\\cdot})$ is the sample standard deviation of $\\{\\widehat{\\gamma}_{j,t}\\}_{t=W+1}^{T}$ computed with denominator $T_{\\text{cs}}-1$. Then form $t$-statistics,\n$$\nt(\\bar{\\gamma}_{j}) \\;=\\; \\frac{\\bar{\\gamma}_{j}}{\\widehat{\\mathrm{se}}(\\bar{\\gamma}_{j})}, \n\\quad j \\in \\{0,1\\}.\n$$\n\nYour program must simulate the data and carry out the computations above for each of the following three test cases. In all cases, do not transform or rescale inputs; use them exactly as provided. All numbers given below are in decimal units.\n\nTest Suite (each bullet is one test case):\n- Case A (CAPM holds with moderate idiosyncratic noise):\n  • $N=6$, $T=120$, $W=60$.\n  • True betas: $(\\beta_{1},\\dots,\\beta_{6}) = (0.6, 0.8, 1.0, 1.2, 1.4, 1.6)$.\n  • Idiosyncratic standard deviations: $(\\sigma_{e,1},\\dots,\\sigma_{e,6}) = (0.02, 0.02, 0.02, 0.02, 0.02, 0.02)$.\n  • Market parameters: $\\mu_{M}=0.006$, $\\sigma_{M}=0.04$.\n  • Common intercept: $\\alpha_{i}=0$ for all $i$.\n  • Random seed: $12345$.\n- Case B (violated Security Market Line via a common nonzero intercept):\n  • $N=6$, $T=120$, $W=60$.\n  • True betas: $(\\beta_{1},\\dots,\\beta_{6}) = (0.6, 0.8, 1.0, 1.2, 1.4, 1.6)$.\n  • Idiosyncratic standard deviations: $(\\sigma_{e,1},\\dots,\\sigma_{e,6}) = (0.02, 0.02, 0.02, 0.02, 0.02, 0.02)$.\n  • Market parameters: $\\mu_{M}=0.006$, $\\sigma_{M}=0.04$.\n  • Common intercept: $\\alpha_{i}=0.002$ for all $i$.\n  • Random seed: $67890$.\n- Case C (shorter estimation window and higher idiosyncratic noise):\n  • $N=4$, $T=90$, $W=24$.\n  • True betas: $(\\beta_{1},\\dots,\\beta_{4}) = (0.5, 1.0, 1.5, 2.0)$.\n  • Idiosyncratic standard deviations: $(\\sigma_{e,1},\\dots,\\sigma_{e,4}) = (0.06, 0.05, 0.04, 0.03)$.\n  • Market parameters: $\\mu_{M}=0.005$, $\\sigma_{M}=0.05$.\n  • Common intercept: $\\alpha_{i}=0$ for all $i$.\n  • Random seed: $24680$.\n\nFor each case, compute the quadruple\n$$\n\\left[ \\bar{\\gamma}_{0},\\; \\bar{\\gamma}_{1},\\; t(\\bar{\\gamma}_{0}),\\; t(\\bar{\\gamma}_{1}) \\right],\n$$\nand round each entry to $6$ decimal places.\n\nYour program should produce a single line of output containing the results as a comma-separated list of these three quadruples, enclosed in square brackets, for example\n$[\\,[x_{A},y_{A},z_{A},w_{A}],\\,[x_{B},y_{B},z_{B},w_{B}],\\,[x_{C},y_{C},z_{C},w_{C}]\\,]$,\nwhere each symbol denotes a rounded decimal as specified above. No other output is permitted.", "solution": "The Capital Asset Pricing Model (CAPM) posits a linear relationship between expected excess returns and market exposure, encapsulated by the Security Market Line. Formally, for asset $i$ with excess return $R_{i,t}^{e}$ and market excess return $F_{t}$, the model states\n$$\n\\mathbb{E}[R_{i,t}^{e}] \\;=\\; \\beta_{i} \\,\\mathbb{E}[F_{t}],\n$$\nwhich is equivalent to the condition that the intercepts $\\alpha_{i}$ in the factor representation\n$$\nR_{i,t}^{e} \\;=\\; \\alpha_{i} \\;+\\; \\beta_{i} \\, F_{t} \\;+\\; \\varepsilon_{i,t}\n$$\nare zero for all $i$.\n\nThe Fama and MacBeth (two-step) approach estimates risk exposures first, then prices them in the cross-section. The principle is to separate time-series risk estimation from cross-sectional pricing, and to exploit the time-series variability of the cross-sectional slope and intercept to form standard errors.\n\nStep-by-step derivation:\n\n1. Time-series estimation of betas. For each asset $i$, consider the regression over the initial window $t=1,\\dots,W$,\n$$\nR_{i,t}^{e} \\;=\\; a_{i} \\;+\\; b_{i} \\, F_{t} \\;+\\; u_{i,t}.\n$$\nThe ordinary least squares (OLS) estimate $b_{i}$ solves\n$$\n\\min_{(a_{i},b_{i})} \\sum_{t=1}^{W} \\left(R_{i,t}^{e} - a_{i} - b_{i} F_{t}\\right)^{2},\n$$\nleading to the normal equations,\n$$\n\\begin{bmatrix}\nW & \\sum_{t=1}^{W} F_{t} \\\\\n\\sum_{t=1}^{W} F_{t} & \\sum_{t=1}^{W} F_{t}^{2}\n\\end{bmatrix}\n\\begin{bmatrix}\na_{i} \\\\\nb_{i}\n\\end{bmatrix}\n\\;=\\;\n\\begin{bmatrix}\n\\sum_{t=1}^{W} R_{i,t}^{e} \\\\\n\\sum_{t=1}^{W} F_{t} R_{i,t}^{e}\n\\end{bmatrix}.\n$$\nSolving yields $b_{i} \\equiv \\widehat{\\beta}_{i}$, which is the estimated market exposure for asset $i$. This is the first-principles OLS solution: $b_{i}$ is the slope coefficient in the linear projection of $R_{i,t}^{e}$ on $F_{t}$ and a constant.\n\n2. Cross-sectional pricing each period. For each $t=W+1,\\dots,T$, we treat the set $\\{\\widehat{\\beta}_{i}\\}_{i=1}^{N}$ as fixed regressors and run the cross-sectional OLS regression across assets,\n$$\nR_{i,t}^{e} \\;=\\; \\gamma_{0,t} \\;+\\; \\gamma_{1,t} \\, \\widehat{\\beta}_{i} \\;+\\; \\eta_{i,t}.\n$$\nStacking over $i$ gives $y_{t} = X \\gamma_{t} + \\eta_{t}$ where $y_{t}$ is the $N \\times 1$ vector of returns $R_{i,t}^{e}$, $X$ is the $N \\times 2$ matrix with first column of ones and second column $\\widehat{\\beta}$, and $\\gamma_{t} = (\\gamma_{0,t},\\gamma_{1,t})^{\\top}$. The OLS estimator is\n$$\n\\widehat{\\gamma}_{t} \\;=\\; (X^{\\top}X)^{-1} X^{\\top} y_{t},\n$$\nyielding $\\widehat{\\gamma}_{0,t}$ (intercept) and $\\widehat{\\gamma}_{1,t}$ (slope) for period $t$.\n\n3. Time-series aggregation and standard errors. With $T_{\\text{cs}} = T - W$ cross-sections, define the sample means\n$$\n\\bar{\\gamma}_{j} \\;=\\; \\frac{1}{T_{\\text{cs}}} \\sum_{t=W+1}^{T} \\widehat{\\gamma}_{j,t}, \\quad j \\in \\{0,1\\}.\n$$\nThe Fama and MacBeth standard error uses the time-series dispersion of the period-by-period estimates:\n$$\n\\widehat{\\mathrm{se}}(\\bar{\\gamma}_{j}) \\;=\\; \\frac{s(\\widehat{\\gamma}_{j,\\cdot})}{\\sqrt{T_{\\text{cs}}}},\n$$\nwhere $s(\\widehat{\\gamma}_{j,\\cdot})$ is the sample standard deviation\n$$\ns(\\widehat{\\gamma}_{j,\\cdot}) \\;=\\; \\sqrt{\\frac{1}{T_{\\text{cs}}-1} \\sum_{t=W+1}^{T} \\left(\\widehat{\\gamma}_{j,t} - \\bar{\\gamma}_{j}\\right)^{2}}.\n$$\nThe $t$-statistic is then\n$$\nt(\\bar{\\gamma}_{j}) \\;=\\; \\frac{\\bar{\\gamma}_{j}}{\\widehat{\\mathrm{se}}(\\bar{\\gamma}_{j})}.\n$$\n\nInterpretation under the CAPM:\n- If the CAPM holds in the data-generating process, then $\\alpha_{i} = 0$ for all $i$, implying $\\bar{\\gamma}_{0}$ should be close to zero, and $t(\\bar{\\gamma}_{0})$ should not statistically differ from zero for sufficiently large $T_{\\text{cs}}$.\n- The slope $\\bar{\\gamma}_{1}$ should be close to $\\mathbb{E}[F_{t}] = \\mu_{M}$, and $t(\\bar{\\gamma}_{1})$ should indicate whether the average price of beta risk is statistically different from zero.\n\nSimulation design and reproducibility:\n- For each case, draws $F_{t} \\sim \\mathcal{N}(\\mu_{M},\\sigma_{M}^{2})$ and $\\varepsilon_{i,t} \\sim \\mathcal{N}(0,\\sigma_{e,i}^{2})$ are generated independently using the stated seed.\n- Excess returns are formed as $R_{i,t}^{e} = \\alpha_{i} + \\beta_{i} F_{t} + \\varepsilon_{i,t}$ for $t=1,\\dots,T$.\n- The same $\\widehat{\\beta}_{i}$ estimated from the first $W$ periods are used as regressors for all subsequent cross-sectional regressions.\n\nAlgorithmic implementation from principles:\n- Construct the design matrix for time-series OLS per asset with columns $(\\mathbf{1}, F_{1:W})$ and solve the normal equations using linear algebra to obtain $\\widehat{\\beta}_{i}$.\n- Construct the cross-sectional design matrix with columns $(\\mathbf{1}, \\widehat{\\beta})$ and regress $R_{\\cdot,t}^{e}$ on it for each $t=W+1,\\dots,T$ to obtain $\\widehat{\\gamma}_{0,t}$ and $\\widehat{\\gamma}_{1,t}$.\n- Aggregate to compute $\\bar{\\gamma}_{0}$, $\\bar{\\gamma}_{1}$, and their $t$-statistics as defined.\n- Round each reported number to $6$ decimal places to match the required output precision.\n\nThe final output is the list of three quadruples, one per case,\n$$\n\\left[ \\left[\\bar{\\gamma}_{0}^{A},\\bar{\\gamma}_{1}^{A}, t(\\bar{\\gamma}_{0}^{A}), t(\\bar{\\gamma}_{1}^{A})\\right], \\left[\\bar{\\gamma}_{0}^{B},\\bar{\\gamma}_{1}^{B}, t(\\bar{\\gamma}_{0}^{B}), t(\\bar{\\gamma}_{1}^{B})\\right], \\left[\\bar{\\gamma}_{0}^{C},\\bar{\\gamma}_{1}^{C}, t(\\bar{\\gamma}_{0}^{C}), t(\\bar{\\gamma}_{1}^{C})\\right] \\right],\n$$\nprinted on a single line, where superscripts $A$, $B$, and $C$ index the test cases. Given the seeds and parameters, the output is deterministic.", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef estimate_beta_time_series(R_excess, F, W):\n    \"\"\"\n    Estimate beta_i for each asset i using OLS on the first W periods:\n    R_i,t^e = a_i + b_i * F_t + u_i,t\n    Returns array of shape (N,) with beta estimates b_i.\n    \"\"\"\n    N = R_excess.shape[0]\n    X = np.column_stack([np.ones(W), F[:W]])\n    XtX = X.T @ X\n    XtX_inv = np.linalg.inv(XtX)\n    betas_hat = np.empty(N)\n    for i in range(N):\n        y = R_excess[i, :W]\n        coef = XtX_inv @ (X.T @ y)\n        betas_hat[i] = coef[1]\n    return betas_hat\n\ndef cross_sectional_gammas(R_excess, betas_hat, start_t):\n    \"\"\"\n    For each t from start_t to T-1, run cross-sectional OLS:\n    R_i,t^e = gamma0_t + gamma1_t * betas_hat_i + eta_i,t\n    Returns arrays gamma0 (Tcs,), gamma1 (Tcs,)\n    \"\"\"\n    N, T = R_excess.shape\n    Tcs = T - start_t\n    ones = np.ones(N)\n    X = np.column_stack([ones, betas_hat])  # shape (N, 2)\n    XtX = X.T @ X\n    XtX_inv = np.linalg.inv(XtX)\n    gamma0 = np.empty(Tcs)\n    gamma1 = np.empty(Tcs)\n    idx = 0\n    for t in range(start_t, T):\n        y = R_excess[:, t]\n        gamma = XtX_inv @ (X.T @ y)\n        gamma0[idx] = gamma[0]\n        gamma1[idx] = gamma[1]\n        idx += 1\n    return gamma0, gamma1\n\ndef fm_summary_stats(gamma_series):\n    \"\"\"\n    Given a 1-D array of period-by-period gammas (length Tcs),\n    return (mean, t_stat) using FM time-series standard error.\n    \"\"\"\n    Tcs = gamma_series.shape[0]\n    mean_val = float(np.mean(gamma_series))\n    # sample standard deviation with ddof=1\n    if Tcs > 1:\n        sd = float(np.std(gamma_series, ddof=1))\n        se = sd / np.sqrt(Tcs)\n        t_stat = mean_val / se if se > 0 else 0.0\n    else:\n        # Degenerate case; define t-stat as 0\n        t_stat = 0.0\n    return mean_val, t_stat\n\ndef simulate_case(N, T, W, betas_true, sigmas_e, mu_M, sigma_M, alpha_common, seed):\n    \"\"\"\n    Simulate factor and returns according to:\n    R_i,t^e = alpha_common + beta_i * F_t + eps_i,t\n    with F_t ~ N(mu_M, sigma_M^2), eps_i,t ~ N(0, sigma_e_i^2).\n    \"\"\"\n    rng = np.random.default_rng(seed)\n    F = rng.normal(loc=mu_M, scale=sigma_M, size=T)\n    R_excess = np.empty((N, T))\n    betas_true = np.asarray(betas_true, dtype=float)\n    sigmas_e = np.asarray(sigmas_e, dtype=float)\n    for i in range(N):\n        eps = rng.normal(loc=0.0, scale=sigmas_e[i], size=T)\n        R_excess[i, :] = alpha_common + betas_true[i] * F + eps\n    return R_excess, F\n\ndef run_case(N, T, W, betas_true, sigmas_e, mu_M, sigma_M, alpha_common, seed):\n    R_excess, F = simulate_case(N, T, W, betas_true, sigmas_e, mu_M, sigma_M, alpha_common, seed)\n    betas_hat = estimate_beta_time_series(R_excess, F, W)\n    gamma0_series, gamma1_series = cross_sectional_gammas(R_excess, betas_hat, W)\n    g0_mean, g0_t = fm_summary_stats(gamma0_series)\n    g1_mean, g1_t = fm_summary_stats(gamma1_series)\n    # Round to 6 decimals as required\n    return [round(g0_mean, 6), round(g1_mean, 6), round(g0_t, 6), round(g1_t, 6)]\n\ndef solve():\n    # Define the test cases from the problem statement.\n    test_cases = [\n        # Case A\n        {\n            \"N\": 6,\n            \"T\": 120,\n            \"W\": 60,\n            \"betas_true\": [0.6, 0.8, 1.0, 1.2, 1.4, 1.6],\n            \"sigmas_e\": [0.02, 0.02, 0.02, 0.02, 0.02, 0.02],\n            \"mu_M\": 0.006,\n            \"sigma_M\": 0.04,\n            \"alpha_common\": 0.0,\n            \"seed\": 12345,\n        },\n        # Case B\n        {\n            \"N\": 6,\n            \"T\": 120,\n            \"W\": 60,\n            \"betas_true\": [0.6, 0.8, 1.0, 1.2, 1.4, 1.6],\n            \"sigmas_e\": [0.02, 0.02, 0.02, 0.02, 0.02, 0.02],\n            \"mu_M\": 0.006,\n            \"sigma_M\": 0.04,\n            \"alpha_common\": 0.002,\n            \"seed\": 67890,\n        },\n        # Case C\n        {\n            \"N\": 4,\n            \"T\": 90,\n            \"W\": 24,\n            \"betas_true\": [0.5, 1.0, 1.5, 2.0],\n            \"sigmas_e\": [0.06, 0.05, 0.04, 0.03],\n            \"mu_M\": 0.005,\n            \"sigma_M\": 0.05,\n            \"alpha_common\": 0.0,\n            \"seed\": 24680,\n        },\n    ]\n\n    results = []\n    for case in test_cases:\n        res = run_case(\n            N=case[\"N\"],\n            T=case[\"T\"],\n            W=case[\"W\"],\n            betas_true=case[\"betas_true\"],\n            sigmas_e=case[\"sigmas_e\"],\n            mu_M=case[\"mu_M\"],\n            sigma_M=case[\"sigma_M\"],\n            alpha_common=case[\"alpha_common\"],\n            seed=case[\"seed\"],\n        )\n        results.append(res)\n\n    # Final print statement in the exact required format.\n    # Format as a single line: [[a,b,c,d],[a,b,c,d],[a,b,c,d]]\n    print(\"[\" + \",\".join(\"[\" + \",\".join(f\"{x:.6f}\" for x in arr) + \"]\" for arr in results) + \"]\")\n\nif __name__ == \"__main__\":\n    solve()\n```"}]}