{"hands_on_practices": [{"introduction": "Our journey into the practical application of the Black-Scholes-Merton model begins with a foundational concept: pricing from first principles. This exercise [@problem_id:2438209] presents a contract with a payoff that is certain at maturity, obligating the holder to buy the asset for a fixed price. By determining its value using risk-neutral expectation, we strip away the complexities of option pricing to reveal the core logic of no-arbitrage valuation: the present value of a future expected payoff.", "id": "2438209", "problem": "Consider a frictionless market satisfying the Black-Scholes-Merton (BSM) assumptions with a constant risk-free interest rate $r \\in \\mathbb{R}$, a non-dividend-paying or continuously dividend-yielding underlying asset with constant proportional dividend yield $q \\ge 0$, and constant volatility $\\sigma &gt; 0$. Let $\\{S_t: t \\in [0,T]\\}$ denote the price process of the underlying asset, with $S_0 &gt; 0$, and let the riskless money market account be $B_t = \\exp(r t)$ for all $t \\in [0,T]$. Assume that, under the risk-neutral probability measure, the asset price follows the stochastic differential equation\n$$\n\\mathrm{d}S_t = (r - q) S_t \\,\\mathrm{d}t + \\sigma S_t \\,\\mathrm{d}W_t,\n$$\nwhere $\\{W_t\\}$ is a standard Wiener process (also called standard Brownian motion).\n\nDefine a “Boston option” as a contract that, at the expiration time $T &gt; 0$, obligates the holder to receive one unit of the underlying asset and to pay the fixed strike $K &gt; 0$, regardless of the terminal asset price $S_T$. In other words, the contract’s terminal payoff at time $T$ is the net amount $S_T - K$.\n\nDetermine the arbitrage-free time-$0$ price of this contract as a single, closed-form analytic expression in terms of $S_0$, $K$, $r$, $q$, and $T$. Express your answer in simplest form. No numerical approximation or rounding is required.", "solution": "The problem statement must first be rigorously validated.\n\nStep 1: Extract Givens\n- Market Model: Frictionless, satisfying the Black-Scholes-Merton (BSM) assumptions.\n- Risk-Free Rate: Constant, $r \\in \\mathbb{R}$.\n- Dividend Yield: Constant, proportional, $q \\ge 0$.\n- Volatility: Constant, $\\sigma > 0$.\n- Asset Price Process: $\\{S_t: t \\in [0,T]\\}$, with initial price $S_0 > 0$.\n- Money Market Account: $B_t = \\exp(r t)$.\n- Risk-Neutral Dynamics: The asset price follows the stochastic differential equation (SDE) under the risk-neutral measure:\n$$\n\\mathrm{d}S_t = (r - q) S_t \\,\\mathrm{d}t + \\sigma S_t \\,\\mathrm{d}W_t\n$$\nwhere $\\{W_t\\}$ is a standard Wiener process.\n- Contract Definition: A \"Boston option\" expires at time $T > 0$. At expiration, the holder is obligated to receive one unit of the asset and pay a fixed strike price $K > 0$.\n- Terminal Payoff: The net payoff at time $T$ is $S_T - K$.\n- Objective: Determine the arbitrage-free price of this contract at time $t=0$.\n\nStep 2: Validate Using Extracted Givens\nThe problem is subjected to validation against established criteria.\n- **Scientifically Grounded:** The problem is formulated entirely within the standard and well-established Black-Scholes-Merton framework for pricing derivative securities. The provided SDE is the canonical representation of an asset with a continuous dividend yield under the risk-neutral measure. It adheres to fundamental principles of financial mathematics.\n- **Well-Posed:** All necessary parameters ($S_0$, $K$, $r$, $q$, $T$, $\\sigma$) for pricing within the BSM model are provided. The objective is clearly stated, and the framework guarantees the existence of a unique arbitrage-free price due to market completeness. The term “Boston option” is explicitly defined by its payoff function, avoiding ambiguity.\n- **Objective:** The problem is stated using precise, formal mathematical language, devoid of any subjective or opinion-based content.\n\nStep 3: Verdict and Action\nThe problem is scientifically sound, well-posed, and objective. It contains no contradictions, missing information, or logical flaws. Therefore, the problem is deemed **valid**. We proceed to the solution.\n\nThe fundamental theorem of asset pricing states that the arbitrage-free price of a derivative security at time $t=0$, which we denote as $V_0$, is the expected value of its discounted future payoffs, calculated under the risk-neutral probability measure $Q$. The payoff of the specified contract at time $T$ is $S_T - K$. The discounting factor from time $T$ to time $0$ is $\\exp(-rT)$.\n\nThus, the price $V_0$ is given by:\n$$\nV_0 = E_Q[\\exp(-rT)(S_T - K)]\n$$\nBy the linearity of expectation, we can separate the terms:\n$$\nV_0 = E_Q[\\exp(-rT)S_T] - E_Q[\\exp(-rT)K]\n$$\nSince $K$ and $\\exp(-rT)$ are constants (non-stochastic), the second term simplifies to:\n$$\nE_Q[\\exp(-rT)K] = K\\exp(-rT)\n$$\nThe first term requires calculating the expected value of the asset price $S_T$ under the risk-neutral measure. We are given the risk-neutral SDE for $S_t$:\n$$\n\\mathrm{d}S_t = (r - q)S_t \\,\\mathrm{d}t + \\sigma S_t \\,\\mathrm{d}W_t\n$$\nTo solve for $S_T$, we consider the process for $X_t = \\ln(S_t)$. Using Itô's lemma for a function $f(S_t) = \\ln(S_t)$, we have:\n$$\n\\mathrm{d}X_t = \\frac{\\partial f}{\\partial S} \\mathrm{d}S_t + \\frac{1}{2} \\frac{\\partial^2 f}{\\partial S^2} (\\mathrm{d}S_t)^2\n$$\nThe derivatives are $\\frac{\\partial f}{\\partial S} = \\frac{1}{S_t}$ and $\\frac{\\partial^2 f}{\\partial S^2} = -\\frac{1}{S_t^2}$. The quadratic variation term is $(\\mathrm{d}S_t)^2 = (\\sigma S_t \\mathrm{d}W_t)^2 = \\sigma^2 S_t^2 \\mathrm{d}t$. Substituting these into the Itô's lemma expression:\n$$\n\\mathrm{d}X_t = \\frac{1}{S_t}((r - q)S_t \\,\\mathrm{d}t + \\sigma S_t \\,\\mathrm{d}W_t) + \\frac{1}{2} \\left(-\\frac{1}{S_t^2}\\right) (\\sigma^2 S_t^2 \\mathrm{d}t)\n$$\n$$\n\\mathrm{d}X_t = (r - q)\\,\\mathrm{d}t + \\sigma \\,\\mathrm{d}W_t - \\frac{1}{2}\\sigma^2\\,\\mathrm{d}t\n$$\n$$\n\\mathrm{d}X_t = \\left(r - q - \\frac{1}{2}\\sigma^2\\right)\\mathrm{d}t + \\sigma \\,\\mathrm{d}W_t\n$$\nIntegrating from $t=0$ to $t=T$:\n$$\n\\int_0^T \\mathrm{d}X_t = \\int_0^T \\left(r - q - \\frac{1}{2}\\sigma^2\\right)\\mathrm{d}t + \\int_0^T \\sigma \\,\\mathrm{d}W_t\n$$\n$$\nX_T - X_0 = \\left(r - q - \\frac{1}{2}\\sigma^2\\right)T + \\sigma (W_T - W_0)\n$$\nSince $X_t = \\ln(S_t)$ and $W_0=0$, we have:\n$$\n\\ln(S_T) = \\ln(S_0) + \\left(r - q - \\frac{1}{2}\\sigma^2\\right)T + \\sigma W_T\n$$\nUnder the measure $Q$, $W_T$ is a normally distributed random variable with mean $0$ and variance $T$, i.e., $W_T \\sim N(0, T)$. Therefore, $\\ln(S_T)$ is normally distributed with mean $\\mu = \\ln(S_0) + (r - q - \\frac{1}{2}\\sigma^2)T$ and variance $\\nu^2 = \\sigma^2 T$.\n\nThe asset price $S_T$ is log-normally distributed. The expectation of a log-normal random variable $Y$ where $\\ln(Y) \\sim N(\\mu, \\nu^2)$ is given by $E[Y] = \\exp(\\mu + \\frac{1}{2}\\nu^2)$. Applying this to $S_T$:\n$$\nE_Q[S_T] = \\exp\\left(\\left(\\ln(S_0) + \\left(r - q - \\frac{1}{2}\\sigma^2\\right)T\\right) + \\frac{1}{2}(\\sigma^2 T)\\right)\n$$\n$$\nE_Q[S_T] = \\exp\\left(\\ln(S_0) + rT - qT - \\frac{1}{2}\\sigma^2 T + \\frac{1}{2}\\sigma^2 T\\right)\n$$\n$$\nE_Q[S_T] = \\exp(\\ln(S_0) + (r - q)T) = \\exp(\\ln(S_0))\\exp((r-q)T)\n$$\n$$\nE_Q[S_T] = S_0 \\exp((r-q)T)\n$$\nThis result confirms that the expected future price under the risk-neutral measure is the forward price. Now we substitute this expectation back into the valuation formula:\n$$\nV_0 = \\exp(-rT)E_Q[S_T] - K\\exp(-rT)\n$$\n$$\nV_0 = \\exp(-rT) \\left(S_0 \\exp((r-q)T)\\right) - K\\exp(-rT)\n$$\nSimplifying the expression:\n$$\nV_0 = S_0 \\exp(-rT + (r-q)T) - K\\exp(-rT)\n$$\n$$\nV_0 = S_0 \\exp(-qT) - K\\exp(-rT)\n$$\nThis expression is the arbitrage-free price at time $t=0$. The contract is, in fact, a forward contract with a predetermined delivery price $K$. Its value is the present value of the asset to be received, adjusted for dividends foregone ($S_0 \\exp(-qT)$), minus the present value of the payment to be made ($K \\exp(-rT)$).", "answer": "$$\n\\boxed{S_{0} \\exp(-qT) - K \\exp(-rT)}\n$$"}, {"introduction": "Having established a baseline for pricing, we now explore how to manage the risks associated with derivative positions. This practice [@problem_id:2438207] focuses on calculating one of the essential \"Greeks,\" rho ($\\rho$), which measures an option's sensitivity to changes in the risk-free interest rate. By analyzing a hypothetical long-dated option, we can clearly see how interest rate assumptions can significantly impact valuation, a crucial insight for hedging and risk management.", "id": "2438207", "problem": "Consider a European call option written on a non-dividend-paying stock under the Black–Scholes–Merton (BSM) model assumptions. The current stock price is $S_{0}=100$, the strike price is $K=100$, the time to maturity is $T=100$ years, the continuously compounded risk-free rate is $r=0.02$ per year, and the volatility is $\\sigma=0.20$ per year. Compute the option’s rho $\\rho$, defined as the partial derivative of the option price with respect to the continuously compounded risk-free rate $r$, evaluated at the given parameters. Report your answer as a single real number, rounded to four significant figures. Interpret $\\rho$ as currency units per unit change in the annualized continuously compounded risk-free rate.", "solution": "The problem as stated is well-posed, scientifically grounded, and contains all necessary information for a unique solution under the Black-Scholes-Merton framework. We shall proceed with the derivation and calculation.\n\nThe price of a European call option, $C$, on a non-dividend-paying stock is given by the Black-Scholes-Merton (BSM) formula. At time $t=0$, the price is:\n$$ C = S_{0} N(d_1) - K \\exp(-rT) N(d_2) $$\nwhere $N(\\cdot)$ is the cumulative distribution function (CDF) of the standard normal distribution. The terms $d_1$ and $d_2$ are defined as:\n$$ d_1 = \\frac{\\ln\\left(\\frac{S_{0}}{K}\\right) + \\left(r + \\frac{1}{2}\\sigma^{2}\\right)T}{\\sigma\\sqrt{T}} $$\n$$ d_2 = d_1 - \\sigma\\sqrt{T} $$\nThe option's rho, $\\rho$, is the partial derivative of the option price $C$ with respect to the risk-free interest rate $r$:\n$$ \\rho = \\frac{\\partial C}{\\partial r} $$\nWe apply the chain rule and product rule to the BSM formula for $C$:\n$$ \\rho = \\frac{\\partial}{\\partial r} \\left[ S_{0} N(d_1) - K \\exp(-rT) N(d_2) \\right] $$\n$$ \\rho = S_{0} \\frac{\\partial N(d_1)}{\\partial r} - \\left[ \\frac{\\partial (K \\exp(-rT))}{\\partial r} N(d_2) + K \\exp(-rT) \\frac{\\partial N(d_2)}{\\partial r} \\right] $$\nLet $N'(x)$ denote the probability density function (PDF) of the standard normal distribution. Using the chain rule, $\\frac{\\partial N(x)}{\\partial r} = N'(x) \\frac{\\partial x}{\\partial r}$.\n$$ \\rho = S_{0} N'(d_1) \\frac{\\partial d_1}{\\partial r} - \\left[ -TK \\exp(-rT) N(d_2) + K \\exp(-rT) N'(d_2) \\frac{\\partial d_2}{\\partial r} \\right] $$\nNext, we find the partial derivatives of $d_1$ and $d_2$ with respect to $r$:\n$$ \\frac{\\partial d_1}{\\partial r} = \\frac{\\partial}{\\partial r} \\left[ \\frac{\\ln(S_{0}/K) + rT + \\frac{1}{2}\\sigma^{2}T}{\\sigma\\sqrt{T}} \\right] = \\frac{T}{\\sigma\\sqrt{T}} = \\frac{\\sqrt{T}}{\\sigma} $$\n$$ \\frac{\\partial d_2}{\\partial r} = \\frac{\\partial}{\\partial r} \\left[ d_1 - \\sigma\\sqrt{T} \\right] = \\frac{\\partial d_1}{\\partial r} = \\frac{\\sqrt{T}}{\\sigma} $$\nSubstituting these into the expression for $\\rho$:\n$$ \\rho = S_{0} N'(d_1) \\frac{\\sqrt{T}}{\\sigma} + TK \\exp(-rT) N(d_2) - K \\exp(-rT) N'(d_2) \\frac{\\sqrt{T}}{\\sigma} $$\nA fundamental identity in the BSM model is $S_{0} N'(d_1) = K \\exp(-rT) N'(d_2)$. Substituting this identity into the third term of the expression for $\\rho$:\n$$ \\rho = S_{0} N'(d_1) \\frac{\\sqrt{T}}{\\sigma} + TK \\exp(-rT) N(d_2) - S_{0} N'(d_1) \\frac{\\sqrt{T}}{\\sigma} $$\nThe first and third terms cancel, yielding the simplified formula for rho:\n$$ \\rho = K T \\exp(-rT) N(d_2) $$\nNow, we substitute the given parameters into our formulae:\n$S_{0} = 100$\n$K = 100$\n$T = 100$ years\n$r = 0.02$ per year\n$\\sigma = 0.20$ per year\n\nFirst, we compute $d_1$ and $d_2$:\nSince $S_{0}=K$, the term $\\ln(S_{0}/K) = \\ln(1) = 0$.\n$$ d_1 = \\frac{0 + \\left(0.02 + \\frac{1}{2}(0.20)^{2}\\right) \\times 100}{0.20\\sqrt{100}} = \\frac{\\left(0.02 + \\frac{1}{2}(0.04)\\right) \\times 100}{0.20 \\times 10} = \\frac{(0.02 + 0.02) \\times 100}{2} = \\frac{0.04 \\times 100}{2} = \\frac{4}{2} = 2 $$\n$$ d_2 = d_1 - \\sigma\\sqrt{T} = 2 - 0.20\\sqrt{100} = 2 - 2 = 0 $$\nNext, we evaluate $N(d_2)$:\n$$ N(d_2) = N(0) $$\nThe value of the standard normal CDF at $0$ is precisely $0.5$, due to the symmetry of the distribution around its mean of $0$.\n$$ N(0) = 0.5 $$\nFinally, we substitute these values into the formula for $\\rho$:\n$$ \\rho = K T \\exp(-rT) N(d_2) = 100 \\times 100 \\times \\exp(-0.02 \\times 100) \\times 0.5 $$\n$$ \\rho = 10000 \\times \\exp(-2) \\times 0.5 = 5000 \\exp(-2) $$\nTo find the numerical value, we compute:\n$$ \\rho \\approx 5000 \\times 0.13533528... \\approx 676.6764... $$\nRounding to four significant figures as required gives $676.7$.\n\nThe interpretation of rho is the rate of change of the option price with respect to the risk-free interest rate. A value of $\\rho = 676.7$ signifies that for a $1$ unit increase in the annualized continuously compounded risk-free rate (e.g., from $r=0.02$ to $r=1.02$), the option's price is expected to increase by approximately $676.7$ currency units, all else being equal. More practically, for a $1\\%$ increase in the interest rate (i.e., $\\Delta r = 0.01$), the option price would increase by approximately $676.7 \\times 0.01 = 6.767$ currency units.", "answer": "$$\\boxed{676.7}$$"}, {"introduction": "This final, capstone exercise bridges the gap between financial theory and computational practice. Here, you will implement a simulation to test the effectiveness of the BSM delta-hedging strategy under two different assumptions for the underlying asset's behavior [@problem_id:2438266]. This hands-on project illuminates the real-world challenges of discrete rebalancing and, most importantly, introduces the critical concept of model risk—the error that arises when our hedging model does not perfectly match reality.", "id": "2438266", "problem": "Construct a self-contained program that computes and compares the terminal hedging error from a delta-neutral, self-financing replication strategy for a European call option under two distinct data-generating processes for the underlying asset price. The first process is geometric Brownian motion and the second is a mean-reverting process obtained by exponentiating an Ornstein-Uhlenbeck process. All interest rates and volatilities must be expressed as decimals.\n\nLet the underlying asset price be denoted by $S_t$, the strike by $K$, the continuously compounded risk-free interest rate by $r$, and the time to maturity by $T$. Consider a European call with payoff $\\max(S_T - K, 0)$.\n\nModel A (geometric Brownian motion): the price process $S_t$ follows\n$$\n\\mathrm{d}S_t = (r - q)\\, S_t\\, \\mathrm{d}t + \\sigma\\, S_t\\, \\mathrm{d}W_t,\n$$\nwith continuous dividend yield $q = 0$. Model B (exponential Ornstein-Uhlenbeck): define $X_t$ by\n$$\n\\mathrm{d}X_t = \\kappa\\,(\\theta - X_t)\\,\\mathrm{d}t + \\eta\\, \\mathrm{d}W_t,\n$$\nand set $S_t = \\exp(X_t)$ to ensure positivity. Use $X_0 = \\ln(S_0)$ and set $\\theta = \\ln(S_0)$.\n\nThe hedging strategy is defined as follows. At each rebalancing time $t_i$ on a uniform grid with $t_0 = 0$, $t_i = i\\,\\Delta t$, $i \\in \\{0,1,\\dots,N\\}$, and $\\Delta t = T/N$, construct a delta-neutral, self-financing portfolio that uses the Black-Scholes-Merton delta computed under the assumption of geometric Brownian motion with volatility parameter $\\sigma$ and dividend yield $q=0$. Specifically, let $C_{\\text{BSM}}(S, K, r, \\sigma, \\tau)$ denote the Black-Scholes-Merton price at time-to-maturity $\\tau$ and let $\\Delta_{\\text{BSM}}(S, K, r, \\sigma, \\tau)$ denote the corresponding delta. Initialize the portfolio at $t_0$ with cash $B_0$ and stock position $\\Delta_0$, where $\\Delta_0 = \\Delta_{\\text{BSM}}(S_0, K, r, \\sigma, T)$ and $B_0 = C_{\\text{BSM}}(S_0, K, r, \\sigma, T) - \\Delta_0 S_0$. Between rebalancing times, the cash account accrues interest at rate $r$, and, at each rebalancing time $t_i$ for $i \\in \\{1,\\dots,N-1\\}$, adjust the stock position from $\\Delta_{i-1}$ to $\\Delta_i = \\Delta_{\\text{BSM}}(S_{t_i}, K, r, \\sigma, T - t_i)$ by buying or selling shares; the cash account is debited or credited accordingly so that the strategy is self-financing. There is no rebalancing at maturity $t_N = T$. The terminal portfolio value is\n$$\nV_T = \\Delta_{N-1}\\, S_T + B_{N-1}\\, \\mathrm{e}^{r \\Delta t},\n$$\nand the terminal hedging error is\n$$\nE = V_T - \\max(S_T - K, 0).\n$$\n\nYour program must estimate, for each specified test case, the root-mean-squared hedging error under Model A and under Model B. This requires simulating $M$ independent paths of the underlying process with time step $\\Delta t = T/N$, carrying out the discrete-time hedging strategy along each path as described, and then computing\n$$\n\\text{RMSE} = \\sqrt{\\frac{1}{M} \\sum_{m=1}^{M} E_m^2}.\n$$\nTo make the result deterministic and testable, use a pseudo-random number generator initialized with seed $s_i = 123456 + i$ for test case index $i$ starting at $0$, and use the same sequence of standard normal shocks for Model A and Model B within each test case. All interest rates and volatilities must be expressed as decimals.\n\nTest suite (three cases that together cover a typical case, a coarse-rebalancing boundary, and a stressed configuration). In each case, specify $(S_0, K, r, T, \\sigma, \\kappa, \\eta, N, M)$:\n- Case $0$ (typical): $S_0 = 100$, $K = 100$, $r = 0.02$, $T = 1$, $\\sigma = 0.2$, $\\kappa = 1.0$, $\\eta = 0.2$, $N = 252$, $M = 20000$.\n- Case $1$ (coarse rebalancing): $S_0 = 100$, $K = 100$, $r = 0.02$, $T = 1$, $\\sigma = 0.2$, $\\kappa = 1.0$, $\\eta = 0.2$, $N = 1$, $M = 20000$.\n- Case $2$ (stressed): $S_0 = 100$, $K = 50$, $r = 0.02$, $T = 0.25$, $\\sigma = 0.4$, $\\kappa = 3.0$, $\\eta = 0.3$, $N = 13$, $M = 20000$.\n\nFinal output format: Your program should produce a single line of output containing the results as a comma-separated list enclosed in square brackets. For each test case $i \\in \\{0,1,2\\}$, report a two-element list $[\\text{RMSE}^{(A)}_i, \\text{RMSE}^{(B)}_i]$, where $\\text{RMSE}^{(A)}_i$ is the root-mean-squared hedging error under Model A and $\\text{RMSE}^{(B)}_i$ is the root-mean-squared hedging error under Model B. Round each reported value to $6$ decimal places. The final output must therefore be a single line like\n$$\n\\bigl[[\\text{RMSE}^{(A)}_0,\\ \\text{RMSE}^{(B)}_0],\\ [\\text{RMSE}^{(A)}_1,\\ \\text{RMSE}^{(B)}_1],\\ [\\text{RMSE}^{(A)}_2,\\ \\text{RMSE}^{(B)}_2]\\bigr].\n$$", "solution": "We compare discrete-time delta-hedging replication errors for a European call under two different data-generating processes for the underlying. The construction rests on two principles: no-arbitrage pricing under the Black-Scholes-Merton framework and self-financing delta hedging.\n\nFirst, under the Black-Scholes-Merton framework (Black-Scholes-Merton), when the underlying $S_t$ follows geometric Brownian motion with continuous dividend yield $q = 0$,\n$$\n\\mathrm{d}S_t = (r - q)\\, S_t\\, \\mathrm{d}t + \\sigma\\, S_t\\, \\mathrm{d}W_t,\n$$\nthe arbitrage-free price $C_{\\text{BSM}}(S, K, r, \\sigma, \\tau)$ of a European call with time to maturity $\\tau$ is obtained by solving the risk-neutral valuation problem or, equivalently, the associated partial differential equation. The corresponding delta is the derivative of the price with respect to the underlying. Explicitly,\n$$\nd_1 = \\frac{\\ln(S/K) + (r - q + \\tfrac{1}{2}\\sigma^2)\\tau}{\\sigma \\sqrt{\\tau}},\\quad d_2 = d_1 - \\sigma \\sqrt{\\tau},\n$$\n$$\nC_{\\text{BSM}}(S, K, r, \\sigma, \\tau) = \\mathrm{e}^{-q \\tau} S\\, \\Phi(d_1) - \\mathrm{e}^{-r \\tau} K\\, \\Phi(d_2),\n$$\n$$\n\\Delta_{\\text{BSM}}(S, K, r, \\sigma, \\tau) = \\mathrm{e}^{-q \\tau}\\, \\Phi(d_1),\n$$\nwhere $\\Phi(\\cdot)$ is the standard normal cumulative distribution function and $q=0$ here.\n\nSecond, consider a self-financing, delta-neutral portfolio that initially shorts one call and holds $\\Delta_0 = \\Delta_{\\text{BSM}}(S_0, K, r, \\sigma, T)$ shares, with cash $B_0 = C_{\\text{BSM}}(S_0, K, r, \\sigma, T) - \\Delta_0 S_0$. On a grid $t_i = i \\Delta t$ with $i \\in \\{0,1,\\dots,N\\}$ and $\\Delta t = T/N$, the cash account accrues at rate $r$ between rebalancings, and rebalancing from $\\Delta_{i-1}$ to $\\Delta_i$ at time $t_i$ changes the cash by $-(\\Delta_i - \\Delta_{i-1}) S_{t_i}$. There is no dividend flow since $q=0$. As a discrete-time approximation to the continuous-time self-financing condition, for $i \\in \\{1,2,\\dots,N-1\\}$,\n$$\nB_i = B_{i-1}\\, \\mathrm{e}^{r \\Delta t} - \\left(\\Delta_i - \\Delta_{i-1}\\right) S_{t_i}.\n$$\nNo rebalancing occurs at maturity $t_N = T$. The terminal portfolio value is\n$$\nV_T = \\Delta_{N-1} S_T + B_{N-1}\\, \\mathrm{e}^{r \\Delta t},\n$$\nand the terminal hedging error is\n$$\nE = V_T - \\max(S_T - K, 0).\n$$\n\nWe evaluate and compare the root-mean-squared error across $M$ sample paths for two data-generating processes:\n\n- Model A (geometric Brownian motion): simulate\n$$\nS_{t_{i+1}} = S_{t_i} \\exp\\left((r - q - \\tfrac{1}{2}\\sigma^2)\\Delta t + \\sigma \\sqrt{\\Delta t}\\, Z_i\\right),\n$$\nwith $q=0$ and independent standard normal shocks $Z_i$.\n\n- Model B (exponential Ornstein-Uhlenbeck): simulate $X_t$ as\n$$\nX_{t_{i+1}} = \\theta + (X_{t_i} - \\theta)\\, \\mathrm{e}^{-\\kappa \\Delta t} + \\eta\\, \\sqrt{\\frac{1 - \\mathrm{e}^{-2 \\kappa \\Delta t}}{2 \\kappa}}\\, Z_i,\n$$\nand set $S_{t_i} = \\exp(X_{t_i})$. We use $X_0 = \\ln(S_0)$ and $\\theta = \\ln(S_0)$ so that $X_t$ mean-reverts to the initial log-price.\n\nUsing the same sequence of shocks $Z_i$ for both models in a given test case improves comparability. For determinism, we initialize the pseudo-random number generator with seed $s_i = 123456 + i$ for test case index $i \\in \\{0,1,2\\}$. For each path, we carry out the discrete hedging procedure: at $t_0$, set $\\Delta_0$ and $B_0$ from the Black-Scholes-Merton price and delta; on each interval, accrue cash at rate $r$, advance the underlying with the chosen model, and at the next grid time $t_i$ for $i \\in \\{1,\\dots,N-1\\}$, update $\\Delta_i$ using the Black-Scholes-Merton delta computed with current $S_{t_i}$ and remaining time $T - t_i$, adjusting the cash by $-(\\Delta_i - \\Delta_{i-1}) S_{t_i}$. At maturity, compute $V_T$ and the error $E$, and then the root-mean-squared error\n$$\n\\text{RMSE} = \\sqrt{\\frac{1}{M} \\sum_{m=1}^{M} E_m^2}.\n$$\n\nThe test suite specifies three parameter sets:\n- Case $0$: $S_0 = 100$, $K = 100$, $r = 0.02$, $T = 1$, $\\sigma = 0.2$, $\\kappa = 1.0$, $\\eta = 0.2$, $N = 252$, $M = 20000$, seed $123456$.\n- Case $1$: $S_0 = 100$, $K = 100$, $r = 0.02$, $T = 1$, $\\sigma = 0.2$, $\\kappa = 1.0$, $\\eta = 0.2$, $N = 1$, $M = 20000$, seed $123457$.\n- Case $2$: $S_0 = 100$, $K = 50$, $r = 0.02$, $T = 0.25$, $\\sigma = 0.4$, $\\kappa = 3.0$, $\\eta = 0.3$, $N = 13$, $M = 20000$, seed $123458$.\n\nThe final program must output a single line aggregating the results for the three cases as a list of lists\n$$\n\\bigl[[\\text{RMSE}^{(A)}_0,\\ \\text{RMSE}^{(B)}_0],\\ [\\text{RMSE}^{(A)}_1,\\ \\text{RMSE}^{(B)}_1],\\ [\\text{RMSE}^{(A)}_2,\\ \\text{RMSE}^{(B)}_2]\\bigr],\n$$\nwith each floating-point number rounded to $6$ decimal places. This format enables automated evaluation. The scientific rationale is that under geometric Brownian motion with continuous rebalancing, the Black-Scholes-Merton delta hedge eliminates risk, while discrete rebalancing leaves residual error; under a misspecified dynamics such as exponential Ornstein-Uhlenbeck, the Black-Scholes-Merton delta is not model-consistent, and the replication error is typically larger, a fact that this computation quantifies.", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\nfrom math import log, exp, sqrt, isfinite\nfrom scipy.stats import norm\n\ndef bs_price_delta(S, K, r, sigma, tau):\n    \"\"\"\n    Black-Scholes-Merton call price and delta with zero dividend yield.\n    Vectorized over S and tau (tau can be scalar).\n    \"\"\"\n    S = np.asarray(S, dtype=float)\n    tau = float(tau)\n    # Handle tau == 0 separately to avoid division by zero.\n    if tau <= 0.0:\n        # At maturity: price = max(S - K, 0), delta = 1_{S > K} with 0.5 at S==K\n        price = np.maximum(S - K, 0.0)\n        delta = np.where(S > K, 1.0, np.where(S < K, 0.0, 0.5))\n        return price, delta\n\n    # For tau > 0:\n    vol_sqrt_tau = sigma * sqrt(tau)\n    # Avoid log(0)\n    with np.errstate(divide='ignore', invalid='ignore'):\n        d1 = (np.log(S / K) + (r + 0.5 * sigma * sigma) * tau) / vol_sqrt_tau\n    d2 = d1 - vol_sqrt_tau\n\n    Nd1 = norm.cdf(d1)\n    Nd2 = norm.cdf(d2)\n    price = S * Nd1 - K * exp(-r * tau) * Nd2\n    delta = Nd1\n    # Handle any NaNs due to S <= 0 (shouldn't occur in our simulations)\n    price = np.where(np.isfinite(price), price, 0.0)\n    delta = np.where(np.isfinite(delta), delta, 0.0)\n    return price, delta\n\ndef simulate_and_hedge_gbm(S0, K, r, sigma, T, N, Z):\n    \"\"\"\n    Simulate GBM paths and compute RMSE of terminal hedging error\n    for BSM delta-hedging with discrete rebalancing.\n    Z: array of shape (M, N) standard normals for increments.\n    \"\"\"\n    M, Ncols = Z.shape\n    assert Ncols == N, \"Z shape mismatch with N\"\n    dt = T / N\n    # Initialize\n    S = np.full(M, S0, dtype=float)\n    # Initial BSM price and delta\n    price0, delta = bs_price_delta(S, K, r, sigma, T)\n    cash = price0 - delta * S  # initial cash position\n\n    mu_dt = (r - 0.0 - 0.5 * sigma * sigma) * dt\n    vol_sqrt_dt = sigma * sqrt(dt)\n    erdt = exp(r * dt)\n\n    # Rebalance at times t=dt, 2dt, ..., (N-1)dt\n    for i in range(N):\n        # Accrue cash over dt\n        cash *= erdt\n        # Advance S over dt\n        S = S * np.exp(mu_dt + vol_sqrt_dt * Z[:, i])\n        # Rebalance at next grid time if not maturity\n        if i < N - 1:\n            tau_next = T - (i + 1) * dt\n            # Compute new delta at time t_{i+1}\n            _, delta_next = bs_price_delta(S, K, r, sigma, tau_next)\n            # Self-financing cash adjustment\n            cash -= (delta_next - delta) * S\n            delta = delta_next\n        # else: no rebalancing at maturity\n\n    # Terminal portfolio value and hedging error\n    V_T = delta * S + cash\n    payoff = np.maximum(S - K, 0.0)\n    error = V_T - payoff\n    rmse = float(np.sqrt(np.mean(error * error)))\n    return rmse\n\ndef simulate_and_hedge_expou(S0, K, r, sigma, T, N, Z, kappa, eta):\n    \"\"\"\n    Simulate exponential OU paths (X OU, S=exp(X)) and compute RMSE of\n    terminal hedging error for BSM delta-hedging with discrete rebalancing.\n    Z: array of shape (M, N) standard normals for increments.\n    \"\"\"\n    M, Ncols = Z.shape\n    assert Ncols == N, \"Z shape mismatch with N\"\n    dt = T / N\n    # Initialize\n    X = np.full(M, log(S0), dtype=float)\n    theta = log(S0)  # mean-reversion level for log-price\n    S = np.exp(X)\n\n    # Initial BSM price and delta based on initial S\n    price0, delta = bs_price_delta(S, K, r, sigma, T)\n    cash = price0 - delta * S  # initial cash position\n\n    erdt = exp(r * dt)\n    ekdt = exp(-kappa * dt)\n    # Exact OU increment variance term\n    var_term = (1.0 - exp(-2.0 * kappa * dt)) / (2.0 * kappa) if kappa > 0 else dt\n    std_ou = eta * sqrt(var_term)\n\n    for i in range(N):\n        # Accrue cash over dt\n        cash *= erdt\n        # Advance X with exact OU step, then S = exp(X)\n        X = theta + (X - theta) * ekdt + std_ou * Z[:, i]\n        S = np.exp(X)\n        if i < N - 1:\n            tau_next = T - (i + 1) * dt\n            _, delta_next = bs_price_delta(S, K, r, sigma, tau_next)\n            cash -= (delta_next - delta) * S\n            delta = delta_next\n\n    V_T = delta * S + cash\n    payoff = np.maximum(S - K, 0.0)\n    error = V_T - payoff\n    rmse = float(np.sqrt(np.mean(error * error)))\n    return rmse\n\ndef solve():\n    # Define the test cases from the problem statement.\n    # Each case: (S0, K, r, T, sigma, kappa, eta, N, M)\n    test_cases = [\n        (100.0, 100.0, 0.02, 1.0, 0.2, 1.0, 0.2, 252, 20000),   # Case 0\n        (100.0, 100.0, 0.02, 1.0, 0.2, 1.0, 0.2, 1,   20000),   # Case 1\n        (100.0, 50.0,  0.02, 0.25, 0.4, 3.0, 0.3, 13,  20000),  # Case 2\n    ]\n\n    results = []\n    for idx, case in enumerate(test_cases):\n        S0, K, r, T, sigma, kappa, eta, N, M = case\n        # Set deterministic seed per case\n        seed = 123456 + idx\n        rng = np.random.default_rng(seed)\n        Z = rng.standard_normal(size=(M, N))\n        # Model A: GBM\n        rmse_gbm = simulate_and_hedge_gbm(S0, K, r, sigma, T, N, Z)\n        # Model B: Exponential OU\n        rmse_expou = simulate_and_hedge_expou(S0, K, r, sigma, T, N, Z, kappa, eta)\n        # Round to 6 decimals as required\n        results.append([round(rmse_gbm, 6), round(rmse_expou, 6)])\n\n    # Format as a single-line nested list with comma-separated values.\n    # Ensure fixed 6 decimal places.\n    def format_results(res):\n        parts = []\n        for pair in res:\n            parts.append(f\"[{pair[0]:.6f},{pair[1]:.6f}]\")\n        return \"[\" + \",\".join(parts) + \"]\"\n\n    print(format_results(results))\n\nif __name__ == \"__main__\":\n    solve()\n```"}]}