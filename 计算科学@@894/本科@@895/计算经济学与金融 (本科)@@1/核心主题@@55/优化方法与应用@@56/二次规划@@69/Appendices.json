{"hands_on_practices": [{"introduction": "222222二次规划在解决现实世界中的资源配置和选址问题时非常有用。第一个练习将引导你解决一个经典的仓库选址问题，你需要在一个特定的区域限制下，为一系列零售店找到一个最优的仓库位置，以最小化总运输成本。这个练习旨在帮助你掌握使用拉格朗日乘数法 (Lagrange multipliers) 解决等式约束二次规划问题的核心技巧，并直观地理解其几何意义。[@problem_id:2424375]", "id": "2424375", "problem": "一家公司计划开设一个仓库，为 $N$ 个零售店提供服务。这些零售店位于 $\\{x_i\\}_{i=1}^N \\subset \\mathbb{R}^d$ 的位置，其中 $d \\in \\mathbb{N}$。每个商店 $i$ 都有一个严格为正的需求权重 $w_i \\in \\mathbb{R}_{++}$，且 $\\sum_{i=1}^N w_i \\in \\mathbb{R}_{++}$。该公司使用欧几里得距离的平方来模拟总运输成本，并寻求将仓库建在 $x \\in \\mathbb{R}^d$ 的位置，以最小化到各商店的总加权平方距离。由于分区规划要求，仓库必须位于由 $a^{\\top} x = b$ 给定的指定仿射超平面上，其中 $a \\in \\mathbb{R}^d \\setminus \\{0\\}$ 和 $b \\in \\mathbb{R}$ 是给定的。形式上，该问题为\n$$\n\\min_{x \\in \\mathbb{R}^d} \\;\\; \\sum_{i=1}^N w_i \\,\\|x - x_i\\|_2^2\n\\quad \\text{subject to} \\quad a^{\\top} x = b.\n$$\n求解最优仓库位置的闭式解，该解应是 $\\{x_i\\}_{i=1}^N$、$\\{w_i\\}_{i=1}^N$、$a$ 和 $b$ 的函数。请以单一解析表达式的形式给出最终答案。无需四舍五入。", "solution": "首先必须验证问题陈述的正确性和可行性。\n\n**步骤1：提取已知条件**\n问题陈述中提供的明确信息如下：\n- 零售店数量：$N$。\n- 商店 $i$ 的位置：$x_i \\in \\mathbb{R}^d$，对于 $i \\in \\{1, 2, \\dots, N\\}$，其中 $d \\in \\mathbb{N}$。\n- 商店 $i$ 的需求权重：$w_i \\in \\mathbb{R}_{++}$ (严格为正的实数)。总权重也严格为正：$\\sum_{i=1}^N w_i \\in \\mathbb{R}_{++}$。\n- 待确定的仓库位置：$x \\in \\mathbb{R}^d$。\n- 待最小化的目标函数：$f(x) = \\sum_{i=1}^N w_i \\,\\|x - x_i\\|_2^2$。\n- 仓库位置的约束条件：$a^{\\top} x = b$。\n- 约束参数：$a \\in \\mathbb{R}^d \\setminus \\{0\\}$ (一个非零向量) 和 $b \\in \\mathbb{R}$ (一个标量)。\n\n**步骤2：使用提取的已知条件进行验证**\n对该问题进行严格验证。\n- **科学依据**：该问题是一个经典的带约束优化问题，具体来说是一个二次规划 (QP) 问题。目标函数是加权欧几里得距离平方和，这是位置分析和统计学中表示方差或成本的标准选择。约束是一个线性等式，定义了一个仿射超平面。该公式牢固地植根于凸优化理论，在数学上是合理的。\n- **适定性**：目标函数 $f(x)$ 是平方范数之和。它可以展开为：\n$$f(x) = \\sum_{i=1}^N w_i (x - x_i)^\\top (x - x_i) = \\sum_{i=1}^N w_i (x^\\top x - 2x^\\top x_i + x_i^\\top x_i)$$\n$$f(x) = \\left(\\sum_{i=1}^N w_i\\right) x^\\top x - 2x^\\top \\left(\\sum_{i=1}^N w_i x_i\\right) + \\left(\\sum_{i=1}^N w_i x_i^\\top x_i\\right)$$\n这是关于 $x$ 的二次函数。其Hessian矩阵为 $\\nabla^2_x f(x) = 2 \\left(\\sum_{i=1}^N w_i\\right) I_d$，其中 $I_d$ 是 $d \\times d$ 的单位矩阵。由于所有 $w_i > 0$，总权重 $\\sum w_i > 0$，因此Hessian矩阵是正定的。这证实了 $f(x)$ 是一个严格凸函数。约束集 $C = \\{x \\in \\mathbb{R}^d \\mid a^\\top x = b\\}$ 是一个仿射子空间，它是一个凸集。在一个非空凸集上最小化一个严格凸函数，可以保证唯一解的存在。因此，该问题是适定的。\n- **客观性**：该问题使用精确、无歧义的数学语言陈述。不存在主观或基于观点的元素。\n\n该问题没有任何缺陷。它不是科学上不合理、不可形式化、不完整、不切实际或不适定的。\n\n**步骤3：结论与行动**\n该问题是**有效的**。将推导求解。\n\n这是一个带约束优化问题，可以使用拉格朗日乘数法求解。任务是找到 $x \\in \\mathbb{R}^d$ 来解决：\n$$ \\min_{x \\in \\mathbb{R}^d} \\sum_{i=1}^N w_i \\|x - x_i\\|_2^2 \\quad \\text{subject to} \\quad a^\\top x - b = 0 $$\n拉格朗日函数 $\\mathcal{L}(x, \\lambda)$ 构建如下：\n$$ \\mathcal{L}(x, \\lambda) = \\sum_{i=1}^N w_i (x - x_i)^\\top(x - x_i) + \\lambda (a^\\top x - b) $$\n其中 $\\lambda \\in \\mathbb{R}$ 是拉格朗日乘子。对于最优解 $x^*$，Karush-Kuhn-Tucker (KKT) 条件要求拉格朗日函数关于 $x$ 的梯度为零：\n$$ \\nabla_x \\mathcal{L}(x^*, \\lambda^*) = 0 $$\n我们计算 $\\mathcal{L}(x, \\lambda)$ 关于 $x$ 的梯度：\n$$ \\nabla_x \\mathcal{L}(x, \\lambda) = \\nabla_x \\left( \\sum_{i=1}^N w_i (x^\\top x - 2x^\\top x_i + x_i^\\top x_i) + \\lambda (a^\\top x - b) \\right) $$\n$$ \\nabla_x \\mathcal{L}(x, \\lambda) = \\sum_{i=1}^N w_i (2x - 2x_i) + \\lambda a = 2 \\left( \\sum_{i=1}^N w_i \\right) x - 2 \\sum_{i=1}^N w_i x_i + \\lambda a $$\n让我们定义总权重 $W = \\sum_{j=1}^N w_j$ 和加权平均位置（质心）$\\bar{x} = \\frac{1}{W} \\sum_{i=1}^N w_i x_i$。梯度表达式简化为：\n$$ \\nabla_x \\mathcal{L}(x, \\lambda) = 2W x - 2W \\bar{x} + \\lambda a = 2W(x - \\bar{x}) + \\lambda a $$\n将梯度设为零，得到一阶条件：\n$$ 2W(x^* - \\bar{x}) + \\lambda^* a = 0 $$\n由于 $W > 0$，我们可以用乘子 $\\lambda^*$ 来表示最优位置 $x^*$：\n$$ x^* = \\bar{x} - \\frac{\\lambda^*}{2W} a $$\n最优解 $x^*$ 还必须满足约束条件 $a^\\top x^* = b$。我们将 $x^*$ 的表达式代入约束方程以求得 $\\lambda^*$：\n$$ a^\\top \\left( \\bar{x} - \\frac{\\lambda^*}{2W} a \\right) = b $$\n$$ a^\\top \\bar{x} - \\frac{\\lambda^*}{2W} (a^\\top a) = b $$\n认识到 $a^\\top a = \\|a\\|_2^2$，我们求解 $\\lambda^*$：\n$$ \\frac{\\lambda^*}{2W} \\|a\\|_2^2 = a^\\top \\bar{x} - b $$\n由于 $a \\neq 0$，因此 $\\|a\\|_2^2 > 0$，我们可以分离出带有乘子的项：\n$$ \\frac{\\lambda^*}{2W} = \\frac{a^\\top \\bar{x} - b}{\\|a\\|_2^2} $$\n现在我们将其代回 $x^*$ 的表达式中：\n$$ x^* = \\bar{x} - \\left( \\frac{a^\\top \\bar{x} - b}{\\|a\\|_2^2} \\right) a $$\n此表达式代表了最优的仓库位置。从几何上看，目标函数的无约束最小化解是加权平均值 $\\bar{x}$。$x^*$ 的公式表明，带约束的最优解是无约束最小化解 $\\bar{x}$ 在由 $a^\\top x = b$ 定义的仿射超平面上的正交投影。\n\n为了用初始问题参数表示最终答案，我们代入 $\\bar{x}$ 和 $W$ 的定义：\n$$ \\bar{x} = \\frac{\\sum_{i=1}^N w_i x_i}{\\sum_{j=1}^N w_j} $$\n将此代入 $x^*$ 的表达式中：\n$$ x^* = \\frac{\\sum_{i=1}^N w_i x_i}{\\sum_{j=1}^N w_j} - \\frac{a^\\top \\left( \\frac{\\sum_{k=1}^N w_k x_k}{\\sum_{j=1}^N w_j} \\right) - b}{\\|a\\|_2^2} a $$\n为了简化分数，我们可以将 $a$ 的系数的分子和分母同时乘以 $\\sum_{j=1}^N w_j$：\n$$ x^* = \\frac{\\sum_{i=1}^N w_i x_i}{\\sum_{j=1}^N w_j} - \\left( \\frac{a^\\top \\left( \\sum_{k=1}^N w_k x_k \\right) - b \\left( \\sum_{j=1}^N w_j \\right)}{\\left( \\sum_{j=1}^N w_j \\right) \\|a\\|_2^2} \\right) a $$\n这是最优仓库位置的最终闭式表达式。", "answer": "$$\\boxed{\\frac{\\sum_{i=1}^N w_i x_i}{\\sum_{j=1}^N w_j} - \\left( \\frac{a^\\top \\left( \\sum_{k=1}^N w_k x_k \\right) - b \\left( \\sum_{j=1}^N w_j \\right)}{\\left( \\sum_{j=1}^N w_j \\right) \\|a\\|_2^2} \\right) a}$$"}, {"introduction": "在经济学和金融学中，决策往往受到不等式约束，例如预算上限或非负投资。这个练习模拟了一家公司如何在网络安全和新功能开发之间分配预算，以最大化其战略效用，其中效用函数体现了边际收益递减的特点。通过解决这个问题，你将学会处理带有多重不等式约束的二次规划问题，并理解最优解为何常常出现在可行域的边界上，这对掌握KKT (Karush-Kuhn-Tucker) 条件至关重要。[@problem_id:2424372]", "id": "2424372", "problem": "一家科技公司将其年度信息技术预算分配给两项活动：网络安全和新功能开发。设分配给网络安全的资金为 $x$ 百万美元，分配给新功能开发的资金为 $y$ 百万美元。该公司从此项分配中获得的净战略效用（以利润等价单位衡量）为\n$$\nU(x,y) \\;=\\; 12\\,x \\;-\\; 1.5\\,x^{2} \\;+\\; 10\\,y \\;-\\; y^{2} \\;+\\; 0.6\\,x\\,y.\n$$\n该分配受以下约束条件限制：\n$$\nx + y \\leq 10,\\quad x \\geq 2,\\quad y \\geq 0,\n$$\n其中 $10$ 是总预算（单位：百万美元），$x \\geq 2$ 反映了对网络安全的监管最低要求，而 $y \\geq 0$ 反映了投资的非负性。\n\n请确定在满足约束条件的情况下，使 $U(x,y)$ 最大化的 $x$ 的值。请以百万美元为单位表示您的答案，并将其四舍五入到四位有效数字。", "solution": "该问题是要求解在满足一组线性不等式约束的条件下，使效用函数 $U(x,y)$ 最大化的 $x$ 和 $y$ 的值。这是一个约束优化问题，具体来说是一个二次规划问题。目标函数为\n$$\nU(x,y) = 12x - 1.5x^2 + 10y - y^2 + 0.6xy\n$$\n约束条件为：\n$$\nx + y \\leq 10 \\\\\nx \\geq 2 \\\\\ny \\geq 0\n$$\n\n首先，我们验证问题结构。由线性不等式定义的可行域是一个闭合有界集（一个紧集）。具体来说，它是 $xy$ 平面上的一个三角形，顶点为 $(2,0)$、$(10,0)$ 和 $(2,8)$。作为一个多边形，该可行域是凸的。\n\n接下来，我们分析目标函数 $U(x,y)$。为了确定其凸性/凹性，我们计算海森矩阵，即二阶偏导数矩阵。\n一阶偏导数为：\n$$\n\\frac{\\partial U}{\\partial x} = 12 - 3x + 0.6y\n$$\n$$\n\\frac{\\partial U}{\\partial y} = 10 - 2y + 0.6x\n$$\n二阶偏导数为：\n$$\n\\frac{\\partial^2 U}{\\partial x^2} = -3\n$$\n$$\n\\frac{\\partial^2 U}{\\partial y^2} = -2\n$$\n$$\n\\frac{\\partial^2 U}{\\partial x \\partial y} = \\frac{\\partial^2 U}{\\partial y \\partial x} = 0.6\n$$\n海森矩阵 $H$ 为：\n$$\nH = \\begin{pmatrix} -3 & 0.6 \\\\ 0.6 & -2 \\end{pmatrix}\n$$\n$H$ 的主子式为 $D_1 = -3$ 和 $D_2 = \\det(H) = (-3)(-2) - (0.6)(0.6) = 6 - 0.36 = 5.64$。\n由于 $D_1 < 0$ 且 $D_2 > 0$，海森矩阵是负定的。这意味着函数 $U(x,y)$ 是严格凹函数。\n\n在紧凸集上最大化一个严格凹函数，可以保证存在唯一的全局最大值。该最大值可能出现在可行域的内部，也可能出现在其边界上。\n\n我们首先通过将 $U(x,y)$ 的梯度设为零来找到无约束最大值：\n$$\n12 - 3x + 0.6y = 0 \\implies 3x - 0.6y = 12\n$$\n$$\n10 - 2y + 0.6x = 0 \\implies -0.6x + 2y = 10\n$$\n求解这个线性方程组。由第二个方程，我们有 $2y = 10 + 0.6x$，即 $y = 5 + 0.3x$。将其代入第一个方程：\n$$\n3x - 0.6(5 + 0.3x) = 12\n$$\n$$\n3x - 3 - 0.18x = 12\n$$\n$$\n2.82x = 15 \\implies x = \\frac{15}{2.82} = \\frac{1500}{282} = \\frac{250}{47} \\approx 5.319\n$$\n那么，\n$$\ny = 5 + 0.3\\left(\\frac{250}{47}\\right) = 5 + \\frac{75}{47} = \\frac{235 + 75}{47} = \\frac{310}{47} \\approx 6.596\n$$\n无约束最大值约在 $(5.319, 6.596)$。我们检查该点是否满足约束条件：\n$x = 250/47 \\approx 5.319 \\geq 2$ (满足)。\n$y = 310/47 \\approx 6.596 \\geq 0$ (满足)。\n$x + y = \\frac{250}{47} + \\frac{310}{47} = \\frac{560}{47} \\approx 11.915$。这违反了约束 $x + y \\leq 10$。\n由于无约束最大值在可行域之外，因此约束最大值必定位于可行域的边界上。边界由三条线段组成：\n1. $x + y = 10$，其中 $x \\in [2, 10]$\n2. $x = 2$，其中 $y \\in [0, 8]$\n3. $y = 0$，其中 $x \\in [2, 10]$\n\n我们在每条线段上分析函数 $U(x,y)$。\n\n情况1：边界 $x + y = 10$。\n我们将 $y = 10 - x$ 代入 $U(x,y)$。在该线段上，$x$ 的定义域由 $x \\geq 2$ 和 $y = 10 - x \\geq 0 \\implies x \\leq 10$ 决定。因此，$x \\in [2,10]$。设 $f(x) = U(x, 10 - x)$：\n$$\nf(x) = 12x - 1.5x^2 + 10(10-x) - (10-x)^2 + 0.6x(10-x)\n$$\n$$\nf(x) = 12x - 1.5x^2 + 100 - 10x - (100 - 20x + x^2) + 6x - 0.6x^2\n$$\n$$\nf(x) = (12 - 10 + 20 + 6)x + (-1.5 - 1 - 0.6)x^2 + (100 - 100)\n$$\n$$\nf(x) = 28x - 3.1x^2\n$$\n这是一个凹抛物线。我们通过将其导数设为零来求其最大值：\n$$\nf'(x) = 28 - 6.2x = 0 \\implies x = \\frac{28}{6.2} = \\frac{280}{62} = \\frac{140}{31}\n$$\n$x = \\frac{140}{31} \\approx 4.5161$。该值在区间 $[2, 10]$ 内。因此，它是一个最大值的候选点。对应的 $y$ 值为 $y = 10 - \\frac{140}{31} = \\frac{310 - 140}{31} = \\frac{170}{31}$。\n在此点，$U\\left(\\frac{140}{31}, \\frac{170}{31}\\right) = f\\left(\\frac{140}{31}\\right) = 28\\left(\\frac{140}{31}\\right) - 3.1\\left(\\frac{140}{31}\\right)^2 = \\frac{3920}{31} - \\frac{31}{10}\\frac{19600}{961} = \\frac{3920}{31} - \\frac{1960}{31} = \\frac{1960}{31} \\approx 63.226$。\n\n情况2：边界 $x=2$。\n在该线段上，$y$ 的定义域为 $y \\geq 0$ 且 $2+y \\leq 10 \\implies y \\leq 8$。因此，$y \\in [0,8]$。设 $g(y) = U(2,y)$：\n$$\ng(y) = 12(2) - 1.5(2^2) + 10y - y^2 + 0.6(2)y\n$$\n$$\ng(y) = 24 - 6 + 10y - y^2 + 1.2y = 18 + 11.2y - y^2\n$$\n为了求这个凹抛物线的最大值，我们将其导数设为零：\n$$\ng'(y) = 11.2 - 2y = 0 \\implies y = 5.6\n$$\n该值在区间 $[0, 8]$ 内。候选点为 $(2, 5.6)$。\n效用为 $U(2, 5.6) = 18 + 11.2(5.6) - (5.6)^2 = 18 + 62.72 - 31.36 = 49.36$。\n\n情况3：边界 $y=0$。\n在该线段上，$x$ 的定义域为 $x \\geq 2$ 且 $x+0 \\leq 10 \\implies x \\leq 10$。因此，$x \\in [2,10]$。设 $h(x) = U(x,0)$：\n$$\nh(x) = 12x - 1.5x^2\n$$\n为了求这个凹抛物线的最大值，我们将其导数设为零：\n$$\nh'(x) = 12 - 3x = 0 \\implies x = 4\n$$\n该值在区间 $[2, 10]$ 内。候选点为 $(4, 0)$。\n效用为 $U(4, 0) = 12(4) - 1.5(4^2) = 48 - 1.5(16) = 48 - 24 = 24$。\n\n最后，我们比较在边界线段上找到的候选点的效用值。我们同时也隐式地检查了可行域的角点，因为对线段的分析已经覆盖了它们。\n1. 在线段 $x+y=10$ 上：$U(\\frac{140}{31}, \\frac{170}{31}) = \\frac{1960}{31} \\approx 63.226$。\n2. 在线段 $x=2$ 上：$U(2, 5.6) = 49.36$。\n3. 在线段 $y=0$ 上：$U(4, 0) = 24$。\n\n最大效用值为 $\\frac{1960}{31}$，在点 $(x, y) = \\left(\\frac{140}{31}, \\frac{170}{31}\\right)$ 处取得。\n题目要求的是使 $U(x,y)$ 最大化的 $x$ 值，并四舍五入到四位有效数字。\n$$\nx = \\frac{140}{31} \\approx 4.516129...\n$$\n四舍五入到四位有效数字，我们得到 $x = 4.516$。\n结果 $4.516$ 的单位是百万美元，与题目要求一致。", "answer": "$$\n\\boxed{4.516}\n$$"}, {"introduction": "作为从理论分析到计算实践的桥梁，最后一个练习要求你解决一个在机器学习和投资组合理论中都至关重要的基本问题：将一个向量投影到概率单纯形上。这个问题可以被构建为一个二次规划问题，即在满足权重总和为$1$且所有权重非负的约束下，最小化与目标向量的欧氏距离。这个练习的价值在于，它不仅是一个典型的约束优化问题，更拥有一个高效的算法解，通过实现这个算法，你将能深刻体会到如何将优化理论转化为可执行的、高效的代码。[@problem_id:2424310]", "id": "2424310", "problem": "请看以下这个在计算经济学和金融学中构建只做多投资组合权重时出现的凸二次规划问题。给定一个向量 $y \\in \\mathbb{R}^n$，通过求解下式来找出 $y$ 在概率单纯形上的投影 $x^\\star \\in \\mathbb{R}^n$：\n$$\n\\min_{x \\in \\mathbb{R}^n} \\ \\|x - y\\|_2^2 \\quad \\text{subject to} \\quad \\sum_{i=1}^n x_i = 1,\\ \\ x_i \\ge 0 \\ \\text{for all } i.\n$$\n对于下方的每个测试用例，计算上述问题的唯一最优解 $x^\\star$。将 $x^\\star$ 的每个分量四舍五入到 $6$ 位小数。此问题不涉及物理单位。您的程序不得读取任何输入，且必须严格使用以下测试集。\n\n测试集（每个 $y$ 以其分量的有序元组形式列出）：\n- 用例 $1$：$y = (0.2, 0.6, 0.7)$。\n- 用例 $2$：$y = (0.1, 0.2, 0.7)$。\n- 用例 $3$：$y = (-0.5, 0.3, 1.2)$。\n- 用例 $4$：$y = (-1.0, -2.0, -3.0)$。\n- 用例 $5$：$y = (0.5, 0.5, 0.5)$。\n- 用例 $6$：$y = (0.1, 0.2, -0.3)$。\n- 用例 $7$：$y = (10.0, -10.0, 0.0)$。\n- 用例 $8$：$y = (-2.0)$。\n- 用例 $9$：$y = (0.9, 0.1, 0.1, -0.2, 0.0, 0.1)$。\n\n您的程序应生成单行输出，其中包含所有结果。结果是一个用方括号括起来的逗号分隔列表，列表中的每个元素本身又是对应测试用例的 $x^\\star$ 的四舍五入分量列表。例如，要求的格式为：\n$$\n[\\,[x^\\star_{1,1},\\ldots,x^\\star_{1,n_1}],[x^\\star_{2,1},\\ldots,x^\\star_{2,n_2}],\\ldots,[x^\\star_{9,1},\\ldots,x^\\star_{9,n_9}]\\,],\n$$\n输出行中任何地方都不能有空格。最终输出类型是一个浮点数列表的列表，表示为单行文本。", "solution": "该问题旨在寻找一个向量 $y \\in \\mathbb{R}^n$ 在标准单纯形（或称概率单纯形）$\\Delta^n = \\{x \\in \\mathbb{R}^n \\mid \\sum_{i=1}^n x_i = 1, x_i \\ge 0\\}$ 上的欧几里得投影。这是一个凸二次规划问题，因为目标函数 $f(x) = \\|x - y\\|_2^2$ 是严格凸函数，且可行域 $\\Delta^n$ 是一个非空、闭合、有界的凸集。因此，保证存在唯一的解 $x^\\star$。\n\n该问题可以表述为：\n$$\n\\begin{aligned}\n\\text{minimize} \\quad & \\frac{1}{2}\\sum_{i=1}^n (x_i - y_i)^2 \\\\\n\\text{subject to} \\quad & \\sum_{i=1}^n x_i - 1 = 0 \\\\\n& -x_i \\le 0, \\quad \\text{for } i=1, \\dots, n\n\\end{aligned}\n$$\n引入因子 $1/2$ 是为了方便计算，它不会改变最小值点的位置。我们可以使用 Karush-Kuhn-Tucker (KKT) 条件来解决这个问题。该问题的拉格朗日函数为：\n$$\nL(x, \\lambda, \\mu) = \\frac{1}{2} \\sum_{i=1}^n (x_i - y_i)^2 - \\lambda \\left(\\sum_{i=1}^n x_i - 1\\right) - \\sum_{i=1}^n \\mu_i x_i\n$$\n其中，$\\lambda$ 是等式约束的拉格朗日乘子，$\\mu_i \\ge 0$ 是非负约束的乘子。\n\n最优解 $(x^\\star, \\lambda^\\star, \\mu^\\star)$ 的 KKT 条件如下：\n1.  **平稳性 (Stationarity)**：拉格朗日函数关于 $x$ 的梯度必须为零。对每个分量 $x_i$：\n    $$\n    \\frac{\\partial L}{\\partial x_i} = (x_i^\\star - y_i) - \\lambda^\\star - \\mu_i^\\star = 0 \\implies x_i^\\star = y_i + \\lambda^\\star + \\mu_i^\\star\n    $$\n2.  **原始可行性 (Primal Feasibility)**：解 $x^\\star$ 必须位于可行集中。\n    $$\n    \\sum_{i=1}^n x_i^\\star = 1 \\quad \\text{and} \\quad x_i^\\star \\ge 0 \\quad \\text{for all } i\n    $$\n3.  **对偶可行性 (Dual Feasibility)**：不等式约束的乘子必须为非负。\n    $$\n    \\mu_i^\\star \\ge 0 \\quad \\text{for all } i\n    $$\n4.  **互补松弛性 (Complementary Slackness)**：每个不等式乘子与其对应约束的乘积必须为零。\n    $$\n    \\mu_i^\\star x_i^\\star = 0 \\quad \\text{for all } i\n    $$\n\n根据互补松弛性条件，若 $x_i^\\star > 0$，则 $\\mu_i^\\star$ 必须为 $0$。在这种情况下，平稳性条件简化为 $x_i^\\star - y_i - \\lambda^\\star = 0$，即 $x_i^\\star = y_i + \\lambda^\\star$。\n若 $x_i^\\star = 0$，则 $\\mu_i^\\star \\ge 0$。平稳性条件给出 $-y_i - \\lambda^\\star - \\mu_i^\\star = 0$，即 $\\mu_i^\\star = -y_i - \\lambda^\\star$。对偶可行性 $\\mu_i^\\star \\ge 0$ 意味着 $-y_i - \\lambda^\\star \\ge 0$，即 $y_i + \\lambda^\\star \\le 0$。\n\n让我们定义一个阈值 $\\theta = -\\lambda^\\star$。$x_i^\\star$ 的条件可统一表示为：\n$$\nx_i^\\star = \\max(0, y_i - \\theta)\n$$\n这个单一表达式巧妙地结合了互补松弛性分析中的两种情况。若 $y_i - \\theta > 0$，则 $x_i^\\star = y_i - \\theta > 0$，且对应的 $\\mu_i^\\star = 0$。若 $y_i - \\theta \\le 0$，则 $x_i^\\star = 0$，这要求 $\\mu_i^\\star \\ge 0$。\n\n$\\theta$ 的值由原始可行性约束 $\\sum_{i=1}^n x_i^\\star = 1$ 确定：\n$$\n\\sum_{i=1}^n \\max(0, y_i - \\theta) = 1\n$$\n设函数 $F(\\theta) = \\sum_{i=1}^n \\max(0, y_i - \\theta)$。我们需要找到 $F(\\theta) - 1 = 0$ 的根。$F(\\theta)$ 是一个关于 $\\theta$ 的连续、分段线性且单调非增的函数。此性质使得我们可以通过一个高效的算法找到唯一的 $\\theta$。\n\n算法如下：\n1.  将输入向量 $y$ 的分量按降序排序，得到一个新向量 $u$，其中 $u_1 \\ge u_2 \\ge \\dots \\ge u_n$。\n2.  找到满足下式的最大整数 $\\rho \\in \\{1, \\dots, n\\}$\n    $$\n    u_j - \\frac{1}{j}\\left(\\sum_{k=1}^j u_k - 1\\right) > 0 \\quad \\text{for } j=1, \\dots, \\rho\n    $$\n    这个值可以被高效地找到。设 $s_j = \\sum_{k=1}^j u_k$ 为累积和。我们寻找满足此条件的最大 $j$。\n3.  利用这个 $\\rho$ 值，所需的阈值 $\\theta$ 由下式给出：\n    $$\n    \\theta = \\frac{1}{\\rho}\\left(\\sum_{k=1}^\\rho u_k - 1\\right) = \\frac{s_\\rho - 1}{\\rho}\n    $$\n4.  一旦求得 $\\theta$，就可以使用原始向量 $y$ 逐分量地计算最优解 $x^\\star$：\n    $$\n    x_i^\\star = \\max(0, y_i - \\theta) \\quad \\text{for } i=1, \\dots, n\n    $$\n\n对于任何给定的 $y \\in \\mathbb{R}^n$，此算法保证能找到唯一解。最后一步是按要求将计算出的 $x^\\star$ 的每个分量四舍五入到 $6$ 位小数。", "answer": "```python\nimport numpy as np\n\ndef project_on_simplex(y):\n    \"\"\"\n    Project a vector y onto the probability simplex.\n\n    This function solves the convex quadratic program:\n    min ||x - y||_2^2\n    s.t. sum(x) = 1, x_i >= 0 for all i.\n\n    The algorithm is based on the efficient method described in papers\n    such as \"Efficient Projections onto the L1-Ball for Learning in\n    High Dimensions\" by Duchi et al. (2008) and related works.\n\n    Args:\n        y (np.ndarray): The input vector to project.\n\n    Returns:\n        np.ndarray: The projected vector x_star.\n    \"\"\"\n    y_arr = np.asarray(y)\n    n = len(y_arr)\n\n    # Sort the input vector in descending order.\n    u = np.sort(y_arr)[::-1]\n\n    # Compute the cumulative sum of the sorted vector.\n    s = np.cumsum(u)\n\n    # Find the value rho, which is the number of positive elements in the solution.\n    # This is done by finding the largest j for which u_j - (1/j)(s_j - 1) > 0.\n    j_indices = np.arange(1, n + 1)\n    \n    # The condition will always be met for at least j=1 (1 > 0 unless n=0),\n    # so np.where will not be empty.\n    conditions = u - (s - 1) / j_indices > 0\n    \n    # Get the index of the last element that satisfies the condition.\n    # This corresponds to rho. Since indices are 0-based, rho = index + 1.\n    rho_idx = np.where(conditions)[0][-1]\n    rho = rho_idx + 1\n\n    # Compute the threshold theta.\n    theta = (s[rho_idx] - 1) / rho\n\n    # Compute the projection x_star by applying the threshold.\n    x_star = np.maximum(0, y_arr - theta)\n    \n    return x_star\n\ndef solve():\n    \"\"\"\n    Solves the projection on simplex problem for a suite of test cases\n    and prints the results in the specified format.\n    \"\"\"\n    test_cases = [\n        (0.2, 0.6, 0.7),\n        (0.1, 0.2, 0.7),\n        (-0.5, 0.3, 1.2),\n        (-1.0, -2.0, -3.0),\n        (0.5, 0.5, 0.5),\n        (0.1, 0.2, -0.3),\n        (10.0, -10.0, 0.0),\n        (-2.0,),\n        (0.9, 0.1, 0.1, -0.2, 0.0, 0.1),\n    ]\n\n    results_as_strings = []\n    for case in test_cases:\n        # Calculate the projection\n        x_star = project_on_simplex(case)\n        \n        # Round each component to 6 decimal places\n        rounded_x = [round(val, 6) for val in x_star]\n        \n        # Format the list of numbers into the required string format '[n1,n2,...]'\n        list_str = f\"[{','.join(map(str, rounded_x))}]\"\n        results_as_strings.append(list_str)\n\n    # Join all results into a single string '[[...],[...]]'\n    final_output = f\"[{','.join(results_as_strings)}]\"\n    print(final_output)\n\nsolve()\n```"}]}
