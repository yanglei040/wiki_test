{"hands_on_practices": [{"introduction": "在深入研究复杂的算法之前，建立优化问题的直观理解至关重要。这个练习提供了一个经典的分配问题，其规模小到可以通过逻辑推理来解决。它要求你找到资源（无人机）与任务（诊所配送）之间的最佳配对，以最小化总成本（飞行时间），为后续更形式化的优化技术奠定基础。", "id": "2180586", "problem": "一家医疗后勤公司需要将三个紧急供应包裹运送到三个不同的诊所：诊所A、诊所B和诊所C。该公司有三架可用的送货无人机：无人机1、无人机2和无人机3。每架无人机必须被分配到一个诊所运送一个包裹，且每个诊所必须只接收一次运送。由于无人机性能和飞行路线不同，每架无人机向每个诊所运送包裹所需的时间也不同。下表给出了以小时为单位的预计飞行时间。\n\n| | 诊所A | 诊所B | 诊所C |\n| :---: | :---: | :---: | :---: |\n| **无人机1** | 1.5 | 3.5 | 4.0 |\n| **无人机2** | 3.0 | 4.5 | 6.0 |\n| **无人机3** | 2.5 | 1.0 | 4.5 |\n\n您的任务是确定一个将无人机分配给诊所的方案，以使所有三次运送的总飞行时间最小化。这个可能的最小总飞行时间是多少？请用数值（单位：小时）表示您的答案。", "solution": "我们必须将每架无人机分配给一个不同的诊所，以最小化总时间。由于有三架无人机和三个诊所，我们可以通过穷举法检查对无人机1、无人机2和无人机3进行诊所分配的所有排列。\n\n使用给定的时间，计算每种排列的总时间：\n$$T_{(A,B,C)} = 1.5 + 4.5 + 4.5 = 10.5.$$\n$$T_{(A,C,B)} = 1.5 + 6.0 + 1.0 = 8.5.$$\n$$T_{(B,A,C)} = 3.5 + 3.0 + 4.5 = 11.0.$$\n$$T_{(B,C,A)} = 3.5 + 6.0 + 2.5 = 12.0.$$\n$$T_{(C,A,B)} = 4.0 + 3.0 + 1.0 = 8.0.$$\n$$T_{(C,B,A)} = 4.0 + 4.5 + 2.5 = 11.0.$$\n\n这些时间中的最小总时间是\n$$T_{\\min} = \\min\\{10.5, 8.5, 11.0, 12.0, 8.0, 11.0\\} = 8.0.$$\n\n因此，可能的最小总飞行时间是$8.0$小时，该方案是将无人机1分配给诊所C，无人机2分配给诊所A，并将无人机3分配给诊所B。", "answer": "$$\\boxed{8.0}$$"}, {"introduction": "现实世界的决策常常受到诸如“如果我们选择A，就不能选择B”之类的逻辑规则的约束。整数线性规划提供了一种强大的语言，可以将这些业务规则转化为精确的数学约束。这个资本预算问题 [@problem_id:2406839] 旨在检验您使用二元变量（$x_i \\in \\{0,1\\}$）来建模常见逻辑条件（如互斥性、先决条件）的能力，这是构建现实金融和经济模型的关键技能。", "id": "2406839", "problem": "一家金融公司的资本预算部门必须决定下一时期要进行哪些投资项目。有四个候选项目，分别标记为 $A$、$B$、$C$ 和 $D$。对于每个项目 $i \\in \\{A,B,C,D\\}$，定义一个二进制决策变量 $x_i \\in \\{0,1\\}$，其中当且仅当项目 $i$ 被选中时，$x_i=1$，否则 $x_i=0$。选择必须满足以下逻辑要求，公司打算将这些要求编码到一个整数线性规划 (Integer Linear Programming, ILP) 模型中：\n\n(i) 项目 $A$ 和 $B$ 是互斥的。\n\n(ii) 只有在项目 $B$ 被执行的情况下，才能执行项目 $C$。\n\n(iii) 项目 $A$ 或 $D$ 中至少必须选择一个。\n\n(iv) 总共最多只能执行 $2$ 个项目。\n\n以下哪一组线性约束，与二进制限制条件 $x_A,x_B,x_C,x_D \\in \\{0,1\\}$ 一起使用时，能正确地为所有四个要求建模？\n\nA. \n$$\n\\begin{aligned}\n&x_A + x_B \\le 1,\\\\\n&x_C \\le x_B,\\\\\n&x_A + x_D \\ge 1,\\\\\n&x_A + x_B + x_C + x_D \\le 2.\n\\end{aligned}\n$$\n\nB.\n$$\n\\begin{aligned}\n&x_A + x_B \\le 1,\\\\\n&x_B \\le x_C,\\\\\n&x_A + x_D \\ge 1,\\\\\n&x_A + x_B + x_C + x_D \\le 2.\n\\end{aligned}\n$$\n\nC.\n$$\n\\begin{aligned}\n&x_A + x_B \\ge 1,\\\\\n&x_C \\le x_B,\\\\\n&x_A + x_D = 1,\\\\\n&x_A + x_B + x_C + x_D \\le 2.\n\\end{aligned}\n$$\n\nD.\n$$\n\\begin{aligned}\n&x_A x_B = 0,\\\\\n&x_C \\ge x_B,\\\\\n&x_A + x_D \\ge 1,\\\\\n&x_A + x_B + x_C + x_D = 2.\n\\end{aligned}\n$$", "solution": "在尝试任何解答之前，必须首先对问题陈述进行严格的验证，以确保其科学上合理、内容完整且定义明确。\n\n**步骤1：提取已知条件**\n\n问题提供了以下数据和定义：\n- 四个候选项目：$A$、$B$、$C$、$D$。\n- 二进制决策变量：对于 $i \\in \\{A,B,C,D\\}$，$x_i \\in \\{0,1\\}$。如果项目 $i$ 被选中，则 $x_i=1$，否则 $x_i=0$。\n- 需要编码到整数线性规划 (ILP) 模型中的四个逻辑要求：\n    (i) 项目 $A$ 和 $B$ 是互斥的。\n    (ii) 只有在执行项目 $B$ 的情况下，才能执行项目 $C$。\n    (iii) 项目 $A$ 或 $D$ 中至少必须选择一个。\n    (iv) 总共最多只能执行 $2$ 个项目。\n\n**步骤2：使用提取的已知条件进行验证**\n\n根据数学建模和运筹学的既定原则，对问题进行仔细审查。\n\n- **科学基础**：该问题属于整数线性规划的标准框架，这是应用数学和计算经济学中一个成熟的学科。将逻辑条件转化为线性不等式是该领域中一项基本且有效的练习。\n- **适定性**：该问题要求找出正确的线性约束集来表示一组给定的逻辑条件。这是一个定义明确的任务，有确定的正确答案。这些逻辑条件本身并不矛盾。例如，仅选择项目 $D$（$x_D=1$, $x_A=x_B=x_C=0$）满足所有四个要求：(i) $0+0=0 \\le 1$；(ii) $x_C=0$，因此该条件不言自明地得到满足；(iii) $0+1=1 \\ge 1$；(iv) 总共 $1$ 个项目 $\\le 2$。因此，存在一个可行的解空间。\n- **客观性**：问题陈述使用了数学和金融建模中常见的精确、无歧义的语言。没有主观或基于意见的元素。\n\n该问题没有任何缺陷。它不是科学上不合理、不可形式化、不完整、不现实或不适定的。它是 ILP 模型构建中的一个标准问题。\n\n**步骤3：结论与行动**\n\n问题陈述是**有效的**。我们可以继续进行推导和分析。\n\n**约束的推导**\n\n我们将把每个逻辑要求转化为一个包含二进制变量 $x_A, x_B, x_C, x_D$ 的线性不等式约束。\n\n(i) **项目 $A$ 和 $B$ 是互斥的。**\n这意味着不能同时选择这两个项目。如果 $x_A=1$，则 $x_B$ 必须为 $0$。如果 $x_B=1$，则 $x_A$ 必须为 $0$。两者都为 $0$ 也是允许的。这两个二进制变量的和不能超过 $1$。\n这可以由以下线性不等式正确地表示：\n$$x_A + x_B \\le 1$$\n\n(ii) **只有在执行项目 $B$ 的情况下，才能执行项目 $C$。**\n这是一个条件语句：“如果执行 $C$，则必须执行 $B$。” 用决策变量来说，如果 $x_C=1$，那么必须有 $x_B=1$。如果 $x_C=0$，这个要求对 $x_B$ 没有限制。我们来检验不等式 $x_C \\le x_B$：\n- 如果 $x_C=1$，不等式变为 $1 \\le x_B$。由于 $x_B$ 是二进制的，这迫使 $x_B=1$。这是正确的。\n- 如果 $x_C=0$，不等式变为 $0 \\le x_B$。对于二进制变量，这总是成立的，允许 $x_B$ 为 $0$ 或 $1$。这也是正确的。\n因此，正确的约束是：\n$$x_C \\le x_B$$\n\n(iii) **项目 $A$ 或 $D$ 中至少必须选择一个。**\n这意味着我们必须选择项目 $A$，或项目 $D$，或者可能两者都选。相应决策变量的和必须至少为 $1$。\n正确的约束是：\n$$x_A + x_D \\ge 1$$\n\n(iv) **总共最多只能执行 $2$ 个项目。**\n被选中的项目总数是所有决策变量的和，$x_A + x_B + x_C + x_D$。这个和不能超过 $2$。\n正确的约束是：\n$$x_A + x_B + x_C + x_D \\le 2$$\n\n结合这些结果，正确的线性约束集是：\n$$\n\\begin{aligned}\n&x_A + x_B \\le 1\\\\\n&x_C \\le x_B\\\\\n&x_A + x_D \\ge 1\\\\\n&x_A + x_B + x_C + x_D \\le 2\n\\end{aligned}\n$$\n\n**对所提供选项的评估**\n\n现在，我们根据我们推导出的正确约束集来评估每个选项。\n\n**A.**\n$$\n\\begin{aligned}\n&x_A + x_B \\le 1\\\\\n&x_C \\le x_B\\\\\n&x_A + x_D \\ge 1\\\\\n&x_A + x_B + x_C + x_D \\le 2\n\\end{aligned}\n$$\n这组约束与我们从第一性原理推导出的约束完全匹配。每个约束都正确地为相应的逻辑要求建模。\n结论：**正确**。\n\n**B.**\n$$\n\\begin{aligned}\n&x_A + x_B \\le 1\\\\\n&x_B \\le x_C\\\\\n&x_A + x_D \\ge 1\\\\\n&x_A + x_B + x_C + x_D \\le 2\n\\end{aligned}\n$$\n第二个约束 $x_B \\le x_C$ 建立了“只有在执行项目 $C$ 的情况下，才能执行项目 $B$”这一条件的模型。这与要求 (ii) 相反。因此，该选项不正确。\n结论：**不正确**。\n\n**C.**\n$$\n\\begin{aligned}\n&x_A + x_B \\ge 1\\\\\n&x_C \\le x_B\\\\\n&x_A + x_D = 1\\\\\n&x_A + x_B + x_C + x_D \\le 2\n\\end{aligned}\n$$\n第一个约束 $x_A + x_B \\ge 1$ 建立了“$A$ 或 $B$ 中至少必须选择一个”的模型，这与要求 (i) 的互斥性相矛盾。第三个约束 $x_A + x_D = 1$ 建立了“$A$ 或 $D$ 中必须恰好选择一个”的模型，这比要求 (iii) “至少一个”更具限制性。这两个约束都是不正确的。\n结论：**不正确**。\n\n**D.**\n$$\n\\begin{aligned}\n&x_A x_B = 0\\\\\n&x_C \\ge x_B\\\\\n&x_A + x_D \\ge 1\\\\\n&x_A + x_B + x_C + x_D = 2\n\\end{aligned}\n$$\n第一个约束 $x_A x_B = 0$ 是一个**非线性**约束。问题指定的是一个整数**线性**规划 (ILP) 模型，其所有约束都必须是线性的。第二个约束 $x_C \\ge x_B$ 等价于 $x_B \\le x_C$，并且错误地为要求 (ii) 建模。第四个约束 $x_A + x_B + x_C + x_D = 2$ 建立了“必须恰好执行 $2$ 个项目”的模型，这比要求 (iv) “最多 $2$ 个”更具限制性。该选项包含多个错误和对 ILP 的无效表述。\n结论：**不正确**。", "answer": "$$\\boxed{A}$$"}, {"introduction": "线性规划的真正威力在于结合计算求解器，这使我们能够解决大规模的复杂问题并获得更深刻的经济洞见。这个练习 [@problem_id:2406884] 要求您运用编程知识来解决经典的“饮食问题”，并进行灵敏度分析。通过探究当食品价格变化时最优食谱如何随之改变，您将实践一项至关重要的技能：理解模型输出如何响应输入参数的变化。", "id": "2406884", "problem": "考虑一个成本最小化饮食模型，该模型被构建为一个针对五种食物的线性规划（LP）问题：牛油果、鸡胸肉、黑豆、白米和西兰花。设决策变量为非负的消费份数，分别表示为 $x_{A}$（牛油果）、$x_{C}$（鸡肉）、$x_{B}$（黑豆）、$x_{R}$（白米）和 $x_{Br}$（西兰花）。每份的营养成分贡献如下：牛油果提供 $240$ 千卡热量、$3$ 克蛋白质、$22$ 克脂肪和 $10$ 克纤维；鸡肉提供 $200$ 千卡热量、$35$ 克蛋白质、$5$ 克脂肪和 $0$ 克纤维；黑豆提供 $180$ 千卡热量、$12$ 克蛋白质、$1$ 克脂肪和 $12$ 克纤维；白米提供 $220$ 千卡热量、$4$ 克蛋白质、$1$ 克脂肪和 $1$ 克纤维；西兰花提供 $55$ 千卡热量、$4$ 克蛋白质、$0$ 克脂肪和 $5$ 克纤维。每日最低需求为 $2000$ 千卡热量、$50$ 克蛋白质、$44$ 克脂肪和 $30$ 克纤维。需要最小化的总成本为 $c_{A} x_{A} + 2.5 x_{C} + 1.2 x_{B} + 0.6 x_{R} + 0.8 x_{Br}$，其中 $c_{A} \\ge 0$ 是每份牛油果的价格，其他价格以相同的货币单位/每份固定。模型如下\n$$\n\\min_{x_{A},x_{C},x_{B},x_{R},x_{Br} \\ge 0} \\; c_{A} x_{A} + 2.5 x_{C} + 1.2 x_{B} + 0.6 x_{R} + 0.8 x_{Br}\n$$\n受限于营养需求\n$$\n240 x_{A} + 200 x_{C} + 180 x_{B} + 220 x_{R} + 55 x_{Br} \\ge 2000,\n$$\n$$\n3 x_{A} + 35 x_{C} + 12 x_{B} + 4 x_{R} + 4 x_{Br} \\ge 50,\n$$\n$$\n22 x_{A} + 5 x_{C} + 1 x_{B} + 1 x_{R} + 0 x_{Br} \\ge 44,\n$$\n$$\n10 x_{A} + 0 x_{C} + 12 x_{B} + 1 x_{R} + 5 x_{Br} \\ge 30.\n$$\n所有份数都是无量纲的份数计数，成本以统一的货币单位/每份计算。对于每个给定的牛油果价格 $c_{A}$，该模型都有一个明确定义的最优解。\n\n任务：对牛油果的目标系数 $c_{A}$ 进行敏感性分析，即针对一组牛油果价格 $c_{A}$ 求解上述问题，并在每种情况下，返回最优牛油果数量 $x_{A}^{\\star}$（以份为单位）和最优最小总成本 $z^{\\star}$（以相同货币单位计）。报告 $x_{A}^{\\star}$ 和 $z^{\\star}$，四舍五入到小数点后 $4$ 位。\n\n待分析的牛油果价格测试集：\n- 正常路径中等价格：$c_{A} = 1.00$。\n- 低价（趋向于以牛油果为主的边缘情况）：$c_{A} = 0.50$。\n- 可能发生基变换前的中高价格：$c_{A} = 10.00$。\n- 可能发生基变换后的高价格：$c_{A} = 12.00$。\n- 非常高的价格（趋向于排除牛油果的边缘情况）：$c_{A} = 25.00$。\n\n最终输出格式：您的程序应生成单行输出，其中包含结果，格式为以逗号分隔的配对列表 $[x_{A}^{\\star},z^{\\star}]$，用方括号括起来，顺序与测试集完全相同。每个数字四舍五入到小数点后 $4$ 位。例如：$[[0.0000,123.4567],[1.2345,67.8901]]$。", "solution": "首先按规定执行问题验证。\n\n步骤1：提取已知条件\n\n- **决策变量**：非负消费份数：$x_{A}$（牛油果）、$x_{C}$（鸡肉）、$x_{B}$（黑豆）、$x_{R}$（白米）、$x_{Br}$（西兰花），其中 $x_{A}, x_{C}, x_{B}, x_{R}, x_{Br} \\ge 0$。\n- **每份营养贡献**：\n    - 牛油果：$240$ 千卡热量，$3$ 克蛋白质，$22$ 克脂肪，$10$ 克纤维。\n    - 鸡肉：$200$ 千卡热量，$35$ 克蛋白质，$5$ 克脂肪，$0$ 克纤维。\n    - 黑豆：$180$ 千卡热量，$12$ 克蛋白质，$1$ 克脂肪，$12$ 克纤维。\n    - 白米：$220$ 千卡热量，$4$ 克蛋白质，$1$ 克脂肪，$1$ 克纤维。\n    - 西兰花：$55$ 千卡热量，$4$ 克蛋白质，$0$ 克脂肪，$5$ 克纤维。\n- **每日最低需求**：$\\ge 2000$ 千卡热量，$\\ge 50$ 克蛋白质，$\\ge 44$ 克脂肪，$\\ge 30$ 克纤维。\n- **目标函数**：最小化总成本 $c_{A} x_{A} + 2.5 x_{C} + 1.2 x_{B} + 0.6 x_{R} + 0.8 x_{Br}$，其中 $c_{A} \\ge 0$。\n- **线性规划模型**：\n$$\n\\min_{x_{A},x_{C},x_{B},x_{R},x_{Br} \\ge 0} \\; c_{A} x_{A} + 2.5 x_{C} + 1.2 x_{B} + 0.6 x_{R} + 0.8 x_{Br}\n$$\n受限于：\n$$\n240 x_{A} + 200 x_{C} + 180 x_{B} + 220 x_{R} + 55 x_{Br} \\ge 2000\n$$\n$$\n3 x_{A} + 35 x_{C} + 12 x_{B} + 4 x_{R} + 4 x_{Br} \\ge 50\n$$\n$$\n22 x_{A} + 5 x_{C} + 1 x_{B} + 1 x_{R} + 0 x_{Br} \\ge 44\n$$\n$$\n10 x_{A} + 0 x_{C} + 12 x_{B} + 1 x_{R} + 5 x_{Br} \\ge 30\n$$\n- **任务**：对于给定的一组 $c_{A}$ 值，找出最优牛油果数量 $x_{A}^{\\star}$ 和最优最小成本 $z^{\\star}$，四舍五入到小数点后 $4$ 位。\n- **测试集**：$c_{A} \\in \\{1.00, 0.50, 10.00, 12.00, 25.00\\}$。\n\n步骤2：使用提取的已知条件进行验证\n\n该问题是一个经典的“饮食问题”，被构建为一个线性规划任务。这是运筹学和计算经济学中一个标准且易于理解的问题。\n\n- **科学依据**：该问题基于成熟的线性规划数学理论。营养数据和饮食需求是合理的，并为模型提供了有效的基础。它没有违反任何科学原理。\n- **良构性**：该问题是一个标准形式的线性规划。由线性不等式交集定义的可行域是凸且非空的。目标函数是线性的。由于成本和决策变量都是非负的，因此目标函数在可行域上有下界。问题陈述正确地断言，对于每个指定的价格 $c_{A}$，都存在一个明确定义的最优解。\n- **客观性**：该问题以数学精度规定，使用无歧义的变量、系数和约束。它不含任何主观论断。\n\n该问题通过了所有验证标准。它是自洽的、一致的、科学上合理的和良构的。\n\n步骤3：结论与行动\n\n此问题被视为**有效**。将提供解决方案。\n\n该问题需要求解一个线性规划（LP）模型的多个实例，每个实例由变量 $x_A$ 的不同成本系数 $c_A$ 定义。这是对目标函数系数的敏感性分析。\n\n该LP模型可以用矩阵形式表示。设决策变量向量为 $\\mathbf{x} = [x_{A}, x_{C}, x_{B}, x_{R}, x_{Br}]^T$。目标是最小化总成本 $z = \\mathbf{c}^T \\mathbf{x}$，其中成本向量为 $\\mathbf{c} = [c_{A}, 2.5, 1.2, 0.6, 0.8]^T$。\n\n约束的形式为 $\\mathbf{A}\\mathbf{x} \\ge \\mathbf{b}$，其中约束矩阵 $\\mathbf{A}$ 和需求向量 $\\mathbf{b}$ 由下式给出：\n$$\n\\mathbf{A} = \\begin{pmatrix}\n240 & 200 & 180 & 220 & 55 \\\\\n3 & 35 & 12 & 4 & 4 \\\\\n22 & 5 & 1 & 1 & 0 \\\\\n10 & 0 & 12 & 1 & 5\n\\end{pmatrix},\n\\quad\n\\mathbf{b} = \\begin{pmatrix}\n2000 \\\\\n50 \\\\\n44 \\\\\n30\n\\end{pmatrix}\n$$\n决策变量还必须满足非负约束 $\\mathbf{x} \\ge \\mathbf{0}$。\n\n为了用计算方法解决这个问题，我们使用 Python 中 `scipy.optimize` 库的 `linprog` 函数。该函数旨在解决以下形式的最小化问题：\n最小化 $\\mathbf{c}^T \\mathbf{x}$，约束条件为 $\\mathbf{A}_{ub} \\mathbf{x} \\le \\mathbf{b}_{ub}$ 和 $\\mathbf{A}_{eq} \\mathbf{x} = \\mathbf{b}_{eq}$，并对 $\\mathbf{x}$ 有界。\n\n我们问题的约束是“大于或等于”类型，即 $\\mathbf{A}\\mathbf{x} \\ge \\mathbf{b}$。必须将其转换为 `linprog` 函数所要求的“小于或等于”形式。这可以通过将不等式两边乘以 $-1$ 来实现，这会反转不等号：\n$$\n\\mathbf{A}\\mathbf{x} \\ge \\mathbf{b} \\iff -\\mathbf{A}\\mathbf{x} \\le -\\mathbf{b}\n$$\n因此，我们将向求解器传递 $\\mathbf{A}_{ub} = -\\mathbf{A}$ 和 $\\mathbf{b}_{ub} = -\\mathbf{b}$。非负约束 $x_i \\ge 0$ 通过将每个变量的 `bounds` 设置为 $(0, \\infty)$ 来处理。\n\n求解算法如下：\n1. 将常数矩阵 $\\mathbf{A}$ 和 $\\mathbf{b}$ 定义为 NumPy 数组。\n2. 定义牛油果价格 $c_A$ 的测试值列表：$\\{1.00, 0.50, 10.00, 12.00, 25.00\\}$。\n3. 遍历测试集中的每个 $c_A$ 值。\n4. 在每次迭代中，构建相应的成本向量 $\\mathbf{c}$。\n5. 使用成本向量 $\\mathbf{c}$、转换后的约束矩阵 $-\\mathbf{A}$、转换后的需求向量 $-\\mathbf{b}$ 以及非负边界调用 `scipy.optimize.linprog`。`highs` 方法是求解器的一个现代、高效且鲁棒的选择。\n6. 从求解器返回的结果对象中，提取最优的牛油果数量 $x_A^\\star$（即解向量 $\\mathbf{x}^\\star$ 的第一个元素）、最优最小成本 $z^\\star$。\n7. 存储配对 $[x_A^\\star, z^\\star]$。\n8. 处理完所有 $c_A$ 值后，将收集到的结果格式化为指定的单个字符串：一个配对列表，每个数值四舍五入到小数点后 $4$ 位。\n此过程系统地执行了所要求的敏感性分析，并生成了所需的输出。", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\nfrom scipy.optimize import linprog\n\ndef solve():\n    \"\"\"\n    Solves a cost-minimization diet problem for a range of avocado prices.\n\n    The problem is formulated as a Linear Program (LP) and solved using\n    scipy.optimize.linprog.\n    \"\"\"\n    \n    # Define the constant constraint matrix A and requirements vector b.\n    # The columns correspond to [avocado, chicken, beans, rice, broccoli].\n    # The rows correspond to [kilocalories, protein, fat, fiber].\n    A_mat = np.array([\n        [240.0, 200.0, 180.0, 220.0, 55.0],  # Kilocalories\n        [3.0,   35.0,  12.0,  4.0,   4.0],   # Protein (g)\n        [22.0,  5.0,   1.0,   1.0,   0.0],   # Fat (g)\n        [10.0,  0.0,   12.0,  1.0,   5.0]    # Fiber (g)\n    ])\n    \n    # Daily minimum requirements vector b.\n    b_vec = np.array([2000.0, 50.0, 44.0, 30.0])\n    \n    # Fixed costs for non-avocado foods (per serving).\n    # [chicken, beans, rice, broccoli]\n    c_others = [2.5, 1.2, 0.6, 0.8]\n    \n    # Test suite of avocado prices (c_A) to be analyzed.\n    test_cases = [1.00, 0.50, 10.00, 12.00, 25.00]\n    \n    results = []\n    \n    for c_A in test_cases:\n        # Construct the full cost vector c for the current c_A.\n        c_vec = np.array([c_A] + c_others)\n        \n        # The linprog function solves minimization problems with constraints of\n        # the form A_ub @ x <= b_ub. Our problem has A @ x >= b, which is\n        # equivalent to -A @ x <= -b.\n        # We also enforce non-negativity constraints via the bounds parameter.\n        res = linprog(c=c_vec, \n                      A_ub=-A_mat, \n                      b_ub=-b_vec, \n                      bounds=(0, None), \n                      method='highs')\n        \n        if res.success:\n            # The optimal quantity of avocado (x_A) is the first element of the solution vector.\n            x_A_star = res.x[0]\n            # The optimal cost (z*) is the function value at the optimum.\n            z_star = res.fun\n            results.append([x_A_star, z_star])\n        else:\n            # The problem statement guarantees a solution exists, so this path\n            # should ideally not be taken. We include it for robustness.\n            results.append([float('nan'), float('nan')])\n            \n    # Format the results into the required string format.\n    # e.g., [[x1, z1], [x2, z2], ...] with numbers rounded to 4 decimal places.\n    formatted_pairs = [f\"[{x:.4f},{z:.4f}]\" for x, z in results]\n    \n    # Final print statement in the exact required format.\n    print(f\"[{','.join(formatted_pairs)}]\")\n\nsolve()\n```"}]}