{"hands_on_practices": [{"introduction": "第一个练习为应用Black-Litterman模型奠定了基础。通过实现核心方程，你将亲眼见证模型如何将市场均衡预期与投资者的个人观点相融合。通过系统地调整你对先验信念和个人观点的信心参数，你将对模型如何权衡不同信息来源，最终得出优化投资组合，建立起切实的理解。[@problem_id:2420275]", "id": "2420275", "problem": "实现一个完整的程序，该程序在线性高斯观点结构下计算 Black–Litterman 后验隐含平均收益率及相应的无约束均值-方差投资组合权重。所有收益率必须以小数形式表示。请使用以下定义。\n\n- 存在 $n$ 种风险资产，其随机收益率向量为 $\\mathbf{r} \\in \\mathbb{R}^{n}$，未知均值为 $\\boldsymbol{\\mu} \\in \\mathbb{R}^{n}$，已知的对称正定协方差矩阵为 $\\boldsymbol{\\Sigma} \\in \\mathbb{R}^{n \\times n}$。\n- 设 $\\mathbf{w}^{\\mathrm{mkt}} \\in \\mathbb{R}^{n}$ 表示给定的市值权重，并设 $\\delta \\in \\mathbb{R}_{+}$ 为给定的风险厌恶参数。将收益率的均衡先验均值定义为 $\\boldsymbol{\\pi} = \\delta \\boldsymbol{\\Sigma} \\,\\mathbf{w}^{\\mathrm{mkt}}$。\n- 假设未知均值 $\\boldsymbol{\\mu}$ 的先验分布为多元正态分布，$\\boldsymbol{\\mu} \\sim \\mathcal{N}\\!\\left(\\boldsymbol{\\pi}, \\tau \\boldsymbol{\\Sigma}\\right)$，其中标量 $\\tau \\in \\mathbb{R}_{+}$。\n- 投资者持有 $k$ 个线性观点，模型为\n$$\n\\mathbf{P}\\,\\boldsymbol{\\mu} = \\mathbf{Q} + \\boldsymbol{\\varepsilon},\n$$\n其中 $\\mathbf{P} \\in \\mathbb{R}^{k \\times n}$，$\\mathbf{Q} \\in \\mathbb{R}^{k}$，且 $\\boldsymbol{\\varepsilon} \\sim \\mathcal{N}\\!\\left(\\mathbf{0}, \\boldsymbol{\\Omega}\\right)$，$\\boldsymbol{\\Omega} \\in \\mathbb{R}^{k \\times k}$ 为对称正定矩阵。假设 $\\boldsymbol{\\varepsilon}$ 与 $\\boldsymbol{\\mu}$ 相互独立。\n- 设 $\\boldsymbol{\\mu}^{\\mathrm{BL}}$ 为该模型下 $\\boldsymbol{\\mu}$ 的后验均值。将隐含的无约束均值-方差最优权重定义为\n$$\n\\mathbf{w}^{\\mathrm{BL}} = \\frac{1}{\\delta}\\,\\boldsymbol{\\Sigma}^{-1}\\,\\boldsymbol{\\mu}^{\\mathrm{BL}}.\n$$\n\n你的程序必须对下述每个指定的测试用例计算 $\\mathbf{w}^{\\mathrm{BL}}$，并将其作为包含 $n$ 个浮点数的列表返回，每个浮点数四舍五入到 $6$ 位小数。\n\n测试套件。对于所有用例，收益率均为小数。每个用例提供 $\\boldsymbol{\\Sigma}$、$\\mathbf{w}^{\\mathrm{mkt}}$、$\\delta$、$\\tau$、$\\mathbf{P}$、$\\mathbf{Q}$ 和 $\\boldsymbol{\\Omega}$。\n\n- 用例 A（正常路径，中等置信度，两个观点，$n=3$, $k=2$）：\n  - 协方差矩阵\n  $$\n  \\boldsymbol{\\Sigma} =\n  \\begin{bmatrix}\n  0.04 & 0.006 & 0.004 \\\\\n  0.006 & 0.09 & 0.010 \\\\\n  0.004 & 0.010 & 0.025\n  \\end{bmatrix}.\n  $$\n  - 市场权重 $\\mathbf{w}^{\\mathrm{mkt}} = \\begin{bmatrix} 0.6 \\\\ 0.3 \\\\ 0.1 \\end{bmatrix}$，风险厌恶 $\\delta = 2.5$，缩放因子 $\\tau = 0.05$。\n  - 观点\n  $$\n  \\mathbf{P} =\n  \\begin{bmatrix}\n  1 & -1 & 0 \\\\\n  0 & 0 & 1\n  \\end{bmatrix},\\quad\n  \\mathbf{Q} =\n  \\begin{bmatrix}\n  0.01 \\\\ 0.04\n  \\end{bmatrix},\\quad\n  \\boldsymbol{\\Omega} =\n  \\begin{bmatrix}\n  0.0004 & 0 \\\\\n  0 & 0.0001\n  \\end{bmatrix}.\n  $$\n- 用例 B（边界情况：观点非常弱；后验权重接近先验隐含的市场权重）：\n  - $\\boldsymbol{\\Sigma}$、$\\mathbf{w}^{\\mathrm{mkt}}$、$\\delta$ 和 $\\tau$ 与用例 A 相同。\n  - $\\mathbf{P}$ 和 $\\mathbf{Q}$ 与用例 A 相同，但\n  $$\n  \\boldsymbol{\\Omega} =\n  \\begin{bmatrix}\n  0.5 & 0 \\\\\n  0 & 0.5\n  \\end{bmatrix}.\n  $$\n- 用例 C（边界情况：对观点有近乎完全的置信度）：\n  - $\\boldsymbol{\\Sigma}$、$\\mathbf{w}^{\\mathrm{mkt}}$、$\\delta$ 和 $\\tau$ 与用例 A 相同。\n  - $\\mathbf{P}$ 和 $\\mathbf{Q}$ 与用例 A 相同，但\n  $$\n  \\boldsymbol{\\Omega} =\n  \\begin{bmatrix}\n  10^{-8} & 0 \\\\\n  0 & 10^{-8}\n  \\end{bmatrix}.\n  $$\n- 用例 D（边界情况：先验非常强，观点置信度中等；先验占主导）：\n  - $\\boldsymbol{\\Sigma}$、$\\mathbf{w}^{\\mathrm{mkt}}$、$\\delta$ 与用例 A 相同。使用 $\\tau = 0.0001$。\n  - $\\mathbf{P}$、$\\mathbf{Q}$ 和 $\\boldsymbol{\\Omega}$ 与用例 A 相同。\n\n你的程序应生成单行输出，其中包含结果，形式为用方括号括起来的逗号分隔列表，每个测试用例贡献一个内部的权重列表。确切格式为：\n- 形式为单行字符串\n  - \"[[wA_1,wA_2,\\dots,wA_n],[wB_1,\\dots,wB_n],[wC_1,\\dots,wC_n],[wD_1,\\dots,wD_n]]\"\n- 每个 $w\\cdot\\_\\cdot$ 必须是四舍五入到 6 位小数的浮点数。\n- 输出中任何位置都不得包含空格。", "solution": "对问题进行验证。\n\n步骤 1：提取给定信息。\n- 风险资产数量：$n$。\n- 随机收益率向量：$\\mathbf{r} \\in \\mathbb{R}^{n}$。\n- 未知的收益率均值：$\\boldsymbol{\\mu} \\in \\mathbb{R}^{n}$。\n- 已知的收益率协方差矩阵：$\\boldsymbol{\\Sigma} \\in \\mathbb{R}^{n \\times n}$，对称正定。\n- 市值权重：$\\mathbf{w}^{\\mathrm{mkt}} \\in \\mathbb{R}^{n}$。\n- 风险厌恶参数：$\\delta \\in \\mathbb{R}_{+}$。\n- 收益率的均衡先验均值：$\\boldsymbol{\\pi} = \\delta \\boldsymbol{\\Sigma} \\,\\mathbf{w}^{\\mathrm{mkt}}$。\n- 未知均值的先验分布：$\\boldsymbol{\\mu} \\sim \\mathcal{N}\\!\\left(\\boldsymbol{\\pi}, \\tau \\boldsymbol{\\Sigma}\\right)$，其中标量为 $\\tau \\in \\mathbb{R}_{+}$。\n- 投资者观点数量：$k$。\n- 线性观点结构：$\\mathbf{P}\\,\\boldsymbol{\\mu} = \\mathbf{Q} + \\boldsymbol{\\varepsilon}$，其中 $\\mathbf{P} \\in \\mathbb{R}^{k \\times n}$，$\\mathbf{Q} \\in \\mathbb{R}^{k}$。\n- 观点误差项：$\\boldsymbol{\\varepsilon} \\sim \\mathcal{N}\\!\\left(\\mathbf{0}, \\boldsymbol{\\Omega}\\right)$，其中 $\\boldsymbol{\\Omega} \\in \\mathbb{R}^{k \\times k}$ 为对称正定矩阵。\n- 独立性假设：$\\boldsymbol{\\varepsilon}$ 与 $\\boldsymbol{\\mu}$ 相互独立。\n- $\\boldsymbol{\\mu}$ 的后验均值：$\\boldsymbol{\\mu}^{\\mathrm{BL}}$。\n- 无约束均值-方差最优权重：$\\mathbf{w}^{\\mathrm{BL}} = \\frac{1}{\\delta}\\,\\boldsymbol{\\Sigma}^{-1}\\,\\boldsymbol{\\mu}^{\\mathrm{BL}}$。\n- 测试用例 A、B、C、D 为 $\\boldsymbol{\\Sigma}$、$\\mathbf{w}^{\\mathrm{mkt}}$、$\\delta$、$\\tau$、$\\mathbf{P}$、$\\mathbf{Q}$ 和 $\\boldsymbol{\\Omega}$ 提供了具体的数值。\n- 输出要求：对每个测试用例，计算 $\\mathbf{w}^{\\mathrm{BL}}$ 并将其以字符串形式返回，该字符串代表一个由浮点数列表组成的列表，四舍五入到 6 位小数。\n\n步骤 2：使用提取的给定信息进行验证。\n问题陈述描述了 Black-Litterman 资产配置模型，这是量化金融中一个标准且被广泛接受的框架。\n- **科学依据**：该模型基于应用于金融市场的贝叶斯统计。它提供了一种形式化的方法，用于将基于均衡的先验与投资者的主观观点相结合。所有原理均源自成熟的概率论和金融经济学。该问题在科学上是合理的。\n- **适定性(Well-Posed)**：该问题是适定的。使用对称正定矩阵 $\\boldsymbol{\\Sigma}$ 和 $\\boldsymbol{\\Omega}$ 保证了它们的可逆性。后验精度矩阵的结构是一个正定矩阵与一个半正定矩阵之和，这确保了它也是正定且可逆的。这保证了后验均值 $\\boldsymbol{\\mu}^{\\mathrm{BL}}$ 和最优权重 $\\mathbf{w}^{\\mathrm{BL}}$ 存在唯一解。\n- **客观性**：问题使用精确的数学符号和客观数据定义，没有任何主观或模棱两可的语言。\n- **完整性与一致性**：为每个测试用例提供了所有必需的参数和数据。所有矩阵和向量的维数都是一致的（例如，在用例 A 中，$n=3, k=2$，$\\boldsymbol{\\Sigma}$ 是 $3 \\times 3$，$\\mathbf{P}$ 是 $2 \\times 3$，等）。\n- **无其他缺陷**：该问题并非不切实际、病态或无法验证。\n\n步骤 3：结论与行动。\n问题有效。将提供一个解决方案。\n\n该问题要求计算资产收益率的后验均值 $\\boldsymbol{\\mu}^{\\mathrm{BL}}$，它综合了市场隐含的先验和投资者的特定观点。这是线性高斯系统中贝叶斯推断的经典应用。\n\n关于平均收益率的先验信念由以下分布给出：\n$$\n\\boldsymbol{\\mu} \\sim \\mathcal{N}(\\boldsymbol{\\pi}, \\tau\\boldsymbol{\\Sigma})\n$$\n其概率密度函数正比于：\n$$\np(\\boldsymbol{\\mu}) \\propto \\exp\\left(-\\frac{1}{2}(\\boldsymbol{\\mu} - \\boldsymbol{\\pi})^T (\\tau\\boldsymbol{\\Sigma})^{-1} (\\boldsymbol{\\mu} - \\boldsymbol{\\pi})\\right)\n$$\n\n投资者的观点被建模为 $\\mathbf{P}\\boldsymbol{\\mu} = \\mathbf{Q} + \\boldsymbol{\\varepsilon}$。这可以改写为 $\\mathbf{P}\\boldsymbol{\\mu} - \\boldsymbol{\\varepsilon} = \\mathbf{Q}$。鉴于 $\\boldsymbol{\\varepsilon} \\sim \\mathcal{N}(\\mathbf{0}, \\boldsymbol{\\Omega})$，这意味着这些观点基于“数据” $\\mathbf{Q}$ 对 $\\boldsymbol{\\mu}$ 施加了一个概率约束，该约束等价于一个似然函数：\n$$\n\\mathbf{Q} | \\boldsymbol{\\mu} \\sim \\mathcal{N}(\\mathbf{P}\\boldsymbol{\\mu}, \\boldsymbol{\\Omega})\n$$\n因此，似然函数正比于：\n$$\n\\mathcal{L}(\\boldsymbol{\\mu}; \\mathbf{Q}) \\propto \\exp\\left(-\\frac{1}{2}(\\mathbf{Q} - \\mathbf{P}\\boldsymbol{\\mu})^T \\boldsymbol{\\Omega}^{-1} (\\mathbf{Q} - \\mathbf{P}\\boldsymbol{\\mu})\\right)\n$$\n\n根据贝叶斯定理，后验分布正比于先验和似然的乘积，$p(\\boldsymbol{\\mu}|\\mathbf{Q}) \\propto \\mathcal{L}(\\boldsymbol{\\mu}; \\mathbf{Q}) p(\\boldsymbol{\\mu})$。由于先验和似然是共轭的，后验分布也将是多元正态分布，$\\boldsymbol{\\mu}|\\mathbf{Q} \\sim \\mathcal{N}(\\boldsymbol{\\mu}^{\\mathrm{BL}}, \\boldsymbol{\\Sigma}^{\\mathrm{BL}})$。\n\n后验参数通过组合先验分布和似然分布的指数项来找到。后验精度（协方差的逆）矩阵是先验精度与来自观点的精度之和：\n$$\n(\\boldsymbol{\\Sigma}^{\\mathrm{BL}})^{-1} = (\\tau\\boldsymbol{\\Sigma})^{-1} + \\mathbf{P}^T \\boldsymbol{\\Omega}^{-1} \\mathbf{P}\n$$\n后验均值 $\\boldsymbol{\\mu}^{\\mathrm{BL}}$ 是先验均值 $\\boldsymbol{\\pi}$ 和由观点隐含的均值（这需要推导）的精度加权平均。后验均值的完整表达式为：\n$$\n\\boldsymbol{\\mu}^{\\mathrm{BL}} = \\boldsymbol{\\Sigma}^{\\mathrm{BL}} \\left[ (\\tau\\boldsymbol{\\Sigma})^{-1} \\boldsymbol{\\pi} + \\mathbf{P}^T \\boldsymbol{\\Omega}^{-1} \\mathbf{Q} \\right]\n$$\n这个公式结合了先验信息 $(\\boldsymbol{\\pi}, \\tau\\boldsymbol{\\Sigma})$ 和观点信息 $(\\mathbf{P}, \\mathbf{Q}, \\boldsymbol{\\Omega})$ 来生成更新的平均收益率估计。\n\n为每个测试用例计算 Black-Litterman 最优权重 $\\mathbf{w}^{\\mathrm{BL}}$ 的算法如下：\n1.  计算先验平均收益率，$\\boldsymbol{\\pi} = \\delta \\boldsymbol{\\Sigma} \\mathbf{w}^{\\mathrm{mkt}}$。\n2.  计算必要的逆矩阵：$(\\tau\\boldsymbol{\\Sigma})^{-1} = \\frac{1}{\\tau}\\boldsymbol{\\Sigma}^{-1}$ 和 $\\boldsymbol{\\Omega}^{-1}$。\n3.  计算后验精度矩阵，$\\mathbf{M} = (\\tau\\boldsymbol{\\Sigma})^{-1} + \\mathbf{P}^T \\boldsymbol{\\Omega}^{-1} \\mathbf{P}$。\n4.  对 $\\mathbf{M}$ 求逆以找到后验协方差矩阵，$\\boldsymbol{\\Sigma}^{\\mathrm{BL}} = \\mathbf{M}^{-1}$。\n5.  计算包含加权均值的项：$\\mathbf{v} = (\\tau\\boldsymbol{\\Sigma})^{-1} \\boldsymbol{\\pi} + \\mathbf{P}^T \\boldsymbol{\\Omega}^{-1} \\mathbf{Q}$。\n6.  计算后验平均收益率，$\\boldsymbol{\\mu}^{\\mathrm{BL}} = \\boldsymbol{\\Sigma}^{\\mathrm{BL}} \\mathbf{v}$。\n7.  最后，使用后验均值计算无约束最优投资组合权重：$\\mathbf{w}^{\\mathrm{BL}} = \\frac{1}{\\delta}\\boldsymbol{\\Sigma}^{-1}\\boldsymbol{\\mu}^{\\mathrm{BL}}$。\n\n该过程将对提供的四个测试用例中的每一个实施。所得的权重向量 $\\mathbf{w}^{\\mathrm{BL}}$ 将被四舍五入到 6 位小数，并按指定格式化。", "answer": "```python\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Computes Black-Litterman posterior weights for a suite of test cases.\n    \"\"\"\n\n    def compute_bl_weights(Sigma, w_mkt, delta, tau, P, Q, Omega):\n        \"\"\"\n        Computes the Black-Litterman optimal portfolio weights.\n\n        Args:\n            Sigma (np.ndarray): n x n covariance matrix of asset returns.\n            w_mkt (np.ndarray): n x 1 vector of market capitalization weights.\n            delta (float): Risk aversion coefficient.\n            tau (float): Scalar indicating the uncertainty in the prior.\n            P (np.ndarray): k x n matrix identifying assets in the views.\n            Q (np.ndarray): k x 1 vector of expected returns for the views.\n            Omega (np.ndarray): k x k diagonal matrix of view uncertainties.\n\n        Returns:\n            np.ndarray: n x 1 vector of Black-Litterman optimal weights.\n        \"\"\"\n        # Step 1: Calculate the prior mean returns (pi)\n        pi = delta * Sigma @ w_mkt\n\n        # Step 2: Compute necessary inverse matrices\n        # Invert tau*Sigma for the prior precision\n        tau_Sigma_inv = np.linalg.inv(tau * Sigma)\n        # Invert Omega for the view precision\n        Omega_inv = np.linalg.inv(Omega)\n        # Invert Sigma for the final weight calculation\n        Sigma_inv = np.linalg.inv(Sigma)\n\n        # Step 3 & 4: Compute the posterior mean returns (mu_BL)\n        # First, compute the posterior precision matrix M = (Sigma_BL)^-1\n        M = tau_Sigma_inv + P.T @ Omega_inv @ P\n        \n        # Second, compute the weighted mean term\n        v = tau_Sigma_inv @ pi + P.T @ Omega_inv @ Q\n\n        # Posterior mean mu_BL = M^-1 * v\n        mu_BL = np.linalg.inv(M) @ v\n        \n        # Step 5: Compute the final Black-Litterman weights (w_BL)\n        w_BL = (1 / delta) * Sigma_inv @ mu_BL\n        \n        return w_BL\n\n    # Common parameters for cases A, B, C, D\n    Sigma = np.array([\n        [0.04, 0.006, 0.004],\n        [0.006, 0.09, 0.010],\n        [0.004, 0.010, 0.025]\n    ])\n    w_mkt = np.array([0.6, 0.3, 0.1])\n    delta = 2.5\n    \n    P = np.array([\n        [1, -1, 0],\n        [0, 0, 1]\n    ])\n    Q = np.array([0.01, 0.04])\n\n    # Test cases definition\n    test_cases = [\n        # Case A: happy path\n        {\n            \"tau\": 0.05,\n            \"Omega\": np.array([[0.0004, 0], [0, 0.0001]])\n        },\n        # Case B: very weak views (large Omega)\n        {\n            \"tau\": 0.05,\n            \"Omega\": np.array([[0.5, 0], [0, 0.5]])\n        },\n        # Case C: near-perfect confidence (small Omega)\n        {\n            \"tau\": 0.05,\n            \"Omega\": np.array([[1e-8, 0], [0, 1e-8]])\n        },\n        # Case D: very strong prior (small tau)\n        {\n            \"tau\": 0.0001,\n            \"Omega\": np.array([[0.0004, 0], [0, 0.0001]])\n        }\n    ]\n\n    all_results = []\n    for case in test_cases:\n        w_BL = compute_bl_weights(\n            Sigma,\n            w_mkt,\n            delta,\n            case[\"tau\"],\n            P,\n            Q,\n            case[\"Omega\"]\n        )\n        all_results.append(w_BL)\n\n    # Format the output string as specified\n    # [[wA_1,wA_2,...],[wB_1,wB_2,...],...]\n    # Rounded to 6 decimal places, no spaces.\n    str_results_list = []\n    for res_vector in all_results:\n        rounded_vector = np.round(res_vector, 6)\n        inner_str = ','.join(map(str, rounded_vector))\n        str_results_list.append(f\"[{inner_str}]\")\n\n    final_output_str = f\"[{','.join(str_results_list)}]\"\n    print(final_output_str)\n\nsolve()\n```"}, {"introduction": "在掌握了基本机制之后，这个实践将探讨模型中一个关键而微妙的方面：如何将经济思想转化为数学观点。你会发现，一个信念的表达方式——例如，是表述为绝对回报目标还是相对优胜——会改变最终的投资组合。这个练习强调了精确定义观点的重要性，并让你深入了解模型对观点结构的敏感性。[@problem_id:2376222]", "id": "2376222", "problem": "您将实现并分析一个在不同观点编码结构下的Black-Litterman投资组合优化模型，以测试将相同的经济信念表达为绝对观点与相对观点是否会改变最终的优化投资组合，以及改变的幅度。\n\n从以下基本原理开始：\n- Markowitz均值-方差最优性：对于给定的预期超额收益向量 $ \\mu \\in \\mathbb{R}^{n} $、协方差矩阵 $ \\Sigma \\in \\mathbb{R}^{n \\times n} $ 和风险规避参数 $ \\lambda \\in \\mathbb{R}_{+} $，均值-方差最优权重为 $ w^{\\star}(\\mu) = \\frac{1}{\\lambda} \\Sigma^{-1} \\mu $。\n- 用于均衡隐含收益的逆向优化：如果市值权重为 $ w^{mkt} \\in \\mathbb{R}^{n} $，则隐含的均衡预期超额收益为 $ \\pi = \\lambda \\Sigma w^{mkt} $。\n- 在多元正态先验和线性含噪观测下的贝叶斯更新：假设未知的预期超额收益向量 $ \\mu $ 具有先验分布 $ \\mu \\sim \\mathcal{N}(\\pi, \\tau \\Sigma) $，其中 $ \\tau \\in \\mathbb{R}_{+} $，并且线性观点被建模为 $ P \\mu + \\varepsilon = q $，其中 $ P \\in \\mathbb{R}^{k \\times n} $，$ q \\in \\mathbb{R}^{k} $，且 $ \\varepsilon \\sim \\mathcal{N}(0, \\Omega) $，$ \\Omega \\in \\mathbb{R}^{k \\times k} $ 是对称正定矩阵。您必须推导出 $ \\mu $ 的后验均值，并用它来计算均值-方差最优性下的后验最优投资组合权重。\n\n数值设置（所有数字均为无量纲，无物理单位）：\n- 资产数量 $ n = 3 $。\n- 协方差矩阵\n$$\n\\Sigma =\n\\begin{bmatrix}\n0.04 & 0.006 & 0.012 \\\\\n0.006 & 0.09 & 0.018 \\\\\n0.012 & 0.018 & 0.16\n\\end{bmatrix}.\n$$\n- 市值权重 $ w^{mkt} = [0.5, 0.3, 0.2]^{\\top} $。\n- 风险规避 $ \\lambda = 2.5 $。\n- 先验缩放因子 $ \\tau = 0.05 $。\n- 一个单一的经济信念：“资产 $ 1 $ 的预期超额收益应比其均衡隐含值高出 $ \\Delta = 0.01 $”，即资产 $ 1 $ 的预期超额收益有一个 $ 0.01 $ 的位移。\n\n观点与测试套件：\n对于所有观点，将观点协方差 $ \\Omega $ 构建为一个对角矩阵，其对角线元素等于每个观点的模型隐含方差，即第 $ i $ 个对角线元素是在先验分布 $ \\mathcal{N}(\\pi, \\tau \\Sigma) $ 下第 $ i $ 个线性观点的方差，计算为 $ P (\\tau \\Sigma) P^{\\top} $ 的第 $ i $ 个对角线元素。这确保了在不同观点参数化设置之间具有可比的置信度。\n\n定义以下三个测试案例，每个案例都会产生一个最优的Black-Litterman投资组合。您必须计算 $ \\pi $，然后是给定每个观点结构下 $ \\mu $ 的后验均值，最后是相应的最优权重 $ w^{\\star} $。\n\n- 测试案例 A（绝对观点与“相对于现金”的观点）：\n  - 绝对观点：$ P_{A,abs} = [1, 0, 0] $，$ q_{A,abs} = \\pi_{1} + \\Delta $。\n  - 相对于现金的观点：在超额收益设定中，现金对应于 $ 0 $，因此 $ P_{A,rel} = [1, 0, 0] $，$ q_{A,rel} = \\pi_{1} + \\Delta $。\n  - 计算两个最终最优权重向量之间的欧几里得距离：\n    $$ d_{A} = \\lVert w^{\\star}_{A,abs} - w^{\\star}_{A,rel} \\rVert_{2}. $$\n\n- 测试案例 B（绝对观点与相对于资产 $ 2 $ 的观点）：\n  - 绝对观点：$ P_{B,abs} = [1, 0, 0] $，$ q_{B,abs} = \\pi_{1} + \\Delta $。\n  - 相对于资产 $ 2 $ 的观点：$ P_{B,rel} = [1, -1, 0] $，并选择 $ q_{B,rel} = (\\pi_{1} + \\Delta) - \\pi_{2} $，这样当资产 $ 2 $ 保持在其先验均值时，资产 $ 1 $ 和 $ 2 $ 之间的目标差异与资产 $ 1 $ 的绝对目标所隐含的差异相匹配。\n  - 计算欧几里得距离：\n    $$ d_{B} = \\lVert w^{\\star}_{B,abs} - w^{\\star}_{B,rel} \\rVert_{2}. $$\n\n- 测试案例 C（观点重复的敏感性）：\n  - 针对资产 $ 2 $ 的单个相对观点：$ P_{C,1} = [1, -1, 0] $，$ q_{C,1} = (\\pi_{1} + \\Delta) - \\pi_{2} $。\n  - 重复观点（两个相同的行）：\n    $$\n    P_{C,2} =\n    \\begin{bmatrix}\n    1 & -1 & 0 \\\\\n    1 & -1 & 0\n    \\end{bmatrix}, \\quad\n    q_{C,2} =\n    \\begin{bmatrix}\n    (\\pi_{1} + \\Delta) - \\pi_{2} \\\\\n    (\\pi_{1} + \\Delta) - \\pi_{2}\n    \\end{bmatrix}.\n    $$\n    对每一行使用相同的 $ \\Omega $ 对角线构建方法。这种重复增加了同一线性信念的有效精度。\n  - 计算最终最优权重之间的欧几里得距离：\n    $$ d_{C} = \\lVert w^{\\star}_{C,1} - w^{\\star}_{C,2} \\rVert_{2}. $$\n\n您的程序必须：\n1. 根据给定的 $ \\Sigma $、$ \\lambda $ 和 $ w^{mkt} $ 计算 $ \\pi $。\n2. 对于每种观点设定，根据 $ P (\\tau \\Sigma) P^{\\top} $ 所述方法构建 $ \\Omega $。\n3. 在正态-线性贝叶斯更新下计算 $ \\mu $ 的后验均值。\n4. 对每个案例计算 $ w^{\\star} = \\frac{1}{\\lambda} \\Sigma^{-1} \\mu_{post} $。\n5. 输出一行，包含列表 $ [d_{A}, d_{B}, d_{C}] $，其中每个 $ d $ 是一个四舍五入到八位小数的浮点数。\n\n最终输出格式：\n您的程序应生成单行输出，其中包含一个用方括号括起来的逗号分隔列表（例如，“[0.00000000,0.01234567,0.00123456]”）。", "solution": "该问题要求对Black-Litterman投资组合优化模型进行分析，具体研究最终的最优投资组合权重对投资者观点表述方式的敏感性。该分析将通过比较由相同经济信念的不同数学形式（绝对观点和相对观点）推导出的投资组合来执行。\n\n该问题的理论基础建立在两大支柱之上：Markowitz均值-方差优化和用于推导预期收益的Black-Litterman模型。\n\n首先，Markowitz模型假定，对于给定的预期超额收益向量 $ \\mu \\in \\mathbb{R}^{n} $、资产协方差矩阵 $ \\Sigma \\in \\mathbb{R}^{n \\times n} $ 和标量风险规避参数 $ \\lambda > 0 $，使效用函数 $ U(w) = w^{\\top}\\mu - \\frac{\\lambda}{2}w^{\\top}\\Sigma w $ 最大化的最优投资组合权重 $ w^{\\star} $ 由以下公式给出：\n$$\nw^{\\star}(\\mu) = \\frac{1}{\\lambda} \\Sigma^{-1} \\mu\n$$\n\n其次，Black-Litterman模型提供了一个贝叶斯框架来确定预期收益向量 $ \\mu $。它首先从可观测的市值权重 $ w^{mkt} $ 中逆向工程出市场的共识预期。这些被称为隐含均衡收益 $ \\pi $，计算公式如下：\n$$\n\\pi = \\lambda \\Sigma w^{mkt}\n$$\n这些均衡收益作为未知真实预期收益 $ \\mu $ 先验分布的中心。先验被假定为一个多元正态分布：\n$$\n\\mu \\sim \\mathcal{N}(\\pi, \\tau\\Sigma)\n$$\n其中 $ \\tau \\in \\mathbb{R}_{+} $ 是一个缩放因子，用于控制对先验均值 $ \\pi $ 的置信度。较小的 $ \\tau $ 表示较高的置信度。\n\n投资者的私人观点被表示为一组包含不确定性的 $ k $ 个线性方程：\n$$\nP \\mu + \\varepsilon = q\n$$\n此处，$ P \\in \\mathbb{R}^{k \\times n} $ 是“选择”或“观点”矩阵，用于识别每个观点中涉及的资产。向量 $ q \\in \\mathbb{R}^{k} $ 包含这些线性组合的预期结果。项 $ \\varepsilon \\sim \\mathcal{N}(0, \\Omega) $ 代表观点中的不确定性，其中 $ \\Omega \\in \\mathbb{R}^{k \\times k} $ 是观点误差的协方差矩阵。\n\n为了获得 $ \\mu $ 的后验分布，我们使用贝叶斯定理将先验分布与从观点导出的似然函数相结合。对于多元正态分布，后验分布也是正态的。后验均值 $ \\mu_{post} $ 是通过最小化与先验和观点模型的负对数似然相对应的马氏距离平方和得出的：\n$$\nL(\\mu) = (\\mu - \\pi)^{\\top}(\\tau\\Sigma)^{-1}(\\mu - \\pi) + (q - P\\mu)^{\\top}\\Omega^{-1}(q - P\\mu)\n$$\n对 $ \\mu $ 求导并令其为零可得：\n$$\n\\frac{\\partial L}{\\partial \\mu} = 2(\\tau\\Sigma)^{-1}(\\mu - \\pi) - 2P^{\\top}\\Omega^{-1}(q - P\\mu) = 0\n$$\n$$\n\\left( (\\tau\\Sigma)^{-1} + P^{\\top}\\Omega^{-1}P \\right) \\mu = (\\tau\\Sigma)^{-1}\\pi + P^{\\top}\\Omega^{-1}q\n$$\n求解 $ \\mu $ 即可得到预期收益的后验均值：\n$$\n\\mu_{post} = \\left( (\\tau\\Sigma)^{-1} + P^{\\top}\\Omega^{-1}P \\right)^{-1} \\left( (\\tau\\Sigma)^{-1}\\pi + P^{\\top}\\Omega^{-1}q \\right)\n$$\n这个后验均值 $ \\mu_{post} $ 代表了市场均衡和投资者具体观点的复杂融合。然后将其用于Markowitz公式，以计算最终的Black-Litterman最优投资组合权重：\n$$\nw^{\\star}_{BL} = \\frac{1}{\\lambda} \\Sigma^{-1} \\mu_{post}\n$$\n问题指定了一种构建观点不确定性矩阵 $ \\Omega $ 的特定方法：它是一个对角矩阵，其中第 $ i $ 个对角元素是由先验分布所隐含的第 $ i $ 个观点的方差。该方差计算为矩阵 $ P(\\tau\\Sigma)P^{\\top} $ 的第 $ i $ 个对角元素。\n\n计算步骤如下：\n1.  使用提供的 $ \\lambda $、$ \\Sigma $ 和 $ w^{mkt} $ 的数值，我们首先计算隐含均衡收益向量 $ \\pi $。\n2.  对每个测试案例，我们构造用于编码观点的特定 $ P $ 和 $ q $ 矩阵/向量。\n3.  然后我们按规定为每个观点结构构造观点协方差矩阵 $ \\Omega $。\n4.  使用推导出的公式，我们为每种情景计算后验预期收益 $ \\mu_{post} $。\n5.  然后我们为每种情景计算相应的最优投资组合权重 $ w^{\\star} $。\n6.  最后，我们计算相关权重向量对之间的欧几里得距离 $ d_A, d_B, d_C $。\n\n**测试案例A**：此案例比较了对资产1的绝对观点与“相对于现金”的观点。在超额收益框架中，现金的收益为零。因此，对资产超额收益的观点本质上是相对于现金的。两种情景的数学表述是相同的：$ P = [1, 0, 0] $ 和 $ q = \\pi_1 + \\Delta $。因此，最终的后验收益和投资组合权重必须相同，从而得出预期距离 $ d_A = 0 $。这可作为一致性检查。\n\n**测试案例B**：此案例将对资产1的绝对观点（$ P_{abs} = [1, 0, 0] $）与涉及资产1和资产2的相对观点（$ P_{rel} = [1, -1, 0] $）进行对比。相对观点的目标 $ q_{rel} $ 被设定为在资产2的预期收益保持在其先验均值的假设下，与绝对观点保持一致。尽管经济思想上一致，但数学结构不同（$ P_{abs} \\neq P_{rel} $）。这将导致不同的 $ \\Omega $ 矩阵和不同的后验更新，从而产生不同的最优投资组合。距离 $ d_B $ 将量化这种差异。\n\n**测试案例C**：此案例检验观点重复的影响。我们将来自单个相对观点（与案例B中的相对观点相同）的投资组合与同一观点被陈述两次的投资组合进行比较。通过构造具有两个相同行的 $ P $ 和具有两个相同条目的 $ q $，并对 $ \\Omega $ 使用指定的对角线构造，我们实际上增加了对该单一经济信念的置信度。在后验均值公式中，$ P^{\\top}\\Omega^{-1}P $ 项对于重复情况会更大，从而更强烈地将后验均值拉向观点。距离 $ d_C $ 将衡量由于这种置信度增加而导致的投资组合偏移。", "answer": "```python\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Implements the Black-Litterman model to analyze portfolio sensitivity\n    to different view formulations.\n    \"\"\"\n    # Numerical setup from the problem statement\n    n = 3\n    Sigma = np.array([\n        [0.04, 0.006, 0.012],\n        [0.006, 0.09, 0.018],\n        [0.012, 0.018, 0.16]\n    ])\n    w_mkt = np.array([0.5, 0.3, 0.2])\n    lam = 2.5\n    tau = 0.05\n    Delta = 0.01\n\n    # Pre-compute matrices that are used repeatedly\n    Sigma_inv = np.linalg.inv(Sigma)\n    tau_Sigma = tau * Sigma\n    tau_Sigma_inv = np.linalg.inv(tau_Sigma)\n\n    # Step 1: Compute implied equilibrium returns (pi)\n    pi = lam * Sigma @ w_mkt\n\n    def compute_bl_weights(P, q, pi_vec, tau_Sigma_mat, tau_Sigma_inv_mat, Sigma_inv_mat, lam_val):\n        \"\"\"\n        Computes the Black-Litterman optimal portfolio weights for a given set of views.\n        Args:\n            P (np.ndarray): The view matrix (k x n).\n            q (np.ndarray): The view outcomes vector (k,).\n            pi_vec (np.ndarray): The equilibrium returns vector (n,).\n            tau_Sigma_mat (np.ndarray): The scaled prior covariance matrix (n x n).\n            tau_Sigma_inv_mat (np.ndarray): The inverse of tau_Sigma_mat (n x n).\n            Sigma_inv_mat (np.ndarray): The inverse asset covariance matrix (n x n).\n            lam_val (float): The risk aversion parameter.\n        Returns:\n            np.ndarray: The optimal portfolio weights vector (n,).\n        \"\"\"\n        # Ensure P is 2D\n        if P.ndim == 1:\n            P = P.reshape(1, -1)\n        \n        # Ensure q is 1D\n        if q.ndim > 1:\n            q = q.flatten()\n\n        # Step 2: Construct the view covariance Omega\n        # Omega is a diagonal matrix with diagonal elements from P * (tau*Sigma) * P.T\n        view_var_cov = P @ tau_Sigma_mat @ P.T\n        Omega_diag = np.diag(view_var_cov)\n        Omega = np.diag(Omega_diag)\n        Omega_inv = np.linalg.inv(Omega)\n\n        # Step 3: Compute the posterior mean of mu\n        # Formula: mu_post = inv(inv(tau*Sigma) + P.T*inv(Omega)*P) * (inv(tau*Sigma)*pi + P.T*inv(Omega)*q)\n        posterior_precision = tau_Sigma_inv_mat + P.T @ Omega_inv @ P\n        posterior_covariance = np.linalg.inv(posterior_precision)\n        \n        rhs_vector = tau_Sigma_inv_mat @ pi_vec + P.T @ Omega_inv @ q\n        \n        mu_post = posterior_covariance @ rhs_vector\n\n        # Step 4: Compute the optimal portfolio weights\n        w_star = (1 / lam_val) * Sigma_inv_mat @ mu_post\n        \n        return w_star\n\n    # ----- Test Case A -----\n    # Absolute view\n    P_A_abs = np.array([1, 0, 0])\n    q_A_abs = np.array([pi[0] + Delta])\n    w_A_abs = compute_bl_weights(P_A_abs, q_A_abs, pi, tau_Sigma, tau_Sigma_inv, Sigma_inv, lam)\n    \n    # Relative-to-cash view (mathematically identical to absolute view in this context)\n    P_A_rel = np.array([1, 0, 0])\n    q_A_rel = np.array([pi[0] + Delta])\n    w_A_rel = compute_bl_weights(P_A_rel, q_A_rel, pi, tau_Sigma, tau_Sigma_inv, Sigma_inv, lam)\n\n    d_A = np.linalg.norm(w_A_abs - w_A_rel)\n\n    # ----- Test Case B -----\n    # Absolute view (same as w_A_abs)\n    w_B_abs = w_A_abs\n    \n    # Relative view to asset 2\n    P_B_rel = np.array([1, -1, 0])\n    q_B_rel_val = (pi[0] + Delta) - pi[1]\n    q_B_rel = np.array([q_B_rel_val])\n    w_B_rel = compute_bl_weights(P_B_rel, q_B_rel, pi, tau_Sigma, tau_Sigma_inv, Sigma_inv, lam)\n\n    d_B = np.linalg.norm(w_B_abs - w_B_rel)\n    \n    # ----- Test Case C -----\n    # Single relative view (same as w_B_rel)\n    w_C_1 = w_B_rel\n\n    # Duplicated relative view\n    P_C_2 = np.array([[1, -1, 0], [1, -1, 0]])\n    q_C_2 = np.array([q_B_rel_val, q_B_rel_val])\n    w_C_2 = compute_bl_weights(P_C_2, q_C_2, pi, tau_Sigma, tau_Sigma_inv, Sigma_inv, lam)\n    \n    d_C = np.linalg.norm(w_C_1 - w_C_2)\n\n    # Final output formatting\n    results = [round(d, 8) for d in [d_A, d_B, d_C]]\n    print(f\"[{','.join(map(str, results))}]\")\n\nsolve()\n```"}, {"introduction": "这最后一个实践颠覆了Black-Litterman模型的传统用法，将其转变为一个强大的分析工具。你将学习如何对一个给定的投资组合进行逆向工程，以揭示其背后隐含的观点，而不是根据观点来构建投资组合。这种“隐含观点分析”是一项宝贵技能，可以用来解构和理解任何投资策略中所蕴含的市场信念。[@problem_id:2376249]", "id": "2376249", "problem": "您将处理一个用于 Black-Litterman (BL) 投资组合优化的程式化设定。在此设定中，一位基金经理报告的投资组合权重被假定为在某个后验预期超额收益下的精确均值-方差最优解，而该后验预期超额收益是通过将基于市场的先验与线性观点相结合得出的。您的任务是推导能够在该 Black-Litterman 模型下合理解释所观察到权重的基金经理“隐含观点”向量，并将该推导过程实现为一个完整、可运行的程序，用以计算一个小规模测试套件中的这些隐含观点。\n\n请从以下基本原理出发：\n- 包含无风险资产的均值-方差优化：最优风险投资组合权重 $w$ 可最大化效用函数 $U(w) = w^{\\top} \\mu - \\frac{\\lambda}{2} w^{\\top} \\Sigma w$，其中 $w$ 是 $n$ 种风险资产的投资组合权重，$\\mu$ 是预期超额收益向量，$\\Sigma$ 是超额收益的对称正定协方差矩阵，$\\lambda > 0$ 是风险规避系数。使用一阶最优性条件来关联 $w$、$\\mu$、$\\Sigma$ 和 $\\lambda$。\n- 市场均衡先验：在相同的 $\\Sigma$ 和 $\\lambda$ 条件下，市值加权投资组合 $w^{\\text{mkt}}$ 被假定为关于先验预期超额收益 $\\pi$ 的均值-方差最优风险投资组合。\n- Black-Litterman (BL) 线性高斯观点结构：先验 $r \\sim \\mathcal{N}(\\pi, \\tau \\Sigma)$，其中 $\\tau > 0$ 为一个标量；观点 $P r \\sim \\mathcal{N}(Q, \\Omega)$，其中 $P$ 是 $k \\times n$ 的观点矩阵， $Q$ 是待确定的 $k \\times 1$ 观点向量，$\\Omega$ 是对称正定的 $k \\times k$ 观点误差协方差矩阵。\n\n假设基金经理报告的权重 $w^{\\text{mgr}}$ 对于 BL 模型后验超额收益均值是精确的均值-方差最优解。请推导出一个隐含观点向量 $Q$ 的显式表达式，该表达式需与观察到的 $w^{\\text{mgr}}$ 和指定的模型输入一致。您的推导必须从上述基本原理出发，不得使用任何假设已知 Black-Litterman 后验闭式形式的快捷公式。\n\n然后，实现一个程序，为下述每个测试用例计算隐含观点 $Q$。所有收益率必须视为超额收益，并以小数（而非百分比）表示。本问题不涉及角度，因此无需角度单位。也不涉及物理单位。\n\n对于所有测试用例，使用 $n = 3$ 个资产和 $k = 3$ 个绝对观点，其中 $P = I_3$ 为 $3 \\times 3$ 单位矩阵。协方差矩阵 $\\Sigma$ 在所有用例中均相同：\n- $\\Sigma = \\begin{bmatrix}\n0.040 & 0.018 & 0.012 \\\\\n0.018 & 0.035 & 0.015 \\\\\n0.012 & 0.015 & 0.030\n\\end{bmatrix}$\n\n市值加权权重在所有用例中均相同：\n- $w^{\\text{mkt}} = \\begin{bmatrix} 0.5 \\\\ 0.3 \\\\ 0.2 \\end{bmatrix}$\n\n对于每个用例，给出基金经理的观察权重 $w^{\\text{mgr}}$、风险规避系数 $\\lambda$、标量 $\\tau$ 以及 $\\Omega$ 的对角线元素。\n\n测试套件（三个用例）：\n- 用例 1（一般正常路径）：\n  - $w^{\\text{mgr}} = \\begin{bmatrix} 0.3 \\\\ 0.4 \\\\ 0.3 \\end{bmatrix}$, $\\lambda = 2.5$, $\\tau = 0.05$, $\\Omega = \\operatorname{diag}(0.01, 0.02, 0.03)$。\n- 用例 2（$\\tau$ 值较小的边界情况）：\n  - $w^{\\text{mgr}} = \\begin{bmatrix} 0.6 \\\\ 0.2 \\\\ 0.2 \\end{bmatrix}$, $\\lambda = 2.5$, $\\tau = 0.001$, $\\Omega = \\operatorname{diag}(0.02, 0.02, 0.02)$。\n- 用例 3（$\\Omega$ 值较大的边界情况）：\n  - $w^{\\text{mgr}} = \\begin{bmatrix} 0.2 \\\\ 0.5 \\\\ 0.3 \\end{bmatrix}$, $\\lambda = 2.5$, $\\tau = 0.05$, $\\Omega = \\operatorname{diag}(0.2, 0.15, 0.25)$。\n\n每个用例需要计算的内容：\n1. 使用均值-方差一阶条件，从 $w^{\\text{mkt}}$、$\\Sigma$ 和 $\\lambda$ 计算均衡先验预期超额收益 $\\pi$。\n2. 使用相同的一阶条件，计算由 $w^{\\text{mgr}}$、$\\Sigma$ 和 $\\lambda$ 隐含的后验最优预期超额收益 $\\mu^{\\star}$。\n3. 使用 $P = I_3$、$\\tau$ 和 $\\Omega$ 的 Black-Litterman 线性高斯框架，推导并计算能够产生后验均值 $\\mu^{\\star}$ 的隐含绝对观点向量 $Q$。\n\n最终输出格式：\n- 您的程序应生成单行输出，其中包含用方括号括起来的、以逗号分隔的结果列表。\n- 对于每个用例，按顺序输出相应隐含观点向量 $Q$ 的三个条目；然后按用例 1、用例 2、用例 3 的顺序连接三个用例的结果。\n- 在打印前，将每个浮点数结果四舍五入到恰好六位小数。\n- 结构示例（非实际值）：[$q_{1,1}$,$q_{1,2}$,$q_{1,3}$,$q_{2,1}$,$q_{2,2}$,$q_{2,3}$,$q_{3,1}$,$q_{3,2}$,$q_{3,3}$]。\n\n您提交的内容必须是一个完整、可运行的程序，该程序能计算这九个数字，并按照指定的舍入要求以所描述的单行格式精确打印它们。", "solution": "问题陈述已经过分析，并被认为是有效的。其科学基础是计算金融的既定原则，特别是均值-方差投资组合优化和 Black-Litterman 模型。该问题是适定的，具有充足的数据和一致的约束，保证了唯一解的存在。所有术语都以充分的数学严谨性进行了定义。\n\n任务是推导基金经理的隐含观点向量 $Q$，该向量可合理解释一个观察到的投资组合 $w^{\\text{mgr}}$。推导将从指定的基本原理出发。\n\n**步骤1：均值-方差一阶条件的推导**\n\n投资者的优化问题是选择投资组合权重 $w$ 以最大化效用函数 $U(w)$：\n$$ \\max_{w} U(w) = w^{\\top} \\mu - \\frac{\\lambda}{2} w^{\\top} \\Sigma w $$\n此处，$w$ 是风险资产投资组合权重的 $n \\times 1$ 向量，$\\mu$ 是预期超额收益的 $n \\times 1$ 向量，$\\Sigma$ 是超额收益的 $n \\times n$ 协方差矩阵（对称且正定），$\\lambda > 0$ 是风险规避的标量系数。\n\n为了找到最优权重，我们计算 $U(w)$ 关于 $w$ 的梯度，并将其设为零。使用标准的矩阵微积分，一阶条件（FOC）为：\n$$ \\frac{\\partial U(w)}{\\partial w} = \\mu - \\lambda \\Sigma w = 0 $$\n这就得出了预期超额收益与最优投资组合权重之间的基本关系：\n$$ \\mu = \\lambda \\Sigma w $$\n该方程允许人们确定能使给定投资组合 $w$ 成为最优的预期收益。这通常被称为“逆向优化”。\n\n**步骤2：隐含先验和后验收益的计算**\n\n本问题提出了该逆向优化原理的两个应用。\n\n首先，市场均衡先验收益（表示为 $\\pi$）是那些能使市值加权投资组合 $w^{\\text{mkt}}$ 达到最优的收益。应用一阶条件：\n$$ \\pi = \\lambda \\Sigma w^{\\text{mkt}} $$\n\n其次，基金经理观察到的投资组合 $w^{\\text{mgr}}$ 被假定是关于 Black-Litterman 后验预期收益（我们表示为 $\\mu^{\\star}$）的最优解。因此：\n$$ \\mu^{\\star} = \\lambda \\Sigma w^{\\text{mgr}} $$\n\n**步骤3：隐含观点向量 $Q$ 的推导**\n\nBlack-Litterman 模型通过结合收益的先验分布 $r \\sim \\mathcal{N}(\\pi, \\tau \\Sigma)$ 和一组线性观点 $P r \\sim \\mathcal{N}(Q, \\Omega)$，为后验均值预期收益 $\\mu^{\\text{BL}}$ 提供了一个公式。后验均值的公式是贝叶斯推断的结果：\n$$ \\mu^{\\text{BL}} = \\left[ (\\tau \\Sigma)^{-1} + P^{\\top} \\Omega^{-1} P \\right]^{-1} \\left[ (\\tau \\Sigma)^{-1} \\pi + P^{\\top} \\Omega^{-1} Q \\right] $$\n我们已知基金经理的隐含收益 $\\mu^{\\star}$ 等于 BL 模型的后验均值，即 $\\mu^{\\star} = \\mu^{\\text{BL}}$。我们的目标是求解观点向量 $Q$。\n\n让我们重排该方程：\n$$ \\left[ (\\tau \\Sigma)^{-1} + P^{\\top} \\Omega^{-1} P \\right] \\mu^{\\star} = (\\tau \\Sigma)^{-1} \\pi + P^{\\top} \\Omega^{-1} Q $$\n分离包含 $Q$ 的项：\n$$ P^{\\top} \\Omega^{-1} Q = \\left[ (\\tau \\Sigma)^{-1} + P^{\\top} \\Omega^{-1} P \\right] \\mu^{\\star} - (\\tau \\Sigma)^{-1} \\pi $$\n在右侧展开 $\\mu^{\\star}$：\n$$ P^{\\top} \\Omega^{-1} Q = (\\tau \\Sigma)^{-1} \\mu^{\\star} + P^{\\top} \\Omega^{-1} P \\mu^{\\star} - (\\tau \\Sigma)^{-1} \\pi $$\n合并同类项：\n$$ P^{\\top} \\Omega^{-1} Q = (\\tau \\Sigma)^{-1} (\\mu^{\\star} - \\pi) + P^{\\top} \\Omega^{-1} P \\mu^{\\star} $$\n问题指定有 $k=n=3$ 个绝对观点，因此观点矩阵 $P$ 是 $3 \\times 3$ 的单位矩阵，即 $P = I_3$。由于 $P$ 是单位矩阵，它等于其自身的逆和转置，即 $P = P^{\\top} = P^{-1} = I_n$。代入 $P = I_n$ 和 $P^{\\top} = I_n$ 可显著简化方程：\n$$ I_n^{\\top} \\Omega^{-1} Q = (\\tau \\Sigma)^{-1} (\\mu^{\\star} - \\pi) + I_n^{\\top} \\Omega^{-1} I_n \\mu^{\\star} $$\n$$ \\Omega^{-1} Q = (\\tau \\Sigma)^{-1} (\\mu^{\\star} - \\pi) + \\Omega^{-1} \\mu^{\\star} $$\n为了求解 $Q$，我们用 $\\Omega$ 左乘两边。由于 $\\Omega$ 被指定为对称正定矩阵，其逆矩阵 $\\Omega^{-1}$ 存在。\n$$ Q = \\Omega \\left[ (\\tau \\Sigma)^{-1} (\\mu^{\\star} - \\pi) + \\Omega^{-1} \\mu^{\\star} \\right] $$\n$$ Q = \\Omega (\\tau \\Sigma)^{-1} (\\mu^{\\star} - \\pi) + \\Omega \\Omega^{-1} \\mu^{\\star} $$\n简化后，我们得到隐含观点向量 $Q$ 的最终表达式：\n$$ Q = \\mu^{\\star} + \\frac{1}{\\tau} \\Omega \\Sigma^{-1} (\\mu^{\\star} - \\pi) $$\n\n**计算流程总结**\n\n对于每个测试用例，给定参数 $\\{\\Sigma, w^{\\text{mkt}}, w^{\\text{mgr}}, \\lambda, \\tau, \\Omega\\}$，执行以下步骤：\n1.  计算市场隐含的先验收益：$\\pi = \\lambda \\Sigma w^{\\text{mkt}}$。\n2.  计算基金经理隐含的后验收益：$\\mu^{\\star} = \\lambda \\Sigma w^{\\text{mgr}}$。\n3.  计算协方差矩阵的逆 $\\Sigma^{-1}$。\n4.  使用推导出的公式计算隐含观点向量 $Q$：$Q = \\mu^{\\star} + \\frac{1}{\\tau} \\Omega \\Sigma^{-1} (\\mu^{\\star} - \\pi)$。\n\n该流程将被实现，以解决指定测试用例中的 $Q$。", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Computes the implied view vector Q in the Black-Litterman model for three test cases.\n    \"\"\"\n    \n    # Common parameters for all test cases\n    Sigma = np.array([\n        [0.040, 0.018, 0.012],\n        [0.018, 0.035, 0.015],\n        [0.012, 0.015, 0.030]\n    ])\n    \n    w_mkt = np.array([0.5, 0.3, 0.2])\n    \n    # Test suite: (w_mgr, lambda, tau, Omega_diag)\n    test_cases = [\n        (np.array([0.3, 0.4, 0.3]), 2.5, 0.05, np.array([0.01, 0.02, 0.03])),\n        (np.array([0.6, 0.2, 0.2]), 2.5, 0.001, np.array([0.02, 0.02, 0.02])),\n        (np.array([0.2, 0.5, 0.3]), 2.5, 0.05, np.array([0.2, 0.15, 0.25]))\n    ]\n\n    all_q_values = []\n\n    # Pre-compute inverse of Sigma as it is constant\n    Sigma_inv = np.linalg.inv(Sigma)\n\n    for case in test_cases:\n        w_mgr, lambda_val, tau, Omega_diag = case\n        \n        # Build the diagonal Omega matrix\n        Omega = np.diag(Omega_diag)\n        \n        # Step 1: Compute equilibrium prior expected excess returns (pi)\n        # pi = lambda * Sigma * w_mkt\n        pi = lambda_val * (Sigma @ w_mkt)\n        \n        # Step 2: Compute posterior-optimizing expected excess returns (mu_star)\n        # mu_star = lambda * Sigma * w_mgr\n        mu_star = lambda_val * (Sigma @ w_mgr)\n        \n        # Step 3: Compute the implied absolute-view vector (Q)\n        # Q = mu_star + (1/tau) * Omega * Sigma_inv * (mu_star - pi)\n        mu_diff = mu_star - pi\n        adjustment_term = (1 / tau) * (Omega @ Sigma_inv @ mu_diff)\n        Q = mu_star + adjustment_term\n        \n        all_q_values.extend(Q)\n\n    # Format the final output string with 6 decimal places for each value\n    results_str = [f\"{val:.6f}\" for val in all_q_values]\n    \n    # Final print statement in the exact required format.\n    print(f\"[{','.join(results_str)}]\")\n\nsolve()\n```"}]}