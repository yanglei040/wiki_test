{"hands_on_practices": [{"introduction": "本练习提供了一个基础模型，用于理解市场价格如何汇总不同个体的信念和风险偏好。通过推导一个由具有恒定绝对风险厌恶（CARA）效用但期望各异的代理人组成的市场中的均衡价格，你将能够量化地看到风险厌恶和信念差异如何共同促成风险溢价的形成。这项实践对于掌握异质代理人背景下资产定价的微观基础至关重要。[@problem_id:2445904]", "id": "2445904", "problem": "考虑一个单期市场，其中包含一种无风险资产和一种风险资产。市场中有 $N$ 个代理人，索引为 $i \\in \\{1,\\dots,N\\}$。每个代理人对期末财富具有恒定绝对风险厌恶 (CARA) 效用，其函数为 $U_i(w) = -\\exp(-\\gamma_i w)$，风险厌恶系数为 $\\gamma_i \\gt 0$。风险资产在期末支付随机收益 $D$。代理人 $i$ 持有主观信念，认为 $D$ 服从均值为 $\\mu_i$、方差为 $\\sigma_i^2$ 的正态分布，记为 $D \\sim \\mathcal{N}(\\mu_i,\\sigma_i^2)$。无风险资产的总回报率为 $R_f \\gt 0$。风险资产的外生总净供给量为 $s \\in \\mathbb{R}$（以风险资产的单位计量）。令 $P$ 表示风险资产在日期 0 的价格。\n\n每个代理人在日期 0 选择持有风险资产的头寸 $x_i$，以在给定价格 $P$ 的情况下最大化其期末财富的期望效用。市场出清要求 $\\sum_{i=1}^N x_i = s$。假设所有给定参数能够确保竞争性均衡价格 $P$ 的存在性和唯一性。\n\n对于一个给定的实例，将风险溢价定义为代理人期望收益的简单平均值与价格 $P$ 下所需总收益之间的差额，即：\n$$\\text{RP} \\equiv \\bar{\\mu} - P R_f, \\quad \\text{where} \\quad \\bar{\\mu} \\equiv \\frac{1}{N}\\sum_{i=1}^N \\mu_i.$$\n以与 $D$ 相同的单位（例如，美元）将风险溢价报告为一个实数。答案请以小数形式表示（不带百分号）。\n\n您的任务是编写一个程序，为下面的每个测试用例，计算出使市场出清的唯一竞争性均衡价格 $P$，然后输出上面定义的相应风险溢价 $\\text{RP}$。将每个风险溢价四舍五入到小数点后 6 位。\n\n测试套件（每个测试用例指定 $(N, R_f, s, \\{\\gamma_i\\}_{i=1}^N, \\{\\mu_i\\}_{i=1}^N, \\{\\sigma_i^2\\}_{i=1}^N)$）：\n- 测试用例 A:\n  - $N = 3$, $R_f = 1.02$, $s = 1.0$,\n  - $\\{\\gamma_i\\} = [2.0, 3.0, 1.0]$,\n  - $\\{\\mu_i\\} = [1.0, 1.2, 0.8]$,\n  - $\\{\\sigma_i^2\\} = [0.25, 0.25, 0.25]$.\n- 测试用例 B:\n  - $N = 3$, $R_f = 1.01$, $s = 1000.0$,\n  - $\\{\\gamma_i\\} = [1.0, 2.0, 3.0]$,\n  - $\\{\\mu_i\\} = [1.0, 1.0, 1.0]$,\n  - $\\{\\sigma_i^2\\} = [10^{-6}, 10^{-6}, 10^{-6}]$.\n- 测试用例 C:\n  - $N = 3$, $R_f = 1.00$, $s = 50.0$,\n  - $\\{\\gamma_i\\} = [10^{-6}, 2.0, 3.0]$,\n  - $\\{\\mu_i\\} = [1.1, 1.1, 1.1]$,\n  - $\\{\\sigma_i^2\\} = [9.0, 9.0, 9.0]$.\n- 测试用例 D:\n  - $N = 3$, $R_f = 1.05$, $s = 0.0$,\n  - $\\{\\gamma_i\\} = [2.0, 1.0, 4.0]$,\n  - $\\{\\mu_i\\} = [0.9, 1.4, 1.1]$,\n  - $\\{\\sigma_i^2\\} = [0.16, 0.36, 0.25]$.\n\n最终输出格式：您的程序应生成单行输出，其中包含四个测试用例的风险溢价，每个值都四舍五入到 6 位小数，以逗号分隔，并用方括号括起来，例如 $[r_A,r_B,r_C,r_D]$，其中 $r_A$ 对应于测试用例 A，依此类推。不应打印任何额外文本。", "solution": "所提出的问题是一个标准的、包含异质代理人的资产定价模型，它具有科学依据，是适定且客观的。因此，它适用于进行全面分析。我们从第一性原理出发推导解答。\n\n该模型包含 $N$ 个代理人、一个总回报率为 $R_f > 0$ 的无风险资产，以及一个在日期 0 价格为 $P$、在日期 1 随机收益为 $D$ 的风险资产。代理人 $i \\in \\{1, \\dots, N\\}$ 具有恒定绝对风险厌恶 (CARA) 效用函数 $U_i(w) = -\\exp(-\\gamma_i w)$，其中 $\\gamma_i > 0$ 是绝对风险厌恶系数。每个代理人 $i$ 持有主观信念，认为收益 $D$ 服从正态分布 $D \\sim \\mathcal{N}(\\mu_i, \\sigma_i^2)$。\n\n代理人 $i$ 选择持有数量为 $x_i$ 的风险资产。其初始财富 $w_{i,0}$ 的剩余部分投资于无风险资产。因此，代理人 $i$ 在日期 1 的财富由下式给出：\n$$w_i = (w_{i,0} - x_i P)R_f + x_i D = w_{i,0}R_f + x_i(D - PR_f)$$\n代理人的目标是基于其主观信念，最大化期末财富的期望效用：\n$$\\max_{x_i} \\mathbb{E}_i[U_i(w_i)] = \\max_{x_i} \\mathbb{E}_i[-\\exp(-\\gamma_i w_i)]$$\n代入 $w_i$ 的表达式：\n$$\\max_{x_i} \\mathbb{E}_i[-\\exp(-\\gamma_i (w_{i,0}R_f + x_i(D - PR_f)))]$$\n由于 $w_{i,0}$ 和 $R_f$ 是常数，且最大化 $-f(x)$ 等价于最小化 $f(x)$，该问题等价于：\n$$\\min_{x_i} \\exp(-\\gamma_i w_{i,0}R_f) \\mathbb{E}_i[\\exp(-\\gamma_i x_i(D - PR_f))]$$\n项 $\\exp(-\\gamma_i w_{i,0}R_f)$ 是一个相对于选择变量 $x_i$ 的正常数，可以忽略。因此，优化问题等价于最小化期望项。令随机变量为 $Z_i = -\\gamma_i x_i(D - PR_f)$。从代理人 $i$ 的角度来看，由于 $D \\sim \\mathcal{N}(\\mu_i, \\sigma_i^2)$，项 $(D - PR_f)$ 也服从正态分布，其均值为 $\\mu_i - PR_f$，方差为 $\\sigma_i^2$。因此，$Z_i$ 是一个正态分布的随机变量，其均值为 $\\mathbb{E}_i[Z_i] = -\\gamma_i x_i(\\mu_i - PR_f)$，方差为 $\\text{Var}_i(Z_i) = (-\\gamma_i x_i)^2 \\sigma_i^2 = \\gamma_i^2 x_i^2 \\sigma_i^2$。\n\n期望 $\\mathbb{E}_i[\\exp(Z_i)]$ 是正态变量 $Z_i$ 在 $t=1$ 处取值的矩生成函数。对于一个一般的正态变量 $X \\sim \\mathcal{N}(\\mu_X, \\sigma_X^2)$，其矩生成函数 (MGF) 为 $M_X(t) = \\exp(\\mu_X t + \\frac{1}{2}\\sigma_X^2 t^2)$。将此应用于 $Z_i$：\n$$\\mathbb{E}_i[\\exp(Z_i)] = \\exp(\\mathbb{E}_i[Z_i] \\cdot 1 + \\frac{1}{2}\\text{Var}_i(Z_i) \\cdot 1^2) = \\exp(-\\gamma_i x_i(\\mu_i - PR_f) + \\frac{1}{2}\\gamma_i^2 x_i^2 \\sigma_i^2)$$\n代理人的问题简化为选择 $x_i$ 以最小化此表达式，这等价于最小化其指数部分（即确定性等价回报率）：\n$$\\min_{x_i} \\left\\{ -\\gamma_i x_i(\\mu_i - PR_f) + \\frac{1}{2}\\gamma_i^2 x_i^2 \\sigma_i^2 \\right\\}$$\n这是一个关于 $x_i$ 的凸二次函数。通过对 $x_i$ 求导并将结果置零，可以找到最小化的一阶条件：\n$$\\frac{\\partial}{\\partial x_i} \\left[ -\\gamma_i x_i(\\mu_i - PR_f) + \\frac{1}{2}\\gamma_i^2 x_i^2 \\sigma_i^2 \\right] = -\\gamma_i(\\mu_i - PR_f) + \\gamma_i^2 x_i \\sigma_i^2 = 0$$\n由于 $\\gamma_i > 0$，我们可以除以 $\\gamma_i$ 并解出 $x_i$，得到个人对风险资产的需求：\n$$x_i(P) = \\frac{\\mu_i - PR_f}{\\gamma_i \\sigma_i^2}$$\n该表达式表明，需求由风险资产单位感知期望超额收益驱动，并根据代理人的风险容忍度进行调整，风险容忍度是风险厌恶程度与感知方差乘积的倒数。\n\n均衡价格 $P$ 由市场出清条件决定，该条件使得总需求等于外生总供给 $s$：\n$$\\sum_{i=1}^N x_i = s$$\n代入个人需求函数：\n$$\\sum_{i=1}^N \\frac{\\mu_i - PR_f}{\\gamma_i \\sigma_i^2} = s$$\n我们可以求解这个关于 $P$ 的线性方程。我们分离各项：\n$$\\sum_{i=1}^N \\frac{\\mu_i}{\\gamma_i \\sigma_i^2} - \\sum_{i=1}^N \\frac{PR_f}{\\gamma_i \\sigma_i^2} = s$$\n$$PR_f \\left( \\sum_{i=1}^N \\frac{1}{\\gamma_i \\sigma_i^2} \\right) = \\left( \\sum_{i=1}^N \\frac{\\mu_i}{\\gamma_i \\sigma_i^2} \\right) - s$$\n求解所需总收益 $PR_f$：\n$$PR_f = \\frac{\\left( \\sum_{i=1}^N \\frac{\\mu_i}{\\gamma_i \\sigma_i^2} \\right) - s}{\\sum_{i=1}^N \\frac{1}{\\gamma_i \\sigma_i^2}}$$\n问题将风险溢价定义为 $\\text{RP} \\equiv \\bar{\\mu} - PR_f$，其中 $\\bar{\\mu} = \\frac{1}{N}\\sum_{i=1}^N \\mu_i$。代入推导出的 $PR_f$ 表达式，得到风险溢价的最终公式：\n$$\\text{RP} = \\left(\\frac{1}{N}\\sum_{i=1}^N \\mu_i\\right) - \\frac{\\left( \\sum_{i=1}^N \\frac{\\mu_i}{\\gamma_i \\sigma_i^2} \\right) - s}{\\sum_{i=1}^N \\frac{1}{\\gamma_i \\sigma_i^2}}$$\n此解析表达式将被用于计算每个测试用例的风险溢价。", "answer": "```python\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Computes the competitive equilibrium price and risk premium for a set of test cases\n    in a CARA-Normal asset pricing model with heterogeneous beliefs.\n    \"\"\"\n\n    def calculate_risk_premium(N, Rf, s, gammas, mus, sigmas_sq):\n        \"\"\"\n        Calculates the risk premium for a single market instance.\n\n        Args:\n            N (int): Number of agents.\n            Rf (float): Gross risk-free return.\n            s (float): Aggregate net supply of the risky asset.\n            gammas (np.ndarray): Array of risk aversion parameters.\n            mus (np.ndarray): Array of subjective expected payoffs.\n            sigmas_sq (np.ndarray): Array of subjective payoff variances.\n\n        Returns:\n            float: The calculated risk premium.\n        \"\"\"\n        # Average of agents' expected payoffs\n        mu_bar = np.mean(mus)\n\n        # Risk tolerances tau_i = 1 / (gamma_i * sigma_i^2)\n        taus = 1.0 / (gammas * sigmas_sq)\n\n        # Numerator of the PR_f expression: sum(mu_i * tau_i) - s\n        numerator_pr_f = np.sum(mus * taus) - s\n\n        # Denominator of the PR_f expression: sum(tau_i)\n        denominator_pr_f = np.sum(taus)\n\n        # Required gross payoff at equilibrium price P\n        pr_f = numerator_pr_f / denominator_pr_f\n\n        # Risk premium RP = mu_bar - P * R_f\n        risk_premium = mu_bar - pr_f\n        \n        return risk_premium\n\n    # Test Suite\n    test_cases = [\n        # Test case A: (N, Rf, s, {gamma_i}, {mu_i}, {sigma_i^2})\n        (3, 1.02, 1.0, np.array([2.0, 3.0, 1.0]), np.array([1.0, 1.2, 0.8]), np.array([0.25, 0.25, 0.25])),\n        # Test case B:\n        (3, 1.01, 1000.0, np.array([1.0, 2.0, 3.0]), np.array([1.0, 1.0, 1.0]), np.array([1e-6, 1e-6, 1e-6])),\n        # Test case C:\n        (3, 1.00, 50.0, np.array([1e-6, 2.0, 3.0]), np.array([1.1, 1.1, 1.1]), np.array([9.0, 9.0, 9.0])),\n        # Test case D:\n        (3, 1.05, 0.0, np.array([2.0, 1.0, 4.0]), np.array([0.9, 1.4, 1.1]), np.array([0.16, 0.36, 0.25])),\n    ]\n\n    results = []\n    for case in test_cases:\n        N, Rf, s, gammas, mus, sigmas_sq = case\n        rp = calculate_risk_premium(N, Rf, s, gammas, mus, sigmas_sq)\n        results.append(rp)\n    \n    # Format the output as a comma-separated list of values rounded to 6 decimal places.\n    formatted_results = [f\"{res:.6f}\" for res in results]\n    print(f\"[{','.join(formatted_results)}]\")\n\nsolve()\n\n```"}, {"introduction": "现实世界中的市场由具有不同信息水平和分析能力的代理人组成。本练习通过创建一个包含完全知情的“人工智能”代理人和后顾型启发式交易者的市场来模拟这种情况，让你能够探索它们的互动如何驱动市场价格。通过实现由此产生的价格动态，你将深入了解资产价格为何以及如何持续偏离其基本价值。[@problem_id:2399044]", "id": "2399044", "problem": "考虑一个在 $T$ 个离散时期内交易的单一风险资产，时期由 $t \\in \\{0,1,\\dots,T-1\\}$ 索引。有 $N$ 个风险规避的代理人，他们在每个时期与资产的外生净供给 $Q$ 进行交易。该资产在时期 $t$ 结束时提供确定性的基本面回报 $F_t$。一部分比例为 $\\phi$ 的代理人对基本面回报有完美预测（对于每个时期 $t$，他们确切地知道 $F_t$），这些代理人代表配备了人工智能（AI）的代理人。剩余比例为 $1-\\phi$ 的代理人是启发式预测者，他们使用一个简单规则来形成预期。\n\n每个代理人 $i$ 都有均值-方差偏好，具有相同的恒定绝对风险规避系数 $a$ 和对每个时期资产的共同感知回报方差 $s^2$。在时期 $t$，给定价格 $P_t$ 和代理人 $i$ 对时期 $t$ 回报的特定预期 $E_i[F_t]$，其需求为\n$$\nD_{i,t} \\;=\\; \\frac{E_i[F_t] - P_t}{a\\,s^2}.\n$$\n每个时期的市场出清要求\n$$\n\\sum_{i=1}^{N} D_{i,t} \\;=\\; Q.\n$$\n预期是异质的，具体如下：\n- 对于 AI 信息代理人, $E_i[F_t] = F_t$。\n- 对于启发式代理人, 预期是上一期的价格, 即\n$$\nE_i[F_t] \\;=\\; H_t \\;=\\; P_{t-1}.\n$$\n初始条件由 $P_{-1} = F_0$ 给出，以使第一个交易时期的启发式预期是明确定义的。\n\n基本面回报路径对所有测试用例都是通用的，并由以下公式确定性地定义：\n$$\nF_t \\;=\\; 100 \\;+\\; 5 \\,\\sin\\!\\left( \\frac{2\\pi t}{10} \\right) \\;+\\; 0.5\\,t\n$$\n对所有 $t \\in \\{0,1,\\dots,T-1\\}$，其中正弦函数的参数以弧度为单位。\n\n您的任务是，对于给定的参数 $\\left(T,N,\\phi,a,s^2,Q\\right)$，使用市场出清条件和指定的预期，计算上述市场所蕴含的价格序列 $\\{P_t\\}_{t=0}^{T-1}$。对于每个参数集，计算价格与基本面价值之间的平均绝对偏差（MAD），\n$$\n\\mathrm{MAD} \\;=\\; \\frac{1}{T}\\sum_{t=0}^{T-1} \\left| P_t - F_t \\right|,\n$$\n结果为一个实数。\n\n对所有测试用例使用以下固定的模型要素：\n- 时期数 $T=20$。\n- 代理人数 $N=100$。\n\n待评估的参数集测试套件：\n- 案例 1：$\\phi=0.4$, $a=2.0$, $s^2=1.0$, $Q=10.0$。\n- 案例 2：$\\phi=1.0$, $a=3.0$, $s^2=2.0$, $Q=0.0$。\n- 案例 3：$\\phi=0.0$, $a=2.0$, $s^2=1.0$, $Q=5.0$。\n- 案例 4：$\\phi=0.5$, $a=10^6$, $s^2=1.0$, $Q=0.0$。\n- 案例 5：$\\phi=0.6$, $a=2.0$, $s^2=1.0$, $Q=100.0$。\n\n您的程序必须按以上列出的顺序计算每个案例的 $\\mathrm{MAD}$，并生成单行输出，其中包含一个用方括号括起来的逗号分隔的结果列表，每个值都四舍五入到 $6$ 位小数（例如，$\\left[\\text{result}_1,\\text{result}_2,\\dots\\right]$）。不应打印任何其他文本。", "solution": "问题陈述已经过严格验证，并被认定为有效。它在科学上是合理的、良定的且客观的。它提出了一个计算经济学中的标准异质代理人模型，提供了推导唯一可计算解所需的所有必要参数和初始条件。我们将着手解决它。\n\n该模型由 $N$ 个交易风险资产的代理人组成。比例为 $\\phi$ 的代理人是“AI 信息代理人”，对基本面回报 $F_t$ 具有完全预见能力。他们的预期是 $E_{\\text{AI}}[F_t] = F_t$。剩余比例为 $1-\\phi$ 的代理人是“启发式”代理人，他们基于上一期的价格形成预期：$E_{\\text{Heuristic}}[F_t] = P_{t-1}$。所有代理人共享相同的恒定绝对风险规避系数 $a$ 和感知回报方差 $s^2$。代理人 $i$ 在时期 $t$ 的需求由下式给出：\n$$\nD_{i,t} = \\frac{E_i[F_t] - P_t}{a s^2}\n$$\n市场出清规定总需求等于净供给 $Q$：\n$$\n\\sum_{i=1}^{N} D_{i,t} = Q\n$$\n我们可以通过将每种类型代理人的需求相加来表示总需求。AI 信息代理人的数量为 $N\\phi$，启发式代理人的数量为 $N(1-\\phi)$。因此，市场出清条件变为：\n$$\n(N\\phi) \\left( \\frac{F_t - P_t}{a s^2} \\right) + N(1-\\phi) \\left( \\frac{P_{t-1} - P_t}{a s^2} \\right) = Q\n$$\n为了找到均衡价格 $P_t$，我们必须解出该方程中的 $P_t$。首先，我们将方程两边同乘以 $\\frac{a s^2}{N}$：\n$$\n\\phi(F_t - P_t) + (1-\\phi)(P_{t-1} - P_t) = \\frac{a s^2 Q}{N}\n$$\n接下来，我们展开并合并包含 $P_t$ 的项：\n$$\n\\phi F_t - \\phi P_t + (1-\\phi) P_{t-1} - (1-\\phi) P_t = \\frac{a s^2 Q}{N}\n$$\n$$\n\\phi F_t + (1-\\phi) P_{t-1} - (\\phi + 1 - \\phi) P_t = \\frac{a s^2 Q}{N}\n$$\n$$\n\\phi F_t + (1-\\phi) P_{t-1} - P_t = \\frac{a s^2 Q}{N}\n$$\n分离出 $P_t$ 可得出价格路径的一阶线性递推关系：\n$$\nP_t = \\phi F_t + (1-\\phi) P_{t-1} - \\frac{a s^2 Q}{N}\n$$\n该方程表明，当前价格是基本面价值 $F_t$ 和前期价格 $P_{t-1}$ 的加权平均值，并根据与净供给 $Q$ 相关的风险溢价项进行了调整。权重由 AI 信息代理人的比例 $\\phi$ 决定。\n\n问题给出了在 $T=20$ 个时期内基本面价值 $F_t$ 的确定性路径：\n$$\nF_t = 100 + 5 \\sin\\left(\\frac{2\\pi t}{10}\\right) + 0.5t \\quad \\text{for } t \\in \\{0, 1, \\dots, T-1\\}\n$$\n启动递推需要一个初始条件。该条件给定为 $P_{-1} = F_0$。有了这个条件，我们就可以迭代地计算整个价格序列 $\\{P_t\\}_{t=0}^{T-1}$。\n\n每个测试用例的算法如下：\n1.  设置参数 $(T, N, \\phi, a, s^2, Q)$。\n2.  根据其定义生成基本面价值序列 $\\{F_t\\}_{t=0}^{T-1}$。\n3.  使用 $P_{-1} = F_0$ 初始化价格递推。\n4.  对 $t$ 从 $0$ 到 $T-1$ 进行迭代，应用推导出的递推关系计算每个 $P_t$。\n5.  一旦价格序列 $\\{P_t\\}_{t=0}^{T-1}$ 计算完成，计算其与基本面价值的平均绝对偏差（MAD）：\n    $$\n    \\mathrm{MAD} = \\frac{1}{T} \\sum_{t=0}^{T-1} |P_t - F_t|\n    $$\n将此过程应用于五个指定的参数集中的每一个，以获得所需的结果。实现将利用数值库来确保精度。", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Computes the price path and Mean Absolute Deviation (MAD) for a\n    heterogeneous agent model based on the problem specification.\n    \"\"\"\n    \n    # Fixed model parameters\n    T = 20\n    N = 100\n\n    # Test suite of parameter sets (phi, a, s^2, Q)\n    test_cases = [\n        (0.4, 2.0, 1.0, 10.0),  # Case 1\n        (1.0, 3.0, 2.0, 0.0),   # Case 2\n        (0.0, 2.0, 1.0, 5.0),   # Case 3\n        (0.5, 1e6, 1.0, 0.0),   # Case 4\n        (0.6, 2.0, 1.0, 100.0)  # Case 5\n    ]\n\n    results = []\n\n    # Generate the fundamental payoff path\n    t_vals = np.arange(T)\n    F = 100.0 + 5.0 * np.sin(2.0 * np.pi * t_vals / 10.0) + 0.5 * t_vals\n\n    for case in test_cases:\n        phi, a, s2, Q = case\n        \n        # Initialize the price array\n        P = np.zeros(T)\n        \n        # Set the initial condition P_{-1} = F_0\n        P_prev = F[0]\n        \n        # Define the constant term from the recurrence relation\n        const_term = (a * s2 * Q) / N\n        \n        # Iterate through time to compute the price path\n        for t in range(T):\n            # Price recurrence relation: P_t = phi*F_t + (1-phi)*P_{t-1} - (a*s^2*Q)/N\n            P[t] = phi * F[t] + (1 - phi) * P_prev - const_term\n            P_prev = P[t]\n            \n        # Calculate the Mean Absolute Deviation (MAD)\n        mad = np.mean(np.abs(P - F))\n        \n        # Append formatted result\n        results.append(f\"{mad:.6f}\")\n\n    # Final print statement in the exact required format.\n    print(f\"[{','.join(results)}]\")\n\nsolve()\n```"}, {"introduction": "本练习从静态分析转向一个完整的动态模拟，融合了许多高级代理人基模型中的两个关键要素：适应性学习和财富演化。你将模拟一个市场，其中代理人不知道真实的回报过程，但会随着时间的推移学习它，同时他们的财富会根据其投资成功而增减。这项实践将使你具备分析市场选择的能力，即不同策略的影响力会根据其盈利能力而演变。[@problem_id:2399122]", "id": "2399122", "problem": "考虑一个由大量代理人组成的群体，他们在一种安全资产和一种风险资产之间进行投资组合选择。时间是离散的，由 $t \\in \\{0,1,2,\\dots,T-1\\}$ 索引。每个代理人 $i \\in \\{1,\\dots,N\\}$ 在周期 $t$ 开始时选择一个投资组合份额 $x_{i,t} \\in [0,1]$ 投资于风险资产，剩余的份额 $1-x_{i,t}$ 投资于安全资产。安全资产具有恒定的总回报率 $R_f > 0$。风险资产的净回报率 $r_t$ 随时间独立同分布 (i.i.d.)，其均值 $\\mu^\\star$ 未知，方差 $\\sigma^2$ 已知。回报率以小数形式表示；例如，百分之五的回报率为 $0.05$，每个周期的百分之一无风险总回报率为 $R_f = 1.01$。\n\n代理人在两个维度上是异质的：\n- 每个代理人 $i$ 都有一个风险厌恶系数 $\\gamma_i > 0$。\n- 每个代理人 $i$ 都有一个学习率 $\\alpha_i \\in (0,1]$，用于自适应地更新她对风险资产预期净回报率的估计。\n\n在时间 $t$，观察到 $r_t$ 之前，每个代理人对风险资产的预期净回报率持有一个信念 $\\mu_{i,t}$。信念根据自适应学习进行演化：\n$$\n\\mu_{i,t+1} \\;=\\; \\mu_{i,t} + \\alpha_i \\left(r_t - \\mu_{i,t}\\right).\n$$\n假设所有代理人都知道方差 $\\sigma^2$ 和安全总回报率 $R_f$，但不知道 $\\mu^\\star$。存在无卖空、无杠杆约束：对于所有的 $i,t$，都有 $x_{i,t} \\in [0,1]$。\n\n财富根据标准总回报率聚合进行演化：\n$$\nW_{i,t+1} \\;=\\; W_{i,t} \\left[ R_f \\left(1-x_{i,t}\\right) + \\left(1+r_t\\right) x_{i,t} \\right],\n$$\n所有代理人的初始财富均为 $W_{i,0} = 1$。\n\n代理人选择 $x_{i,t}$ 以最大化一个基于 Markowitz 框架的均值-方差目标，该目标在正态回报假设下可通过指数效用函数来合理解释。从线性投资组合的期望和方差定义以及 $r_t$ 的正态性假设出发，根据第一性原理推导出单周期最优风险份额 $x_{i,t}$，它是在约束条件 $x_{i,t} \\in [0,1]$ 下，关于代理人信念 $\\mu_{i,t}$、安全回报率 $R_f$、风险厌恶参数 $\\gamma_i$ 和回报率方差 $\\sigma^2$ 的函数。最终的选择规则必须通过一阶条件获得，然后投影到可行集 $[0,1]$ 上。\n\n将时间 $t$ 的财富加权总风险份额定义为\n$$\n\\bar{x}_t \\;=\\; \\frac{\\sum_{i=1}^{N} W_{i,t} \\, x_{i,t}}{\\sum_{i=1}^{N} W_{i,t}}.\n$$\n\n您的任务是实现这个异质代理人经济体的模拟，并为下面测试套件中的每个参数集计算最后 $L$ 个周期内财富加权风险份额的时间平均值：\n$$\n\\bar{x}_{\\text{avg}} \\;=\\; \\frac{1}{L} \\sum_{t=T-L}^{T-1} \\bar{x}_t.\n$$\n\n所有代理人的初始信念被设定为安全净回报率：\n$$\n\\mu_{i,0} \\;=\\; R_f - 1.\n$$\n\n异质性是使用基于索引的周期确定性地分配的。给定 $\\gamma_{\\text{base}} > 0$ 和 $\\alpha_{\\text{base}} \\in (0,1]$。对于代理人索引 $i = 1,\\dots,N$，定义\n$$\n\\gamma_i \\;=\\; \\gamma_{\\text{base}} \\times m_{(i \\bmod 4)},\n\\quad \\text{其中 } m_{0}=0.5,\\; m_{1}=1.0,\\; m_{2}=1.5,\\; m_{3}=2.0,\n$$\n和\n$$\n\\alpha_i \\;=\\; \\min\\left(0.9,\\; \\alpha_{\\text{base}} \\times a_{(i \\bmod 4)}\\right),\n\\quad \\text{其中 } a_{0}=0.5,\\; a_{1}=1.0,\\; a_{2}=2.0,\\; a_{3}=4.0.\n$$\n\n模拟协议：\n- 使用 $N$ 个代理人和 $T$ 个周期。\n- 风险净回报率从 $r_t \\sim \\mathcal{N}(\\mu^\\star,\\sigma^2)$ 中抽取，且对所有 $t$ 独立。\n- 为保证可复现性，使用固定的伪随机数生成器种子：基础种子为 $12345$，并根据从零开始的测试用例索引 $k \\in \\{0,1,2,3\\}$ 进行偏移，因此用例 $k$ 的种子为 $12345 + k$。\n- 计算如上定义的 $\\bar{x}_{\\text{avg}}$。\n\n测试套件（每个项目是一个参数元组 $(\\mu^\\star,\\sigma,R_f,\\gamma_{\\text{base}},\\alpha_{\\text{base}},N,T,L)$；所有回报率均为小数）：\n1. 用例 1: $(0.06,\\,0.15,\\,1.01,\\,3.0,\\,0.20,\\,200,\\,2000,\\,500)$。\n2. 用例 2: $(0.01,\\,0.15,\\,1.01,\\,3.0,\\,0.20,\\,200,\\,2000,\\,500)$。\n3. 用例 3: $(0.06,\\,0.20,\\,1.01,\\,3.0,\\,0.20,\\,200,\\,2000,\\,500)$。\n4. 用例 4: $(0.06,\\,0.15,\\,1.01,\\,6.0,\\,0.05,\\,200,\\,2000,\\,500)$。\n\n您的程序必须产生单行输出，其中包含一个用方括号括起来的逗号分隔列表，列表中的结果顺序与上述用例相同，例如\n$[r_1,r_2,r_3,r_4]$,\n其中每个 $r_k$ 是用例 $k$ 的 $\\bar{x}_{\\text{avg}}$ 的浮点值，以小数（而非百分比）形式表示。您可以根据需要进行四舍五入或格式化，但请确保使用标准浮点格式，以便每个 $r_k$ 都能被解析为浮点数。", "solution": "问题陈述经过严格验证，确认有效。这是一个计算经济学领域的良态问题，根植于已建立的经济理论，并且为模拟提供了所有必需的参数和函数形式。该模型将一个标准的 Markowitz 式投资组合选择问题与一个自适应学习动态相结合，这是金融学中异质代理人模型的常见结构。不存在会妨碍得出唯一且有意义解的科学不一致、矛盾或关键模糊之处。关于代理人索引 `i mod 4` 的一个次要模糊之处，通过采用标准的计算惯例得以解决，即使用从一开始的代理人索引派生出的从零开始的索引，即 `(i-1) mod 4`，这与所提供的乘数索引 $\\{0,1,2,3\\}$ 保持一致。\n\n解决方案分为两部分：首先，从第一性原理推导代理人的最优决策规则；其次，描述基于此规则构建的模拟算法。\n\n**第一部分：最优风险资产份额的推导**\n\n每个代理人 $i$ 选择其财富份额 $x_{i,t} \\in [0,1]$ 投资于风险资产，以最大化单周期均值-方差目标。代理人投资组合的总回报率 $R_{p,i,t}$ 是安全资产总回报率 $R_f$ 和风险资产总回报率 $1+r_t$ 的加权平均值：\n$$\nR_{p,i,t} \\;=\\; (1-x_{i,t})R_f + x_{i,t}(1+r_t)\n$$\n这可以改写为风险资产相对于安全资产的超额回报形式：\n$$\nR_{p,i,t} \\;=\\; R_f + x_{i,t}(1+r_t - R_f) \\;=\\; R_f + x_{i,t}(r_t - (R_f-1))\n$$\n令 $r_f = R_f-1$ 为无风险净利率。\n$$\nR_{p,i,t} \\;=\\; R_f + x_{i,t}(r_t - r_f)\n$$\n代理人的决策是在时间 $t$、在 $r_t$ 未知的情况下做出的。因此，代理人使用基于其信念 $\\mu_{i,t}$ 和已知方差 $\\sigma^2$ 的主观期望 $E_t[\\cdot]$。投资组合的期望回报率为：\n$$\nE_t[R_{p,i,t}] \\;=\\; E_t[R_f + x_{i,t}(r_t - r_f)] \\;=\\; R_f + x_{i,t}(E_t[r_t] - r_f) \\;=\\; R_f + x_{i,t}(\\mu_{i,t} - r_f)\n$$\n投资组合回报率的方差为：\n$$\nVar_t(R_{p,i,t}) \\;=\\; Var_t(R_f + x_{i,t}(r_t - r_f)) \\;=\\; Var_t(x_{i,t}r_t) \\;=\\; x_{i,t}^2 Var_t(r_t) \\;=\\; x_{i,t}^2 \\sigma^2\n$$\n代理人 $i$ 的均值-方差目标函数是最大化：\n$$\nU(x_{i,t}) \\;=\\; E_t[R_{p,i,t}] - \\frac{\\gamma_i}{2} Var_t(R_{p,i,t})\n$$\n代入期望值和方差的表达式：\n$$\nU(x_{i,t}) \\;=\\; \\left( R_f + x_{i,t}(\\mu_{i,t} - r_f) \\right) - \\frac{\\gamma_i}{2} x_{i,t}^2 \\sigma^2\n$$\n这是一个关于 $x_{i,t}$ 的凹二次函数。为了找到最优的无约束份额 $x_{i,t}^*$，我们对 $x_{i,t}$ 求一阶导数并令其为零（最大值的一阶条件）：\n$$\n\\frac{\\mathrm{d}U}{\\mathrm{d}x_{i,t}} \\;=\\; (\\mu_{i,t} - r_f) - \\gamma_i \\sigma^2 x_{i,t} \\;=\\; 0\n$$\n求解 $x_{i,t}$：\n$$\nx_{i,t}^* \\;=\\; \\frac{\\mu_{i,t} - r_f}{\\gamma_i \\sigma^2} \\;=\\; \\frac{\\mu_{i,t} - (R_f - 1)}{\\gamma_i \\sigma^2}\n$$\n这就是经典的 Merton 份额。分子代表感知到的风险资产超额净回报，分母是风险厌恶程度和回报方差的乘积。\n\n问题规定了无卖空和无杠杆约束，意味着 $x_{i,t}$ 必须位于区间 $[0,1]$ 内。最终的最优选择是无约束解 $x_{i,t}^*$ 在该可行集上的投影：\n$$\nx_{i,t} \\;=\\; \\max\\left(0, \\min\\left(1, x_{i,t}^*\\right)\\right)\n$$\n\n**第二部分：模拟算法**\n\n该模拟对一个由 $N$ 个异质代理人组成的经济体在 $T$ 个离散时间周期内的行为进行建模。算法流程如下：\n\n1.  **初始化（在 $t=0$ 时）：**\n    *   从测试用例中设置全局参数 $(\\mu^\\star, \\sigma, R_f, N, T, L)$ 和异质性基础参数 $(\\gamma_{\\text{base}}, \\alpha_{\\text{base}})$。\n    *   使用指定的种子初始化伪随机数生成器。\n    *   创建 $N$ 个代理人的群体。对每个代理人 $i \\in \\{1, \\dots, N\\}$，根据确定性周期分配异质参数 $\\gamma_i$ 和 $\\alpha_i$。令 $j = (i-1) \\pmod 4$。则：\n        $$\n        \\gamma_i \\;=\\; \\gamma_{\\text{base}} \\times m_j, \\quad \\text{其中 } m \\in \\{0.5, 1.0, 1.5, 2.0\\}\n        $$\n        $$\n        \\alpha_i \\;=\\; \\min(0.9, \\alpha_{\\text{base}} \\times a_j), \\quad \\text{其中 } a \\in \\{0.5, 1.0, 2.0, 4.0\\}\n        $$\n    *   为每个代理人 $i$ 设置初始状态变量：\n        *   初始财富：$W_{i,0} = 1$。\n        *   初始信念：$\\mu_{i,0} = R_f - 1$。\n\n2.  **时间循环（对于 $t=0, 1, \\dots, T-1$）：**\n    在每个周期 $t$ 执行以下步骤：\n    *   **a. 投资组合选择：**每个代理人 $i$ 使用其当前信念 $\\mu_{i,t}$ 和从第一部分推导出的公式来计算其最优风险资产配置 $x_{i,t}$。\n    *   **b. 聚合：**计算经济体的财富加权总风险份额 $\\bar{x}_t$：\n        $$\n        \\bar{x}_t \\;=\\; \\frac{\\sum_{i=1}^{N} W_{i,t} \\, x_{i,t}}{\\sum_{i=1}^{N} W_{i,t}}\n        $$\n        如果当前周期 $t$ 位于最终的平均窗口内，即 $t \\ge T-L$，则存储 $\\bar{x}_t$ 的值。\n    *   **c. 市场实现：**从均值为 $\\mu^\\star$、方差为 $\\sigma^2$ 的正态分布中随机抽取风险资产的净回报率 $r_t$：$r_t \\sim \\mathcal{N}(\\mu^\\star, \\sigma^2)$。\n    *   **d. 状态更新：**更新所有代理人的状态以反映周期 $t$ 的结果，为周期 $t+1$ 做准备：\n        *   财富演化：$W_{i,t+1} = W_{i,t} [ R_f (1-x_{i,t}) + (1+r_t) x_{i,t} ]$。\n        *   信念演化：$\\mu_{i,t+1} = \\mu_{i,t} + \\alpha_i (r_t - \\mu_{i,t})$。\n\n3.  **最终计算：**\n    模拟循环完成后，通过计算最后 $L$ 个周期存储的 $\\bar{x}_t$ 值的算术平均值来计算最终输出 $\\bar{x}_{\\text{avg}}$：\n    $$\n    \\bar{x}_{\\text{avg}} \\;=\\; \\frac{1}{L} \\sum_{t=T-L}^{T-1} \\bar{x}_t\n    $$\n\n该算法使用 `numpy` 库的向量化操作来实现，以确保计算效率。", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef run_simulation(mu_star, sigma, R_f, gamma_base, alpha_base, N, T, L, seed):\n    \"\"\"\n    Runs a single simulation of the heterogeneous agent model.\n\n    Args:\n        mu_star (float): True mean of the risky asset net return.\n        sigma (float): True standard deviation of the risky asset net return.\n        R_f (float): Gross risk-free return.\n        gamma_base (float): Base risk-aversion coefficient.\n        alpha_base (float): Base learning rate.\n        N (int): Number of agents.\n        T (int): Number of time periods.\n        L (int): Number of last periods to average over.\n        seed (int): Seed for the pseudo-random number generator.\n\n    Returns:\n        float: The time average of the wealth-weighted risky share over the last L periods.\n    \"\"\"\n    # Initialize the pseudo-random number generator for reproducibility.\n    rng = np.random.default_rng(seed)\n\n    # Define heterogeneity multipliers\n    m_multipliers = np.array([0.5, 1.0, 1.5, 2.0])\n    a_multipliers = np.array([0.5, 1.0, 2.0, 4.0])\n\n    # Assign heterogeneous parameters to agents based on index-based cycles.\n    agent_indices_mod_4 = np.arange(N) % 4\n    gamma_i = gamma_base * m_multipliers[agent_indices_mod_4]\n    alpha_i = np.minimum(0.9, alpha_base * a_multipliers[agent_indices_mod_4])\n\n    # Initial state variables\n    r_f_net = R_f - 1.0\n    mu_i_t = np.full(N, r_f_net)\n    W_i_t = np.ones(N)\n    \n    # Pre-calculate constant variance\n    sigma2 = sigma**2\n\n    # Storage for results in the final averaging window\n    x_bar_history = []\n\n    # Simulation loop over T periods\n    for t in range(T):\n        # 1. Agents make portfolio choices\n        # Calculate unconstrained optimal share\n        x_i_t_star = (mu_i_t - r_f_net) / (gamma_i * sigma2)\n        # Apply no-short, no-leverage constraint [0, 1]\n        x_i_t = np.clip(x_i_t_star, 0.0, 1.0)\n        \n        # 2. Compute and store aggregate risky share if in the final L periods\n        if t >= T - L:\n            total_W_t = np.sum(W_i_t)\n            # Avoid division by zero, though unlikely with these parameters\n            if total_W_t > 0:\n                x_bar_t = np.sum(W_i_t * x_i_t) / total_W_t\n                x_bar_history.append(x_bar_t)\n            else:\n                 x_bar_history.append(0.0)\n\n        # 3. Realize the risky asset's net return for the period\n        r_t = rng.normal(loc=mu_star, scale=sigma)\n        \n        # 4. Update agent states for the next period\n        # Update wealth\n        portfolio_gross_return = R_f * (1.0 - x_i_t) + (1.0 + r_t) * x_i_t\n        W_i_t = W_i_t * portfolio_gross_return\n        # Update beliefs\n        mu_i_t = mu_i_t + alpha_i * (r_t - mu_i_t)\n\n    # 5. Final calculation: average of the stored aggregate shares\n    x_bar_avg = np.mean(x_bar_history) if x_bar_history else 0.0\n    \n    return x_bar_avg\n\ndef solve():\n    \"\"\"\n    Main function to run simulations for all test cases and print the results.\n    \"\"\"\n    _ = np.set_printoptions # Scipy and numpy are permitted; not used here.\n\n    # Test suite: (mu_star, sigma, R_f, gamma_base, alpha_base, N, T, L)\n    test_cases = [\n        (0.06, 0.15, 1.01, 3.0, 0.20, 200, 2000, 500),\n        (0.01, 0.15, 1.01, 3.0, 0.20, 200, 2000, 500),\n        (0.06, 0.20, 1.01, 3.0, 0.20, 200, 2000, 500),\n        (0.06, 0.15, 1.01, 6.0, 0.05, 200, 2000, 500),\n    ]\n\n    results = []\n    base_seed = 12345\n    for i, case in enumerate(test_cases):\n        mu_star, sigma, R_f, gamma_base, alpha_base, N, T, L = case\n        # Set seed based on test case index\n        seed = base_seed + i\n        result = run_simulation(mu_star, sigma, R_f, gamma_base, alpha_base, N, T, L, seed)\n        results.append(result)\n\n    # Format the output as a comma-separated list in brackets, with standard float precision.\n    print(f\"[{','.join(map(str, results))}]\")\n\nsolve()\n\n```"}]}