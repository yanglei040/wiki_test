{"hands_on_practices": [{"introduction": "本练习旨在通过阐释高维最直接的后果——状态和行动空间的爆炸性增长，为后续学习奠定基础。通过比较一个简单的2资产问题和一个更现实的10资产情景，您将亲手计算出一个问题可以多快地变得在计算上难以处理，尤其是对于那些需要枚举或探索这些空间的方法（如动态规划）而言。这项实践 [@problem_id:2439660] 让您对维度灾难核心的“组合爆炸”有一个切身的感受。", "id": "2439660", "problem": "考虑一个包含 $d$ 种风险资产且无无风险资产的有限期资产配置问题。时间是离散的，周期为 $t \\in \\{0,1,\\dots,T-1\\}$，终止日期为 $T$。投资者在每个周期 $t$ 开始时拥有财富 $W_t$，并在一个均匀网格上选择投资组合权重 $w_t = (w_{t,1},\\dots,w_{t,d})$，其中，对所有 $i$ 都有 $w_{t,i} \\ge 0$，$\\sum_{i=1}^d w_{t,i} = 1$，并且每个 $w_{t,i}$ 被限制为 $1/M$ 的倍数。财富动态为\n$$\nW_{t+1} = W_t \\sum_{i=1}^d w_{t,i} \\, R_i(s_{t,i}),\n$$\n其中 $s_{t,i} \\in \\{0,1\\}$ 是资产 $i$ 在时间 $t$ 的外生状态，而 $R_i(s)$ 是资产 $i$ 在其状态为 $s$ 的条件下的单周期总回报率。具体来说，每种资产的总回报率为\n$$\nR_i(s) = \n\\begin{cases}\nr_H & \\text{if } s=1,\\\\\nr_L & \\text{if } s=0,\n\\end{cases}\n$$\n其中 $r_H > 0$ 且 $r_L > 0$。这个 $d$ 维外生状态向量为 $s_t = (s_{t,1},\\dots,s_{t,d}) \\in \\{0,1\\}^d$，并且每个分量 $s_{t,i}$ 遵循一个独立的双态时间同质马尔可夫链，其转移矩阵为\n$$\n\\begin{pmatrix}\n\\mathbb{P}(s_{t+1,i}=0 \\mid s_{t,i}=0) & \\mathbb{P}(s_{t+1,i}=1 \\mid s_{t,i}=0) \\\\\n\\mathbb{P}(s_{t+1,i}=0 \\mid s_{t,i}=1) & \\mathbb{P}(s_{t+1,i}=1 \\mid s_{t,i}=1)\n\\end{pmatrix}\n=\n\\begin{pmatrix}\n1-p_{LH} & p_{LH} \\\\\n1-p_{HH} & p_{HH}\n\\end{pmatrix},\n$$\n其中 $p_{HH} \\in [0,1]$ 且 $p_{LH} \\in [0,1]$。投资者的目标是最大化期望终端财富 $\\mathbb{E}[W_T]$。\n\n对于任何给定的 $d$ 和 $M$，定义外生状态空间 $\\mathcal{S}_d = \\{0,1\\}^d$，其基数为 $|\\mathcal{S}_d| = 2^d$，以及可行行动集 $\\mathcal{A}_{d,M} = \\{ w \\in (\\{0,1/M,2/M,\\dots,1\\})^d : \\sum_{i=1}^d w_i = 1 \\}$，其基数等于非负整数 $d$ 元组 $(n_1,\\dots,n_d)$ 的数量，满足 $\\sum_{i=1}^d n_i = M$，即：\n$$\n|\\mathcal{A}_{d,M}| = \\binom{M + d - 1}{d - 1}.\n$$\n\n任务：\n- 对于下方的每个测试用例，计算以下三个输出：\n  1. 外生状态空间的大小 $|\\mathcal{S}_d| = 2^d$。\n  2. 可行行动集的大小 $|\\mathcal{A}_{d,M}| = \\binom{M + d - 1}{d - 1}$。\n  3. 在给定当前外生状态 $s_0$ 的情况下，在时间 $t=0$ 时的最优单周期投资组合 $w^\\star \\in \\mathcal{A}_{d,M}$，定义为在 $w \\in \\mathcal{A}_{d,M}$ 上 $\\sum_{i=1}^d w_i \\, R_i(s_{0,i})$ 的任意一个最大化者。如果存在多个最大化者，选择将全部权重 $1$ 分配给最大化者中索引最小的资产的唯一投资组合（即，$w^\\star$ 等于一个 $d$ 维向量，在达到最大值 $R_i(s_{0,i})$ 的最小索引 $i$ 处为 $1$，其他位置为 $0$）。\n\n- 此外，计算比率 $\\rho = \\dfrac{|\\mathcal{S}_{10}|}{|\\mathcal{S}_{2}|}$。\n\n测试套件（独立计算；每个项目定义一个测试用例）：\n- 案例 A（理想路径）：$T=3$, $d=2$, $M=4$, $r_H=1.04$, $r_L=0.98$, $p_{HH}=0.8$, $p_{LH}=0.3$，$s_0=(1,0)$。\n- 案例 B（$t=0$ 时所有资产回报率持平的边缘案例）：$T=3$, $d=10$, $M=2$, $r_H=1.02$, $r_L=0.99$, $p_{HH}=0.7$, $p_{LH}=0.4$，$s_0=(0,0,0,0,0,0,0,0,0,0)$。\n\n最终输出格式：\n- 您的程序应生成单行输出，其中包含一个用方括号括起来的逗号分隔列表：\n  - 列表应为 $[|\\mathcal{S}_2|, |\\mathcal{A}_{2,4}|, w^\\star_{\\text{A}}, |\\mathcal{S}_{10}|, |\\mathcal{A}_{10,2}|, w^\\star_{\\text{B}}, \\rho]$，\n  - 其中 $w^\\star_{\\text{A}}$ 是案例 A 的最优单周期投资组合，表示为一个包含 $d$ 个浮点数的 Python 风格列表，而 $w^\\star_{\\text{B}}$ 是案例 B 的类似列表，\n  - $\\rho$ 是一个正整数或浮点数。例如，输出形状应类似于 $[4,5,[1.0,0.0],1024,55,[1.0,0.0,0.0,\\dots],256]$，其中的确切数值由上述计算确定。不需要单位。", "solution": "问题陈述已经过验证，被认为是有效的。它在科学上基于金融经济学和动态规划的原理，问题设定良好，包含所有必要信息和清晰、客观的定义，并且没有矛盾或含糊之处。这些任务可以直接根据给定的信息计算出来。时间范围 $T$ 和马尔可夫链转移概率 $p_{HH}$ 和 $p_{LH}$ 等参数是完整动态规划问题背景的一部分，但与所要求的特定单周期计算无关。包含这些参数并不会使问题无效。\n\n该问题要求计算两种不同情况下的状态空间大小、行动空间大小和最优单周期投资组合，以及状态空间大小的比率。这些计算旨在说明计算模型中的‘维度灾难’，即状态和行动空间的大小随着问题维度（此处由资产数量 $d$ 表示）的增加而爆炸性增长。\n\n所需的计算过程如下。\n\n1.  **外生状态空间的大小, $|\\mathcal{S}_d|$**\n\n    系统的外生状态是一个 $d$ 维向量 $s_t = (s_{t,1}, \\dots, s_{t,d})$，其中每个分量 $s_{t,i}$ 可以取两个值之一，$0$ 或 $1$。状态空间为 $\\mathcal{S}_d = \\{0,1\\}^d$。该空间的基数由基本计数原理给出。\n    $$\n    |\\mathcal{S}_d| = 2^d\n    $$\n    对于案例 A，$d=2$：\n    $$\n    |\\mathcal{S}_2| = 2^2 = 4\n    $$\n    对于案例 B，$d=10$：\n    $$\n    |\\mathcal{S}_{10}| = 2^{10} = 1024\n    $$\n\n2.  **可行行动集的大小, $|\\mathcal{A}_{d,M}|$**\n\n    投资组合权重 $w = (w_1, \\dots, w_d)$ 被限制为 $1/M$ 的倍数。设 $w_i = n_i/M$，其中 $n_i$ 为非负整数。约束条件 $\\sum_{i=1}^d w_i = 1$ 变为 $\\sum_{i=1}^d (n_i/M) = 1$，可简化为 $\\sum_{i=1}^d n_i = M$。该方程的非负整数解的数量是一个经典的组合问题，可以通过隔板法解决。该公式已在问题陈述中正确给出。\n    $$\n    |\\mathcal{A}_{d,M}| = \\binom{M + d - 1}{d - 1}\n    $$\n    对于案例 A，$d=2$ 且 $M=4$：\n    $$\n    |\\mathcal{A}_{2,4}| = \\binom{4 + 2 - 1}{2 - 1} = \\binom{5}{1} = \\frac{5!}{1!(5-1)!} = 5\n    $$\n    对于案例 B，$d=10$ 且 $M=2$：\n    $$\n    |\\mathcal{A}_{10,2}| = \\binom{2 + 10 - 1}{10 - 1} = \\binom{11}{9} = \\frac{11!}{9!(11-9)!} = \\frac{11 \\times 10}{2 \\times 1} = 55\n    $$\n\n3.  **最优单周期投资组合, $w^\\star$**\n\n    目标是最大化单周期期望财富。由于初始财富 $W_0 > 0$ 是一个常数乘数，因此最大化 $\\mathbb{E}[W_1] = \\mathbb{E}[W_0 \\sum_{i=1}^d w_i R_i(s_{0,i})]$ 等价于在已知当前状态 $s_0$ 的情况下，最大化投资组合的总回报率 $G(w) = \\sum_{i=1}^d w_i R_i(s_{0,i})$。优化问题是：\n    $$\n    \\underset{w \\in \\mathcal{A}_{d,M}}{\\text{maximize}} \\quad \\sum_{i=1}^d w_i R_i(s_{0,i})\n    $$\n    这是一个线性目标函数。此类问题的最优策略是将整个投资组合分配给提供最高系数（即回报率 $R_i(s_{0,i})$）的资产 $i$。这对应于一个投资组合 $w$，其中 $w_i=1$ 且对于所有 $j \\neq i$ 都有 $w_j=0$。对于任何整数 $M \\ge 1$，这样的投资组合始终是离散行动集 $\\mathcal{A}_{d,M}$ 的一个元素，因为 $1$ 和 $0$ 总是可以表示为 $1/M$ 的倍数。\n\n    **对于案例 A：**\n    - 参数：$d=2$, $s_0=(1,0)$, $r_H=1.04$, $r_L=0.98$。\n    - 各资产的回报率为：\n      - 资产 1: $R_1(s_{0,1}) = R_1(1) = r_H = 1.04$。\n      - 资产 2: $R_2(s_{0,2}) = R_2(0) = r_L = 0.98$。\n    - 由于 $R_1(s_{0,1}) > R_2(s_{0,2})$，最优策略是将所有权重分配给资产 1。\n    - $w^\\star_{\\text{A}} = (1.0, 0.0)$。不存在持平情况。\n\n    **对于案例 B：**\n    - 参数：$d=10$, $s_0=(0,0,0,0,0,0,0,0,0,0)$, $r_H=1.02$, $r_L=0.99$。\n    - 每种资产 $i \\in \\{1, \\dots, 10\\}$ 的回报率是相同的：\n      - $R_i(s_{0,i}) = R_i(0) = r_L = 0.99$。\n    - 所有资产都是个体回报率 $R_i(s_{0,i})$ 的潜在最大化者。对于任何有效的投资组合，目标函数值均为 $0.99$。这构成了持平情况。\n    - 问题提供了一个特定的打破持平规则：选择将权重 $1$ 分配给获得最大回报的*最小索引* $i$ 的资产的投资组合。\n    - 达到最大回报的索引集合是 $\\{1, 2, \\dots, 10\\}$。最小的索引是 $1$。\n    - 因此，根据该规则，最优投资组合是 $w^\\star_{\\text{B}} = (1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)$。\n\n4.  **状态空间大小的比率, $\\rho$**\n\n    此比率使用步骤 1 的结果计算得出。\n    $$\n    \\rho = \\frac{|\\mathcal{S}_{10}|}{|\\mathcal{S}_2|} = \\frac{1024}{4} = 256\n    $$\n    当从 $d=2$ 移动到 $d=10$ 时，状态空间大小 ($|\\mathcal{S}_{10}| = 256 \\times |\\mathcal{S}_2|$) 和行动空间大小 ($|\\mathcal{A}_{10,2}| = 11 \\times |\\mathcal{A}_{2,4}|$) 的显著增加，展示了复杂性的快速增长，即所谓的维度灾难，这是解决此类模型的核心挑战。\n\n最终计算值为：$|\\mathcal{S}_2|=4$，$|\\mathcal{A}_{2,4}|=5$，$w^\\star_{\\text{A}}=[1.0, 0.0]$，$|\\mathcal{S}_{10}|=1024$，$|\\mathcal{A}_{10,2}|=55$，$w^\\star_{\\text{B}}=[1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]$，以及 $\\rho=256$。", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\nfrom scipy.special import comb\n\ndef solve():\n    \"\"\"\n    Computes the state space size, action space size, and optimal one-period\n    portfolio for two test cases of an asset allocation problem.\n    \"\"\"\n\n    # Case A: Happy path\n    # Parameters\n    d_A = 2\n    M_A = 4\n    s0_A = (1, 0)\n    rH_A = 1.04\n    rL_A = 0.98\n\n    # Calculations for Case A\n    # 1. Size of the exogenous state space |S_d| = 2^d\n    S_size_A = 2**d_A\n\n    # 2. Size of the feasible action set |A_{d,M}| = C(M + d - 1, d - 1)\n    A_size_A = comb(M_A + d_A - 1, d_A - 1, exact=True)\n\n    # 3. Optimal one-period portfolio w_star\n    # The goal is to maximize sum(w_i * R_i(s_0,i)). This is a linear program whose\n    # solution is to put all weight on the asset with the highest return.\n    returns_A = np.array([rH_A if s == 1 else rL_A for s in s0_A])\n    # np.argmax returns the index of the first occurrence of the maximum value,\n    # which satisfies the specified tie-breaking rule.\n    max_return_idx_A = np.argmax(returns_A)\n    w_star_A = np.zeros(d_A)\n    w_star_A[max_return_idx_A] = 1.0\n    w_star_A_list = w_star_A.tolist()\n\n\n    # Case B: Edge case with ties\n    # Parameters\n    d_B = 10\n    M_B = 2\n    s0_B = (0,) * 10 # Tuple of 10 zeros\n    rH_B = 1.02\n    rL_B = 0.99\n\n    # Calculations for Case B\n    # 1. Size of state space\n    S_size_B = 2**d_B\n\n    # 2. Size of action set\n    A_size_B = comb(M_B + d_B - 1, d_B - 1, exact=True)\n\n    # 3. Optimal one-period portfolio\n    returns_B = np.array([rH_B if s == 1 else rL_B for s in s0_B])\n    # All returns are equal (rL_B). The tie-breaking rule requires selecting\n    # the smallest index, which np.argmax does by default.\n    max_return_idx_B = np.argmax(returns_B)\n    w_star_B = np.zeros(d_B)\n    w_star_B[max_return_idx_B] = 1.0\n    w_star_B_list = w_star_B.tolist()\n\n\n    # Ratio calculation\n    # rho = |S_10| / |S_2|\n    rho = S_size_B / S_size_A\n\n    # Assemble the final list of results\n    results = [\n        int(S_size_A),\n        int(A_size_A),\n        w_star_A_list,\n        int(S_size_B),\n        int(A_size_B),\n        w_star_B_list,\n        int(rho)\n    ]\n\n    # Final print statement in the exact required format.\n    # The str() function correctly formats lists into the '[...]' string representation.\n    print(f\"[{','.join(map(str, results))}]\")\n\nsolve()\n```"}, {"introduction": "在理解了状态空间规模之后，本实践将探讨维度如何影响我们从数据中学习的能力。您将实现一个核密度估计器（KDE），这是非参数统计中的一个基本工具，并观察其准确性如何随着维度的增加而下降。这项动手模拟练习 [@problem_id:2439662] 将让您凭经验验证理论上收敛速度的减慢，为您提供一个至关重要的直觉：为什么在高维空间中需要更多的数据——甚至是指数级增长的数据——来维持相同的估计精度。", "id": "2439662", "problem": "要求您量化多元核密度估计 (KDE) 的收敛速度如何随着维度的增加而变慢，从而说明计算经济学和金融学中的维度灾难。考虑从 d-维标准正态分布中抽取的独立同分布样本 $X_1,\\dots,X_n \\in \\mathbb{R}^d$，其密度为\n$$\nf_d(x) = (2\\pi)^{-d/2}\\exp\\!\\left(-\\tfrac{1}{2}\\lVert x\\rVert_2^2\\right),\n$$\n其中 $\\lVert \\cdot \\rVert_2$ 表示欧几里得范数。定义高斯乘积核\n$$\nK_d(u) = (2\\pi)^{-d/2}\\exp\\!\\left(-\\tfrac{1}{2}\\lVert u\\rVert_2^2\\right),\n$$\n以及带宽为 $h>0$ 的核密度估计 (KDE) 为\n$$\n\\widehat{f}_{n,d,h}(x) = \\frac{1}{n h^d}\\sum_{i=1}^n K_d\\!\\left(\\frac{x - X_i}{h}\\right).\n$$\n对于样本量 $n$ 和维度 $d$ 的每种组合，将带宽设置为\n$$\nh(n,d) = n^{-1/(d+4)}.\n$$\n将相对于真实分布的均方积分误差的蒙特卡洛代理（即在 $X\\sim f_d$ 下的均方误差）定义为\n$$\n\\operatorname{MSE}_{\\text{MC}}(n,d) = \\frac{1}{Q}\\sum_{j=1}^{Q}\\left(\\widehat{f}_{n,d,h(n,d)}(Z_j) - f_d(Z_j)\\right)^2,\n$$\n其中 $Z_1,\\dots,Z_Q$ 是从 d-维标准正态分布中进行的独立抽样。\n\n实现一个完整的、可运行的程序，针对以下测试套件，计算 $\\operatorname{MSE}_{\\text{MC}}(n,d)$ 以及在对数-对数坐标下的经验收敛斜率：\n\n- 测试套件参数：\n  - 维度 $d \\in \\{\\,1,\\,3,\\,6\\,\\}$。\n  - 样本量 $n \\in \\{\\,200,\\,800,\\,3200\\,\\}$。\n  - 蒙特卡洛评估点数 $Q = 1024$。\n- 随机性与可复现性：\n  - 对于给定 $(n,d)$ 情况下的样本 $X_1,\\dots,X_n$，使用以整数为种子的伪随机数生成器\n    $$\n    s_{\\text{data}}(n,d) = 10^6 + 10^4 d + n.\n    $$\n  - 对于给定 $d$ 情况下的评估点 $Z_1,\\dots,Z_Q$，使用以整数为种子的伪随机数生成器\n    $$\n    s_{\\text{eval}}(d) = 2\\cdot 10^6 + 10^4 d.\n    $$\n  - 所有正态随机变量在每个坐标上都必须是均值为 $0$、方差为 $1$ 的标准正态分布，且相互独立。\n- 对于每个固定的 $d$，在测试套件中的三个 $n$ 值上，计算 $\\log \\operatorname{MSE}_{\\text{MC}}(n,d)$ 对 $\\log n$ 的回归的最小二乘斜率 $b_d$。即，对于 $n\\in\\{200,800,3200\\}$，以普通最小二乘法拟合\n  $$\n  \\log \\operatorname{MSE}_{\\text{MC}}(n,d) \\approx a_d + b_d \\log n\n  $$\n  并返回估计的斜率 $b_d$。\n\n您的程序必须生成单行输出，其中包含一个用方括号括起来的逗号分隔列表形式的结果。该列表必须按以下顺序包含：\n- 九个 $\\operatorname{MSE}_{\\text{MC}}(n,d)$ 值，其中 $d=1,3,6$（升序），且在每个 $d$ 内部，$n=200,800,3200$（升序）。\n- 接着是三个斜率 $b_d$，其中 $d=1,3,6$（升序）。\n\n因此，输出必须按以下顺序包含总共十二个浮点数\n$$\n\\bigl[\\operatorname{MSE}_{\\text{MC}}(200,1),\\,\\operatorname{MSE}_{\\text{MC}}(800,1),\\,\\operatorname{MSE}_{\\text{MC}}(3200,1),\\,\\operatorname{MSE}_{\\text{MC}}(200,3),\\,\\operatorname{MSE}_{\\text{MC}}(800,3),\\,\\operatorname{MSE}_{\\text{MC}}(3200,3),\\,\\operatorname{MSE}_{\\text{MC}}(200,6),\\,\\operatorname{MSE}_{\\text{MC}}(800,6),\\,\\operatorname{MSE}_{\\text{MC}}(3200,6),\\,b_1,\\,b_3,\\,b_6\\bigr].\n$$\n不应打印任何其他文本。不涉及角度和物理单位；所有输出都必须是实数。", "solution": "问题陈述已进行验证。\n\n**第 1 步：提取已知信息**\n- **真实分布：** d-维标准正态分布，$f_d(x) = (2\\pi)^{-d/2}\\exp(-\\frac{1}{2}\\lVert x\\rVert_2^2)$。\n- **数据样本：** $X_1,\\dots,X_n \\in \\mathbb{R}^d$ 是从 $f_d$ 中抽取的独立同分布样本。\n- **核函数：** 高斯乘积核，$K_d(u) = (2\\pi)^{-d/2}\\exp(-\\frac{1}{2}\\lVert u\\rVert_2^2)$。\n- **核密度估计 (KDE)：** $\\widehat{f}_{n,d,h}(x) = \\frac{1}{n h^d}\\sum_{i=1}^n K_d(\\frac{x - X_i}{h})$。\n- **带宽规则：** $h(n,d) = n^{-1/(d+4)}$。\n- **误差度量：** 蒙特卡洛均方误差，$\\operatorname{MSE}_{\\text{MC}}(n,d) = \\frac{1}{Q}\\sum_{j=1}^{Q}(\\widehat{f}_{n,d,h(n,d)}(Z_j) - f_d(Z_j))^2$。\n- **评估样本：** $Z_1,\\dots,Z_Q$ 是从 $f_d$ 中抽取的独立同分布样本。\n- **参数：**\n    - 维度：$d \\in \\{1, 3, 6\\}$。\n    - 样本量：$n \\in \\{200, 800, 3200\\}$。\n    - 评估集大小：$Q = 1024$。\n- **随机种子：**\n    - 数据生成种子：$s_{\\text{data}}(n,d) = 10^6 + 10^4 d + n$。\n    - 评估数据种子：$s_{\\text{eval}}(d) = 2 \\cdot 10^6 + 10^4 d$。\n- **分析任务：** 对于每个 $d$，计算 $\\log \\operatorname{MSE}_{\\text{MC}}(n,d)$ 对 $\\log n$ 的普通最小二乘回归的斜率 $b_d$。\n\n**第 2 步：使用提取的已知信息进行验证**\n根据既定标准对问题进行评估。\n- **科学性：** 该问题是非参数统计中的一个标准练习，具体涉及核密度估计的收敛性质。“维度灾难”的概念及其对收敛速率的影响是高维统计理论的基石。所有定义都是标准的，且该设置是经典的教科书案例。\n- **适定性：** 所有必要的组成部分都已指定：分布、估计器形式、参数（$n, d, Q$）、确定性的带宽选择规则、精确的误差度量以及可复现的随机数生成方案。这确保可以获得唯一的数值解。\n- **客观性：** 问题使用精确、无歧义的数学语言陈述。\n\n该问题不存在指定的缺陷。它不是科学上不合理、不可形式化、不完整、不切实际、不适定或不可验证的。\n\n**第 3 步：结论与行动**\n问题被判定为**有效**。将提供一个解决方案。\n\n**方法论**\n\n任务是为样本量 $n$ 和维度 $d$ 的几种组合计算蒙特卡洛均方误差 $\\operatorname{MSE}_{\\text{MC}}(n,d)$，然后确定经验收敛速率。步骤如下。\n\n对于每个维度 $d \\in \\{1, 3, 6\\}$：\n1.  **生成评估点：** 我们首先从 d-维标准正态分布 $f_d$ 中生成 $Q=1024$ 个评估点 $Z_1, \\dots, Z_Q$。伪随机数生成器使用种子 $s_{\\text{eval}}(d) = 2 \\cdot 10^6 + 10^4 d$ 以确保可复现性。这些点存储在一个 $Q \\times d$ 的矩阵 $Z$ 中。\n\n2.  **计算真实密度：** 对于 $j=1, \\dots, Q$，使用公式 $f_d(x) = (2\\pi)^{-d/2}\\exp(-\\frac{1}{2}\\lVert x\\rVert_2^2)$ 计算真实密度值 $f_d(Z_j)$。这涉及为每个点计算欧几里得范数的平方 $\\lVert Z_j\\rVert_2^2$。\n\n3.  **遍历样本量：** 对于每个样本量 $n \\in \\{200, 800, 3200\\}$：\n    a.  **生成数据样本：** 从 $f_d$ 中抽取 $n$ 个数据点 $X_1, \\dots, X_n$。生成器使用种子 $s_{\\text{data}}(n,d) = 10^6 + 10^4 d + n$。这些点构成一个 $n \\times d$ 的矩阵 $X$。\n    b.  **确定带宽：** 根据规则 $h(n,d) = n^{-1/(d+4)}$ 计算带宽 $h$。\n    c.  **计算 KDE：** 必须在每个点 $Z_j$ 处评估 KDE $\\widehat{f}_{n,d,h}(x)$。定义如下：\n    $$\n    \\widehat{f}_{n,d,h}(Z_j) = \\frac{1}{n h^d}\\sum_{i=1}^n K_d\\left(\\frac{Z_j - X_i}{h}\\right)\n    $$\n    代入高斯核 $K_d(u) = (2\\pi)^{-d/2}\\exp(-\\frac{1}{2}\\lVert u\\rVert_2^2)$ 可得：\n    $$\n    \\widehat{f}_{n,d,h}(Z_j) = \\frac{(2\\pi)^{-d/2}}{n h^d}\\sum_{i=1}^n \\exp\\left(-\\frac{1}{2h^2}\\lVert Z_j - X_i\\rVert_2^2\\right)\n    $$\n    为了高效计算，我们首先构建一个 $Q \\times n$ 的平方欧几里得距离矩阵，其中第 $(j,i)$ 个元素是 $\\lVert Z_j - X_i\\rVert_2^2$。这可以使用 `scipy.spatial.distance.cdist` 函数完成。然后逐元素应用指数项，对每个 $j$ 将结果按索引 $i$ 求和，最后乘以常数前置因子 $\\frac{(2\\pi)^{-d/2}}{n h^d}$。\n    d.  **计算 MSE：** 通过计算在评估点上估计密度与真实密度之间差值的平方的均值来计算 $\\operatorname{MSE}_{\\text{MC}}(n,d)$：\n    $$\n    \\operatorname{MSE}_{\\text{MC}}(n,d) = \\frac{1}{Q}\\sum_{j=1}^{Q}\\left(\\widehat{f}_{n,d,h}(Z_j) - f_d(Z_j)\\right)^2\n    $$\n4.  **估计收敛斜率：** 在为固定 $d$ 计算出三个 $\\operatorname{MSE}_{\\text{MC}}$ 值之后，我们估计关系式 $\\log \\operatorname{MSE}_{\\text{MC}}(n,d) \\approx a_d + b_d \\log n$ 的斜率 $b_d$。这是一个标准的简单线性回归问题。我们定义因变量为 $y_k = \\log \\operatorname{MSE}_{\\text{MC}}(n_k, d)$，自变量为 $x_k = \\log n_k$，其中 $n_k \\in \\{200, 800, 3200\\}$。通过求解最小二乘问题找到斜率 $b_d$，我们为此使用 `numpy.linalg.lstsq` 函数。\n\n对于此设置，理论上的渐近均方积分误差 (MISE) 以 $\\mathcal{O}(n^{-4/(d+4)})$ 的速率收敛。因此，MISE 的对数是 $\\log n$ 的线性函数，其斜率为 $-\\frac{4}{d+4}$。计算出的经验斜率 $b_d$ 预计将近似于该理论值。对于 $d=1, 3, 6$，理论斜率分别为 $-0.8$、$-4/7 \\approx -0.571$ 和 $-0.4$。随着 $d$ 的增加，斜率的绝对值减小，这是维度灾难的定量体现：估计器的收敛速率在更高维度下减慢。", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\nfrom scipy.spatial.distance import cdist\n\ndef solve():\n    \"\"\"\n    Computes the Mean Squared Error of a Kernel Density Estimator for various\n    dimensions and sample sizes, and estimates the convergence slope to illustrate\n    the curse of dimensionality.\n    \"\"\"\n    # Define the test cases from the problem statement.\n    dimensions = [1, 3, 6]\n    sample_sizes = [200, 800, 3200]\n    Q = 1024\n\n    all_mse_values = []\n    all_slopes = []\n\n    # Helper function for multivariate normal PDF\n    def true_density_f_d(x, d):\n        if x.ndim == 1:\n            x = x.reshape(1, -1)\n        norm_sq = np.sum(x**2, axis=1)\n        return (2 * np.pi)**(-d / 2) * np.exp(-0.5 * norm_sq)\n\n    for d in dimensions:\n        # Generate evaluation points Z for the current dimension d.\n        # This is done once per dimension.\n        s_eval = 2 * 10**6 + 10**4 * d\n        rng_eval = np.random.default_rng(s_eval)\n        Z = rng_eval.normal(loc=0, scale=1, size=(Q, d))\n\n        # Compute the true density values f_d(Z_j) at the evaluation points.\n        f_true_vals = true_density_f_d(Z, d)\n\n        mse_for_current_d = []\n        log_n_values = np.log(sample_sizes)\n\n        for n in sample_sizes:\n            # Main logic to calculate the result for one case (n, d)\n            \n            # 1. Generate data samples X\n            s_data = 10**6 + 10**4 * d + n\n            rng_data = np.random.default_rng(s_data)\n            X = rng_data.normal(loc=0, scale=1, size=(n, d))\n            \n            # 2. Calculate bandwidth h\n            h = n**(-1 / (d + 4))\n\n            # 3. Calculate KDE estimates f_hat(Z_j)\n            # Use scipy.spatial.distance.cdist for efficient computation of squared\n            # Euclidean distances between each Z_j and X_i.\n            sq_dists = cdist(Z, X, 'sqeuclidean')  # Shape (Q, n)\n            \n            # The argument to the exponential function in the kernel sum\n            kernel_exp_arg = -0.5 / (h**2) * sq_dists\n            \n            # Sum of kernel values over index i\n            sum_of_exponentials = np.sum(np.exp(kernel_exp_arg), axis=1)\n            \n            # Prefactor for the KDE formula\n            prefactor = (2 * np.pi)**(-d / 2) / (n * h**d)\n            \n            # KDE estimates at points Z_j\n            f_hat_vals = prefactor * sum_of_exponentials\n            \n            # 4. Compute the Monte Carlo proxy for MSE\n            mse = np.mean((f_hat_vals - f_true_vals)**2)\n            mse_for_current_d.append(mse)\n\n        # Append the 3 MSE values for the current dimension to the main list\n        all_mse_values.extend(mse_for_current_d)\n        \n        # 5. Compute the least-squares slope for the current dimension d\n        log_mse_values = np.log(mse_for_current_d)\n        \n        # Set up the linear system A*beta = y for regression\n        # y = log_mse_values\n        # beta = [a_d, b_d] (intercept, slope)\n        # A = [[1, log_n_1], [1, log_n_2], [1, log_n_3]]\n        A = np.vstack([np.ones_like(log_n_values), log_n_values]).T\n        \n        # Solve for the coefficients using least squares\n        coeffs = np.linalg.lstsq(A, log_mse_values, rcond=None)[0]\n        slope_b_d = coeffs[1]\n        all_slopes.append(slope_b_d)\n\n    # Combine all results into a single list for printing\n    results = all_mse_values + all_slopes\n\n    # Final print statement in the exact required format.\n    print(f\"[{','.join(map(str, results))}]\")\n\nsolve()\n\n```"}, {"introduction": "最后的这项实践将所有概念带回金融决策，特别是投资组合优化领域。它提出了一个经典的悖论：为什么一个简单的、与数据无关的“1/N”投资组合，其表现往往能超越一个复杂的均值-方差优化模型？通过分析各个选项，您将能够把维度灾难与估计误差问题联系起来，理解对充满噪声的高维数据进行优化如何导致“误差最大化”和糟糕的样本外表现 [@problem_id:2439674]。本练习突显了在实际金融应用中，模型复杂性与稳健性之间的关键权衡。", "id": "2439674", "problem": "考虑一个投资者，他拥有$N$种风险资产，这些资产的超额收益被建模为一个协方差平稳过程，其真实均值向量为 $\\mu \\in \\mathbb{R}^N$，真实协方差矩阵为正定的 $\\Sigma \\in \\mathbb{R}^{N \\times N}$。该投资者观察了$T$个时间周期的数据，并估计出样本均值 $\\hat{\\mu}$ 和样本协方差 $\\hat{\\Sigma}$。在全投资约束 $1^\\top w = 1$ 和无卖空约束的条件下，该投资者考虑两种投资组合构建规则：\n(i) 一个即插即用（plug-in）的均值-方差（Markowitz）投资组合 $\\hat{w}^{\\text{MV}}$，该组合对于给定的风险厌恶参数 $\\gamma > 0$，最大化样本目标函数 $w^\\top \\hat{\\mu} - (\\gamma/2)\\, w^\\top \\hat{\\Sigma}\\, w$。\n(ii) 等权重投资组合 $w^{\\text{EQ}}$，其分量为 $w^{\\text{EQ}}_i = 1/N$，对所有 $i \\in \\{1,\\dots,N\\}$。\n\n将权重向量 $w$ 的样本外均值-方差效用定义为 $U(w) \\equiv w^\\top \\mu - (\\gamma/2)\\, w^\\top \\Sigma\\, w$。假设资产数量 $N$ 相对于时间周期数 $T$ 可能很大。\n\n当 $N$ 相对于 $T$ 不小时，以下哪个/哪些陈述最好地解释了为什么简单的 $1/N$ 启发式方法在样本外的表现能够优于基于样本的均值-方差优化器？选择所有适用项。\n\nA. 随着 $N/T$ 的增加，$\\hat{\\mu}$ 和 $\\hat{\\Sigma}$ 中的抽样误差会累积，并被优化器中的矩阵求逆所放大，导致 $\\,\\hat{w}^{\\text{MV}}$ 对噪声产生过拟合；$w^{\\text{EQ}}$ 避免了参数估计，因此可以产生更高的预期样本外效用。\n\nB. 因为 $w^{\\text{EQ}}$ 不使用任何数据，所以对于任何 $\\mu$ 和 $\\Sigma$ 它都能实现 $U(w)$ 的神谕（oracle）最大值，因此无论是在样本内还是样本外，它都优于任何优化投资组合。\n\nC. 完整二阶矩结构中的参数数量以 $\\mathcal{O}(N^2)$ 的量级增长，因此在有限的 $T$ 下，$\\hat{\\Sigma}$ 的估计方差很大；由此导致的 $\\,\\hat{w}^{\\text{MV}}$ 的方差可能会超过其潜在的偏差减少量，使得 $w^{\\text{EQ}}$ 在样本外表现更优。\n\nD. 当 $T$ 固定，$N$ 增加时，样本协方差 $\\hat{\\Sigma}$ 变得更准确且条件更好，从而提高了优化精度，并保证 $\\,\\hat{w}^{\\text{MV}}$ 在样本外的表现优于 $w^{\\text{EQ}}$。\n\nE. 正则化方法，例如对 $\\hat{\\Sigma}$ 进行收缩（shrinkage）或施加权重约束，可以减轻高维估计误差；在没有此类正则化的情况下，无约束的基于样本的优化在样本外经常表现不如 $1/N$ 策略。\n\nF. 对于任何 $N \\ge 2$，等权重配置消除了所有的异质性风险（idiosyncratic risk），因此其样本外方差必然是所有全投资组合中最小的。", "solution": "题干需要进行验证。\n\n**步骤1：提取已知条件**\n- 风险资产数量：$N$。\n- 资产超额收益来自一个协方差平稳过程。\n- 超额收益的真实均值向量：$\\mu \\in \\mathbb{R}^N$。\n- 超额收益的真实协方差矩阵：$\\Sigma \\in \\mathbb{R}^{N \\times N}$，且为正定矩阵。\n- 数据的时间周期数：$T$。\n- 样本均值向量：$\\hat{\\mu}$。\n- 样本协方差矩阵：$\\hat{\\Sigma}$。\n- 投资组合约束：全投资（$1^\\top w = 1$）和无卖空。*更正*：题干明确指出“无卖空约束”，这是一个必须注意到的不同条件。\n- 投资组合(i)：即插即用（plug-in）的均值-方差（Markowitz）投资组合 $\\hat{w}^{\\text{MV}}$，对于给定的风险厌恶系数 $\\gamma > 0$，该组合最大化样本目标函数 $w^\\top \\hat{\\mu} - (\\gamma/2)\\, w^\\top \\hat{\\Sigma}\\, w$。\n- 投资组合(ii)：等权重投资组合 $w^{\\text{EQ}}$，其分量为 $w^{\\text{EQ}}_i = 1/N$，其中 $i \\in \\{1,\\dots,N\\}$。\n- 样本外效用定义：$U(w) \\equiv w^\\top \\mu - (\\gamma/2)\\, w^\\top \\Sigma\\, w$。\n- 核心假设：资产数量 $N$ 相对于时间周期数 $T$ 可能很大。\n\n**步骤2：使用提取的已知条件进行验证**\n- **科学依据：** 该问题是现代量化金融和金融计量学的基石之一。它探讨了在使用估计参数应用均值-方差优化时所面临的一个有充分文献记载的挑战，这一现象在投资组合选择中被称为“维度灾难”。所涉及的概念和模型都是标准的，并且有严格的定义。\n- **适定性：** 该问题是适定的（well-posed）。它要求在特定条件下（$N/T$ 很大）对一个已确立的现象（$1/N$ 策略优于优化投资组合）进行解释。这需要基于统计估计理论及其在金融领域的应用进行推理，而不是得出一个单一的数值答案。\n- **客观性：** 该问题使用精确的数学和金融术语进行陈述。其设置中没有歧义或主观内容。\n\n**步骤3：结论与行动**\n题干是有效的。它在科学上是合理的、适定的和客观的。我将继续进行推导和分析。\n\n投资者针对 Markowitz 投资组合的优化问题，使用样本估计值，表述为：\n$$ \\max_{w} \\left\\{ w^\\top \\hat{\\mu} - \\frac{\\gamma}{2} w^\\top \\hat{\\Sigma} w \\right\\} \\quad \\text{subject to} \\quad 1^\\top w = 1 $$\n该问题的拉格朗日函数为 $\\mathcal{L}(w, \\lambda) = w^\\top \\hat{\\mu} - (\\gamma/2) w^\\top \\hat{\\Sigma} w - \\lambda(1^\\top w - 1)$。一阶条件 $\\frac{\\partial \\mathcal{L}}{\\partial w} = 0$ 得出 $\\hat{\\mu} - \\gamma \\hat{\\Sigma} w - \\lambda 1 = 0$。\n求解权重向量 $w$，我们得到：\n$$ \\hat{w}^{\\text{MV}} = \\frac{1}{\\gamma} \\hat{\\Sigma}^{-1} (\\hat{\\mu} - \\lambda 1) $$\n拉格朗日乘子 $\\lambda$ 由约束 $1^\\top w = 1$ 确定。关键的观察点是，最优权重 $\\hat{w}^{\\text{MV}}$ 是样本估计值 $\\hat{\\mu}$ 以及（至关重要的）样本协方差矩阵的逆矩阵 $\\hat{\\Sigma}^{-1}$ 的函数。\n\n当资产数量 $N$ 相对于时间序列长度 $T$ 很大时，核心问题就出现了。\n需要估计的参数数量为：均值向量 $\\mu$ 有 $N$ 个，协方差矩阵 $\\Sigma$ 有 $N(N+1)/2$ 个。参数总数在 $\\mathcal{O}(N^2)$ 的量级。当 $T$ 没有足够大于 $N$ 时，估计值 $\\hat{\\mu}$ 和 $\\hat{\\Sigma}$ 会存在显著的估计误差（即高抽样方差）。\n\n随着比率 $N/T$ 的增加，样本协方差矩阵 $\\hat{\\Sigma}$ 会变得病态（ill-conditioned）。为了使 $\\hat{\\Sigma}$ 非奇异，我们需要 $T > N$。即使这个条件成立，如果 $N$ 接近 $T$，$\\hat{\\Sigma}$ 的最小特征值也会接近 0，使得该矩阵近乎奇异。对一个病态矩阵求逆是一个不稳定的操作，这意味着 $\\hat{\\Sigma}$ 元素中的微小误差会在 $\\hat{\\Sigma}^{-1}$ 的元素中被急剧放大。\n\nMarkowitz 优化器在试图最大化样本目标函数时，会积极利用表观上的机会（例如，具有高样本均值、低样本方差和负样本相关性的资产）。然而，这些表观上的机会通常只是有限样本中估计误差（噪声）的结果。因此，优化器会对数据“过拟合”，这种现象有时被称为“误差最大化”。由此产生的投资组合权重 $\\hat{w}^{\\text{MV}}$ 是极端的，并且具有高方差，当用真实参数 $\\mu$ 和 $\\Sigma$ 进行评估时，会导致较差的样本外表现。\n\n等权重投资组合 $w^{\\text{EQ}}$ 的权重为 $w_i = 1/N$，它完全忽略了数据。这是一种简单的启发式方法。其表现不受估计误差的影响。虽然相对于使用真实 $\\mu$ 和 $\\Sigma$ 的真实“神谕（oracle）”投资组合而言，它是次优的，但它提供了一个稳健的基准。它的次优性源于结构性偏差，但其由参数估计引起的方差为零。\n\n在高维情况下（$N/T$ 很大），$\\hat{w}^{\\text{MV}}$ 因估计误差（方差）导致的样本外性能下降，通常比 $w^{\\text{EQ}}$ 因其结构性偏差导致的性能损失更为严重。因此，简单的 $1/N$ 规则可以实现更高的样本外效用 $U(w)$。\n\n现在，我将评估每个选项。\n\n**A. 随着 $N/T$ 的增加，$\\hat{\\mu}$ 和 $\\hat{\\Sigma}$ 中的抽样误差会累积，并被优化器中的矩阵求逆所放大，导致 $\\,\\hat{w}^{\\text{MV}}$ 对噪声产生过拟合；$w^{\\text{EQ}}$ 避免了参数估计，因此可以产生更高的预期样本外效用。**\n该陈述准确而完整地总结了核心问题。$N/T$ 比率的增加加剧了抽样误差。矩阵求逆 $\\hat{\\Sigma}^{-1}$ 是放大此误差的机制。对噪声进行过拟合（“误差最大化”）是直接后果。$w^{\\text{EQ}}$ 投资组合对此免疫，因为它不执行估计。最终结论是，$w^{\\text{EQ}}$ 可以具有更高的预期样本外效用，这是相关文献中的主要发现。\n**结论：正确。**\n\n**B. 因为 $w^{\\text{EQ}}$ 不使用任何数据，所以对于任何 $\\mu$ 和 $\\Sigma$ 它都能实现 $U(w)$ 的神谕（oracle）最大值，因此无论是在样本内还是样本外，它都优于任何优化投资组合。**\n这个断言是错误的。“神谕”投资组合是最大化真实效用函数 $U(w) = w^\\top \\mu - (\\gamma/2) w^\\top \\Sigma w$ 的组合。其权重是未知真实参数 $\\mu$ 和 $\\Sigma$ 的函数。$w^{\\text{EQ}}$ 投资组合仅在非常严格且不切实际的假设下（例如，所有资产具有相同的预期回报和协方差）才与神谕投资组合重合。此外，根据定义，$\\hat{w}^{\\text{MV}}$ 在样本内（使用 $\\hat{\\mu}$ 和 $\\hat{\\Sigma}$ 评估）实现的目标值比任何其他投资组合（包括 $w^{\\text{EQ}}$）都高。因此，其占优的说法是不正确的。\n**结论：不正确。**\n\n**C. 完整二阶矩结构中的参数数量以 $\\mathcal{O}(N^2)$ 的量级增长，因此在有限的 $T$ 下，$\\hat{\\Sigma}$ 的估计方差很大；由此导致的 $\\,\\hat{w}^{\\text{MV}}$ 的方差可能会超过其潜在的偏差减少量，使得 $w^{\\text{EQ}}$ 在样本外表现更优。**\n这提供了一个正确的统计解释。$\\Sigma$ 中唯一元素的数量确实是 $N(N+1)/2$，即 $\\mathcal{O}(N^2)$。在有限的样本量 $T$ 下，估计如此多的参数会导致估计量 $\\hat{\\Sigma}$ 的方差很大。这种高的参数不确定性转化为投资组合权重估计量 $\\hat{w}^{\\text{MV}}$ 的高方差。这个问题可以放在偏差-方差权衡的框架中来理解：$\\hat{w}^{\\text{MV}}$ 试图估计（无偏的）神谕投资组合，但遭受巨大的方差。$w^{\\text{EQ}}$ 是有偏的，但估计方差为零。在高维情况下，$\\hat{w}^{\\text{MV}}$ 的方差项占主导地位，使得有偏但稳定的 $w^{\\text{EQ}}$ 成为更好的选择。\n**结论：正确。**\n\n**D. 当 $T$ 固定，$N$ 增加时，样本协方差 $\\hat{\\Sigma}$ 变得更准确且条件更好，从而提高了优化精度，并保证 $\\,\\hat{w}^{\\text{MV}}$ 在样本外的表现优于 $w^{\\text{EQ}}$。**\n这个陈述与事实完全相反。当 $T$ 固定，$N$ 增加时，$N/T$ 比率增加，这正是高维问题的定义。这使得 $\\hat{\\Sigma}$ 的估计*更不*准确，矩阵*更*病态（更接近奇异）。这严重降低了优化的性能，使得 $\\hat{w}^{\\text{MV}}$ *更不*可能胜过 $w^{\\text{EQ}}$。\n**结论：不正确。**\n\n**E. 正则化方法，例如对 $\\hat{\\Sigma}$ 进行收缩（shrinkage）或施加权重约束，可以减轻高维估计误差；在没有此类正则化的情况下，无约束的基于样本的优化在样本外经常表现不如 $1/N$ 策略。**\n该陈述正确地定位了问题所在。即插即用 Markowitz 投资组合表现不佳，这正是正则化技术成为投资组合优化研究主要领域的原因。协方差矩阵的收缩估计量（例如 Ledoit-Wolf）和投资组合权重约束（例如无卖空）是抵抗估计误差的标准方法。它们引入少量偏差以实现方差的大幅降低。该陈述正确地指出，在没有这些方法的情况下，朴素的“无约束”（或更确切地说，仅有预算约束）的样本优化是脆弱的，并且经常被简单的 $1/N$ 启发式方法击败。这为解释所述现象提供了必要的背景。\n**结论：正确。**\n\n**F. 对于任何 $N \\ge 2$，等权重配置消除了所有的异质性风险（idiosyncratic risk），因此其样本外方差必然是所有全投资组合中最小的。**\n这个陈述包含两个错误的论断。首先，虽然等权重投资组合中的分散化降低了异质性风险，但对于任何有限的 $N$，它并不能消除该风险。$w^{\\text{EQ}}$ 的投资组合方差为 $\\frac{1}{N^2} 1^\\top \\Sigma 1$。当 $N \\to \\infty$ 时，该方差收敛于平均协方差，而不是零（除非资产不相关，这不现实）。系统性风险仍然存在。其次，具有最小样本外方差的投资组合是全局最小方差投资组合，其权重为 $w = (\\Sigma^{-1}1)/(1^\\top\\Sigma^{-1}1)$。这通常不是等权重投资组合。$w^{\\text{EQ}}$ 投资组合不具有可能的最小方差。\n**结论：不正确。**", "answer": "$$\\boxed{ACE}$$"}]}