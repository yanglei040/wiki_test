{"hands_on_practices": [{"introduction": "鹰鸽博弈是进化博弈论中用于分析冲突与合作的经典模型。通过这个练习，你将从第一性原理出发，推导描述策略频率变化的复制子动力学方程。这个过程将帮助你掌握分析混合策略均衡点及其稳定性的核心技能，这是理解策略在群体中如何演化的基础。[@problem_id:2710640]", "id": "2710640", "problem": "考虑一个无限大、充分混合的种群，其成对互动由鹰鸽博弈描述，对称支付矩阵为\n$$\nA \\;=\\; \\begin{pmatrix}\n\\frac{V - C}{2} & V \\\\\n0 & \\frac{V}{2}\n\\end{pmatrix},\n$$\n其中 $V>0$ 表示争夺资源的收益，$C>0$ 表示冲突升级的成本。令 $p \\in [0,1]$ 表示种群中鹰策略的频率，$1-p$ 表示鸽策略的频率。假设选择动力学遵循连续时间复制子方程，该方程源于一个类型的增长率等于其相对于种群平均适应度的超额适应度这一定义。\n\n使用演化博弈动力学的基本原理，完成以下任务：\n- 在复制子动力学下，推导控制 $p$ 时间演化的一维常微分方程。\n- 由此，确定严格介于 $0$ 和 $1$ 之间的鹰策略的混合策略均衡频率 $p^{\\ast}$（如果存在），并用 $V$ 和 $C$ 表示。\n- 在 $p^{\\ast}$ 处对复制子动力学进行线性化，并以闭式形式计算标量流在 $p^{\\ast}$ 处的雅可比矩阵的特征值。利用其符号，确定当 $V<C$ 时 $p^{\\ast}$ 的局部稳定性。\n\n以行向量 $(p^{\\ast}, \\lambda^{\\ast})$ 的形式报告你的最终答案，其中 $\\lambda^{\\ast}$ 是标量复制子动力学在 $p^{\\ast}$ 处的雅可比矩阵的特征值。最终答案中无需进行数值近似或四舍五入，也无需报告单位。", "solution": "在尝试任何解答之前，将首先验证问题的科学合理性、一致性和完整性。\n\n### 第 1 步：提取已知条件\n- **种群模型**：无限大、充分混合的种群。\n- **互动类型**：成对互动。\n- **博弈**：鹰鸽博弈。\n- **支付矩阵**：$A = \\begin{pmatrix} \\frac{V - C}{2} & V \\\\ 0 & \\frac{V}{2} \\end{pmatrix}$。\n- **参数**：$V>0$（资源收益），$C>0$（冲突升级成本）。\n- **状态变量**：$p \\in [0,1]$ 为鹰策略的频率；$1-p$ 为鸽策略的频率。\n- **选择动力学**：连续时间复制子方程，其中一个类型的增长率等于其相对于平均值的超额适应度。\n- **任务**：\n    1.  推导关于 $p$ 的一维常微分方程。\n    2.  确定混合策略均衡频率 $p^{\\ast} \\in (0,1)$。\n    3.  在 $p^{\\ast}$ 附近线性化动力学，求雅可比矩阵的特征值 $\\lambda^{\\ast}$。\n    4.  确定在 $V<C$ 时 $p^{\\ast}$ 的局部稳定性。\n- **最终答案格式**：行向量 $(p^{\\ast}, \\lambda^{\\ast})$。\n\n### 第 2 步：使用已知条件进行验证\n根据既定标准对问题进行评估。\n- **科学依据**：该问题是演化博弈论中的一个经典范例。鹰鸽博弈、给定的支付矩阵结构以及复制子方程都是该领域的标准基础概念。该设定在科学上是严谨的，在事实上是可靠的。\n- **适定性**：该问题在数学上是适定的。它提供了推导所求量值的唯一解析解所需的所有必要信息（支付矩阵、参数、动力学方程形式）。各项任务遵循从模型建立到稳定性分析的逻辑进程。\n- **客观性**：该问题以精确、客观的数学语言陈述，没有任何主观性、歧义或观点。\n\n### 第 3 步：结论与行动\n该问题是**有效的**。它是数学生物学中一个标准的、适定的问题，科学上合理且客观。我现在将进行完整的推导和求解。\n\n连续时间复制子方程源于以下原理：一个策略的人均增长率等于其适应度与种群平均适应度之差。设 $p$ 为鹰策略的频率。 $p$ 的变化率由 $\\frac{dp}{dt}$ 给出。人均变化率为 $\\frac{1}{p}\\frac{dp}{dt}$。\n\n设 $f_H$ 和 $f_D$ 分别是鹰策略和鸽策略的期望适应度（支付）。一个鹰策略以概率 $p$ 与另一个鹰策略互动，以概率 $1-p$ 与一个鸽策略互动。鸽策略同理。适应度函数为：\n$$f_H(p) = p \\cdot A_{11} + (1-p) \\cdot A_{12} = p\\left(\\frac{V - C}{2}\\right) + (1-p)V$$\n$$f_D(p) = p \\cdot A_{21} + (1-p) \\cdot A_{22} = p(0) + (1-p)\\left(\\frac{V}{2}\\right) = (1-p)\\frac{V}{2}$$\n\n种群的平均适应度 $\\bar{f}$ 是各个适应度值的加权平均：\n$$\\bar{f}(p) = p \\cdot f_H(p) + (1-p) \\cdot f_D(p)$$\n\n根据问题定义，鹰策略频率 $p$ 的复制子动力学为：\n$$\\frac{1}{p}\\frac{dp}{dt} = f_H(p) - \\bar{f}(p)$$\n$$\\frac{dp}{dt} = p(f_H(p) - \\bar{f}(p))$$\n代入 $\\bar{f}(p)$ 的表达式：\n$$\\frac{dp}{dt} = p(f_H(p) - [p \\cdot f_H(p) + (1-p) \\cdot f_D(p)])$$\n$$\\frac{dp}{dt} = p([1-p]f_H(p) - [1-p]f_D(p))$$\n$$\\frac{dp}{dt} = p(1-p)(f_H(p) - f_D(p))$$\n这是一维复制子方程的一般形式。\n\n为了完成第一个任务，我们必须计算适应度之差 $f_H(p) - f_D(p)$：\n$$f_H(p) - f_D(p) = \\left[p\\left(\\frac{V - C}{2}\\right) + (1-p)V\\right] - \\left[(1-p)\\frac{V}{2}\\right]$$\n$$= p\\frac{V}{2} - p\\frac{C}{2} + V - pV - \\frac{V}{2} + p\\frac{V}{2}$$\n$$= \\left(p\\frac{V}{2} - pV + p\\frac{V}{2}\\right) - p\\frac{C}{2} + \\left(V - \\frac{V}{2}\\right)$$\n$$= (pV - pV) - p\\frac{C}{2} + \\frac{V}{2}$$\n$$= \\frac{V}{2} - p\\frac{C}{2} = \\frac{1}{2}(V - pC)$$\n将此结果代入复制子方程，得到关于 $p(t)$ 的具体常微分方程：\n$$\\frac{dp}{dt} = p(1-p)\\frac{1}{2}(V - pC)$$\n\n第二个任务是找到严格介于 $0$ 和 $1$ 之间的混合策略均衡 $p^{\\ast}$。通过设置 $\\frac{dp}{dt} = 0$ 来找到均衡点或不动点。\n$$p(1-p)\\frac{1}{2}(V - pC) = 0$$\n该方程对 $p$ 有三个解：\n1. $p=0$（纯鸽策略种群）\n2. $p=1$（纯鹰策略种群）\n3. $V - pC = 0 \\implies p = \\frac{V}{C}$（混合种群）\n问题要求的是内部均衡 $p^{\\ast} \\in (0,1)$。这对应于第三个解。\n$$p^{\\ast} = \\frac{V}{C}$$\n此均衡存在于区间 $(0,1)$ 内，当且仅当 $0 < V < C$，这与问题最后一部分给出的条件一致。\n\n第三个任务是在 $p^{\\ast}$ 附近对动力学进行线性化，并找到雅可比矩阵的特征值。设 $F(p) = \\frac{dp}{dt} = p(1-p)\\frac{1}{2}(V-pC)$。此标量流的雅可比矩阵是其导数，$J(p) = \\frac{dF}{dp}$。在均衡点 $p^{\\ast}$ 处的特征值为 $\\lambda^{\\ast} = \\frac{dF}{dp}|_{p=p^{\\ast}}$。\n\n复制子方程在内部不动点 $p^{\\ast}$ 处的一个一般性质是 $f_H(p^{\\ast}) = f_D(p^{\\ast})$。$F(p) = p(1-p)(f_H(p)-f_D(p))$ 在该点的导数可以简化。设 $g(p) = f_H(p)-f_D(p)$。那么 $F(p) = p(1-p)g(p)$，且 $g(p^{\\ast})=0$。\n使用乘积法则：\n$$\\frac{dF}{dp} = (1-2p)g(p) + p(1-p)g'(p)$$\n在 $p=p^{\\ast}$ 处求值：\n$$\\lambda^{\\ast} = \\frac{dF}{dp}|_{p=p^{\\ast}} = (1-2p^{\\ast})g(p^{\\ast}) + p^{\\ast}(1-p^{\\ast})g'(p^{\\ast})$$\n因为 $g(p^{\\ast})=0$，这可以简化为：\n$$\\lambda^{\\ast} = p^{\\ast}(1-p^{\\ast})g'(p^{\\ast})$$\n我们有 $g(p) = \\frac{1}{2}(V-pC)$。其导数为：\n$$g'(p) = \\frac{d}{dp}\\left(\\frac{V}{2} - \\frac{pC}{2}\\right) = -\\frac{C}{2}$$\n这个导数是一个常数，所以 $g'(p^{\\ast}) = -\\frac{C}{2}$。\n代入 $p^{\\ast}$ 和 $g'(p^{\\ast})$ 的表达式：\n$$\\lambda^{\\ast} = \\left(\\frac{V}{C}\\right)\\left(1 - \\frac{V}{C}\\right)\\left(-\\frac{C}{2}\\right)$$\n$$\\lambda^{\\ast} = \\left(\\frac{V}{C}\\right)\\left(\\frac{C-V}{C}\\right)\\left(-\\frac{C}{2}\\right)$$\n$$\\lambda^{\\ast} = -\\frac{V(C-V)}{2C}$$\n这也可以写成：\n$$\\lambda^{\\ast} = \\frac{V(V-C)}{2C}$$\n\n最后一个任务是确定当 $V < C$ 时 $p^{\\ast}$ 的局部稳定性。不动点的局部渐近稳定性由特征值 $\\lambda^{\\ast}$ 的符号决定。如果不动点是局部稳定的，则 $\\lambda^{\\ast} < 0$。我们已知 $V>0$ 和 $C>0$。\n$\\lambda^{\\ast} = \\frac{V(V-C)}{2C}$ 的符号由项 $(V-C)$ 的符号决定，因为 $V$ 和 $2C$ 都是正数。\n在 $V < C$ 的条件下，项 $(V-C)$ 是负数。\n因此，$\\lambda^{\\ast} = \\frac{(+)(-)}{(+)} < 0$。\n由于特征值为负，混合策略均衡 $p^{\\ast}$ 是局部稳定的。分析至此完成。最终答案包含 $p^{\\ast}$ 和 $\\lambda^{\\ast}$ 的表达式。", "answer": "$$\n\\boxed{\n\\begin{pmatrix}\n\\frac{V}{C} & \\frac{V(V-C)}{2C}\n\\end{pmatrix}\n}\n$$"}, {"introduction": "现实世界中的群体并非完全同质，一些个体会固守某种策略。本练习引入了一个更复杂的场景：一个由“适应性”交易者和“固执”交易者组成的混合市场。你的任务是计算在这种异质环境下，适应性交易者群内部的均衡状态，这要求你在计算收益时，精确考虑整个群体的策略构成。[@problem_id:2427002]", "id": "2427002", "problem": "考虑一个庞大的、充分混合的种群，其成员重复进行随机匹配，每个参与者采用两种交易策略之一：“趋势”（记为 $T$）或“价值”（记为 $V$）。这种互动是一个对称的 $2 \\times 2$ 博弈。当一个使用策略 $i \\in \\{T,V\\}$ 的参与者与一个使用策略 $j \\in \\{T,V\\}$ 的对手匹配时，该参与者的单期期望收益是矩阵\n$$\nA \\;=\\; \\begin{pmatrix}\n5 & 1 \\\\\n3 & 2\n\\end{pmatrix}\n$$\n的相应元素，其中行表示参与者的策略，列表示对手的策略。种群中有一部分比例为 $s=\\frac{1}{10}$ 的“固执”参与者，他们永久性地采用策略 $T$，从不修正策略。种群中其余比例为 $1-s$ 的是适应性参与者，他们根据复制动态修正自己的策略：当一个策略的期望收益超过当前平均收益时，该策略在适应性子种群中的份额就会增加，当且仅当其期望收益超过当前平均收益时；反之，当其期望收益低于当前平均收益时，其份额就会减少。\n\n设 $p \\in [0,1]$ 表示适应性参与者中采用策略 $T$ 的比例。假设在整个种群（包括固执和适应性参与者）中，匹配是随机的。在上述假设下，适应性子种群的复制动态存在一个唯一的内部静止点 $p^{\\ast} \\in (0,1)$。\n\n精确计算 $p^{\\ast}$。请以精确分数形式给出答案，不要四舍五入。", "solution": "此问题陈述已经过审阅并被认定为有效。它在科学上植根于演化博弈论的原理，特别是复制动态。该问题提法得当，提供了所有必要的参数和明确的目标。其语言客观，设定在数学上一致且完备。因此，将提供解答。\n\n设 $s$ 为种群中“固执”参与者的比例，他们总是采用策略 $T$。我们已知 $s = \\frac{1}{10}$。种群中剩下的比例为 $1-s$ 的是“适应性”参与者。设 $p$ 为适应性参与者中选择策略 $T$ 的比例。因此，选择策略 $V$ 的适应性参与者的比例为 $1-p$。\n\n在整个种群中，采用策略 $T$ 的参与者总比例（记为 $x_T$）是采用策略 $T$ 的固执参与者和采用策略 $T$ 的适应性参与者之和：\n$$\nx_T = s \\cdot 1 + (1-s) \\cdot p = s + (1-s)p\n$$\n采用策略 $V$ 的参与者总比例（记为 $x_V$）仅由采用策略 $V$ 的适应性参与者组成：\n$$\nx_V = (1-s)(1-p)\n$$\n注意到 $x_T + x_V = s + (1-s)p + (1-s)(1-p) = s + (1-s)(p + 1 - p) = s + 1 - s = 1$，符合预期。\n\n收益矩阵如下：\n$$\nA = \\begin{pmatrix} A_{TT} & A_{TV} \\\\ A_{VT} & A_{VV} \\end{pmatrix} = \\begin{pmatrix} 5 & 1 \\\\ 3 & 2 \\end{pmatrix}\n$$\n适应性参与者选择的策略是针对从整个种群中随机抽取的对手进行评估的。适应性参与者选择策略 $T$ 的期望收益记为 $U_T$：\n$$\nU_T = A_{TT} \\cdot x_T + A_{TV} \\cdot x_V = 5x_T + 1x_V\n$$\n适应性参与者选择策略 $V$ 的期望收益记为 $U_V$：\n$$\nU_V = A_{VT} \\cdot x_T + A_{VV} \\cdot x_V = 3x_T + 2x_V\n$$\n复制动态表明，适应性子种群中策略 $T$ 的份额 $p$ 根据以下方程演化：\n$$\n\\dot{p} = p(U_T - \\bar{U})\n$$\n其中 $\\bar{U} = p U_T + (1-p) U_V$ 是适应性子种群的平均收益。\n\n内部静止点 $p^{\\ast} \\in (0,1)$ 是一个使 $\\dot{p}=0$ 的状态。由于 $p^{\\ast}$ 是内部点，所以 $p^{\\ast} \\neq 0$ 且 $p^{\\ast} \\neq 1$。条件 $\\dot{p}=0$ 意味着 $p(U_T - \\bar{U}) = 0$。由于 $p \\neq 0$，我们必须有 $U_T - \\bar{U} = 0$。\n代入 $\\bar{U}$ 的表达式：\n$$\nU_T - [p U_T + (1-p) U_V] = 0\n$$\n$$\n(1-p)U_T - (1-p)U_V = 0\n$$\n$$\n(1-p)(U_T - U_V) = 0\n$$\n由于 $p^{\\ast} \\in (0,1)$，我们有 $1-p^{\\ast} \\neq 0$。因此，内部静止点的条件简化为两种策略的期望收益相等：\n$$\nU_T = U_V\n$$\n代入 $U_T$ 和 $U_V$ 的表达式：\n$$\n5x_T + 1x_V = 3x_T + 2x_V\n$$\n$$\n2x_T = x_V\n$$\n现在，我们将 $x_T$ 和 $x_V$ 的表达式（用 $p$ 和 $s$ 表示）代入：\n$$\n2(s + (1-s)p) = (1-s)(1-p)\n$$\n我们正在寻找满足此均衡条件的 $p$ 值，我们将其记为 $p^{\\ast}$。展开方程：\n$$\n2s + 2(1-s)p^{\\ast} = 1-s - (1-s)p^{\\ast}\n$$\n现在，我们将含 $p^{\\ast}$ 的项收集到一边，将常数项收集到另一边：\n$$\n2(1-s)p^{\\ast} + (1-s)p^{\\ast} = 1-s-2s\n$$\n$$\n3(1-s)p^{\\ast} = 1-3s\n$$\n解出 $p^{\\ast}$：\n$$\np^{\\ast} = \\frac{1-3s}{3(1-s)}\n$$\n这是内部静止点关于固执参与者比例 $s$ 的函数的通用表达式。题目指明 $s = \\frac{1}{10}$。代入此值：\n$$\n1-s = 1 - \\frac{1}{10} = \\frac{9}{10}\n$$\n$$\n1-3s = 1 - 3\\left(\\frac{1}{10}\\right) = 1 - \\frac{3}{10} = \\frac{7}{10}\n$$\n将这些值代入 $p^{\\ast}$ 的表达式：\n$$\np^{\\ast} = \\frac{\\frac{7}{10}}{3\\left(\\frac{9}{10}\\right)} = \\frac{\\frac{7}{10}}{\\frac{27}{10}}\n$$\n$$\np^{\\ast} = \\frac{7}{27}\n$$\n该值位于区间 $(0,1)$ 内，这确认了它是一个有效的内部静止点。这就是所要求的唯一内部静止点。", "answer": "$$\n\\boxed{\\frac{7}{27}}\n$$"}, {"introduction": "许多有趣的经济模型，如凯恩斯的“选美竞赛”，由于其复杂性而难以进行解析分析，此时计算模拟便成为有力的研究工具。本练习将引导你编写程序来模拟“选美竞赛”博弈中的复制子动力学过程。这个实践不仅能加深你对理论的理解，还将锻炼你处理经济动态系统的数值积分和计算建模能力。[@problem_id:2426991]", "id": "2426991", "problem": "设想一个大型代理人群体重复进行一个凯恩斯选美博弈。在每一轮中，每个代理人都采用一个固定的预测规则（一个“策略”），输出一个单位区间内的标量猜测值。要预测的实现目标与当前群体平均猜测值成正比。群体状态由一个在 $K+1$ 个策略的有限集合上的概率向量 $x = (x_0,\\dots,x_K)$ 表示，其中 $x_i \\ge 0$ 且 $\\sum_{i=0}^K x_i = 1$。平均猜测值为 $m(x) = \\sum_{i=0}^K x_i g_i$，其中 $g_i$ 是策略 $i$ 产生的猜测值。该博弈由一个权重参数 $p \\in (0,1)$（用于缩放目标为 $p \\cdot m(x)$）、一个基准锚点 $b \\in (0,1]$ 和一个线性复杂度成本系数 $\\lambda \\ge 0$（用于惩罚策略索引）来参数化。策略集由带有几何衰减的 $k$ 阶迭代推理定义：对于 $i \\in \\{0,1,\\dots,K\\}$，规则是猜测 $g_i = b \\, p^i$。在给定状态 $x$ 的情况下，策略 $i$ 的周期收益定义为负的预测误差平方减去复杂度成本，即\n$$\nu_i(x) = -\\big(g_i - p \\, m(x)\\big)^2 - \\lambda \\, i.\n$$\n群体份额根据连续时间复制器方程演化\n$$\n\\dot{x}_i = x_i \\big( u_i(x) - \\bar{u}(x) \\big), \\quad \\text{对于 } i=0,\\dots,K,\n$$\n其中 $\\bar{u}(x) = \\sum_{j=0}^K x_j u_j(x)$ 是平均收益。初始条件是均匀分布，即对所有 $i$，$x_i(0) = \\frac{1}{K+1}$。\n\n你的任务是实现一个程序，从给定的初始条件开始，对几种参数配置下的复制器动力学进行数值积分，直至达到稳态。使用一个能在数值容差范围内保持单纯形（非负性和总和为一）的时间离散化方案。当 $x$ 在一步内的最大绝对变化量连续 $100$ 步低于 $10^{-10}$ 时，或当达到模拟步数的硬性上限时，应宣告收敛。使用固定的时间步长 $\\Delta t = 0.01$ 和最大模拟时间 $T = 200$（即最多 $N = 20000$ 步）。如果数值漂移违反了非负性，则通过在零处截断并重新归一化到总和为一来进行投影。收敛后（或在时间上限处），报告拥有最大群体份额 $x_{i^\\star}$ 的策略索引 $i^\\star$；如果出现平局，则报告其中最小的索引。\n\n请为以下测试套件实现你的解法（每个元组为 $(p,b,K,\\lambda)$）：\n- 情况 A（理想情况）：$(\\frac{2}{3}, 1.0, 5, 0.0)$。\n- 情况 B（成本主导边界）：$(0.9, 1.0, 8, 0.05)$。\n- 情况 C（权衡内部情况）：$(0.5, 1.0, 10, 0.02)$。\n\n注意：\n- 所有数学实体必须严格按照定义处理：$p \\in (0,1)$，$b \\in (0,1]$，$K \\in \\mathbb{N}$ 且 $K \\ge 1$，以及 $\\lambda \\ge 0$。\n- 不涉及角度；不需要角度单位。\n- 没有物理单位。\n- 不使用百分比；所有量均为实数。\n\n最终输出格式：\n- 你的程序应生成单行输出，包含测试套件的结果，形式为方括号内以逗号分隔的列表，顺序为情况 A、B、C。每个元素必须是你的模拟找到的优势策略索引 $i^\\star$ 的整数。例如，一个包含三个整数的输出必须看起来像 $[i_A,i_B,i_C]$，不含空格。", "solution": "问题陈述经过严格审查，被认定是有效的。它在科学上基于已建立的演化博弈论，特别是使用复制器动力学来模拟凯恩斯选美博弈中的策略演化。该问题是良定的，提供了一套完整的定义、方程、参数和初始条件，以获得唯一的数值解。语言客观且数学上精确，没有歧义或矛盾。\n\n该问题要求对一个连续时间复制器方程组进行数值积分，以找到策略的稳态分布。该系统描述了一个代理人群体，其中使用策略 $i$ 的群体份额 $x_i$ 根据其相对表现而演化。\n\n系统的状态是 $(K+1)$ 维单纯形上的一个概率向量 $x = (x_0, \\dots, x_K)$，其中 $x_i(t)$ 是策略 $i$ 在时间 $t$ 的群体份额。约束条件为对所有 $i \\in \\{0, \\dots, K\\}$，$x_i \\ge 0$ 且 $\\sum_{i=0}^K x_i = 1$。初始条件是均匀分布，$x_i(0) = \\frac{1}{K+1}$。\n\n博弈涉及预测一个取决于群体平均行动的目标。可用策略由 $i \\in \\{0, \\dots, K\\}$ 索引。策略 $i$ 对应于做出一个固定的猜测 $g_i$，由 $k$ 阶推理定义为：\n$$\ng_i = b p^i\n$$\n其中 $b \\in (0,1]$ 是一个基准锚点，$p \\in (0,1)$ 是一个几何衰减因子。给定群体状态 $x$，平均猜测为：\n$$\nm(x) = \\sum_{i=0}^K x_i g_i\n$$\n要预测的目标值为 $p \\cdot m(x)$。\n\n一个策略的成功由其收益衡量，即二次损失函数（预测误差平方）的负值加上一个线性的复杂度惩罚：\n$$\nu_i(x) = -\\big(g_i - p \\, m(x)\\big)^2 - \\lambda i\n$$\n其中 $\\lambda \\ge 0$ 是复杂度成本的系数，该成本随策略索引 $i$ 的增加而增加。\n\n群体动力学由连续时间复制器方程支配：\n$$\n\\dot{x}_i = x_i \\big( u_i(x) - \\bar{u}(x) \\big)\n$$\n其中 $\\bar{u}(x) = \\sum_{j=0}^K x_j u_j(x)$ 是群体平均收益。这个方程意味着，收益高于平均水平的策略其群体份额将随时间增加，而收益低于平均水平的策略则会减少。\n\n为了数值求解这个常微分方程组，我们必须采用一种时间离散化方案。标准的前向欧拉法很简单，但不能保证状态向量 $x$ 保持在单纯形上。问题陈述建议使用一种投影法（截断和重新归一化）来处理这个问题。然而，一个更优雅和稳健的方法是使用一种能内在地保持单纯形结构的方法。指数更新规则是复制器动力学的一种标准离散化方法，可以实现这一点：\n$$\nx_i(t+\\Delta t) = \\frac{x_i(t) \\exp\\big(\\Delta t \\cdot u_i(x(t))\\big)}{\\sum_{j=0}^K x_j(t) \\exp\\big(\\Delta t \\cdot u_j(x(t))\\big)}\n$$\n这个更新规则确保了如果 $x_i(t) \\ge 0$ 且 $\\sum_i x_i(t) = 1$，那么 $x_i(t+\\Delta t) \\ge 0$ 和 $\\sum_i x_i(t+\\Delta t) = 1$ 将在数值精度范围内得以维持，满足了问题的要求。\n\n每个测试用例的算法如下：\n1.  初始化参数 $(p, b, K, \\lambda)$ 和数值常量 $\\Delta t = 0.01$，$N_{max} = 20000$，收敛容差 $\\epsilon = 10^{-10}$，以及收敛所需的连续步数 $S_{conv} = 100$。\n2.  预先计算策略猜测的常数向量 $g = (g_0, \\dots, g_K)$。\n3.  将状态向量 $x$ 初始化为均匀分布：对所有 $i$，$x_i = \\frac{1}{K+1}$。\n4.  开始主模拟循环，从步数 $n=0$ 迭代到 $N_{max}-1$。\n    a.  存储当前状态向量：$x_{old} \\leftarrow x$。\n    b.  计算平均猜测值 $m(x) = x \\cdot g$。\n    c.  计算目标值 $T = p \\cdot m(x)$。\n    d.  计算收益向量 $u$，其中 $u_i = -(g_i - T)^2 - \\lambda i$。\n    e.  使用上述指数更新规则更新状态向量 $x$。\n    f.  检查收敛性：计算最大绝对变化量 $\\delta = \\max_i |x_i - (x_{old})_i|$。如果 $\\delta < \\epsilon$，则增加一个连续收敛步数的计数器。否则，重置计数器。\n    g.  如果计数器达到 $S_{conv}$，则系统已达到稳态，循环终止。\n5.  循环终止后（通过收敛或达到 $N_{max}$ 步数），在最终状态向量 $x$ 中确定拥有最大群体份额的策略索引 $i^\\star$。如果出现平局，则选择最小的那个索引。这通过找到最终向量 $x$ 的最大值的参数来实现。\n6.  这个索引 $i^\\star$ 是给定测试用例的结果。\n对所有指定的测试用例重复此过程。", "answer": "```python\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Main function to run the simulation for all test cases and print the results.\n    \"\"\"\n    # Each tuple is (p, b, K, lambda).\n    test_cases = [\n        (2.0/3.0, 1.0, 5, 0.0),    # Case A\n        (0.9, 1.0, 8, 0.05),     # Case B\n        (0.5, 1.0, 10, 0.02),    # Case C\n    ]\n\n    results = []\n    for p, b, K, lambda_val in test_cases:\n        i_star = run_simulation(p, b, K, lambda_val)\n        results.append(i_star)\n\n    # Format the final output as specified.\n    print(f\"[{','.join(map(str, results))}]\")\n\ndef run_simulation(p, b, K, lambda_val):\n    \"\"\"\n    Numerically integrates the replicator dynamics for a single parameter configuration.\n\n    Args:\n        p (float): The scaling weight for the target.\n        b (float): The baseline anchor for strategies.\n        K (int): The maximum strategy index (K+1 strategies).\n        lambda_val (float): The complexity cost coefficient.\n\n    Returns:\n        int: The index of the dominant strategy at the steady state.\n    \"\"\"\n    # Numerical integration parameters from the problem description\n    DT = 0.01\n    T_MAX = 200.0\n    N_MAX = int(T_MAX / DT)\n    CONV_TOL = 1e-10\n    CONV_STEPS = 100\n\n    # Initialize strategies and state vector\n    # k_values is an array [0, 1, ..., K]\n    k_values = np.arange(K + 1)\n    # g is the vector of guesses for each strategy\n    g = b * (p ** k_values)\n    # x is the population share vector, initialized to uniform distribution\n    x = np.full(K + 1, 1.0 / (K + 1))\n\n    consecutive_converged_steps = 0\n\n    for _ in range(N_MAX):\n        x_old = x.copy()\n\n        # Step 1: Calculate average guess m(x)\n        m_x = np.dot(x, g)\n\n        # Step 2: Calculate target\n        target = p * m_x\n\n        # Step 3: Calculate payoffs u_i(x) for all strategies\n        forecast_error_sq = (g - target) ** 2\n        complexity_cost = lambda_val * k_values\n        u = -forecast_error_sq - complexity_cost\n\n        # Step 4: Update population shares using the exponential update rule\n        # This scheme inherently preserves the simplex (non-negativity and unit sum).\n        numerators = x * np.exp(DT * u)\n        denominator = np.sum(numerators)\n        \n        # This check is for extreme cases, e.g., underflow of all numerators.\n        # It's unlikely in this problem but is good practice.\n        if denominator > 0:\n            x = numerators / denominator\n        else:\n            # If all population shares vanish, simulation cannot continue.\n            break\n\n        # Step 5: Check for convergence\n        max_change = np.max(np.abs(x - x_old))\n        if max_change < CONV_TOL:\n            consecutive_converged_steps += 1\n        else:\n            consecutive_converged_steps = 0\n\n        if consecutive_converged_steps >= CONV_STEPS:\n            break\n\n    # Determine the dominant strategy after convergence or timeout\n    # np.argmax returns the smallest index in case of a tie.\n    i_star = np.argmax(x)\n\n    return int(i_star)\n\nif __name__ == '__main__':\n    solve()\n```"}]}