{"hands_on_practices": [{"introduction": "Black-Scholes-Merton (BSM) 公式是其相应偏微分方程 (PDE) 的解析解。本练习将摒弃解析推导，转而直接面对该方程本身，让您通过构建数值解来“推导”期权价格。您将使用强大的 Crank-Nicolson 有限差分法来直接求解 BSM 方程，这有助于您深入理解该 PDE 的结构、边界条件以及时间衰减等核心概念。[@problem_id:2387926]", "id": "2387926", "problem": "考虑一个无摩擦市场，其中一种风险资产的价格过程由 $S_t$ 表示，还有一个货币市场账户，其收益为连续复利的无风险利率 $r$。假设在风险中性概率测度下，该风险资产遵循几何布朗运动 $dS_t = r S_t \\, dt + \\sigma S_t \\, dW_t$，其中 $\\sigma > 0$ 是恒定波动率，$W_t$ 是标准布朗运动。令 $V(S,t)$ 表示一份行权价为 $K$、到期日为 $T$ 的欧式看涨期权在时间 $t$ 的价值。根据无套利和复制原理，$V(S,t)$ 满足 Black-Scholes-Merton 偏微分方程 $V_t + \\tfrac{1}{2} \\sigma^2 S^2 V_{SS} + r S V_S - r V = 0$，其中 $S \\in (0,\\infty)$ 且 $t \\in [0,T)$。其终端条件为 $V(S,T) = \\max(S-K,0)$。在一个截断的空间域 $S \\in [0,S_{\\max}]$（其中 $S_{\\max} \\gg K$）上，施加边界条件 $V(0,t) = 0$ 和 $V(S_{\\max},t) \\approx S_{\\max} - K e^{-r (T-t)}$，其中 $t \\in [0,T]$。\n\n您的任务是编写一个完整且可运行的程序，该程序从基本的无套利原理和 Black-Scholes-Merton 偏微分方程出发，在一个均匀的时空网格上计算数值解，并通过使用非常大的时间步长来经验性地证明其无条件稳定性。该程序必须：\n\n- 在域 $S \\in [0,S_{\\max}]$ 和 $\\tau \\in [0,T]$ 上，构建一个在时间和空间上均达到二阶精度的一致有限差分近似，其中 $\\tau = T - t$ 是剩余到期时间变量。在 $\\tau = 0$ 时的初始条件为 $V(S,0) = \\max(S-K,0)$。边界条件为 $V(0,\\tau) = 0$ 和 $V(S_{\\max},\\tau) = S_{\\max} - K e^{-r \\tau}$，其中 $\\tau \\in [0,T]$。\n- 通过在网格解 $V(S,\\tau)$ 上进行线性插值，在给定的初始标的资产价值 $S_0$ 处对欧式看涨期权进行定价（当 $\\tau = T$ 时）。所有利率必须以小数形式表示，不得使用百分号。所有价格必须以与 $S$ 和 $K$ 相同的任意货币单位报告。\n- 通过将数值价格与解析的 Black-Scholes-Merton 值 $C_{\\text{BSM}}(S_0,K,r,\\sigma,T)$ 进行比较，来定量评估数值误差，并以浮点数形式报告绝对误差。\n- 经验性地证明无条件稳定性，方法是固定空间网格，使用非常大的时间步长（即非常少的时间层级）来运行该格式，并验证数值解在所有时间层级和所有节点上均保持在 $[0,S_{\\max}]$ 的有界范围内。\n\n使用以下通用参数值：$S_0 = 100$, $K = 100$, $r = 0.05$, $\\sigma = 0.2$, $T = 1$, $S_{\\max} = 500$。使用具有 $M$ 个子区间（即 $M+1$ 个空间节点）的均匀空间网格，以及在 $\\tau$ 上具有 $N$ 个子区间（即包括 $\\tau=0$ 和 $\\tau=T$ 在内的 $N+1$ 个时间层级）的均匀时间网格。\n\n测试套件。您的程序必须运行以下四个测试用例，并按规定汇总结果：\n- 测试用例 1（正常路径准确性）：$(M,N) = (400,400)$。输出绝对误差 $|C_{\\text{num}} - C_{\\text{BSM}}|$，格式为浮点数。\n- 测试用例 2（极大时间步长）：$(M,N) = (400,4)$。输出绝对误差 $|C_{\\text{num}} - C_{\\text{BSM}}|$，格式为浮点数。\n- 测试用例 3（较粗的时空网格）：$(M,N) = (100,100)$。输出绝对误差 $|C_{\\text{num}} - C_{\\text{BSM}}|$，格式为浮点数。\n- 测试用例 4（经验性无条件稳定性检查）：固定 $M = 400$，并使用 $N \\in \\{1,2,4,8,16,32,64\\}$ 运行。设稳定性指标为一个布尔值，当且仅当对于该集合中的每一个 $N$，在每个时间层级和每个空间节点上，所有计算值都是有限的，并且在 $[0,S_{\\max}]$ 范围内（容差为 $10^{-8}$）时，该值为真，否则为假。输出此布尔值。\n\n最终输出格式。您的程序应生成单行输出，其中包含一个用方括号括起来的逗号分隔列表，结果严格按照以下顺序排列：测试用例 1 的绝对误差、测试用例 2 的绝对误差、测试用例 3 的绝对误差以及测试用例 4 的稳定性布尔值。例如，一个语法正确的输出行格式为 `[0.001234,0.056789,0.012345,True]`。", "solution": "该问题陈述构成了计算金融学中一个适定的初边值问题。它在科学上基于 Black-Scholes-Merton 无套利框架，并为数值求解提供了一套完整且一致的参数、初始条件和边界条件。因此，该问题是有效的，我们着手构建所需的数值方法和程序。\n\n基本方程是用于描述欧式期权价值 $V(S,t)$ 的 Black-Scholes-Merton 偏微分方程（PDE）：\n$$\n\\frac{\\partial V}{\\partial t} + \\frac{1}{2}\\sigma^2 S^2 \\frac{\\partial^2 V}{\\partial S^2} + r S \\frac{\\partial V}{\\partial S} - r V = 0\n$$\n这是一个终值问题，其在时间 $t=T$ 的终端条件由期权的收益函数给出，即 $V(S,T) = \\max(S-K, 0)$。为了将其转换为一个标准的初值问题，我们引入剩余到期时间变量 $\\tau = T - t$。其导数变换为 $\\frac{\\partial}{\\partial t} = \\frac{\\partial \\tau}{\\partial t} \\frac{\\partial}{\\partial \\tau} = - \\frac{\\partial}{\\partial \\tau}$。将其代入 PDE 可得：\n$$\n\\frac{\\partial V}{\\partial \\tau} = \\frac{1}{2}\\sigma^2 S^2 \\frac{\\partial^2 V}{\\partial S^2} + r S \\frac{\\partial V}{\\partial S} - r V\n$$\n这是一个关于 $\\tau$ 的正向扩散-对流-反应方程，我们必须求解其从 $\\tau=0$ 到 $\\tau=T$ 的演化。在 $\\tau=0$ 处的初始条件是 $V(S,0) = \\max(S-K,0)$。\n\n问题要求一个在时间和空间上均为二阶精度且无条件稳定的数值格式。Crank-Nicolson 有限差分法具备这些性质。我们在均匀网格上离散化域 $(S, \\tau) \\in [0, S_{\\max}] \\times [0, T]$。令 $S_j = j \\Delta S$，其中 $j=0, 1, \\dots, M$ 且 $\\Delta S = S_{\\max}/M$。令 $\\tau_i = i \\Delta \\tau$，其中 $i=0, 1, \\dots, N$ 且 $\\Delta \\tau = T/N$。令 $V_j^i$ 为 $V(S_j, \\tau_i)$ 的数值近似。\n\n我们使用二阶中心差分来近似空间导数：\n$$\n\\frac{\\partial V}{\\partial S} \\bigg|_{S_j,\\tau_i} \\approx \\frac{V_{j+1}^i - V_{j-1}^i}{2 \\Delta S}\n$$\n$$\n\\frac{\\partial^2 V}{\\partial S^2} \\bigg|_{S_j,\\tau_i} \\approx \\frac{V_{j+1}^i - 2V_j^i + V_{j-1}^i}{(\\Delta S)^2}\n$$\n令 $\\mathcal{L}$ 为变换后 PDE 右侧的空间微分算子。Crank-Nicolson 格式将 PDE 近似为：\n$$\n\\frac{V_j^{i+1} - V_j^i}{\\Delta \\tau} = \\frac{1}{2} \\left[ (\\mathcal{L} V^i)_j + (\\mathcal{L} V^{i+1})_j \\right]\n$$\n整理各项，将时间层级 $i+1$ 的未知数与层级 $i$ 的已知数分开：\n$$\n\\left(I - \\frac{\\Delta \\tau}{2} \\mathcal{L}_d\\right) V^{i+1} = \\left(I + \\frac{\\Delta \\tau}{2} \\mathcal{L}_d\\right) V^i\n$$\n其中 $\\mathcal{L}_d$ 是离散化的空间算子。该方程代表一个关于内部空间节点 $j=1, \\dots, M-1$ 处期权价值向量 $V^{i+1}$ 的线性方程组。该系统是三对角的。对于内部节点 $j$ 的一般方程是：\n$$\nl_j V_{j-1}^{i+1} + d_j V_j^{i+1} + u_j V_{j+1}^{i+1} = l'_j V_{j-1}^i + d'_j V_j^i + u'_j V_{j+1}^i\n$$\n其中系数是通过将有限差分近似代入算子 $\\mathcal{L}$ 推导出来的。对于 $S_j=j\\Delta S$，它们简化为：\n$$\nl_j = -\\frac{\\Delta \\tau}{4}(\\sigma^2 j^2 - rj)\n$$\n$$\nd_j = 1 + \\frac{\\Delta \\tau}{2}(\\sigma^2 j^2 + r)\n$$\n$$\nu_j = -\\frac{\\Delta \\tau}{4}(\\sigma^2 j^2 + rj)\n$$\n右侧的系数为 $l'_j = -l_j$，$d'_j = 2 - d_j$ 和 $u'_j = -u_j$。\n\n在每个时间步 $i \\to i+1$，我们求解三对角系统 $A V^{i+1} = \\mathbf{b}$，其中 $A$ 是对角线为 $(l_j, d_j, u_j)$ 的矩阵，$\\mathbf{b}$ 是从右侧计算出的向量。\n必须将边界条件纳入考虑。\n$V(0, \\tau) = 0$ 的条件意味着对于所有 $i$，$V_0^i = 0$。这意味着（对于 $j=1$ 的）系统中的第一个方程不涉及未知的边界项。\n$V(S_{\\max}, \\tau) = S_{\\max} - Ke^{-r\\tau}$ 的条件在每个时间步为 $V_M^i$ 提供了已知值。系统最后一个方程（对于 $j=M-1$）中的项 $u_{M-1} V_M^{i+1}$ 是已知的，并被移到右侧。因此，在求解系统之前，右侧向量 $\\mathbf{b}$ 会相应地进行修改。\n\n流程如下：\n1. 在 $\\tau=0$ 处，用 $V_j^0 = \\max(j\\Delta S - K, 0)$ 初始化网格解。\n2. 对于从 $0$ 到 $N-1$ 的每个时间步 $i$：\n    a. 使用来自 $V^i$ 的值构建右侧向量 $\\mathbf{b}$。\n    b. 调整 $\\mathbf{b}$ 的最后一个元素以考虑在 $S_{\\max}$ 处的边界条件。\n    c. 为内部节点值 $V_1^{i+1}, \\dots, V_{M-1}^{i+1}$ 求解三对角系统 $A V_{\\text{interior}}^{i+1} = \\mathbf{b}$。带状矩阵求解器对此非常高效。\n    d. 用计算出的内部值和 $\\tau_{i+1}$ 的边界值更新完整的解向量 $V^{i+1}$。\n3. 完成所有时间步后，向量 $V^N$ 包含在 $\\tau=T$（即时间 $t=0$）时的期权价格。\n4. 在指定的初始股票价格 $S_0$ 处对 $V^N$ 中的值进行线性插值，以获得最终的数值价格 $C_{\\text{num}}$。\n5. 计算绝对误差 $|C_{\\text{num}} - C_{\\text{BSM}}|$，其中 $C_{\\text{BSM}}$ 是来自 Black-Scholes-Merton 公式的解析价格：\n$$C(S, K, r, \\sigma, T) = S_0 N(d_1) - K e^{-rT} N(d_2)$$\n$$d_1 = \\frac{\\ln(S_0/K) + (r + \\frac{1}{2}\\sigma^2)T}{\\sigma\\sqrt{T}}, \\quad d_2 = d_1 - \\sigma\\sqrt{T}$$\n其中 $N(\\cdot)$ 是标准正态分布的累积分布函数。\n6. 对于稳定性测试，检查所有节点和时间步的 $V_j^i$ 值，以确保它们保持有限且在无套利边界 $[0, S_{\\max}]$ 内。Crank-Nicolson 格式的无条件稳定性确保了即使对于大的 $\\Delta \\tau$（小的 $N$），这一特性也成立。\n\n这个系统化的流程在提供的程序中实现，用以解决给定的测试用例。", "answer": "```python\nimport numpy as np\nfrom scipy.stats import norm\nfrom scipy.linalg import solve_banded\n\ndef solve():\n    \"\"\"\n    Main function to run all test cases and print the final result.\n    \"\"\"\n    # Common parameters as specified in the problem\n    S0 = 100.0\n    K = 100.0\n    r = 0.05\n    SIGMA = 0.2\n    T = 1.0\n    S_MAX = 500.0\n\n    def bsm_analytical_price(s, k, rate, sigma, time):\n        \"\"\"Calculates the analytical Black-Scholes-Merton price for a European call.\"\"\"\n        if time == 0:\n            return np.maximum(s - k, 0)\n        d1 = (np.log(s / k) + (rate + 0.5 * sigma**2) * time) / (sigma * np.sqrt(time))\n        d2 = d1 - sigma * np.sqrt(time)\n        price = s * norm.cdf(d1) - k * np.exp(-rate * time) * norm.cdf(d2)\n        return price\n\n    def solve_crank_nicolson(s0, k, rate, sigma, time, s_max, M, N, stability_check=False, tol=1e-8):\n        \"\"\"\n        Solves the Black-Scholes PDE using the Crank-Nicolson finite difference method.\n\n        If stability_check is True, it returns a boolean indicating if the solution\n        remained within bounds [0, s_max] throughout the simulation. Otherwise, it\n        returns the interpolated option price at s0.\n        \"\"\"\n        # Grid setup\n        dS = s_max / M\n        dTau = time / N\n        S_grid = np.linspace(0, s_max, M + 1)\n\n        # Initial condition at tau=0 (which is maturity t=T)\n        V = np.maximum(S_grid - k, 0)\n        \n        if stability_check:\n            if not(np.all(np.isfinite(V)) and np.all((V >= 0 - tol) & (V <= s_max + tol))):\n                return False\n\n        # Coefficients for the tridiagonal system. These are time-independent.\n        j = np.arange(1, M, dtype=np.float64)  # Interior nodes j = 1, ..., M-1\n        \n        # Coefficients for LHS matrix A in A * V_new = b\n        l_j = -0.25 * dTau * (sigma**2 * j**2 - rate * j)\n        d_j = 1.0 + 0.5 * dTau * (sigma**2 * j**2 + rate)\n        u_j = -0.25 * dTau * (sigma**2 * j**2 + rate * j)\n        \n        # LHS matrix A, in banded form for scipy.linalg.solve_banded\n        A = np.zeros((3, M - 1))\n        A[0, 1:] = u_j[:-1]   # Upper diagonal\n        A[1, :] = d_j         # Main diagonal\n        A[2, :-1] = l_j[1:]   # Lower diagonal\n        \n        # Coefficients for RHS matrix B where b = B * V_old\n        l_prime_j = -l_j\n        d_prime_j = 2.0 - d_j\n        u_prime_j = -u_j\n        \n        # Time-stepping loop from tau=0 to tau=T\n        for i in range(N):\n            tau_i_plus_1 = (i + 1) * dTau\n            \n            # Construct RHS vector b = B * V_old\n            rhs_vector = (l_prime_j * V[:-2] + \n                          d_prime_j * V[1:-1] +\n                          u_prime_j * V[2:])\n\n            # Boundary condition adjustments for the RHS vector b\n            bc_upper_i_plus_1 = s_max - k * np.exp(-rate * tau_i_plus_1)\n            rhs_vector[-1] -= u_j[-1] * bc_upper_i_plus_1\n            \n            # Solve the linear system A * V_new = b for interior nodes\n            V_interior_new = solve_banded((1, 1), A, rhs_vector)\n            \n            # Update full solution vector V for the next time step\n            V[1:-1] = V_interior_new\n            V[0] = 0.0  # Lower boundary V(0, t)=0\n            V[-1] = bc_upper_i_plus_1\n            \n            if stability_check:\n                if not (np.all(np.isfinite(V)) and np.all((V >= 0 - tol) & (V <= s_max + tol))):\n                    return False\n                    \n        if stability_check:\n            return True\n\n        # Interpolate to find price at S0 after all time steps\n        numerical_price = np.interp(s0, S_grid, V)\n        return numerical_price\n\n    results = []\n    \n    # Calculate the analytical price once for all comparisons\n    analytical_price = bsm_analytical_price(S0, K, r, SIGMA, T)\n\n    # Test Case 1: (M,N) = (400,400)\n    M1, N1 = 400, 400\n    num_price1 = solve_crank_nicolson(S0, K, r, SIGMA, T, S_MAX, M1, N1)\n    results.append(abs(num_price1 - analytical_price))\n\n    # Test Case 2: (M,N) = (400,4)\n    M2, N2 = 400, 4\n    num_price2 = solve_crank_nicolson(S0, K, r, SIGMA, T, S_MAX, M2, N2)\n    results.append(abs(num_price2 - analytical_price))\n\n    # Test Case 3: (M,N) = (100,100)\n    M3, N3 = 100, 100\n    num_price3 = solve_crank_nicolson(S0, K, r, SIGMA, T, S_MAX, M3, N3)\n    results.append(abs(num_price3 - analytical_price))\n\n    # Test Case 4: Stability Check\n    M4 = 400\n    N_values = [1, 2, 4, 8, 16, 32, 64]\n    overall_stability = True\n    for N_val in N_values:\n        is_stable = solve_crank_nicolson(S0, K, r, SIGMA, T, S_MAX, M4, N_val, stability_check=True)\n        if not is_stable:\n            overall_stability = False\n            break\n    results.append(overall_stability)\n\n    # Print results in the required format\n    print(f\"[{','.join(map(str, results))}]\")\n\nsolve()\n```"}, {"introduction": "除了偏微分方程，BSM 框架的基石是更为根本的无套利原理。这个练习将让您在标准期权之外的场景中灵活运用此原理。我们将为一种奇异期权——“或有保费期权”——进行定价，通过构建一个初始价值为零的合约来反推出公平的合约条款。这种实践将强化您的认知：无套利条件不仅是 BSM 推导的起点，更是为任何金融合约进行定价的通用逻辑。[@problem_id:2420974]", "id": "2420974", "problem": "考虑一个在 Black–Scholes–Merton (BSM) 框架下，针对支付股息股票的欧式看涨期权。在风险中性测度下，股价过程服从具有恒定参数的几何布朗运动：即期价格 $S_0$，波动率 $\\sigma$，连续复利无风险利率 $r$，以及连续股息率 $q$。该看涨期权的行权价为 $K$，到期日为 $T$。您需要对一份或有保费期权（Contingent Premium Option）进行定价，其定义如下：买方在期初不支付任何保费；而是在到期日 $T$ 时，仅当期权为价内期权（in-the-money）时，买方才支付一笔固定的保费 $p$。如果期权到期时为价外期权（out-of-the-money），则买方无需支付任何费用。因此，在到期日 $T$，买方获得的期权收益为 $(S_T - K)^{+} - p \\,\\mathbf{1}_{\\{S_T > K\\}}$，其中 $\\mathbf{1}_{\\{\\cdot\\}}$ 是指示函数。\n\n运用无套利和风险中性定价原则，推导出使得买方在时间 $0$ 的现金流价值为零的公平保费 $p$。然后，在以下参数下对 $p$ 进行数值计算：\n- $S_0 = 100$，\n- $K = 105$，\n- $r = 0.05$ （连续复利，年化），\n- $q = 0.02$ （年化），\n- $\\sigma = 0.20$ （年化），\n- $T = 1$ （年）。\n\n假设标准正态分布的累积分布函数表示为 $N(\\cdot)$。请将 $p$ 的最终数值答案以美元表示，并四舍五入至四位有效数字。", "solution": "所述问题具有科学依据，定义明确，客观，并包含了获得唯一解所需的所有必要信息。这是一个计算金融领域的标准问题，具体涉及奇异期权的定价。因此，我将进行推导和计算。\n\n问题要求计算或有保费期权的公平保费 $p$。该合约的定义特征是其在期初（时间 $t=0$）的净值为零。买方的总现金流发生在到期日 $T$，由收益函数 $V_T = (S_T - K)^{+} - p \\cdot \\mathbf{1}_{\\{S_T > K\\}}$ 给出，其中 $S_T$ 是时间 $T$ 的股价，$K$ 是行权价，$\\mathbf{1}_{\\{\\cdot\\}}$ 是指示函数。项 $(S_T - K)^{+}$ 代表标准欧式看涨期权的收益，而 $p \\cdot \\mathbf{1}_{\\{S_T > K\\}}$是仅当期权到期为价内期权（$S_T > K$）时，买方向卖方支付的或有保费。\n\n根据无套利原则，该合约在时间 $t=0$ 的价值（记为 $V_0$）必须是其未来现金流在无风险利率 $r$ 下折现的风险中性期望值。问题指明该初始价值为零。\n$$V_0 = \\mathbb{E}^{\\mathbb{Q}}\\left[\\exp(-rT) V_T\\right] = 0$$\n其中 $\\mathbb{E}^{\\mathbb{Q}}[\\cdot]$ 是在风险中性测度下计算的期望值。\n\n代入收益 $V_T$：\n$$\\mathbb{E}^{\\mathbb{Q}}\\left[\\exp(-rT) \\left( (S_T - K)^{+} - p \\cdot \\mathbf{1}_{\\{S_T > K\\}} \\right) \\right] = 0$$\n根据期望的线性性质，我们可以将各项分开：\n$$\\mathbb{E}^{\\mathbb{Q}}\\left[\\exp(-rT) (S_T - K)^{+}\\right] - \\mathbb{E}^{\\mathbb{Q}}\\left[\\exp(-rT) p \\cdot \\mathbf{1}_{\\{S_T > K\\}}\\right] = 0$$\n第一项根据定义，是在 Black-Scholes-Merton (BSM) 框架下，针对支付股息股票的标准欧式看涨期权价格，我们将其记为 $C(S_0, K, T, r, q, \\sigma)$。常数保费 $p$ 可以从第二项的期望值中提出。\n$$C(S_0, K, T, r, q, \\sigma) - p \\cdot \\mathbb{E}^{\\mathbb{Q}}\\left[\\exp(-rT) \\mathbf{1}_{\\{S_T > K\\}}\\right] = 0$$\n期望值 $\\mathbb{E}^{\\mathbb{Q}}\\left[\\exp(-rT) \\mathbf{1}_{\\{S_T > K\\}}\\right]$ 是一个现金或无价值看涨期权的价格，该期权在时间 $T$ 当 $S_T>K$ 时支付 1 美元。其价值为 $\\exp(-rT) \\mathbb{Q}(S_T > K)$，其中 $\\mathbb{Q}(S_T > K)$ 是期权到期为价内期权的风险中性概率。\n\n在 BSM 模型中，此概率由 $N(d_2)$ 给出，其中 $N(\\cdot)$ 是标准正态分布的累积分布函数，而 $d_2$ 定义为：\n$$d_2 = \\frac{\\ln(S_0/K) + (r - q - \\sigma^2/2)T}{\\sigma\\sqrt{T}}$$\n因此，关于 $p$ 的方程变为：\n$$C(S_0, K, T, r, q, \\sigma) = p \\cdot \\exp(-rT) N(d_2)$$\n求解 $p$：\n$$p = \\frac{C(S_0, K, T, r, q, \\sigma)}{\\exp(-rT) N(d_2)}$$\n对于带有连续股息率 $q$ 的股票，其欧式看涨期权价格的 BSM 公式为：\n$$C(S_0, K, T, r, q, \\sigma) = S_0 \\exp(-qT) N(d_1) - K \\exp(-rT) N(d_2)$$\n其中\n$$d_1 = \\frac{\\ln(S_0/K) + (r - q + \\sigma^2/2)T}{\\sigma\\sqrt{T}} = d_2 + \\sigma\\sqrt{T}$$\n将 $C$ 的表达式代入 $p$ 的方程中：\n$$p = \\frac{S_0 \\exp(-qT) N(d_1) - K \\exp(-rT) N(d_2)}{\\exp(-rT) N(d_2)}$$\n$$p = \\frac{S_0 \\exp(-qT) N(d_1)}{\\exp(-rT) N(d_2)} - K$$\n$$p = S_0 \\exp((r-q)T) \\frac{N(d_1)}{N(d_2)} - K$$\n这个表达式给出了或有保费 $p$ 的公平价值。另一种解释是 $p = \\mathbb{E}^{\\mathbb{Q}}[S_T - K | S_T > K]$，这是在看涨期权为价内期权的条件下，其收益的期望值。\n\n我们现在根据给定的数值参数来计算 $p$：\n$S_0 = 100$, $K = 105$, $r = 0.05$, $q = 0.02$, $\\sigma = 0.20$, $T = 1$。\n\n首先，我们计算 $d_1$ 和 $d_2$：\n$$d_1 = \\frac{\\ln(100/105) + (0.05 - 0.02 + 0.20^2/2) \\cdot 1}{0.20 \\cdot \\sqrt{1}}$$\n$$d_1 = \\frac{\\ln(100/105) + (0.03 + 0.04/2)}{0.20} = \\frac{\\ln(100/105) + 0.05}{0.20}$$\n$$d_1 \\approx \\frac{-0.04879016 + 0.05}{0.20} = \\frac{0.00120984}{0.20} \\approx 0.0060492$$\n$$d_2 = d_1 - \\sigma\\sqrt{T} \\approx 0.0060492 - 0.20 \\cdot 1 = -0.1939508$$\n接着，我们计算标准正态累积分布函数的值：\n$$N(d_1) \\approx N(0.0060492) \\approx 0.5024128$$\n$$N(d_2) \\approx N(-0.1939508) \\approx 0.4231365$$\n现在，我们可以计算 $p$：\n$$p = S_0 \\exp((r-q)T) \\frac{N(d_1)}{N(d_2)} - K$$\n$$p = 100 \\cdot \\exp((0.05-0.02) \\cdot 1) \\cdot \\frac{0.5024128}{0.4231365} - 105$$\n$$p = 100 \\cdot \\exp(0.03) \\cdot (1.187342) - 105$$\n$$p \\approx 100 \\cdot (1.0304545) \\cdot (1.187342) - 105$$\n$$p \\approx 103.04545 \\cdot 1.187342 - 105$$\n$$p \\approx 122.3483 - 105 = 17.3483$$\n四舍五入到四位有效数字，我们得到 $p = 17.35$。", "answer": "$$\\boxed{17.35}$$"}, {"introduction": "BSM 模型提供的远不止是一个静态价格，它还深刻描绘了期权动态的风险特征。本练习将应用 BSM 推导过程中的核心数学工具——伊藤引理 (Itô's Lemma)，来分析期权与标的资产之间的动态关系。我们将计算一个看涨期权的“贝塔”($\\\\beta$)，从而揭示期权弹性（$\\\\Omega$）这一重要概念，让您对期权内含的杠杆以及其风险状况如何随市场变化有更深的理解。[@problem_id:2390329]", "id": "2390329", "problem": "考虑一个无摩擦市场，其中一支连续交易的标的股票，其价格过程被建模为几何布朗运动（Geometric Brownian Motion, GBM），即 $dS_t = \\mu S_t \\, dt + \\sigma S_t \\, dW_t$，其中 $\\,\\mu \\in \\mathbb{R}\\,$ 和 $\\,\\sigma > 0\\,$ 为常数，$W_t$ 是一个标准布朗运动。令 $C(S,t)$ 表示一份欧式看涨期权在时间 $t$ 的价格，其执行价格为 $K$，到期日为 $T$，该期权以这支股票为标的，股票的连续股息收益率为 $q$，无风险利率为连续复利的 $r$。该期权价格是在 Black–Scholes–Merton 框架下唯一的无套利价格。\n\n定义股票在无穷小时间间隔内的算术回报率为 $r_S = dS_t / S_t$，期权的算术回报率为 $r_C = dC_t / C_t$。定义期权回报率相对于股票回报率的瞬时贝塔（beta）为\n$$\\beta = \\lim_{\\Delta t \\to 0^+} \\frac{\\operatorname{Cov}\\!\\left(r_C, r_S\\right)}{\\operatorname{Var}\\!\\left(r_S\\right)}.$$\n您的任务是，对于下面测试套件中的每一组参数，计算模型所隐含的瞬时贝塔 $\\beta$，并使用与模型假设一致的期权价格及其敏感度的精确解析值。所有输出必须是实数，不含任何单位换算或百分比符号。\n\n测试套件（每种情况为一个元组 $(S, K, r, q, \\sigma, T)$）：\n- 情况1（一般情况，平价）：$(100.0, 100.0, 0.01, 0.02, 0.2, 1.0)$。\n- 情况2（深度实值）：$(150.0, 100.0, 0.03, 0.0, 0.25, 2.0)$。\n- 情况3（深度虚值）：$(50.0, 100.0, 0.01, 0.0, 0.2, 1.0)$。\n- 情况4（短到期时间，平价）：$(100.0, 100.0, 0.0, 0.0, 0.2, 1.0/365.0)$。\n- 情况5（带股息的虚值，长到期时间）：$(100.0, 110.0, 0.05, 0.02, 0.3, 3.0)$。\n\n要求：\n- 对于每种情况，使用上述算术回报率定义，根据给定的模型和参数计算瞬时贝塔 $\\beta$。\n- 将每个结果表示为浮点数，并四舍五入到六位小数。\n- 您的程序应生成单行输出，其中包含用方括号括起来的、以逗号分隔的结果列表，顺序与测试套件相同（例如 $[x_1,x_2,x_3,x_4,x_5]$）。不要包含任何额外的文本或空格。\n\n注意：不涉及角度；没有需要报告的物理单位。所有数值答案必须以实数形式提供（例如，使用 $0.123456$ 而不是 $12.3456\\%$）。", "solution": "该问题要求计算欧式看涨期权回报率相对于其标的股票回报率的瞬时贝塔。我们首先在 Black-Scholes-Merton 框架内严格推导该贝塔的解析表达式。\n\n问题将瞬时贝塔定义为：\n$$ \\beta = \\lim_{\\Delta t \\to 0^+} \\frac{\\operatorname{Cov}\\!\\left(r_C, r_S\\right)}{\\operatorname{Var}\\!\\left(r_S\\right)} $$\n其中 $r_S = dS_t / S_t$ 和 $r_C = dC_t / C_t$ 分别是股票和期权的算术回报率。此公式等价于瞬时协方差率与瞬时方差率之比。\n\n首先，我们分析分母，它涉及股票的回报动态。股票价格 $S_t$ 服从几何布朗运动（GBM）：\n$$ dS_t = \\mu S_t \\, dt + \\sigma S_t \\, dW_t $$\n因此，算术回报率为：\n$$ r_S = \\frac{dS_t}{S_t} = \\mu \\, dt + \\sigma \\, dW_t $$\n该过程在无穷小时间间隔 $dt$ 内的方差完全由随机项驱动。标准布朗运动的增量 $dW_t$ 服从均值为 $0$、方差为 $dt$ 的正态分布。\n$$ \\operatorname{Var}(r_S) = \\operatorname{Var}(\\mu \\, dt + \\sigma \\, dW_t) = \\sigma^2 \\operatorname{Var}(dW_t) = \\sigma^2 dt $$\n瞬时方差率是 $dt$ 的系数，即 $\\sigma^2$。这是 $\\beta$ 表达式的分母。\n\n接下来，我们分析分子，它涉及期权的回报动态。期权价格 $C(S,t)$ 是股票价格 $S$ 和时间 $t$ 的函数。我们应用 Itô 引理来找到 $C(S,t)$ 的动态过程：\n$$ dC_t = \\frac{\\partial C}{\\partial t} dt + \\frac{\\partial C}{\\partial S} dS_t + \\frac{1}{2} \\frac{\\partial^2 C}{\\partial S^2} (dS_t)^2 $$\n二次变分项 $(dS_t)^2$ 的计算如下：\n$$ (dS_t)^2 = (\\mu S_t \\, dt + \\sigma S_t \\, dW_t)^2 = \\sigma^2 S_t^2 (dW_t)^2 = \\sigma^2 S_t^2 dt $$\n在这里，我们忽略 $dt^{3/2}$ 和 $dt^2$ 阶的项。将 $dS_t$ 和 $(dS_t)^2$ 的表达式代入 $dC_t$ 的 Itô 展开式中：\n$$ dC_t = \\frac{\\partial C}{\\partial t} dt + \\frac{\\partial C}{\\partial S} (\\mu S_t \\, dt + \\sigma S_t \\, dW_t) + \\frac{1}{2} \\frac{\\partial^2 C}{\\partial S^2} \\sigma^2 S_t^2 dt $$\n将 $dt$ 和 $dW_t$ 项分组可得：\n$$ dC_t = \\left( \\frac{\\partial C}{\\partial t} + \\mu S_t \\frac{\\partial C}{\\partial S} + \\frac{1}{2} \\sigma^2 S_t^2 \\frac{\\partial^2 C}{\\partial S^2} \\right) dt + \\left( \\sigma S_t \\frac{\\partial C}{\\partial S} \\right) dW_t $$\n期权的算术回报率为 $r_C = dC_t / C_t$：\n$$ r_C = \\frac{1}{C_t} \\left( \\frac{\\partial C}{\\partial t} + \\mu S_t \\frac{\\partial C}{\\partial S} + \\frac{1}{2} \\sigma^2 S_t^2 \\frac{\\partial^2 C}{\\partial S^2} \\right) dt + \\frac{1}{C_t} \\left( \\sigma S_t \\frac{\\partial C}{\\partial S} \\right) dW_t $$\n现在，我们计算在时间间隔 $dt$ 内 $r_C$ 和 $r_S$ 之间的协方差：\n$$ \\operatorname{Cov}(r_C, r_S) = \\operatorname{Cov}\\left( \\frac{1}{C_t} \\sigma S_t \\frac{\\partial C}{\\partial S} dW_t, \\sigma dW_t \\right) $$\n只有随机部分对协方差有贡献。\n$$ \\operatorname{Cov}(r_C, r_S) = \\left( \\frac{1}{C_t} \\sigma S_t \\frac{\\partial C}{\\partial S} \\right) \\cdot \\sigma \\cdot \\operatorname{Var}(dW_t) = \\frac{\\sigma^2 S_t}{C_t} \\frac{\\partial C}{\\partial S} dt $$\n瞬时协方差率是 $dt$ 的系数：$\\frac{\\sigma^2 S_t}{C_t} \\frac{\\partial C}{\\partial S}$。\n\n现在我们可以整合出贝塔的表达式：\n$$ \\beta = \\frac{\\text{Instantaneous Covariance Rate}}{\\text{Instantaneous Variance Rate}} = \\frac{\\frac{\\sigma^2 S_t}{C_t} \\frac{\\partial C}{\\partial S}}{\\sigma^2} $$\n$\\sigma^2$ 项相互抵消，得出一个非常简洁优美的结果：\n$$ \\beta = \\frac{S_t}{C_t} \\frac{\\partial C}{\\partial S} $$\n这个量也被称为期权价格相对于股票价格的弹性，通常用 $\\Omega$ 表示。它是期权的 Delta ($\\Delta_C = \\frac{\\partial C}{\\partial S}$) 与股票价格和期权价格之比的乘积。\n\n为了数值计算 $\\beta$，我们必须按规定使用 Black-Scholes-Merton 模型的解析公式。令 $\\tau = T-t$ 为到期时间。在时间 $t=0$ 时，$\\tau=T$。一份具有连续股息收益率 $q$ 的欧式看涨期权的价格为：\n$$ C(S, t) = S e^{-q \\tau} N(d_1) - K e^{-r \\tau} N(d_2) $$\n期权的 Delta 为：\n$$ \\Delta_C = \\frac{\\partial C}{\\partial S} = e^{-q \\tau} N(d_1) $$\n其中 $N(\\cdot)$ 是标准正态分布的累积分布函数（CDF），$d_1, d_2$ 由下式给出：\n$$ d_1 = \\frac{\\ln(S/K) + (r - q + \\frac{1}{2}\\sigma^2)\\tau}{\\sigma \\sqrt{\\tau}} $$\n$$ d_2 = d_1 - \\sigma \\sqrt{\\tau} $$\n将 $C$ 和 $\\Delta_C$ 的表达式代入我们的 $\\beta$ 公式中：\n$$ \\beta = \\frac{S \\cdot \\left( e^{-q \\tau} N(d_1) \\right)}{S e^{-q \\tau} N(d_1) - K e^{-r \\tau} N(d_2)} $$\n这就是需要实现的最终解析公式。对于每个测试用例，我们将给定的参数 $(S, K, r, q, \\sigma, T)$（其中 $\\tau=T$）代入此方程，并使用标准的数值库来评估正态累积分布函数 $N(\\cdot)$。步骤如下：\n1. 对于每组参数，计算 $\\tau=T$。\n2. 计算 $d_1$ 和 $d_2$。\n3. 评估 $N(d_1)$ 和 $N(d_2)$。\n4. 计算分子项 $S e^{-q \\tau} N(d_1)$。\n5. 计算分母项（即看涨期权价格 $C$），其值为 $S e^{-q \\tau} N(d_1) - K e^{-r \\tau} N(d_2)$。\n6. $\\beta$ 的值是第4步结果与第5步结果之比。\n此过程将应用于所有提供的测试用例。", "answer": "```python\nimport numpy as np\nfrom scipy.stats import norm\n\ndef solve():\n    \"\"\"\n    Computes the instantaneous beta of a European call option for a set of test cases.\n    \"\"\"\n    # Test suite: (S, K, r, q, sigma, T)\n    test_cases = [\n        (100.0, 100.0, 0.01, 0.02, 0.2, 1.0),\n        (150.0, 100.0, 0.03, 0.0, 0.25, 2.0),\n        (50.0, 100.0, 0.01, 0.0, 0.2, 1.0),\n        (100.0, 100.0, 0.0, 0.0, 0.2, 1.0 / 365.0),\n        (100.0, 110.0, 0.05, 0.02, 0.3, 3.0),\n    ]\n\n    def calculate_beta(S, K, r, q, sigma, T):\n        \"\"\"\n        Calculates the instantaneous beta of a European call option.\n        Beta = (S * Delta) / C\n        \"\"\"\n        # Ensure time to maturity is not zero to avoid division by zero in d1/d2.\n        # If maturity is extremely small, the result will be large but finite.\n        if T <= 1e-12:\n            return float('inf')\n\n        # Time to maturity\n        tau = T\n\n        # Calculate d1 and d2\n        sigma_sqrt_tau = sigma * np.sqrt(tau)\n        d1 = (np.log(S / K) + (r - q + 0.5 * sigma**2) * tau) / sigma_sqrt_tau\n        d2 = d1 - sigma_sqrt_tau\n\n        # Evaluate the standard normal CDF\n        N_d1 = norm.cdf(d1)\n        N_d2 = norm.cdf(d2)\n        \n        # Calculate Delta, the first partial derivative of the option price\n        # with respect to the stock price. This is the hedging ratio.\n        # Delta = exp(-q*tau) * N(d1)\n        \n        # We compute beta using the derived analytical formula:\n        # beta = (S * exp(-q*tau) * N(d1)) / (S * exp(-q*tau) * N(d1) - K * exp(-r*tau) * N(d2))\n        \n        numerator = S * np.exp(-q * tau) * N_d1\n        \n        # Denominator is the Black-Scholes call price C\n        denominator = numerator - K * np.exp(-r * tau) * N_d2\n\n        # To avoid division by zero for deep out-of-the-money options where C might be numerically zero\n        if np.abs(denominator) < 1e-12:\n            # If the call price is effectively zero, the beta is theoretically infinite.\n            # In practice, we return a very large number or inf.\n            return float('inf')\n\n        beta = numerator / denominator\n        \n        return beta\n\n    results = []\n    for case in test_cases:\n        beta_value = calculate_beta(*case)\n        # Round the result to six decimal places as required.\n        results.append(f\"{beta_value:.6f}\")\n\n    # Format the final output string\n    print(f\"[{','.join(results)}]\")\n\nsolve()\n```"}]}