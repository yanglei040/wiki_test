{"hands_on_practices": [{"introduction": "虽然米尔斯坦方法因其高强收敛阶而闻名，但在计算期望值（即弱收敛）方面，它是否总比更简单的欧拉-丸山方法更优越呢？此练习将引导你通过一个数值实验，精确地分析并比较这两种方法的弱收敛阶，从而揭示一个关键的细微之处：对于某些问题，米尔斯坦方法在弱收敛方面并不提供额外优势。[@problem_id:2443108]", "id": "2443108", "problem": "您的任务是从第一性原理出发，构建一个数值实验，以在计算经济学和金融学的背景下，评估 Itô 随机微分方程 (SDE) 离散时间近似的弱收敛性质。考虑一个标量 Itô SDE，其形式为 $dX_{t} = a(X_{t})\\,dt + b(X_{t})\\,dW_{t}$，定义在固定时间区间 $[0,T]$ 上，且初值为 $X_{0}=x_{0}$，其中 $W_{t}$ 是一个标准维纳过程。如果对于足够光滑的泛函 $\\varphi$，偏差 $\\left| \\mathbb{E}[\\varphi(X_{T})] - \\mathbb{E}[\\varphi(\\widehat{X}_{T}^{h})] \\right|$ 在 $h \\to 0$ 时与 $\\mathcal{O}(h^{p})$ 同阶，则一个时间步进方法具有 $p$ 阶弱收敛。此处，$h$ 是时间步长，$\\widehat{X}_{T}^{h}$ 是在时间 $T$ 的数值近似。从 Itô 微积分基础和 Itô–Taylor 展开出发，为标量 SDE 推导 Euler–Maruyama 方法和 Milstein 方法的可实现的更新规则，然后利用这些更新规则，计算下述特定模型和泛函的离散时间近似的精确期望，过程中不使用蒙特卡洛抽样。您的推导必须仅依赖于维纳增量的独立性和高斯矩性质，以及条件期望的塔性质。\n\n您必须编写一个完整、可运行的程序，该程序：\n- 为下述测试问题实现 Euler–Maruyama 和 Milstein 格式，通过使用条件期望和高斯随机变量的已知矩，推导出在固定终端时间 $T$ 时 $\\mathbb{E}[\\varphi(\\widehat{X}_{T}^{h})]$ 的闭式表达式，不进行任何抽样。\n- 对每种格式，为一组递减的步长 $h$ 计算绝对弱误差 $\\left| \\mathbb{E}[\\varphi(X_{T})] - \\mathbb{E}[\\varphi(\\widehat{X}_{T}^{h})] \\right|$。\n- 通过对所有给定的步长，执行 $\\log(\\text{error})$ 相对于 $\\log(h)$ 的最小二乘拟合，来估计观测到的弱收敛阶 $p$。\n- 通过直接比较恒等泛函下的绝对弱误差，量化 Milstein 格式在简单期望计算方面是否比 Euler–Maruyama 格式更有优势。\n\n仅使用以下模型、参数和泛函作为测试套件。在所有项目中，时间范围均为 $T = 1.0$。\n\n测试套件：\n- 测试 1 (几何布朗运动)：$dX_{t} = \\mu X_{t}\\,dt + \\sigma X_{t}\\,dW_{t}$，其中 $x_{0} = 1.0$，$\\mu = 0.05$，$\\sigma = 0.2$，$\\varphi(x)=x$。\n- 测试 2 (几何布朗运动)：模型和参数与测试 1 相同，但 $\\varphi(x)=x^{2}$。\n- 测试 3 (Ornstein–Uhlenbeck)：$dX_{t} = \\kappa(\\theta - X_{t})\\,dt + \\sigma\\,dW_{t}$，其中 $x_{0} = 1.0$，$\\kappa = 1.2$，$\\theta = 0.8$，$\\sigma = 0.3$，$\\varphi(x)=x$。\n\n对于每个测试，使用从 SDE 的闭式解中获得的精确模型期望 $\\mathbb{E}[\\varphi(X_{T})]$ 来定义偏差。对于几何布朗运动，您必须使用一阶矩和二阶矩的精确闭式表达式。对于 Ornstein–Uhlenbeck 模型，您必须使用均值的精确闭式表达式。程序中任何地方都不得使用蒙特卡洛近似。\n\n步长：\n- 使用 $N \\in \\{4, 8, 16, 32\\}$ 个均匀步数，使得 $h = T/N$。\n\n输出：\n- 对于三个测试中的每一个，使用在四个 $h$ 值上对 $\\log(\\text{error})$ 与 $\\log(h)$ 进行最小二乘斜率拟合，计算 Euler–Maruyama 和 Milstein 方法的观测弱收敛阶 $p$。\n- 此外，计算两个布尔值，分别指示测试 1 中 Euler–Maruyama 和 Milstein 的绝对弱误差在所有 $h$ 值上是否在 $10^{-12}$ 的绝对容差内一致，以及测试 3 中它们是否在所有 $h$ 值上在 $10^{-12}$ 的绝对容差内一致。\n\n最终输出格式：\n- 您的程序应生成单行输出，其中包含一个用方括号括起来的逗号分隔列表，结果按以下顺序排列：\n$[$observed\\_order\\_Euler\\_Test1, observed\\_order\\_Milstein\\_Test1, observed\\_order\\_Euler\\_Test2, observed\\_order\\_Milstein\\_Test2, observed\\_order\\_Euler\\_Test3, observed\\_order\\_Milstein\\_Test3, equal\\_errors\\_Test1, equal\\_errors\\_Test3$]$。\n- 前六个条目必须是浮点数，后两个条目必须是布尔值。", "solution": "所呈现的问题陈述是计算金融学中一个适定且科学合理的问题。它要求对评估 Itô 随机微分方程 (SDE) 数值格式弱收敛性的方法进行严格的、基于第一性原理的推导和实现。所有必需的参数、模型和解析基准均已提供，问题没有歧义、矛盾或事实错误。因此，该问题被视为有效，并将提供完整的解决方案。\n\n正在考虑的标量 Itô SDE 的一般形式为：\n$$\ndX_t = a(X_t) dt + b(X_t) dW_t\n$$\n初始条件为 $X_0 = x_0$，时间区间为 $[0, T]$。我们的任务是分析弱误差，定义为 $\\left| \\mathbb{E}[\\varphi(X_T)] - \\mathbb{E}[\\varphi(\\widehat{X}_T^h)] \\right|$，其中 $\\widehat{X}_T^h$ 是使用步长 $h$ 在时间 $T$ 的数值近似。本分析将不使用蒙特卡洛模拟，而是通过推导数值解期望值的精确表达式来进行。\n\n首先，我们建立数值格式。时间区间 $[0, T]$ 被离散化为 $N$ 个步长为 $h = T/N$ 的步骤，网格点为 $t_i = ih$。维纳过程在 $[t_i, t_{i+1}]$ 上的增量为 $\\Delta W_i = W_{t_{i+1}} - W_{t_i} \\sim \\mathcal{N}(0, h)$。我们可以写成 $\\Delta W_i = \\sqrt{h} Z_i$，其中 $Z_i \\sim \\mathcal{N}(0, 1)$ 是独立同分布的标准正态随机变量。\n\nEuler-Maruyama (EM) 格式源自 Itô-Taylor 展开的一阶截断：\n$$\n\\widehat{X}_{i+1}^{\\text{EM}} = \\widehat{X}_i + a(\\widehat{X}_i)h + b(\\widehat{X}_i)\\sqrt{h}Z_i\n$$\n\nMilstein 格式包含一个额外的 Itô-Taylor 项，该项涉及一个二重维纳积分。其更新规则为：\n$$\n\\widehat{X}_{i+1}^{\\text{Mil}} = \\widehat{X}_i + a(\\widehat{X}_i)h + b(\\widehat{X}_i)\\sqrt{h}Z_i + \\frac{1}{2}b(\\widehat{X}_i)b'(\\widehat{X}_i)h(Z_i^2 - 1)\n$$\n其中 $b'(x) = \\frac{db}{dx}$。\n\n为了递归地计算期望 $\\mathbb{E}[\\varphi(\\widehat{X}_N^h)]$，我们采用条件期望的塔性质。设 $m_i[\\psi] = \\mathbb{E}[\\psi(\\widehat{X}_i)]$，其中 $\\psi$ 是某个泛函。那么，\n$$\nm_{i+1}[\\psi] = \\mathbb{E}[\\psi(\\widehat{X}_{i+1})] = \\mathbb{E}\\left[\\mathbb{E}[\\psi(\\widehat{X}_{i+1}) | \\mathcal{F}_{t_i}]\\right]\n$$\n其中 $\\mathcal{F}_{t_i}$ 是时间 $t_i$ 的信息流。由于 $\\widehat{X}_i$ 是 $\\mathcal{F}_{t_i}$-可测的，内层期望是关于随机变量 $Z_i$ 求的。这个过程使我们能够推导出 $\\widehat{X}_i$ 各阶矩的递推关系。我们使用标准正态变量的矩：$\\mathbb{E}[Z_i] = 0$，$\\mathbb{E}[Z_i^2] = 1$，$\\mathbb{E}[Z_i^3] = 0$，以及 $\\mathbb{E}[Z_i^4] = 3$。\n\n测试 1：几何布朗运动 (GBM)，$\\varphi(x) = x$。\n该 SDE 为 $dX_t = \\mu X_t dt + \\sigma X_t dW_t$，其中 $a(x) = \\mu x$，$b(x) = \\sigma x$。因此，$b'(x) = \\sigma$。\n均值的精确解为 $\\mathbb{E}[X_T] = x_0 e^{\\mu T}$。\n\n对于 EM 格式，更新规则为 $\\widehat{X}_{i+1} = \\widehat{X}_i(1 + \\mu h + \\sigma \\sqrt{h}Z_i)$。设 $m_i = \\mathbb{E}[\\widehat{X}_i]$。\n$$\nm_{i+1} = \\mathbb{E}\\left[\\mathbb{E}\\left[\\widehat{X}_i(1 + \\mu h + \\sigma \\sqrt{h}Z_i) | \\mathcal{F}_{t_i}\\right]\\right] = \\mathbb{E}\\left[\\widehat{X}_i(1 + \\mu h)\\right] = (1 + \\mu h)m_i\n$$\n对于 Milstein 格式，更新规则为 $\\widehat{X}_{i+1} = \\widehat{X}_i + \\mu \\widehat{X}_i h + \\sigma \\widehat{X}_i \\sqrt{h}Z_i + \\frac{1}{2}(\\sigma \\widehat{X}_i)\\sigma h(Z_i^2 - 1)$。\n$$\nm_{i+1} = \\mathbb{E}\\left[\\mathbb{E}\\left[\\widehat{X}_i \\left(1 + \\mu h + \\sigma \\sqrt{h}Z_i + \\frac{1}{2}\\sigma^2 h(Z_i^2 - 1)\\right) | \\mathcal{F}_{t_i}\\right]\\right]\n$$\n由于 $\\mathbb{E}[Z_i]=0$ 且 $\\mathbb{E}[Z_i^2-1]=0$，括号中项的条件期望简化为 $1 + \\mu h$。因此，$m_{i+1} = (1 + \\mu h)m_i$，这与 EM 的递推关系相同。\n对于这两种格式，当 $m_0 = x_0$ 时，解为 $\\mathbb{E}[\\widehat{X}_N^h] = x_0(1 + \\mu h)^N$。因此，对于此测试用例，它们的弱误差是相同的。\n\n测试 2：GBM，$\\varphi(x) = x^2$。\n精确的二阶矩为 $\\mathbb{E}[X_T^2] = x_0^2 e^{(2\\mu + \\sigma^2)T}$。设 $m_i^{(2)} = \\mathbb{E}[\\widehat{X}_i^2]$。\n\n对于 EM 格式，我们计算 $\\mathbb{E}[\\widehat{X}_{i+1}^2 | \\mathcal{F}_{t_i}]$：\n$$\n\\mathbb{E}[(\\widehat{X}_i(1 + \\mu h + \\sigma\\sqrt{h}Z_i))^2 | \\mathcal{F}_{t_i}] = \\widehat{X}_i^2 \\mathbb{E}[(1 + \\mu h)^2 + 2(1 + \\mu h)\\sigma\\sqrt{h}Z_i + \\sigma^2 h Z_i^2] = \\widehat{X}_i^2 ( (1+\\mu h)^2 + \\sigma^2 h )\n$$\n递推关系为 $m_{i+1}^{(2)} = (1 + 2\\mu h + \\mu^2 h^2 + \\sigma^2 h)m_i^{(2)}$。最终值为 $\\mathbb{E}[(\\widehat{X}_N^h)^2] = x_0^2(1 + (2\\mu + \\sigma^2)h + \\mu^2 h^2)^N$。\n\n对于 Milstein 格式，$\\widehat{X}_{i+1} = \\widehat{X}_i( (1+\\mu h - \\frac{1}{2}\\sigma^2h) + \\sigma\\sqrt{h}Z_i + \\frac{1}{2}\\sigma^2 h Z_i^2)$。设 $\\widehat{X}_{i+1} = \\widehat{X}_i(K_0 + K_1 Z_i + K_2 Z_i^2)$。\n$$\n\\mathbb{E}[\\widehat{X}_{i+1}^2 | \\mathcal{F}_{t_i}] = \\widehat{X}_i^2 \\mathbb{E}[(K_0 + K_1 Z_i + K_2 Z_i^2)^2] = \\widehat{X}_i^2 (K_0^2 + K_1^2 \\mathbb{E}[Z_i^2] + K_2^2 \\mathbb{E}[Z_i^4] + 2K_0K_2\\mathbb{E}[Z_i^2])\n$$\n使用 $\\mathbb{E}[Z_i^2]=1$ 和 $\\mathbb{E}[Z_i^4]=3$，并代入 $K_0=1+\\mu h - \\frac{1}{2}\\sigma^2h$，$K_1=\\sigma\\sqrt{h}$，$K_2=\\frac{1}{2}\\sigma^2h$：\n$$\nm_{i+1}^{(2)} = m_i^{(2)} \\left( (1+\\mu h - \\tfrac{1}{2}\\sigma^2h)^2 + \\sigma^2h + 3(\\tfrac{1}{2}\\sigma^2h)^2 + 2(1+\\mu h - \\tfrac{1}{2}\\sigma^2h)(\\tfrac{1}{2}\\sigma^2h) \\right)\n$$\n展开并合并同类项，得到系数：\n$1 + (2\\mu + \\sigma^2)h + (\\mu^2 + \\frac{1}{2}\\sigma^4)h^2$。\n所以，$\\mathbb{E}[(\\widehat{X}_N^h)^2] = x_0^2(1 + (2\\mu + \\sigma^2)h + (\\mu^2 + \\frac{1}{2}\\sigma^4)h^2)^N$。由于 $\\mathcal{O}(h^2)$ 项的存在，EM 和 Milstein 的误差将会有所不同。\n\n测试 3：Ornstein-Uhlenbeck (OU)，$\\varphi(x) = x$。\n该 SDE 为 $dX_t = \\kappa(\\theta - X_t) dt + \\sigma dW_t$，其中 $a(x) = \\kappa(\\theta - x)$，$b(x) = \\sigma$。\n由于 $b(x)$ 是常数，所以 $b'(x) = 0$。Milstein 修正项 $\\frac{1}{2}b(x)b'(x)h(Z_i^2-1)$ 为零。因此，对于任何具有加性噪声的 SDE，Milstein 格式与 Euler-Maruyama 格式完全相同。\n精确均值为 $\\mathbb{E}[X_T] = x_0 e^{-\\kappa T} + \\theta(1-e^{-\\kappa T})$。\n\n共同的更新规则是 $\\widehat{X}_{i+1} = \\widehat{X}_i + \\kappa(\\theta - \\widehat{X}_i)h + \\sigma\\sqrt{h}Z_i$。设 $m_i = \\mathbb{E}[\\widehat{X}_i]$。\n$$\nm_{i+1} = \\mathbb{E}[\\widehat{X}_i(1-\\kappa h) + \\kappa\\theta h + \\sigma\\sqrt{h}Z_i] = (1-\\kappa h)m_i + \\kappa\\theta h\n$$\n这是一个线性递推关系 $m_{i+1} = A m_i + B$，其中 $A=1-\\kappa h$，$B=\\kappa\\theta h$。从 $m_0=x_0$ 开始，其解为 $m_N = A^N m_0 + B \\frac{1-A^N}{1-A}$。代入 $A$ 和 $B$ 可得：\n$$\n\\mathbb{E}[\\widehat{X}_N^h] = x_0(1-\\kappa h)^N + \\theta(1-(1-\\kappa h)^N)\n$$\n由于 EM 和 Milstein 是相同的格式，它们的弱误差是相同的。\n\n弱收敛阶估计。\n弱收敛阶 $p$ 是从关系式 $\\log(\\text{error}) \\approx \\log(C) + p \\log(h)$ 估计的。我们对步长集合 $h \\in \\{T/4, T/8, T/16, T/32\\}$，对 $\\log(\\text{error})$ 关于 $\\log(h)$ 进行线性最小二乘回归。所得直线的斜率就是估计的阶数 $p$。", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Computes weak convergence orders for Euler-Maruyama and Milstein schemes.\n    \"\"\"\n    # Global parameters\n    T = 1.0\n    Ns = np.array([4, 8, 16, 32])\n    hs = T / Ns\n    log_hs = np.log(hs)\n    abs_tol = 1e-12\n\n    # --- Test Case 1: Geometric Brownian Motion, phi(x)=x ---\n    x0_gbm = 1.0\n    mu = 0.05\n    sigma_gbm = 0.2\n\n    # Exact solution\n    exact_t1 = x0_gbm * np.exp(mu * T)\n\n    errors_em_t1 = []\n    errors_mil_t1 = []\n    \n    for h, N in zip(hs, Ns):\n        # For E[X_N], EM and Milstein recurrences are identical for GBM\n        num_val = x0_gbm * (1 + mu * h)**N\n        error = abs(exact_t1 - num_val)\n        errors_em_t1.append(error)\n        errors_mil_t1.append(error)\n\n    # Convert to numpy arrays for vectorized operations\n    errors_em_t1 = np.array(errors_em_t1)\n    errors_mil_t1 = np.array(errors_mil_t1)\n\n    # Estimate weak order p using polyfit on log-log data\n    # p is the slope (first coefficient)\n    p_em_t1 = np.polyfit(log_hs, np.log(errors_em_t1), 1)[0]\n    p_mil_t1 = np.polyfit(log_hs, np.log(errors_mil_t1), 1)[0]\n    \n    # Check if errors are identical within tolerance\n    equal_errors_t1 = np.allclose(errors_em_t1, errors_mil_t1, rtol=0, atol=abs_tol)\n\n    # --- Test Case 2: Geometric Brownian Motion, phi(x)=x^2 ---\n    # Exact solution for the second moment\n    exact_t2 = x0_gbm**2 * np.exp((2 * mu + sigma_gbm**2) * T)\n\n    errors_em_t2 = []\n    errors_mil_t2 = []\n\n    for h, N in zip(hs, Ns):\n        # Euler-Maruyama E[X_N^2]\n        term_em = 1 + (2 * mu + sigma_gbm**2) * h + mu**2 * h**2\n        num_val_em = x0_gbm**2 * term_em**N\n        errors_em_t2.append(abs(exact_t2 - num_val_em))\n        \n        # Milstein E[X_N^2]\n        term_mil = 1 + (2 * mu + sigma_gbm**2) * h + (mu**2 + 0.5 * sigma_gbm**4) * h**2\n        num_val_mil = x0_gbm**2 * term_mil**N\n        errors_mil_t2.append(abs(exact_t2 - num_val_mil))\n\n    p_em_t2 = np.polyfit(log_hs, np.log(errors_em_t2), 1)[0]\n    p_mil_t2 = np.polyfit(log_hs, np.log(errors_mil_t2), 1)[0]\n\n    # --- Test Case 3: Ornstein-Uhlenbeck, phi(x)=x ---\n    x0_ou = 1.0\n    kappa = 1.2\n    theta = 0.8\n    sigma_ou = 0.3\n\n    # Exact solution\n    exact_t3 = x0_ou * np.exp(-kappa * T) + theta * (1 - np.exp(-kappa * T))\n\n    errors_em_t3 = []\n    errors_mil_t3 = []\n\n    for h, N in zip(hs, Ns):\n        # For OU (additive noise), EM and Milstein schemes are identical\n        term = (1 - kappa * h)**N\n        num_val = term * x0_ou + theta * (1 - term)\n        error = abs(exact_t3 - num_val)\n        errors_em_t3.append(error)\n        errors_mil_t3.append(error)\n\n    errors_em_t3 = np.array(errors_em_t3)\n    errors_mil_t3 = np.array(errors_mil_t3)\n\n    p_em_t3 = np.polyfit(log_hs, np.log(errors_em_t3), 1)[0]\n    p_mil_t3 = np.polyfit(log_hs, np.log(errors_mil_t3), 1)[0]\n    \n    equal_errors_t3 = np.allclose(errors_em_t3, errors_mil_t3, rtol=0, atol=abs_tol)\n\n    # --- Final Output ---\n    results = [\n        p_em_t1, p_mil_t1,\n        p_em_t2, p_mil_t2,\n        p_em_t3, p_mil_t3,\n        equal_errors_t1, equal_errors_t3,\n    ]\n\n    # Format into the required string output\n    # bools will be converted to 'True'/'False'\n    # floats will be converted to their string representation\n    output_str = f\"[{','.join(map(str, results))}]\"\n    print(output_str)\n\nsolve()\n```"}, {"introduction": "我们通常期望高阶数值方法在各方面都表现更佳，但事实并非总是如此。本练习将探讨一个出人意料的情景：米尔斯坦方法由于其高阶修正项，其均方稳定性对时间步长 $\\Delta t$ 的要求可能比欧拉-丸山方法更为苛刻。通过分析和实践，你将了解到数值方法的稳定性边界是一个必须仔细考虑的关键实际问题。[@problem_id:2443132]", "id": "2443132", "problem": "您的任务是构建并分析一个标量随机微分方程，其中 Milstein 格式的数值稳定性对时间步长的选择比 Euler–Maruyama 格式更敏感。考虑具有乘性噪声的标量随机微分方程\n$$\n\\mathrm{d}X_t = a\\,X_t\\,\\mathrm{d}t + b\\,X_t\\,\\mathrm{d}W_t,\n$$\n其中 $a \\in \\mathbb{R}$ 和 $b \\in \\mathbb{R}$ 是常数，$X_0 \\in \\mathbb{R}$ 是一个具有有限二阶矩的给定初始值，$W_t$ 是一个标准维纳过程。在此任务中，您必须使用具体的参数值 $a=-2$ 和 $b=1$。该连续时间系统的零解是一个平衡点，离散时间近似的均方稳定性指的是二阶矩 $\\,\\mathbb{E}[X_n^2]\\,$ 是否随着步数索引 $n$ 的增加而呈几何级数递减。\n\n您的程序必须针对每个给定的时间步长 $\\,\\Delta t\\,$，判断以下两种离散格式在应用于上述方程时，是否在单步均方放大因子严格小于 $\\,1\\,$ 的意义下是均方稳定的：\n- Euler–Maruyama 格式。\n- Milstein 格式。\n\n时间步长的测试集为\n$$\n\\{\\Delta t_1, \\Delta t_2, \\Delta t_3\\} = \\{\\,0.1,\\,0.7,\\,1.0\\,\\}。\n$$\n对于此集合中的每个 $\\,\\Delta t\\,$，请评估两个布尔值：首先是 Euler–Maruyama 格式在该 $\\,\\Delta t\\,$ 下的均方稳定性，其次是 Milstein 格式在该 $\\,\\Delta t\\,$ 下的均方稳定性。当且仅当一个格式的单步均方放大因子严格小于 $\\,1\\,$ 时，声明其为“稳定”，否则为“不稳定”。\n\n您的程序应该生成单行输出，其中包含一个用方括号括起来的逗号分隔列表，结果按以下顺序排列\n$$\n[\\text{EM}(\\Delta t_1),\\ \\text{Mil}(\\Delta t_1),\\ \\text{EM}(\\Delta t_2),\\ \\text{Mil}(\\Delta t_2),\\ \\text{EM}(\\Delta t_3),\\ \\text{Mil}(\\Delta t_3)],\n$$\n其中 $\\,\\text{EM}(\\Delta t)\\,$ 和 $\\,\\text{Mil}(\\Delta t)\\,$ 是布尔值，分别表示 Euler–Maruyama 和 Milstein 格式在时间步长 $\\,\\Delta t\\,$ 下的均方稳定性。要求输出为一个包含六个布尔值的列表，格式化为单行，不含任何额外文本或字符。", "solution": "该问题陈述有效。其科学根据充分，问题设定良好且客观。它提出了一个关于随机微分方程常用离散格式数值稳定性的标准探究，使用了既定定义和具体示例。所有必要的数据和条件均已提供，不存在矛盾或歧义。我们将继续进行推导和求解。\n\n该问题要求分析以下标量随机微分方程 (SDE) 的两种数值格式的均方稳定性：\n$$\n\\mathrm{d}X_t = a X_t \\mathrm{d}t + b X_t \\mathrm{d}W_t,\n$$\n参数为 $a = -2$ 和 $b = 1$。$W_t$ 是一个标准维纳过程。在离散时间点 $t_n = n \\Delta t$，$X(t_n)$ 的数值近似 $X_n$ 被认为是均方稳定的，如果其单步均方放大因子 $R$ 严格小于 1。放大因子定义为 $R = \\mathbb{E}[X_{n+1}^2 | \\mathcal{F}_{t_n}] / X_n^2$，其中 $\\mathbb{E}[ \\cdot | \\mathcal{F}_{t_n}]$ 表示在时刻 $t_n$ 可用信息下的条件期望。由于在第 $n$ 步 $X_n$ 已知，这可以简化为 $R = \\mathbb{E}[(X_{n+1}/X_n)^2]$。稳定性的条件是 $R < 1$。\n\n我们将分别分析 Euler–Maruyama 和 Milstein 格式。在这些推导中，我们使用维纳增量 $\\Delta W_n = W_{t_{n+1}} - W_{t_n}$ 的矩。$\\Delta W_n$ 是一个正态分布随机变量，其均值为零，方差为 $\\Delta t$。具体来说，$\\mathbb{E}[\\Delta W_n] = 0$ 且 $\\mathbb{E}[(\\Delta W_n)^2] = \\Delta t$。对于 Milstein 格式，我们还需要更高阶的矩：$\\mathbb{E}[(\\Delta W_n)^3] = 0$ 和 $\\mathbb{E}[(\\Delta W_n)^4] = 3(\\Delta t)^2$。\n\n**1. Euler–Maruyama (EM) 格式**\n\n对于给定的 SDE，Euler–Maruyama 格式为\n$$\nX_{n+1} = X_n + a X_n \\Delta t + b X_n \\Delta W_n = X_n (1 + a \\Delta t + b \\Delta W_n).\n$$\n单步均方放大因子 $R_{EM}$ 为\n$$\nR_{EM} = \\mathbb{E}\\left[ \\left(\\frac{X_{n+1}}{X_n}\\right)^2 \\right] = \\mathbb{E}[ (1 + a \\Delta t + b \\Delta W_n)^2 ].\n$$\n展开平方项并求期望可得：\n$$\nR_{EM} = \\mathbb{E}[ 1 + (a \\Delta t)^2 + b^2 (\\Delta W_n)^2 + 2a \\Delta t + 2b \\Delta W_n + 2ab \\Delta t \\Delta W_n ]\n$$\n$$\nR_{EM} = 1 + (a \\Delta t)^2 + b^2 \\mathbb{E}[(\\Delta W_n)^2] + 2a \\Delta t + 2b \\mathbb{E}[\\Delta W_n] + 2ab \\Delta t \\mathbb{E}[\\Delta W_n].\n$$\n代入 $\\Delta W_n$ 的矩：\n$$\nR_{EM} = 1 + a^2 (\\Delta t)^2 + b^2 \\Delta t + 2a \\Delta t = (1 + a \\Delta t)^2 + b^2 \\Delta t.\n$$\n为保证均方稳定性，我们需要 $R_{EM} < 1$。当 $a = -2$ 和 $b = 1$ 时：\n$$\n(1 - 2 \\Delta t)^2 + (1)^2 \\Delta t < 1\n$$\n$$\n1 - 4 \\Delta t + 4(\\Delta t)^2 + \\Delta t < 1\n$$\n$$\n4(\\Delta t)^2 - 3 \\Delta t < 0.\n$$\n由于 $\\Delta t > 0$，我们可以除以 $\\Delta t$ 得到稳定性条件：\n$$\n4 \\Delta t - 3 < 0 \\implies \\Delta t < \\frac{3}{4} = 0.75.\n$$\n\n**2. Milstein 格式**\n\n通用的 Milstein 格式是 $X_{n+1} = X_n + f(X_n)\\Delta t + g(X_n)\\Delta W_n + \\frac{1}{2}g(X_n)g'(X_n)((\\Delta W_n)^2 - \\Delta t)$。对于我们的 SDE，$f(x) = ax$ 且 $g(x) = bx$，因此 $g'(x) = b$。该格式变为：\n$$\nX_{n+1} = X_n + a X_n \\Delta t + b X_n \\Delta W_n + \\frac{1}{2}(b X_n)(b)((\\Delta W_n)^2 - \\Delta t)\n$$\n$$\nX_{n+1} = X_n \\left( 1 + a \\Delta t - \\frac{1}{2}b^2 \\Delta t + b \\Delta W_n + \\frac{1}{2}b^2 (\\Delta W_n)^2 \\right).\n$$\n放大因子 $R_{Mil}$ 是括号内项的平方的期望。设 $C = 1 + a \\Delta t - \\frac{1}{2}b^2 \\Delta t$。\n$$\nR_{Mil} = \\mathbb{E}\\left[ \\left( C + b \\Delta W_n + \\frac{1}{2}b^2 (\\Delta W_n)^2 \\right)^2 \\right]\n$$\n$$\nR_{Mil} = \\mathbb{E}\\left[ C^2 + b^2(\\Delta W_n)^2 + \\frac{1}{4}b^4(\\Delta W_n)^4 + 2C b \\Delta W_n + C b^2 (\\Delta W_n)^2 + b^3 (\\Delta W_n)^3 \\right].\n$$\n使用 $\\Delta W_n$ 的矩逐项求期望：\n$$\nR_{Mil} = C^2 + b^2\\Delta t + \\frac{1}{4}b^4(3(\\Delta t)^2) + 2C b(0) + C b^2 \\Delta t + b^3(0)\n$$\n$$\nR_{Mil} = C^2 + C b^2 \\Delta t + b^2 \\Delta t + \\frac{3}{4} b^4 (\\Delta t)^2.\n$$\n将 $C = 1 + a \\Delta t - \\frac{1}{2}b^2 \\Delta t$ 代回表达式中：\n$$\nR_{Mil} = \\left(1 + a \\Delta t - \\frac{1}{2}b^2 \\Delta t\\right)^2 + \\left(1 + a \\Delta t - \\frac{1}{2}b^2 \\Delta t\\right)b^2 \\Delta t + b^2 \\Delta t + \\frac{3}{4}b^4 (\\Delta t)^2\n$$\n$$\nR_{Mil} = \\left((1+a\\Delta t) - \\frac{1}{2}b^2\\Delta t\\right) \\left((1+a\\Delta t) + \\frac{1}{2}b^2\\Delta t\\right) + b^2\\Delta t + \\frac{3}{4}b^4 (\\Delta t)^2\n$$\n$$\nR_{Mil} = (1+a\\Delta t)^2 - \\frac{1}{4}b^4(\\Delta t)^2 + b^2\\Delta t + \\frac{3}{4}b^4(\\Delta t)^2 = (1+a\\Delta t)^2 + b^2\\Delta t + \\frac{1}{2}b^4(\\Delta t)^2.\n$$\n为保证均方稳定性，我们需要 $R_{Mil} < 1$。当 $a = -2$ 和 $b = 1$ 时：\n$$\n(1 - 2 \\Delta t)^2 + \\Delta t + \\frac{1}{2}(1)^4 (\\Delta t)^2 < 1\n$$\n$$\n1 - 4 \\Delta t + 4(\\Delta t)^2 + \\Delta t + \\frac{1}{2}(\\Delta t)^2 < 1\n$$\n$$\n\\frac{9}{2}(\\Delta t)^2 - 3 \\Delta t < 0.\n$$\n除以 $\\Delta t > 0$：\n$$\n\\frac{9}{2} \\Delta t - 3 < 0 \\implies \\Delta t < \\frac{3}{9/2} = \\frac{6}{9} = \\frac{2}{3}.\n$$\n\n**3. 测试用例评估**\n\n我们得到了稳定域：\n- Euler–Maruyama：$\\Delta t < 0.75$\n- Milstein：$\\Delta t < 2/3 \\approx 0.667$\n\n现在我们测试给定的时间步长 $\\{\\Delta t_1, \\Delta t_2, \\Delta t_3\\} = \\{0.1, 0.7, 1.0\\}$。如果一个格式的 $\\Delta t$ 在其稳定域内，则该格式是稳定的。\n\n- 对于 $\\Delta t_1 = 0.1$：\n  - EM: $0.1 < 0.75 \\implies \\text{稳定 (True)}$\n  - Milstein: $0.1 < 2/3 \\implies \\text{稳定 (True)}$\n\n- 对于 $\\Delta t_2 = 0.7$：\n  - EM: $0.7 < 0.75 \\implies \\text{稳定 (True)}$\n  - Milstein: $0.7 > 2/3 \\implies \\text{不稳定 (False)}$\n\n- 对于 $\\Delta t_3 = 1.0$：\n  - EM: $1.0 > 0.75 \\implies \\text{不稳定 (False)}$\n  - Milstein: $1.0 > 2/3 \\implies \\text{不稳定 (False)}$\n\n由此得到的布尔值序列为 [True, True, True, False, False, False]。", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Determines the mean-square stability of the Euler-Maruyama and Milstein schemes\n    for a specific SDE at given timesteps.\n    \"\"\"\n    # Parameters for the SDE: dX = a*X*dt + b*X*dW\n    a = -2.0\n    b = 1.0\n\n    # Test suite of timesteps\n    test_cases = [0.1, 0.7, 1.0]\n\n    results = []\n    \n    # The mean-square stability condition for a scheme is that its one-step\n    # amplification factor R must be strictly less than 1.\n\n    for dt in test_cases:\n        # Euler-Maruyama stability analysis:\n        # The amplification factor is R_EM = (1 + a*dt)^2 + b^2*dt.\n        # The stability condition R_EM < 1 simplifies to:\n        # (1 - 2*dt)^2 + dt < 1\n        # 1 - 4*dt + 4*dt^2 + dt < 1\n        # 4*dt^2 - 3*dt < 0\n        # dt * (4*dt - 3) < 0\n        # Since dt > 0, the condition is 4*dt - 3 < 0.\n        em_stable = (4.0 * dt - 3.0) < 0\n        results.append(em_stable)\n\n        # Milstein stability analysis:\n        # The amplification factor is R_Mil = (1 + a*dt)^2 + b^2*dt + 0.5*b^4*dt^2.\n        # The stability condition R_Mil < 1 simplifies to:\n        # (1 - 2*dt)^2 + dt + 0.5*dt^2 < 1\n        # 1 - 4*dt + 4*dt^2 + dt + 0.5*dt^2 < 1\n        # 4.5*dt^2 - 3*dt < 0\n        # dt * (4.5*dt - 3) < 0\n        # Since dt > 0, the condition is 4.5*dt - 3 < 0.\n        mil_stable = (4.5 * dt - 3.0) < 0\n        results.append(mil_stable)\n\n    # Final print statement in the exact required format.\n    # The str() of a boolean is 'True' or 'False'.\n    print(f\"[{','.join(map(str, results))}]\")\n\nsolve()\n```"}, {"introduction": "在应用随机建模中，正确解释噪声项至关重要，其中 Itô 和 Stratonovich 积分是两种最常见的定义。本练习将带你深入这一核心概念，学习如何使用基于 Itô 积分的米尔斯坦方法来正确模拟一个 Stratonovich 随机微分方程。通过比较正确转换和错误直用两种情况下的轨迹，你将亲身体会到忽视这两种积分定义之间差异所导致的系统性偏差。[@problem_id:3002512]", "id": "3002512", "problem": "考虑一个实值过程 $X_t$ 的标量随机微分方程，其初始值为 $X_0 = x_0$，由单个布朗运动 $W_t$ 驱动。随机积分有两种常用的诠释：Itô 诠释和 Stratonovich 诠释。这两种诠释都定义了有效的随机模型，但它们遵循不同的链式法则，并在转换后产生不同的漂移项。您将研究在使用适用于 Itô 方程的强一阶数值方法（Milstein 方法）时，将同一随机模型分别按 Stratonovich 和 Itô 进行诠释，会如何系统性地产生不同的数值轨迹。\n\n您的任务按顺序如下，从基本定义和经过充分检验的事实出发：\n\n1) 使用 Itô 积分和 Stratonovich 积分的基本定义，以及它们遵循不同变量替换（链式）法则的事实，推导出将 Stratonovich 随机微分方程转换为具有相同样本路径定律的 Itô 随机微分方程所需的漂移修正。您的推导应基于 Itô 公式和 Stratonovich 积分的经典链式法则，并应给出 Itô 漂移项关于 Stratonovich 漂移项和扩散系数的精确表达式。\n\n2) 从强一阶的 Itô-Taylor 展开出发，推导出定义 Milstein 方法用于求解标量 Itô 随机微分方程（漂移项为 $a(x)$，扩散项为 $b(x)$）的显式单步更新。您的结果应包括对导数 $b'(x)$ 和布朗增量 $\\Delta W$ 的依赖关系。\n\n3) 使用第 1 部分的结果来确定如何通过 Itô 积分器模拟 Stratonovich 模型：即，指明在 Milstein 步骤中必须使用哪个漂移项，才能与 Stratonovich 诠释保持一致。\n\n4) 实现一个程序，对于下述每个测试用例，在相同的时间网格上，由相同的布朗增量驱动，构建两个数值轨迹：\n   - 轨迹 S：将模型诠释为 Stratonovich 随机微分方程。将其转换为等价的 Itô 形式，并使用第 2 部分的 Milstein 方法进行积分。\n   - 轨迹 I_mis：将相同的符号系数视为定义了一个 Itô 随机微分方程，不进行任何转换，直接使用第 2 部分的 Milstein 方法进行积分。\n\n对于每个测试用例，返回终端值的标量差 $X_S(T) - X_{I\\_mis}(T)$，其中 $X_S(T)$ 是轨迹 S 的终端值，$X_{I\\_mis}(T)$ 是轨迹 I_mis 的终端值。为确保公平比较，在给定的测试用例中，两个轨迹必须使用完全相同的布朗增量。不涉及任何物理单位。\n\n您必须使用以下测试套件。每个测试用例指定了漂移项和扩散项的函数形式、时间范围、步数以及用于生成布朗增量的随机种子。所有角度（如有）必须作为无量纲实数处理。\n\n- 测试用例 A（乘性噪声；预期终端差不为零，且不随步长减小而消失）：Stratonovich 漂移 $\\alpha(x) = \\lambda x$，扩散 $b(x) = \\sigma x$，参数为 $x_0 = 1.0$，$\\lambda = 0.25$，$\\sigma = 1.0$，最终时间 $T = 1.0$，步数 $N = 2000$，随机种子 $7$。\n- 测试用例 B（加性噪声；两种诠释重合的边界情况）：Stratonovich 漂移 $\\alpha(x) = \\lambda x$，扩散 $b(x) = \\sigma$（常数），参数为 $x_0 = 1.0$，$\\lambda = 0.25$，$\\sigma = 1.0$，最终时间 $T = 1.0$，步数 $N = 2000$，随机种子 $7$。\n- 测试用例 C（使用更精细网格的乘性噪声；证明差异在网格细化后仍然存在）：Stratonovich 漂移 $\\alpha(x) = \\lambda x$，扩散 $b(x) = \\sigma x$，参数为 $x_0 = 1.0$，$\\lambda = 0.25$，$\\sigma = 1.0$，最终时间 $T = 1.0$，步数 $N = 20000$，随机种子 $12345$。\n\n实现细节和约束：\n- 对于每个测试用例，使用指定的种子生成独立同分布的高斯布朗增量 $\\Delta W_n \\sim \\mathcal{N}(0,h)$，其中 $h = T/N$。在为该测试用例积分轨迹 S 和轨迹 I_mis 时，请使用相同的增量。\n- 对于轨迹 S，您必须先将 Stratonovich 模型转换为等价的 Itô 模型，然后应用第 2 部分的 Milstein 方法。\n- 对于轨迹 I_mis，您必须直接使用给定的符号系数应用 Milstein 方法，就像它们定义的是一个 Itô 模型一样，无需转换。\n- 使用双精度浮点运算。\n\n最终输出格式：\n- 您的程序应生成单行输出，其中包含三个测试用例的终端差，表示为一个用方括号括起来的逗号分隔列表，并以标准十进制表示法打印为实数，例如，“[0.12345,0.0,0.23456]”。\n\n唯一可接受的返回类型是指定格式的单个包含三个实数的列表。不应打印任何其他文本。", "solution": "该问题要求进行与随机微分方程（SDE）的 Itô 和 Stratonovich 诠释及其通过 Milstein 方法进行数值求解相关的多步推导和实现。\n\n### 第 1 部分：Itô-Stratonovich 转换规则的推导\n\n一个标量 Stratonovich SDE 由下式给出：\n$$dX_t = \\alpha(X_t) dt + b(X_t) \\circ dW_t$$\n其中 $\\alpha(x)$ 是 Stratonovich 漂移项， $b(x)$ 是扩散系数，$W_t$ 是一个标准维纳过程，`$\\circ$` 表示 Stratonovich 积分。我们寻求一个等价的 Itô SDE，其形式如下：\n$$dX_t = a(X_t) dt + b(X_t) dW_t$$\n其中 $a(x)$ 是 Itô 漂移项，且关于 $dW_t$ 的积分是 Itô 意义下的。\n\nItô 微分 $b(X_t) dW_t$ 和 Stratonovich 微分 $b(X_t) \\circ dW_t$ 之间的基本关系由下式给出：\n$$b(X_t) \\circ dW_t = b(X_t) dW_t + \\frac{1}{2} d[b(X), W]_t$$\n其中 $[b(X), W]_t$ 是 $b(X_t)$ 和 $W_t$ 的二次协变差过程。\n\n为了计算二次协变差，我们首先使用 Itô 引理来表示 $db(X_t)$。过程 $X_t$ 本身遵循 Itô SDE $dX_t = a(X_t) dt + b(X_t) dW_t$。对函数 $b(x)$ 应用 Itô 引理可得：\n$$db(X_t) = b'(X_t) dX_t + \\frac{1}{2} b''(X_t) (dX_t)^2$$\n使用规则 $(dW_t)^2=dt$，$dt \\cdot dW_t = 0$ 和 $(dt)^2=0$ 将其展开：\n$$db(X_t) = b'(X_t) [a(X_t) dt + b(X_t) dW_t] + \\frac{1}{2} b''(X_t) [b(X_t) dW_t]^2$$\n$$db(X_t) = [a(X_t)b'(X_t) + \\frac{1}{2}b(X_t)^2 b''(X_t)] dt + [b(X_t)b'(X_t)] dW_t$$\n二次协变差 $d[b(X), W]_t$ 是 $b(X_t)$ 和 $W_t$ 的随机微分中 $dW_t$ 项的系数之积，再乘以 $dt$。$W_t$ 的微分是 $dW_t = 1 \\cdot dW_t$。因此：\n$$d[b(X), W]_t = (b(X_t)b'(X_t)) \\cdot (1) \\cdot dt = b(X_t)b'(X_t) dt$$\n将此结果代回积分的转换公式中：\n$$b(X_t) \\circ dW_t = b(X_t) dW_t + \\frac{1}{2} b(X_t)b'(X_t) dt$$\n现在，我们将此表达式代入原始的 Stratonovich SDE：\n$$dX_t = \\alpha(X_t) dt + \\left(b(X_t) dW_t + \\frac{1}{2} b(X_t)b'(X_t) dt\\right)$$\n将 $dt$ 项合并，我们得到：\n$$dX_t = \\left(\\alpha(X_t) + \\frac{1}{2} b(X_t)b'(X_t)\\right) dt + b(X_t) dW_t$$\n通过与目标 Itô SDE 形式进行比较，我们确定 Itô 漂移项 $a(x)$ 为：\n$$a(x) = \\alpha(x) + \\frac{1}{2} b(x)b'(x)$$\n这就是所需的漂移修正。附加项 $\\frac{1}{2} b(x)b'(x)$ 通常被称为 Itô-Stratonovich 修正项或噪声诱导漂移。\n\n### 第 2 部分：Milstein 方法的推导\n\nMilstein 方法是一种求解 Itô SDE 的数值格式，它由 Itô-Taylor 展开推导而来。考虑 Itô SDE：\n$$dX_t = a(X_t) dt + b(X_t) dW_t$$\n它在一个小时间步长 $h = t_{n+1} - t_n$ 上的积分形式为：\n$$X_{t_{n+1}} = X_{t_n} + \\int_{t_n}^{t_{n+1}} a(X_s) ds + \\int_{t_n}^{t_{n+1}} b(X_s) dW_s$$\n为了推导 Milstein 方法，我们将被积函数 $a(X_s)$ 和 $b(X_s)$ 在 $X_{t_n}$ 附近展开。\n我们近似 $a(X_s) \\approx a(X_{t_n})$。\n对于 $b(X_s)$，我们使用一阶 Itô-Taylor 展开：$b(X_s) \\approx b(X_{t_n}) + \\mathcal{L}b(X_{t_n})(s-t_n)$，其中 $\\mathcal{L}$ 是 SDE 的生成元。更直接地，我们可以写成：\n$$b(X_s) \\approx b(X_{t_n}) + b'(X_{t_n})(X_s - X_{t_n})$$\n我们用其最低阶项来近似增量 $X_s - X_{t_n}$：\n$$X_s - X_{t_n} \\approx \\int_{t_n}^s b(X_{t_n}) dW_u = b(X_{t_n})(W_s - W_{t_n})$$\n将这些近似代回积分方程：\n$$X_{t_{n+1}} \\approx X_{t_n} + \\int_{t_n}^{t_{n+1}} a(X_{t_n}) ds + \\int_{t_n}^{t_{n+1}} \\left[ b(X_{t_n}) + b'(X_{t_n})b(X_{t_n})(W_s - W_{t_n}) \\right] dW_s$$\n逐项计算积分：\n$$ \\int_{t_n}^{t_{n+1}} a(X_{t_n}) ds = a(X_{t_n}) h $$\n$$ \\int_{t_n}^{t_{n+1}} b(X_{t_n}) dW_s = b(X_{t_n}) \\Delta W_n $$\n其中 $\\Delta W_n = W_{t_{n+1}} - W_{t_n}$ 是维纳增量，是一个服从分布 $\\mathcal{N}(0, h)$ 的随机变量。\n最后一个积分是一个二重 Itô 积分：\n$$ \\int_{t_n}^{t_{n+1}} b(X_{t_n})b'(X_{t_n})(W_s - W_{t_n}) dW_s = b(X_{t_n})b'(X_{t_n}) \\int_{t_n}^{t_{n+1}} (W_s - W_{t_n}) dW_s $$\n这个迭代积分有一个已知的值：\n$$ \\int_{t_n}^{t_{n+1}} (W_s - W_{t_n}) dW_s = \\frac{1}{2} \\left[ (\\Delta W_n)^2 - h \\right] $$\n结合所有项，我们得到 Milstein 方法的单步更新规则，其中 $X_n \\approx X_{t_n}$：\n$$X_{n+1} = X_n + a(X_n)h + b(X_n)\\Delta W_n + \\frac{1}{2} b(X_n)b'(X_n) \\left[ (\\Delta W_n)^2 - h \\right]$$\n该格式的强收敛阶为 $1.0$。\n\n### 第 3 部分：通过 Itô 积分器模拟 Stratonovich 模型\n\n要使用像 Milstein 方法这样的 Itô 积分器来模拟 Stratonovich SDE，必须首先将 Stratonovich SDE 转换为其数学上等价的 Itô 形式。\n给定 Stratonovich 模型：\n$$dX_t = \\alpha(X_t) dt + b(X_t) \\circ dW_t$$\n根据第 1 部分，其等价的 Itô 形式是：\n$$dX_t = \\left(\\alpha(X_t) + \\frac{1}{2} b(X_t)b'(X_t)\\right) dt + b(X_t) dW_t$$\n为了模拟这个过程，我们将 Milstein 方法（来自第 2 部分）应用于此 Itô SDE。我们将 Itô 漂移项确定为 $a(x) = \\alpha(x) + \\frac{1}{2} b(x)b'(x)$，扩散项为 $b(x)$。将这些代入 Milstein 公式，即可得到模拟 Stratonovich SDE 的正确更新规则：\n$$X_{n+1} = X_n + \\left[\\alpha(X_n) + \\frac{1}{2}b(X_n)b'(X_n)\\right]h + b(X_n)\\Delta W_n + \\frac{1}{2} b(X_n)b'(X_n) \\left[ (\\Delta W_n)^2 - h \\right]$$\n\n### 第 4 部分：数值轨迹的说明\n\n问题要求构建两个轨迹：\n1.  **轨迹 S**：此轨迹正确地模拟了 Stratonovich SDE。该数值格式使用推导出的等价 Itô 漂移项 $a_S(x) = \\alpha(x) + \\frac{1}{2}b(x)b'(x)$。更新规则为：\n    $$X_{n+1}^S = X_n^S + a_S(X_n^S)h + b(X_n^S)\\Delta W_n + \\frac{1}{2} b(X_n^S)b'(X_n^S) ((\\Delta W_n)^2 - h)$$\n2.  **轨迹 I_mis**：此轨迹错误地将 Stratonovich SDE 的符号系数 $(\\alpha, b)$ 当作它们从一开始就定义了一个 Itô SDE。因此，该数值格式使用了 Itô 漂移项 $a_{I\\_mis}(x) = \\alpha(x)$，而没有包含关键的修正项。更新规则为：\n    $$X_{n+1}^{I\\_mis} = X_n^{I\\_mis} + a_{I\\_mis}(X_n^{I\\_mis})h + b(X_n^{I\\_mis})\\Delta W_n + \\frac{1}{2} b(X_n^{I\\_mis})b'(X_n^{I\\_mis}) ((\\Delta W_n)^2 - h)$$\n\n两个轨迹之间的差异完全源于积分步骤中使用的漂移项的差异。在每一步中，忽略状态 $X_n^S$ 和 $X_n^{I\\_mis}$ 之间的高阶差异，$X^S$ 的更新会有一个额外的漂移分量 $\\frac{1}{2}b(X_n)b'(X_n)h$。这种系统性差异在模拟过程中累积，导致路径之间的分歧。如果 $b'(x) = 0$（加性噪声），修正项消失，Itô 和 Stratonovich 诠释重合，从而产生相同的轨迹。", "answer": "```python\nimport numpy as np\n\n# It is specified that scipy version 1.11.4 is available,\n# but it is not required for this problem.\n\ndef solve():\n    \"\"\"\n    Main function to run simulations for all test cases and print results.\n    \"\"\"\n    \n    # Define the test cases from the problem statement.\n    # We use 'lam' for the parameter lambda to avoid Python keyword conflict.\n    test_cases = [\n        # Test Case A (multiplicative noise)\n        {\n            'x0': 1.0, 'lam': 0.25, 'sig': 1.0, 'T': 1.0, 'N': 2000, 'seed': 7,\n            'alpha_f': lambda x, lam: lam * x,\n            'b_f': lambda x, sig: sig * x,\n            'b_prime_f': lambda x, sig: sig\n        },\n        # Test Case B (additive noise)\n        {\n            'x0': 1.0, 'lam': 0.25, 'sig': 1.0, 'T': 1.0, 'N': 2000, 'seed': 7,\n            'alpha_f': lambda x, lam: lam * x,\n            'b_f': lambda x, sig: sig, # b(x) is constant\n            'b_prime_f': lambda x, sig: 0.0 # b'(x) is zero\n        },\n        # Test Case C (multiplicative noise, finer grid)\n        {\n            'x0': 1.0, 'lam': 0.25, 'sig': 1.0, 'T': 1.0, 'N': 20000, 'seed': 12345,\n            'alpha_f': lambda x, lam: lam * x,\n            'b_f': lambda x, sig: sig * x,\n            'b_prime_f': lambda x, sig: sig\n        }\n    ]\n\n    results = []\n    \n    for case in test_cases:\n        # Unpack parameters\n        x0, lam, sig, T, N, seed = case['x0'], case['lam'], case['sig'], case['T'], case['N'], case['seed']\n        alpha_f, b_f, b_prime_f = case['alpha_f'], case['b_f'], case['b_prime_f']\n        \n        # Simulation setup\n        h = T / N\n        rng = np.random.default_rng(seed)\n        dw_increments = rng.normal(0.0, np.sqrt(h), N)\n        \n        # --- Trajectory S (Correct Stratonovich simulation via Itô conversion) ---\n        # The Stratonovich SDE: dX = alpha(X)dt + b(X) o dW\n        # has an equivalent Itô SDE: dX = a_S(X)dt + b(X)dW,\n        # where the correct Itô drift is a_S(X) = alpha(X) + 0.5 * b(X) * b'(X).\n        # The Milstein method is applied to this Itô SDE.\n        x_s = x0\n        for n in range(N):\n            alpha_val = alpha_f(x_s, lam)\n            b_val = b_f(x_s, sig)\n            b_prime_val = b_prime_f(x_s, sig)\n            \n            # Correct Itô drift for the equivalent SDE\n            a_s_val = alpha_val + 0.5 * b_val * b_prime_val\n            \n            dw = dw_increments[n]\n            \n            milstein_term = 0.5 * b_val * b_prime_val * (dw**2 - h)\n            x_s += a_s_val * h + b_val * dw + milstein_term\n\n        # --- Trajectory I_mis (Misinformed Itô simulation) ---\n        # The Stratonovich coefficients (alpha, b) are wrongly interpreted\n        # as defining an Itô SDE, dX = alpha(X)dt + b(X)dW.\n        # The Milstein method is applied directly with the incorrect drift `alpha`.\n        x_imis = x0\n        for n in range(N):\n            alpha_val = alpha_f(x_imis, lam)\n            b_val = b_f(x_imis, sig)\n            b_prime_val = b_prime_f(x_imis, sig)\n            \n            # Incorrect Itô drift is taken as alpha\n            a_imis_val = alpha_val\n            \n            dw = dw_increments[n]\n            \n            milstein_term = 0.5 * b_val * b_prime_val * (dw**2 - h)\n            x_imis += a_imis_val * h + b_val * dw + milstein_term\n            \n        # Calculate terminal difference\n        terminal_difference = x_s - x_imis\n        results.append(terminal_difference)\n        \n    # Final print statement in the exact required format.\n    print(f\"[{','.join(map(str, results))}]\")\n\nsolve()\n```"}]}