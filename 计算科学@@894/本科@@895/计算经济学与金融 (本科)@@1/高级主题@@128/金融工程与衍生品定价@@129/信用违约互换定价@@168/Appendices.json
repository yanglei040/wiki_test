{"hands_on_practices": [{"introduction": "我们的动手实践始于一个基础但至关重要的练习，它为信用违约互换（CDS）的定价奠定了理论基石。这个练习将我们置于一个简化的单周期市场环境中，要求我们运用无套利定价的基本原理。通过利用一个可交易风险债券的价格来推断风险中性违约概率，我们能够为一个CDS合约确定公平的保费，这个过程揭示了不同金融工具在无套利市场中的内在联系。[@problem_id:2430981]", "id": "2430981", "problem": "考虑一个从时间 $t=0$ 到时间 $t=1$ 的无摩擦、无套利的单期市场。连续交易的无风险资产在此期间的总回报为 $1+r$，其中 $r=0.04$。一家参考公司有一只面值为 $1$ 的单期零息债券，该债券要么存续至 $t=1$，要么在 $t=1$ 前违约。如果公司存续，债券在 $t=1$ 时支付 $1$；如果违约，债券支付等于面值固定比例 $\\delta$ 的回收款，其中 $\\delta=0.35$。这只风险债券在 $t=0$ 时的当前价格为 $B_0=0.95$。\n\n一份针对该公司的名义本金为 $1$ 的信用违约互换（CDS）也是为同一时期签订的。合同规定，在 $t=1$ 时：\n- 如果公司已违约，保障卖方向保障买方支付违约损失，金额等于 $1-\\delta$，且在这种状态下保障买方不支付任何保费。\n- 如果公司未违约，保障买方向保障卖方支付一笔保费 $c$，且没有保障赔付。\n\n假设无套利，并且违约/不违约是 $t=1$ 时仅有的两种状态，确定使得 CDS 的 $0$ 时刻价值为零的公平保费 $c$。以小数形式提供 $c$。将您的答案四舍五入至四位有效数字。", "solution": "首先将验证问题陈述的科学严谨性、清晰度和完整性。\n\n**步骤 1：提取已知条件**\n- 市场类型：无摩擦、无套利的单期市场，从时间 $t=0$ 到 $t=1$。\n- 无风险资产总回报：$1+r$。\n- 无风险利率：$r=0.04$。\n- 参考公司的零息债券：面值 $1$，于 $t=1$ 到期。\n- $t=1$ 时的状态：存续或违约。\n- $t=1$ 时债券的支付：存续时为 $1$，违约时为 $\\delta$。\n- 回收率：$\\delta = 0.35$。\n- $t=0$ 时债券的当前价格：$B_0 = 0.95$。\n- 信用违约互换 (CDS) 名义本金：$1$。\n- $t=1$ 时若违约 CDS 的支付：保障卖方向保障买方支付 $1-\\delta$；买方不支付保费。\n- $t=1$ 时若存续 CDS 的支付：保障买方向卖方支付保费 $c$；没有保障赔付。\n- 条件：公平保费 $c$ 使得 CDS 的 $0$ 时刻价值为零。\n- 要求输出：$c$ 的值，以四舍五入到四位有效数字的小数表示。\n\n**步骤 2：使用提取的已知条件进行验证**\n- **科学依据：** 该问题基于量化金融的基本原理，特别是无套利定价理论和离散时间、双状态模型中信用衍生品的估值。这些是标准且成熟的概念。\n- **适定性：** 该问题提供了确定公平 CDS 保费 $c$ 唯一值所需的所有信息。市场被描述为完备的，有两个状态和两种可交易资产（无风险资产和风险债券），这允许推导出唯一的风险中性概率测度。\n- **客观性：** 该问题以精确、客观、无歧义的数学和金融语言表述。\n\n**步骤 3：结论与行动**\n该问题有效。它具有科学依据，适定、客观，并包含足够的信息以获得唯一解。下面将推导解决方案。\n\n无套利定价的基本原理规定，任何资产在时间 $t=0$ 的价格是其在未来时间 $t=1$ 的贴现期望支付，其中期望是根据风险中性概率测度计算的。令 $q$表示风险中性的违约概率，因此 $1-q$ 是风险中性的存续概率。无风险总回报为 $R = 1+r = 1+0.04 = 1.04$。\n\n首先，我们使用风险债券的价格 $B_0$ 来确定风险中性概率 $q$。债券在 $t=1$ 时的支付在违约状态下为 $\\delta$，在存续状态下为 $1$。定价方程为：\n$$B_0 = \\frac{1}{1+r} \\left[ q \\cdot \\delta + (1-q) \\cdot 1 \\right]$$\n代入给定值：\n$$0.95 = \\frac{1}{1.04} \\left[ q \\cdot 0.35 + (1-q) \\right]$$\n乘以 $1.04$，我们得到：\n$$0.95 \\times 1.04 = 0.35q + 1 - q$$\n$$0.988 = 1 - 0.65q$$\n这个方程将模型参数与未知的风险中性概率 $q$ 联系起来。我们可以解出 $q$，但更稳妥的做法是解出 CDS 定价公式中出现的含 $q$ 的表达式。从这个方程中，我们可以分离出两个关键项：\n$$q(1-\\delta) = 0.65q = 1 - 0.988 = 0.012$$\n\n接下来，我们分析信用违约互换（CDS）。公平保费 $c$ 的定义是使得合约在 $0$ 时刻的价值 $V_{CDS}(0)$ 为零。对于保障买方，在 $t=1$ 时的支付为：\n- 如果违约（风险中性概率为 $q$）：收到一笔 $1-\\delta$ 的赔付。\n- 如果存续（风险中性概率为 $1-q$）：支付一笔保费 $c$，因此支付为 $-c$。\n\nCDS 在 $0$ 时刻的价值是其贴现期望支付：\n$$V_{CDS}(0) = \\frac{1}{1+r} \\left[ q \\cdot (1-\\delta) + (1-q) \\cdot (-c) \\right]$$\n对于公平保费，设定 $V_{CDS}(0) = 0$，并注意到 $1+r \\neq 0$，我们有：\n$$q(1-\\delta) - (1-q)c = 0$$\n$$c = \\frac{q(1-\\delta)}{1-q}$$\n我们已经求得 $q(1-\\delta) = q(1-0.35) = 0.65q = 0.012$。\n我们现在需要一个 $1-q$ 的表达式。从债券定价方程 $0.988 = 1 - 0.65q$，我们可以将 $q$ 表示为：\n$$q = \\frac{0.012}{0.65}$$\n那么，$1-q$是：\n$$1-q = 1 - \\frac{0.012}{0.65} = \\frac{0.65 - 0.012}{0.65} = \\frac{0.638}{0.65}$$\n现在我们将 $q(1-\\delta)$ 和 $1-q$ 的表达式代入 $c$ 的公式中：\n$$c = \\frac{q(1-\\delta)}{1-q} = \\frac{0.012}{\\frac{0.638}{0.65}}$$\n$$c = \\frac{0.012 \\times 0.65}{0.638} = \\frac{0.0078}{0.638}$$\n现在，我们计算数值：\n$$c \\approx 0.0122257053...$$\n题目要求将答案四舍五入到四位有效数字。第一位有效数字是 $1$，所以我们四舍五入到第五位小数。\n$$c \\approx 0.01223$$\n这就是 CDS 的公平保费。", "answer": "$$\\boxed{0.01223}$$"}, {"introduction": "在掌握了离散时间模型的基础后，我们将进入更贴近现实的连续时间框架。此练习介绍了一种广泛使用的简化形式方法，该方法将违约建模为一个随机到达事件，其强度（或称风险率）为常数。通过为一个假设的“幂次CDS”——其违约赔付与 $(1 - R)^2$ 成正比——定价，你必须从第一性原理出发，构建并平衡保费腿和保护腿的现值，而不是简单地应用标准公式。[@problem_id:2385463] 这个过程将加深你对简化形式模型运作机制以及违约强度和回收率在决定公平价差中所起核心作用的理解。", "id": "2385463", "problem": "考虑一个基于单一参考实体的假设性合约，“权力信用违约互换 (Power-CDS)”。在风险中性测度下，假设设置如下。\n\n- 该合约的期限为 $T = 5$ 年，名义本金为单位1。\n- 连续复利的无风险利率为常数 $r = 0.02$ 每年。\n- 参考实体的违约时间 $\\tau$ 具有恒定的风险（强度）率 $\\lambda = 0.05$ 每年，因此其生存概率为 $\\mathbb{Q}(\\tau > t) = \\exp(-\\lambda t)$，对于 $t \\ge 0$。\n- 在违约时间 $\\tau \\le T$ 时，该合约立即支付每单位名义本金 $(1 - R)^{2}$ 的金额，其中 $R \\in [0,1]$ 是回收率。\n- 回收率 $R$ 与 $\\tau$ 无关，并服从参数为 $\\alpha = 4$ 和 $\\beta = 6$ 的贝塔分布。\n- 保费端以每年恒定费率 $S$ 连续支付，直到违约或到期（以先发生者为准）。\n\n求使合约初始价值为零的平价年化保费费率 $S$（每单位名义本金），即费率 $S$ 应使得保费端的现值等于保护端的现值。将最终答案表示为每年的小数，并四舍五入到四位有效数字。", "solution": "对问题陈述进行验证。\n\n步骤1：提取已知条件\n- 合约类型：基于单一参考实体的“权力信用违约互换 (Power-CDS)”。\n- 合约期限：$T = 5$ 年。\n- 名义本金：$1$ 单位。\n- 无风险利率：$r = 0.02$ 每年，连续复利。\n- 违约时间：$\\tau$。\n- 违约强度（风险率）：$\\lambda = 0.05$ 每年，恒定。\n- 生存概率：$\\mathbb{Q}(\\tau > t) = \\exp(-\\lambda t)$，对于 $t \\ge 0$。\n- 在 $\\tau \\le T$ 时违约的赔付：每单位名义本金 $(1 - R)^2$。\n- 回收率：$R \\in [0,1]$。\n- 独立性：$R$ 和 $\\tau$ 是独立的随机变量。\n- $R$ 的分布：参数为 $\\alpha = 4$ 和 $\\beta = 6$ 的贝塔分布。\n- 保费端：以每年恒定费率 $S$ 连续支付，直到 $\\min(\\tau, T)$。\n- 目标：求使合约初始价值为零的平价年化保费费率 $S$。\n- 输出格式：小数，保留四位有效数字。\n\n步骤2：使用提取的已知条件进行验证\n该问题设置在数理金融的标准风险中性定价框架内。所有组成部分都定义明确。\n- **科学依据**：该模型是一个具有恒定强度的简化形式信用风险模型，是一个标准的教科书案例（例如，Jarrow-Turnbull 模型）。遵循贝塔分布的随机回收率是一种常见且合理的扩展。“Power-CDS”是一种非标准但数学上易于处理的衍生品。该问题在已建立的金融数学中有坚实的科学基础。\n- **适定性**：计算所需的所有参数（$T$、$r$、$\\lambda$、$\\alpha$、$\\beta$）都已明确给出。目标清晰：找到使两个现金流的现值相等的费率 $S$。存在唯一解且可推导。该问题是适定的。\n- **客观性**：问题以精确、客观的数学术语陈述，没有歧义或主观论断。\n\n步骤3：结论与行动\n问题有效。将推导解答。\n\n平价利差 $S$ 是使保费端现值 ($PV_{premium}$) 与保护端现值 ($PV_{protection}$) 相等的费率。估值在风险中性测度 $\\mathbb{Q}$ 下进行。\n条件为 $PV_{protection} = PV_{premium}$。\n\n首先，我们确定保护端的现值 $PV_{protection}$。这是贴现后赔付的风险中性期望。赔付 $(1-R)^2$ 在违约时间 $\\tau$ 支付，前提是 $\\tau \\le T$。\n$$\nPV_{protection} = \\mathbb{E}^{\\mathbb{Q}} \\left[ (1 - R)^2 e^{-r\\tau} \\mathbb{1}_{\\{\\tau \\le T\\}} \\right]\n$$\n鉴于回收率 $R$ 和违约时间 $\\tau$ 是独立的，期望可以分离：\n$$\nPV_{protection} = \\mathbb{E}^{\\mathbb{Q}} \\left[ (1 - R)^2 \\right] \\cdot \\mathbb{E}^{\\mathbb{Q}} \\left[ e^{-r\\tau} \\mathbb{1}_{\\{\\tau \\le T\\}} \\right]\n$$\n第一项 $\\mathbb{E}^{\\mathbb{Q}}[(1-R)^2]$ 使用贝塔分布的性质计算。对于一个随机变量 $X \\sim \\text{Beta}(\\alpha, \\beta)$，其矩是已知的。\n$$\n\\mathbb{E}^{\\mathbb{Q}}[(1-R)^2] = \\mathbb{E}^{\\mathbb{Q}}[1 - 2R + R^2] = 1 - 2\\mathbb{E}^{\\mathbb{Q}}[R] + \\mathbb{E}^{\\mathbb{Q}}[R^2]\n$$\n贝塔分布的一阶矩和二阶矩为：\n$$\n\\mathbb{E}^{\\mathbb{Q}}[R] = \\frac{\\alpha}{\\alpha + \\beta}\n$$\n$$\n\\mathbb{E}^{\\mathbb{Q}}[R^2] = \\frac{\\alpha(\\alpha+1)}{(\\alpha+\\beta)(\\alpha+\\beta+1)}\n$$\n代入给定参数 $\\alpha = 4$ 和 $\\beta = 6$：\n$$\n\\mathbb{E}^{\\mathbb{Q}}[R] = \\frac{4}{4+6} = \\frac{4}{10} = \\frac{2}{5}\n$$\n$$\n\\mathbb{E}^{\\mathbb{Q}}[R^2] = \\frac{4(4+1)}{(4+6)(4+6+1)} = \\frac{4 \\cdot 5}{10 \\cdot 11} = \\frac{20}{110} = \\frac{2}{11}\n$$\n因此，违约时的预期损失平方为：\n$$\n\\mathbb{E}^{\\mathbb{Q}}[(1-R)^2] = 1 - 2\\left(\\frac{2}{5}\\right) + \\frac{2}{11} = 1 - \\frac{4}{5} + \\frac{2}{11} = \\frac{1}{5} + \\frac{2}{11} = \\frac{11 + 10}{55} = \\frac{21}{55}\n$$\n$PV_{protection}$ 表达式中的第二项 $\\mathbb{E}^{\\mathbb{Q}}[e^{-r\\tau} \\mathbb{1}_{\\{\\tau \\le T\\}}]$ 是通过对违约时间概率密度函数 $f(t) = \\lambda e^{-\\lambda t}$（对于 $t \\ge 0$）进行积分来计算的。\n$$\n\\mathbb{E}^{\\mathbb{Q}}[e^{-r\\tau} \\mathbb{1}_{\\{\\tau \\le T\\}}] = \\int_0^T e^{-rt} f(t) \\,dt = \\int_0^T e^{-rt} \\lambda e^{-\\lambda t} \\,dt = \\lambda \\int_0^T e^{-(r+\\lambda)t} \\,dt\n$$\n$$\n\\lambda \\int_0^T e^{-(r+\\lambda)t} \\,dt = \\lambda \\left[ \\frac{e^{-(r+\\lambda)t}}{-(r+\\lambda)} \\right]_0^T = \\frac{\\lambda}{r+\\lambda} \\left( 1 - e^{-(r+\\lambda)T} \\right)\n$$\n合并各项，保护端的完整表达式为：\n$$\nPV_{protection} = \\frac{21}{55} \\cdot \\frac{\\lambda}{r+\\lambda} \\left( 1 - e^{-(r+\\lambda)T} \\right)\n$$\n\n接下来，我们确定保费端的现值 $PV_{premium}$。这是在违约时间 $\\tau$ 或到期日 $T$（以先发生者为准）之前连续支付 $S$ 的现值。这等同于将贴现后的支付率随时间积分，并用截至该时间的生存概率进行加权。\n$$\nPV_{premium} = \\mathbb{E}^{\\mathbb{Q}} \\left[ \\int_0^{\\min(\\tau, T)} S e^{-rt} \\,dt \\right] = S \\int_0^T e^{-rt} \\mathbb{Q}(\\tau > t) \\,dt\n$$\n代入生存概率 $\\mathbb{Q}(\\tau > t) = e^{-\\lambda t}$：\n$$\nPV_{premium} = S \\int_0^T e^{-rt} e^{-\\lambda t} \\,dt = S \\int_0^T e^{-(r+\\lambda)t} \\,dt\n$$\n这个积分可以从前面的计算中认出：\n$$\nPV_{premium} = S \\left( \\frac{1 - e^{-(r+\\lambda)T}}{r+\\lambda} \\right)\n$$\n该项通常被称为“风险年金”。\n\n为了求得平价利差 $S$，我们令 $PV_{premium} = PV_{protection}$：\n$$\nS \\left( \\frac{1 - e^{-(r+\\lambda)T}}{r+\\lambda} \\right) = \\frac{21}{55} \\cdot \\frac{\\lambda}{r+\\lambda} \\left( 1 - e^{-(r+\\lambda)T} \\right)\n$$\n假设 $T > 0$，则项 $\\frac{1 - e^{-(r+\\lambda)T}}{r+\\lambda}$ 不为零，可以从两边消去。这得出了一个非常简单的利差表达式：\n$$\nS = \\lambda \\cdot \\mathbb{E}^{\\mathbb{Q}}[(1-R)^2]\n$$\n这个结果是直观的：保费费率必须等于预期损失率。预期损失率是违约到达率（$\\lambda$）与违约损失期望（对于此合约为 $\\mathbb{E}^{\\mathbb{Q}}[(1-R)^2]$）的乘积。在这个具有即时支付的恒定强度模型中，利率 $r$ 和期限 $T$ 不影响平价利差。\n\n现在，我们代入数值：\n$\\lambda = 0.05$\n$\\mathbb{E}^{\\mathbb{Q}}[(1-R)^2] = \\frac{21}{55}$\n$$\nS = 0.05 \\cdot \\frac{21}{55} = \\frac{5}{100} \\cdot \\frac{21}{55} = \\frac{1}{20} \\cdot \\frac{21}{55} = \\frac{21}{1100}\n$$\n为了将其表示为小数，我们进行除法运算：\n$$\nS = \\frac{21}{1100} \\approx 0.01909090...\n$$\n问题要求答案保留四位有效数字。第一位有效数字是 $1$。随后的数字是 $9$、$0$、$9$。第五位有效数字是 $0$，所以我们不进行进位。\n$$\nS \\approx 0.01909\n$$\n这就是每单位名义本金的平价年化保费费率。", "answer": "$$\n\\boxed{0.01909}\n$$"}, {"introduction": "本章的最后一个实践是一个综合性的高级练习，它模拟了量化分析师在现实世界中面临的挑战。我们从恒定强度的模型过渡到一个更动态的仿射随机强度模型，其中违约风险本身随时间波动。这项任务要求你不仅要理解模型的理论结构(即 $\\lambda_t = Y_t + \\psi$，其中 $Y_t$ 遵循Ornstein–Uhlenbeck过程)，还要推导出相应的生存概率函数，并最终通过数值方法将模型参数校准到一组市场报价上。[@problem_id:2425452] 这项练习完美地融合了理论（随机过程、仿射模型）与实践（编程、数值计算），展示了理论模型如何通过与市场数据拟合而在实践中发挥作用。", "id": "2425452", "problem": "您的任务是构建一个完整且可运行的程序，该程序能将一个仿射简约式违约强度模型校准到合成的信用违约互换 (CDS) 数据上。该模型的具体设定如下。违约强度由 $\\lambda_t = Y_t + \\psi$ 给出，其中 $Y_t$ 在风险中性测度下遵循一个 Ornstein–Uhlenbeck (OU) 过程：\n$$\ndY_t = \\kappa \\left( \\theta - Y_t \\right) dt + \\sigma \\, dW_t,\n$$\n其中 $\\kappa > 0$，$\\sigma \\ge 0$，$\\theta \\in \\mathbb{R}$，且 $Y_0 \\in \\mathbb{R}$。仿射偏移量 $\\psi \\in \\mathbb{R}$ 是一个常数参数。CDS 在简约式方法下进行定价，采用连续保费近似、恒定无风险利率 $r \\ge 0$、分数形式的违约损失率 (LGD) in $(0,1]$，以及保障期限 $T > 0$。\n\n请从以下基础出发，不要使用任何未经证明的简化方法：\n- Ornstein–Uhlenbeck 随机微分方程及其众所周知的高斯性。\n- 生存概率的定义 $S(t) = \\mathbb{E}\\left[ \\exp\\left( - \\int_0^t \\lambda_s \\, ds \\right) \\right]$。\n- 连续保费的公允 CDS 利差 $s^{\\star}(T)$ 满足将违约分支的现值与保费分支的现值等同的方程，\n$$\ns^{\\star}(T) \\int_0^T e^{- r t} S(t) \\, dt = \\mathrm{LGD} \\int_0^T e^{- r t} \\left( - \\frac{dS(t)}{dt} \\right) dt.\n$$\n\n您的程序必须：\n- 在给定 $Y_0$、$\\kappa$、$\\theta$、$\\sigma$ 和 $\\psi$ 的情况下，推导并实现模型所蕴含的生存概率 $S(t)$。\n- 在给定恒定利率 $r$ 和分数形式的 $\\mathrm{LGD}$ 的情况下，通过上述积分方程，使用 $S(t)$ 计算每个报价期限 $T$ 的连续保费公允 CDS 等价利差 $s^{\\star}(T)$。如果需要，您可以使用数值积分。不应使用任何离散计息约定；仅采用连续保费近似。\n- 通过最小化模型隐含的等价利差与每个数据集中所提供的跨期限合成报价之间的平方误差总和，来校准未知参数 $\\psi$ 和 $\\theta$。使用最小二乘准则，并为优化器施加简单且合理的边界条件，以保证其良定性。您应将 $(\\kappa,\\sigma,r,\\mathrm{LGD},Y_0)$ 视为每个数据集的已知输入。\n\n重要单位和约定：\n- 所有利率（包括 $\\kappa$、$\\theta$、$\\sigma$、$Y_0$、$\\psi$、$r$ 和 CDS 等价利差）必须以小数形式处理为“每年”单位（例如，$0.02$ 表示“每年百分之二”）。\n- 此任务不涉及角度或物理单位。\n- 所有输出均以小数报告。\n\n需要在代码中实现并覆盖的测试套件（对于以下每个案例，首先使用“真实”参数计算在指定期限下的模型隐含等价利差 $s^{\\star}(T)$ 来生成合成 CDS 报价，然后将 $\\kappa$、$\\sigma$、$Y_0$、$r$ 和 $\\mathrm{LGD}$ 视为已知，从这些报价中反向校准 $\\psi$ 和 $\\theta$）：\n\n- 案例 A (理想路径，中等均值回归与波动率)：\n  - 已知输入：$\\kappa = 1.0$，$\\sigma = 0.1$，$Y_0 = 0.02$，$r = 0.02$，$\\mathrm{LGD} = 0.6$，期限 $T \\in \\{ 1.0, 3.0, 5.0 \\}$ 年。\n  - 用于生成数据的真实参数：$\\theta_{\\text{true}} = 0.015$，$\\psi_{\\text{true}} = 0.01$。\n\n- 案例 B (边界条件，确定性强度分量，$\\sigma = 0$)：\n  - 已知输入：$\\kappa = 0.7$，$\\sigma = 0.0$，$Y_0 = 0.03$，$r = 0.01$，$\\mathrm{LGD} = 0.6$，期限 $T \\in \\{ 1.0, 2.0, 4.0 \\}$ 年。\n  - 用于生成数据的真实参数：$\\theta_{\\text{true}} = 0.03$，$\\psi_{\\text{true}} = 0.005$。\n\n- 案例 C (快速均值回归，较高偏移量)：\n  - 已知输入：$\\kappa = 3.0$，$\\sigma = 0.2$，$Y_0 = 0.01$，$r = 0.015$，$\\mathrm{LGD} = 0.6$，期限 $T \\in \\{ 2.0, 5.0, 7.0 \\}$ 年。\n  - 用于生成数据的真实参数：$\\theta_{\\text{true}} = 0.012$，$\\psi_{\\text{true}} = 0.02$。\n\n算法要求：\n- 对于每个案例，首先使用真实参数计算合成报价。然后，仅使用这些报价，通过最小二乘法校准 $\\psi$ 和 $\\theta$，并施加简单边界条件，使 $\\psi$ 严格为正，$\\theta$ 处于一个宽泛且合理的区间内。对所有需要的积分使用稳健的数值积分方法。\n- 输出格式：您的程序应生成一行输出，其中包含一个扁平化的校准参数列表，顺序为\n$$\n[\\psi_A, \\theta_A, \\psi_B, \\theta_B, \\psi_C, \\theta_C],\n$$\n其中下标表示案例。将每个值四舍五入到 $6$ 位小数。例如，一个可接受的格式为 $[0.010000,0.015000,0.005000,0.030000,0.020000,0.012000]$。\n\n您的实现必须是自包含的，不需要用户输入，并且不访问任何外部资源。最终打印的行必须与上述描述的格式完全匹配。所有量都必须以每年的小数形式计算。", "solution": "问题陈述已经过验证，并被认定为有效。其科学基础是量化金融的原理，特别是仿射期限结构模型。该模型，即一个驱动违约强度的 Ornstein-Uhlenbeck 过程，是一个标准构造（属于 Vasicek 类型模型）。问题是良定的 (well-posed)，为通过数值校准获得唯一解提供了充分信息，并且没有歧义或矛盾。它代表了计算金融中的一个标准练习。\n\n解决方案分三个主要阶段进行：第一，生存概率函数的推导；第二，信用违约互换 (CDS) 利差计算的公式化；第三，数值校准过程的说明。\n\n### 1. 生存概率推导\n\n违约强度由仿射过程 $\\lambda_t = Y_t + \\psi$ 给出，其中 $Y_t$ 在风险中性测度 $\\mathbb{Q}$ 下遵循 Ornstein-Uhlenbeck (OU) 过程：\n$$\ndY_t = \\kappa (\\theta - Y_t) dt + \\sigma dW_t\n$$\n初始条件为 $Y_0$。参数 $\\kappa$、$\\theta$、$\\sigma$ 和 $\\psi$ 均为常数。\n\n到时间 $t$ 的生存概率 $S(t)$ 定义为与累积违约强度相关的贴现因子的风险中性期望：\n$$\nS(t) = \\mathbb{E}^{\\mathbb{Q}} \\left[ \\exp\\left( - \\int_0^t \\lambda_s ds \\right) \\bigg| \\mathcal{F}_0 \\right]\n$$\n代入 $\\lambda_s = Y_s + \\psi$ 并利用积分的线性性质可得：\n$$\nS(t) = \\mathbb{E}^{\\mathbb{Q}} \\left[ \\exp\\left( - \\int_0^t (Y_s + \\psi) ds \\right) \\right] = \\exp(-\\psi t) \\mathbb{E}^{\\mathbb{Q}} \\left[ \\exp\\left( - \\int_0^t Y_s ds \\right) \\right]\n$$\n该期望项是仿射过程的一个标准结果。对于定义的 $Y_t$ 这个 OU 过程，该期望已知具有关于初始状态 $Y_0$ 的指数仿射形式：\n$$\n\\mathbb{E}^{\\mathbb{Q}} \\left[ \\exp\\left( - \\int_0^t Y_s ds \\right) \\right] = \\exp\\left( A(t) - B(t)Y_0 \\right)\n$$\n其中 $A(t)$ 和 $B(t)$ 是时间的确定性函数。这些函数解一个由 Feynman-Kac 定理推导出的常微分方程组。标准解为：\n$$\nB(t) = \\frac{1}{\\kappa} \\left( 1 - e^{-\\kappa t} \\right)\n$$\n以及\n$$\nA(t) = \\left( \\theta - \\frac{\\sigma^2}{2\\kappa^2} \\right) [B(t) - t] - \\frac{\\sigma^2}{4\\kappa} B(t)^2\n$$\n这个 $A(t)$ 和 $B(t)$ 的公式是稳健的，即使在 $\\sigma = 0$（此时模型变为确定性的）的情况下也成立。$\\kappa \\to 0$ 的情况代表一个不同的过程（布朗运动），在此不作讨论，因为问题指定 $\\kappa > 0$。\n\n综合这些结果，生存概率 $S(t)$ 由以下解析表达式给出：\n$$\nS(t) = \\exp \\left( -\\psi t + A(t) - B(t)Y_0 \\right)\n$$\n\n### 2. CDS 利差计算\n\n连续保费 CDS 的公允等价利差，记作 $s^{\\star}(T)$，由一个使保费分支现值 (PV) 与违约分支现值 (PV) 相等的方程定义：\n$$\ns^{\\star}(T) \\int_0^T e^{-rt} S(t) dt = \\mathrm{LGD} \\int_0^T e^{-rt} \\left( -\\frac{dS(t)}{dt} \\right) dt\n$$\n其中 $r$ 是恒定无风险利率，$\\mathrm{LGD}$ 是分数形式的违约损失率。\n\n令保费分支的现值为 $PL(T) = \\int_0^T e^{-rt} S(t) dt$。右侧的积分代表按 LGD 缩放的违约概率密度的现值，可以通过分部积分法简化。令 $u = e^{-rt}$ 和 $dv = -S'(t)dt$。则 $du = -re^{-rt}dt$ 且 $v = S(t)$。\n$$\n\\int_0^T e^{-rt}(-S'(t))dt = \\left[ e^{-rt}S(t) \\right]_0^T - \\int_0^T S(t)(-re^{-rt})dt\n$$\n$$\n= \\left( e^{-rT}S(T) - S(0) \\right) + r \\int_0^T e^{-rt}S(t)dt\n$$\n由于 $S(0) = 1$（时间零点的生存概率为 1），这变为：\n$$\n\\int_0^T e^{-rt}(-S'(t))dt = e^{-rT}S(T) - 1 + r \\cdot PL(T)\n$$\n等等，此处的推导有误。重新评估分部积分法：\n令 $u = e^{-rt}$ 和 $dv = -S'(t)dt$。积分为 $\\int u \\, dv$。\n根据分部积分法：$\\int u \\, dv = uv - \\int v \\, du$。\n$uv = e^{-rt}(-S(t))$。因此 $[uv]_0^T = -e^{-rT}S(T) - (-e^0 S(0)) = 1-e^{-rT}S(T)$。\n$\\int v \\, du = \\int_0^T (-S(t))(-re^{-rt})dt = r \\int_0^T e^{-rt}S(t)dt = r \\cdot PL(T)$。\n因此，违约分支积分的正确表达式是：\n$$\n\\int_0^T e^{-rt}(-S'(t))dt = 1 - e^{-rT}S(T) - r \\cdot PL(T)\n$$\n这个表达式在数值上更稳定，因为它避免了对 $S(t)$ 的求导。\n\n公允利差 $s^{\\star}(T)$ 于是可以通过求解得到：\n$$\ns^{\\star}(T) = \\mathrm{LGD} \\frac{1 - e^{-rT}S(T) - r \\cdot PL(T)}{PL(T)}\n$$\n$PL(T)$ 的积分没有闭式解，必须通过数值积分来计算。\n\n### 3. 校准过程\n\n目标是通过最小化在一组期限 $\\{T_i\\}_{i=1}^N$ 上，模型隐含利差 $s^{\\star}_{\\text{model}}(T_i; \\mathbf{p})$ 与人工生成的市场报价 $s^{\\text{quote}}_i$ 之间的平方差总和，来校准参数 $\\mathbf{p} = (\\psi, \\theta)$。\n\n需要最小化的目标函数是：\n$$\nJ(\\psi, \\theta) = \\sum_{i=1}^N \\left( s^{\\star}_{\\text{model}}(T_i; \\psi, \\theta) - s^{\\text{quote}}_i \\right)^2\n$$\n每次校准的已知参数为 $(\\kappa, \\sigma, Y_0, r, \\mathrm{LGD})$。这是一个非线性最小二乘问题。它将使用一个拟牛顿优化算法（具体为能处理箱式约束的 L-BFGS-B）在参数边界的约束下求解。按照规定，我们将施加 $\\psi > 0$ 并将 $\\theta$ 限制在一个宽泛且合理的区间内，以确保解的稳定性和金融合理性。\n\n每个测试案例的总体算法如下：\n1.  使用该案例的“真实”参数 $(\\psi_{\\text{true}}, \\theta_{\\text{true}})$ 和其他已知参数，通过实现上述推导的利差公式，计算每个期限 $T_i$ 的合成 CDS 报价 $s^{\\text{quote}}_i$。\n2.  定义目标函数 $J(\\psi, \\theta)$，该函数接受候选参数，计算相应的模型利差，并返回与合成报价的平方误差总和。\n3.  使用一个优化程序（`scipy.optimize.minimize`），连同初始猜测值和预定义边界，找到最小化 $J$ 的参数向量 $(\\hat{\\psi}, \\hat{\\theta})$。\n4.  得到的参数对 $(\\hat{\\psi}, \\hat{\\theta})$ 构成该案例的校准参数。对所有指定的测试案例重复此过程。", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\nfrom scipy.integrate import quad\nfrom scipy.optimize import minimize\n\ndef B_func(t, kappa):\n    \"\"\"\n    Calculates the B(t) function for the affine model.\n    B(t) = (1/kappa) * (1 - exp(-kappa * t))\n    \"\"\"\n    if np.isclose(kappa, 0.0):\n        # Taylor expansion for small kappa: (1 - (1 - kt + (kt)^2/2)) / k = t - kt^2/2 -> t\n        return t\n    return (1.0 - np.exp(-kappa * t)) / kappa\n\ndef A_func(t, kappa, theta, sigma):\n    \"\"\"\n    Calculates the A(t) function for the affine model.\n    A(t) = (theta - sigma^2/(2*kappa^2)) * [B(t) - t] - (sigma^2 / (4*kappa)) * B(t)^2\n    \"\"\"\n    if np.isclose(kappa, 0.0):\n        # Limit for kappa -> 0 with dY_t = sigma * dW_t\n        # This case is not required by problem spec (kappa>0) but good for robustness.\n        # Direct derivation gives A(t) = sigma^2 * t^3 / 6\n        return sigma**2 * t**3 / 6.0\n        \n    b_val = B_func(t, kappa)\n    \n    # This calculation can be unstable if kappa is very small.\n    # Grouping terms to improve stability. theta * (B(t) - t) is one part.\n    # The sigma part: sigma^2 * [ - (B(t)-t)/(2k^2) - B(t)^2/(4k) ]\n    # = sigma^2 * [ (t-B(t))/(2k^2) - B(t)^2/(4k) ]\n    # = sigma^2/(4k^3) * [ 2k(t-B(t)) - k^2 B(t)^2 ]\n    # 2k(t-B(t)) = 2k(t - (1-e^-kt)/k) = 2kt - 2 + 2e^-kt\n    # k^2 B(t)^2 = (1-e^-kt)^2 = 1 - 2e^-kt + e^-2kt\n    # sum = 2kt - 3 + 4e^-kt - e^-2kt\n    # So A(t) = theta(B(t)-t) + sigma^2/(4k^3) * (2kt - 3 + 4e^-kt - e^-2kt)\n    # The standard form is generally stable enough for kappa values not extremely close to 0.\n    term1_factor = theta - (sigma**2) / (2.0 * kappa**2)\n    term1 = term1_factor * (b_val - t)\n    term2 = -(sigma**2) / (4.0 * kappa) * b_val**2\n    return term1 + term2\n\ndef survival_prob(t, Y0, kappa, theta, sigma, psi):\n    \"\"\"\n    Calculates the survival probability S(t) given model parameters.\n    S(t) = exp(-psi*t + A(t) - B(t)*Y0)\n    \"\"\"\n    if t < 1e-9:  # Survival probability at t=0 is 1.\n        return 1.0\n\n    a_val = A_func(t, kappa, theta, sigma)\n    b_val = B_func(t, kappa)\n    \n    exponent = -psi * t + a_val - b_val * Y0\n    return np.exp(exponent)\n\ndef calculate_spread(T_maturity, Y0, kappa, theta, sigma, psi, r, LGD):\n    \"\"\"\n    Calculates the fair CDS par spread s*(T) for a given maturity.\n    \"\"\"\n    # Integrand for the premium leg PV\n    integrand_pl = lambda t: np.exp(-r * t) * survival_prob(t, Y0, kappa, theta, sigma, psi)\n    \n    # Calculate premium leg PV using numerical quadrature\n    pl_pv, quad_err = quad(integrand_pl, 0, T_maturity, epsabs=1e-9, epsrel=1e-9)\n    \n    if pl_pv < 1e-12:\n        return np.inf  # Avoid division by zero\n        \n    s_T = survival_prob(T_maturity, Y0, kappa, theta, sigma, psi)\n    \n    # PV of default leg per unit of LGD, derived using integration by parts\n    dl_pv_per_lgd = 1.0 - np.exp(-r * T_maturity) * s_T - r * pl_pv\n    \n    spread = LGD * dl_pv_per_lgd / pl_pv\n    return spread\n\ndef solve():\n    \"\"\"\n    Main function to run test cases, calibrate parameters, and print results.\n    \"\"\"\n    test_cases = [\n        {\n            \"name\": \"Case A\",\n            \"knowns\": {\"kappa\": 1.0, \"sigma\": 0.1, \"Y0\": 0.02, \"r\": 0.02, \"LGD\": 0.6},\n            \"maturities\": [1.0, 3.0, 5.0],\n            \"true_params\": {\"theta\": 0.015, \"psi\": 0.01},\n        },\n        {\n            \"name\": \"Case B\",\n            \"knowns\": {\"kappa\": 0.7, \"sigma\": 0.0, \"Y0\": 0.03, \"r\": 0.01, \"LGD\": 0.6},\n            \"maturities\": [1.0, 2.0, 4.0],\n            \"true_params\": {\"theta\": 0.03, \"psi\": 0.005},\n        },\n        {\n            \"name\": \"Case C\",\n            \"knowns\": {\"kappa\": 3.0, \"sigma\": 0.2, \"Y0\": 0.01, \"r\": 0.015, \"LGD\": 0.6},\n            \"maturities\": [2.0, 5.0, 7.0],\n            \"true_params\": {\"theta\": 0.012, \"psi\": 0.02},\n        },\n    ]\n\n    all_results = []\n    \n    for case in test_cases:\n        knowns = case[\"knowns\"]\n        true_params = case[\"true_params\"]\n        maturities = case[\"maturities\"]\n\n        # Step 1: Generate synthetic CDS quotes using the true parameters\n        synthetic_quotes = [\n            calculate_spread(\n                T_maturity=T,\n                Y0=knowns[\"Y0\"],\n                kappa=knowns[\"kappa\"],\n                theta=true_params[\"theta\"],\n                sigma=knowns[\"sigma\"],\n                psi=true_params[\"psi\"],\n                r=knowns[\"r\"],\n                LGD=knowns[\"LGD\"],\n            ) for T in maturities\n        ]\n\n        # Step 2: Define the objective function for calibration\n        def objective_function(params):\n            psi_cal, theta_cal = params\n            \n            # Simple check for parameter validity\n            if psi_cal <= 0:\n                return 1e9 # Return a large number if parameters are out of bounds\n\n            model_spreads = [\n                calculate_spread(\n                    T_maturity=T,\n                    Y0=knowns[\"Y0\"],\n                    kappa=knowns[\"kappa\"],\n                    theta=theta_cal,\n                    sigma=knowns[\"sigma\"],\n                    psi=psi_cal,\n                    r=knowns[\"r\"],\n                    LGD=knowns[\"LGD\"],\n                ) for T in maturities\n            ]\n            \n            error = np.sum((np.array(model_spreads) - np.array(synthetic_quotes))**2)\n            return error\n\n        # Step 3: Calibrate parameters using least squares minimization\n        initial_guess = [0.01, 0.01]  # Generic initial guess\n        bounds = [(1e-7, 0.5), (-0.1, 0.5)] # Bounds: psi > 0, theta in a wide range\n\n        result = minimize(\n            objective_function,\n            initial_guess,\n            method='L-BFGS-B',\n            bounds=bounds,\n            options={'ftol': 1e-12, 'gtol': 1e-12}\n        )\n        \n        calibrated_psi, calibrated_theta = result.x\n        all_results.extend([calibrated_psi, calibrated_theta])\n\n    # Final print statement in the exact required format.\n    formatted_results = [f\"{val:.6f}\" for val in all_results]\n    print(f\"[{','.join(formatted_results)}]\")\n\nsolve()\n```"}]}