{"hands_on_practices": [{"introduction": "这个练习将抽象的“大O表示法”与具体的硬件需求直接联系起来。我们将探讨一个算法的复杂度（在这里是一个常见的投资组合优化程序）如何决定我们需要多强大的计算机才能在相同时间内处理更大的数据集。这个练习将清晰地展示一个三次方的算法复杂度 $O(N^3)$ 带来的实际影响。[@problem_id:2380750]", "id": "2380750", "problem": "一位投资组合经理通过对一个 $N \\times N$ 的协方差矩阵求逆来构建一个包含 $N$ 种资产的均值-方差最优投资组合。该求逆操作使用的是一个直接线性代数程序，其最坏情况下的运行时间复杂度为 $O(N^{3})$。假设运行时间模型中的比例常数不依赖于 $N$，并且您可以改变的唯一硬件特性是中央处理器 (CPU) 的速度，该速度以每秒浮点运算次数 (FLOPS) 来衡量。\n\n如果资产数量从 $N$ 翻倍到 $2N$，并且要求完成投资组合构建的挂钟时间保持不变，那么 CPU 速度必须增加的最小倍数是多少？\n\n答案规格：\n- 以单个实数形式提供您的答案，该实数代表速度必须增加的倍数（不带单位）。\n- 无需四舍五入；提供精确值。", "solution": "首先对问题陈述进行验证。\n\n步骤 1：提取已知条件\n- 一个投资组合由 $N$ 种资产构建。\n- 构建过程涉及对一个 $N \\times N$ 的协方差矩阵求逆。\n- 矩阵求逆程序的运行时间复杂度在最坏情况下为 $O(N^3)$。\n- 运行时间模型中的比例常数不依赖于 $N$。\n- 唯一可以改变的硬件特性是 CPU 速度，以 FLOPS 为单位。\n- 资产数量从 $N$ 翻倍到 $2N$。\n- 完成构建所需的挂钟时间必须保持不变。\n- 目标是求出 CPU 速度必须增加的最小乘法因子。\n\n步骤 2：使用提取的已知条件进行验证\n根据验证标准对问题进行评估。\n- **科学基础**：这个问题基于计算复杂性理论和线性代数，这两者是计算金融学的基础。使用 $O(N^3)$ 的复杂度进行矩阵求逆对应于高斯消元法等标准算法。这是一个用于分析算法性能的有效且典型的模型。\n- **适定性**：这个问题是适定的。它在问题规模 ($N$)、计算复杂度 ($O(N^3)$) 和执行时间之间提供了清晰的关系，并要求一个具体、可计算的因子。存在唯一解。\n- **客观性**：问题的陈述精确、量化且客观。\n\n该问题没有表现出任何指定的缺陷。它在科学上是合理的，可形式化的，完整的，并且结构良好。\n\n步骤 3：结论与行动\n问题有效。下面将推导解决方案。\n\n执行一次计算所需的挂钟时间 $T$ 是浮点运算总数 $C$ 除以处理器的速度 $S$（以每秒浮点运算次数 (FLOPS) 为单位）。该关系由下式给出：\n$$T = \\frac{C}{S}$$\n\n问题陈述指出，运行时间与操作数量成正比，其时间复杂度为 $O(N^3)$，其中 $N$ 是资产数量。我们可以将操作数 $C$ 表示为 $N$ 的函数：\n$$C(N) = k N^3$$\n其中 $k$ 是一个比例常数，根据题意，它不依赖于 $N$。\n\n让我们定义两种情景。\n情景 1：初始情况。\n- 资产数量：$N_1 = N$\n- 操作数量：$C_1 = C(N_1) = k N_1^3 = k N^3$\n- CPU 速度：$S_1$\n此情景下的挂钟时间为：\n$$T_1 = \\frac{C_1}{S_1} = \\frac{k N^3}{S_1}$$\n\n情景 2：资产数量增加的情况。\n- 资产数量：$N_2 = 2N$\n- 操作数量：$C_2 = C(N_2) = k (2N)^3 = k (8 N^3) = 8 k N^3$\n- CPU 速度：$S_2$\n此情景下的挂钟时间为：\n$$T_2 = \\frac{C_2}{S_2} = \\frac{8 k N^3}{S_2}$$\n\n问题要求两种情景下的挂钟时间保持不变，即 $T_1 = T_2$。\n$$\\frac{k N^3}{S_1} = \\frac{8 k N^3}{S_2}$$\n\n题目要求我们求出 CPU 速度必须增加的乘法因子，即比率 $\\frac{S_2}{S_1}$。为了求出这个比率，我们可以重新整理方程。假设 $k > 0$ 且 $N > 0$，我们可以将等式两边同时除以非零量 $k N^3$：\n$$\\frac{1}{S_1} = \\frac{8}{S_2}$$\n\n现在，我们求解比率 $\\frac{S_2}{S_1}$：\n$$S_2 = 8 S_1$$\n$$\\frac{S_2}{S_1} = 8$$\n\n因此，CPU 速度必须增加 8 倍。", "answer": "$$\\boxed{8}$$"}, {"introduction": "在前面的概念基础上，这个问题转向了一个更真实的场景，即最终结果依赖于多个计算阶段。我们将分析一个银行的风险汇总模型，学习如何将不同部分的复杂度（部门级计算和全公司范围的汇总）结合起来，以确定整个系统的总复杂度。这能训练我们分析复合算法的关键技能，其中总成本是多个变量（$N$ 和 $D$）的函数。[@problem_id:2380831]", "id": "2380831", "problem": "一家银行经营着 $D$ 个业务部门，每个部门持有一本包含 $N$ 个头寸的投资组合。为了进行监管报告，该银行计算每个部门的风险度量，然后将这些部门度量汇总成一个全公司的数值。假设以下成本模型基于基本的算法操作：\n\n- 对于一个给定的部门，本地风险计算会扫描所有无序的头寸对以评估其相互作用，然后执行常数次数的额外线性时间遍数进行缩放和归一化。因此，一个部门的最坏情况操作计数可以用 $a N^{2} + b N + c$ 作为上界，其中 $a$、$b$ 和 $c$ 为正常数，因此其复杂度为 $\\mathcal{O}(N^{2})$。\n\n- 在所有 $D$ 个部门的度量计算完毕后，企业聚合器通过读取每个部门的数值一次，应用一个常数时间的转换，然后求和，来用固定的权重对它们进行线性组合。聚合成本的上界为 $k D$，其中 $k$ 是一个正常数，因此其复杂度为 $\\mathcal{O}(D)$。\n\n假设各部门在单个计算线程上顺序处理，部门之间没有记忆化或计算复用，并且 $N \\ge 1$，$D \\ge 1$。仅使用渐进上界（大O）的基本定义以及顺序组合的成本相加原理，推导出生成全公司风险数值的总体时间复杂度，表示为关于 $N$ 和 $D$ 的单个简化的 $\\mathcal{O}(\\cdot)$ 表达式。你的最终答案必须是一个单一的封闭形式 $\\mathcal{O}(\\cdot)$ 表达式。不需要四舍五入，也不需要报告单位。", "solution": "首先将对问题陈述进行严格的验证过程。\n\n**步骤 1：提取已知条件**\n- 业务部门数量：$D$\n- 每个部门的头寸数量：$N$\n- 一个部门风险计算的最坏情况操作计数的上界为 $a N^{2} + b N + c$。\n- 常数 $a$、$b$ 和 $c$ 为正。\n- 一个部门的复杂度为 $\\mathcal{O}(N^{2})$。\n- 企业聚合成本的上界为 $k D$。\n- 常数 $k$ 为正。\n- 聚合的复杂度为 $\\mathcal{O}(D)$。\n- 处理模型：在单个线程上顺序执行。\n- 部门之间无计算的记忆化或复用。\n- 约束条件：$N \\ge 1$ 和 $D \\ge 1$。\n- 目标：推导出关于 $N$ 和 $D$ 的总体时间复杂度，表示为单个简化的 $\\mathcal{O}(\\cdot)$ 表达式。\n\n**步骤 2：使用提取的已知条件进行验证**\n根据所需标准对问题进行评估。\n\n- **科学性**：该问题是计算复杂性理论（大O表示法）在金融风险计算的一个简化但合理的模型中的应用。用于成对交互和线性遍数的成本模型 $a N^{2} + b N + c$ 在算法分析中是标准的。它完全符合计算机科学的原理。\n- **良构性**：该问题是良构的。它提供了所有必要组成部分：子问题的成本函数、它们的组合方法（顺序相加）以及变量的约束条件。可以推导出唯一且有意义的解。\n- **客观性**：该问题以精确、客观和量化的术语陈述。诸如“无序对”、“线性时间遍数”和“在单个计算线程上顺序处理”等术语是明确无歧义的。\n\n**步骤 3：结论与行动**\n该问题是**有效的**。这是一个直接、定义明确的算法分析练习。我现在将着手求解。\n\n设 $T_{dept}(N)$ 表示计算一个拥有 $N$ 个头寸的部门的风险度量所需的时间。根据问题陈述，其上界为一个关于 $N$ 的多项式，即：\n$$T_{dept}(N) \\le a N^{2} + b N + c$$\n其中 $a > 0$、$b > 0$ 和 $c > 0$ 是常数。这对应于单个部门的时间复杂度为 $\\mathcal{O}(N^{2})$。\n\n银行有 $D$ 个这样的部门，它们被顺序处理。顺序组合原理指出，一系列操作的总时间是每个独立操作时间的总和。由于部门之间没有计算复用，处理所有 $D$ 个部门所需的总时间，我们称之为 $T_{all\\_depts}(N, D)$，是 $D$ 个相同计算的成本之和。\n$$T_{all\\_depts}(N, D) = \\sum_{i=1}^{D} T_{dept}(N) = D \\cdot T_{dept}(N)$$\n因此，该计算阶段的上界是：\n$$D \\cdot (a N^{2} + b N + c)$$\n\n在部门计算之后，执行一个企业聚合步骤。设此聚合时间为 $T_{agg}(D)$。问题陈述其上界为一个关于 $D$ 的线性函数：\n$$T_{agg}(D) \\le k D$$\n其中 $k > 0$ 是一个常数。这对应于时间复杂度为 $\\mathcal{O}(D)$。\n\n整个过程包括所有部门的计算，然后是最终的聚合。再次应用顺序组合原理，全公司风险计算的总时间 $T_{total}(N, D)$ 是这两个阶段时间的总和。总时间的上界是：\n$$T_{total}(N, D) \\le T_{all\\_depts}(N, D) + T_{agg}(D)$$\n$$T_{total}(N, D) \\le D(a N^{2} + b N + c) + k D$$\n展开此表达式得到：\n$$T_{total}(N, D) \\le a D N^{2} + b D N + c D + k D$$\n$$T_{total}(N, D) \\le a D N^{2} + b D N + (c+k)D$$\n\n为了确定整体的渐进时间复杂度，我们必须在这个多项式表达式中，为大的 $N$ 和 $D$ 值找到主导项。这些项是 $a D N^{2}$、$b D N$ 和 $(c+k)D$。根据大O表示法的定义，我们需要找到常数 $C > 0$、$N_{0} \\ge 1$ 和 $D_{0} \\ge 1$，使得对于所有的 $N \\ge N_{0}$ 和 $D \\ge D_{0}$，以下不等式成立：\n$$a D N^{2} + b D N + (c+k)D \\le C \\cdot g(N, D)$$\n其中 $g(N,D)$ 是描述增长率的最简函数。\n\n我们选择 $g(N, D) = D N^{2}$。我们必须证明 $a D N^{2} + b D N + (c+k)D \\in \\mathcal{O}(D N^{2})$。\n根据问题约束，有 $N \\ge 1$ 和 $D \\ge 1$。\n对于 $N \\ge 1$，我们有 $N \\le N^{2}$，因此 $b D N \\le b D N^{2}$。\n类似地，对于 $N \\ge 1$，我们有 $1 \\le N^{2}$，这意味着 $D \\le D N^{2}$，所以 $(c+k)D \\le (c+k)D N^{2}$。\n\n将这些不等式代回总时间的表达式中：\n$$a D N^{2} + b D N + (c+k)D \\le a D N^{2} + b D N^{2} + (c+k)D N^{2}$$\n$$a D N^{2} + b D N + (c+k)D \\le (a + b + c + k) D N^{2}$$\n设 $C = a + b + c + k$。由于 $a, b, c, k$ 都是正常数，所以 $C$ 也是一个正常数。该不等式对所有 $N \\ge 1$ 和 $D \\ge 1$ 均成立。\n因此，根据大O表示法的正式定义，总时间复杂度的上界为 $C \\cdot D N^{2}$。\n\n总体时间复杂度为 $\\mathcal{O}(D N^{2})$。", "answer": "$$\\boxed{\\mathcal{O}(D N^{2})}$$"}, {"introduction": "最后，我们将处理一类更高级但功能强大的算法：使用“分而治之”策略的算法。这个问题提出了一个递归的估值模型，并要求我们通过解一个递推关系来确定其复杂度。掌握这种分析方法至关重要，因为递归方法是金融和计算机科学领域中许多高效算法的核心。[@problem_id:2380801]", "id": "2380801", "problem": "一个拥有 $n$ 个原子业务单元的公司通过一个递归过程进行估值，该过程在每一层将公司划分为 $3$ 个相等的部分，直到每个部分的规模达到 $1$。在获得 $3$ 个子部分的估值后，该过程会执行一次跨部门协同整合，对于规模为 $n$ 的实例，其计算成本为 $c\\, n \\left(\\ln n\\right)^{2}$，其中 $c&gt;0$ 是一个与 $n$ 无关的常数。假设 $n$ 是 $3$ 的幂，以便在每一层的划分都是精确的，并且规模为 $1$ 的单元的基础成本为 $T(1)=d$，其中 $d&gt;0$ 是一个常数。因此，该过程的总运行时间 $T(n)$ 满足以下递推关系：\n$$\nT(n) \\;=\\; 3\\,T\\!\\left(\\frac{n}{3}\\right) \\;+\\; c\\, n \\left(\\ln n\\right)^{2}\n\\quad\\text{for } n\\ge 3,\\qquad T(1)=d.\n$$\n确定 $T(n)$ 的一个紧渐近表达式，忽略乘法常数和低阶项。请以单个解析表达式的形式给出你的答案，该表达式用 $n$ 和自然对数表示。", "solution": "对问题陈述进行验证。\n\n步骤 1：提取已知条件\n已知条件如下：\n- 运行时间 $T(n)$ 的递推关系：$T(n) = 3\\,T(n/3) + c\\, n (\\ln n)^{2}$，对于 $n \\ge 3$。\n- 一个常数 $c > 0$。\n- 一个基准情形：$T(1) = d$，其中 $d > 0$ 是一个常数。\n- 输入规模 $n$ 是 $3$ 的幂。\n- 目标是求出 $T(n)$ 的一个紧渐近表达式，忽略乘法常数和低阶项，用 $n$ 和自然对数表示。\n\n步骤 2：使用提取的已知条件进行验证\n所提出的问题是一个标准的递推关系分析，这是算法和计算复杂性研究中的一个基本课题。\n- **具有科学依据**：该问题基于已确立的递推关系数学原理。它是分治算法分析的一个典型例子。\n- **提法明确**：该递推关系定义明确，具有清晰的递归步骤和基准情形。$n$ 是 $3$ 的幂这一约束确保了除法 $n/3$ 总能得到整数，这简化了分析并保证了唯一解的存在。\n- **目标**：问题以精确、无歧义的数学语言陈述。\n- 问题是自洽、一致的，并且需要一个形式化的数学解。它没有违反任何无效性标准。\n\n步骤 3：结论与行动\n问题是有效的。将提供解答。\n\n需要求解的递推关系是：\n$$\nT(n) = 3 T\\left(\\frac{n}{3}\\right) + c n \\left(\\ln n\\right)^{2}\n$$\n其基准情形为 $T(1) = d$。已知 $n$ 是 $3$ 的幂。令 $n = 3^k$，其中 $k$ 为某个整数 $k \\ge 0$。这意味着 $k = \\log_3 n$。基准情形对应于 $k=0$，因为 $n=3^0=1$。\n\n我们将通过迭代法（也称为展开法）来求解这个递推关系。\n从给定的关系式开始：\n$$\nT(n) = 3 T\\left(\\frac{n}{3}\\right) + c n \\left(\\ln n\\right)^{2}\n$$\n我们代入 $T(n/3)$ 的表达式：\n$$\nT\\left(\\frac{n}{3}\\right) = 3 T\\left(\\frac{n}{9}\\right) + c \\frac{n}{3} \\left(\\ln\\frac{n}{3}\\right)^{2}\n$$\n将其代回第一个方程：\n$$\nT(n) = 3 \\left[ 3 T\\left(\\frac{n}{9}\\right) + c \\frac{n}{3} \\left(\\ln\\frac{n}{3}\\right)^{2} \\right] + c n \\left(\\ln n\\right)^{2}\n$$\n$$\nT(n) = 9 T\\left(\\frac{n}{9}\\right) + c n \\left(\\ln\\frac{n}{3}\\right)^{2} + c n \\left(\\ln n\\right)^{2}\n$$\n经过第三次迭代：\n$$\nT(n) = 27 T\\left(\\frac{n}{27}\\right) + c n \\left(\\ln\\frac{n}{9}\\right)^{2} + c n \\left(\\ln\\frac{n}{3}\\right)^{2} + c n \\left(\\ln n\\right)^{2}\n$$\n观察其模式，经过 $i$ 次迭代后，关系式变为：\n$$\nT(n) = 3^i T\\left(\\frac{n}{3^i}\\right) + c n \\sum_{j=0}^{i-1} \\left(\\ln\\frac{n}{3^j}\\right)^{2}\n$$\n当 $T$ 的参数变为 $1$ 时，递归终止。这发生在 $n/3^i = 1$ 时，即 $i = \\log_3 n$。我们已经设定 $k = \\log_3 n$，所以递归深度为 $k$。令 $i=k$：\n$$\nT(n) = 3^k T\\left(\\frac{n}{3^k}\\right) + c n \\sum_{j=0}^{k-1} \\left(\\ln\\frac{n}{3^j}\\right)^{2}\n$$\n代入 $T(1) = d$ 和 $n=3^k$：\n$$\nT(3^k) = 3^k T(1) + c \\cdot 3^k \\sum_{j=0}^{k-1} \\left(\\ln\\frac{3^k}{3^j}\\right)^{2}\n$$\n$$\nT(3^k) = d \\cdot 3^k + c \\cdot 3^k \\sum_{j=0}^{k-1} \\left(\\ln(3^{k-j})\\right)^{2}\n$$\n使用对数性质 $\\ln(a^b) = b \\ln a$：\n$$\nT(3^k) = d \\cdot 3^k + c \\cdot 3^k \\sum_{j=0}^{k-1} \\left((k-j)\\ln 3\\right)^{2}\n$$\n$$\nT(3^k) = d \\cdot 3^k + c \\cdot 3^k (\\ln 3)^2 \\sum_{j=0}^{k-1} (k-j)^{2}\n$$\n我们来分析这个求和。我们可以通过令 $m = k-j$ 来改变求和的索引。当 $j=0$ 时，$m=k$。当 $j=k-1$ 时，$m=1$。该和变为：\n$$\n\\sum_{m=1}^{k} m^2 = \\frac{k(k+1)(2k+1)}{6}\n$$\n这是前 $k$ 个平方数之和的标准公式。该和是一个关于 $k$ 的 3 次多项式。对于大的 $k$，这渐近等价于 $\\frac{2k^3}{6} = \\frac{k^3}{3}$。\n将此代回 $T(3^k)$ 的表达式中：\n$$\nT(3^k) = d \\cdot 3^k + c \\cdot 3^k (\\ln 3)^2 \\frac{k(k+1)(2k+1)}{6}\n$$\n现在，我们必须换回到原始变量 $n$。我们有 $n=3^k$ 和 $k=\\log_3 n$。我们可以使用换底公式将 $k$ 用自然对数表示：$k = \\frac{\\ln n}{\\ln 3}$。\n$$\nT(n) = d \\cdot n + c \\cdot n (\\ln 3)^2 \\frac{\\left(\\frac{\\ln n}{\\ln 3}\\right)\\left(\\frac{\\ln n}{\\ln 3}+1\\right)\\left(2\\frac{\\ln n}{\\ln 3}+1\\right)}{6}\n$$\n为确定渐近行为，我们寻找 $\\ln n$ 的最高次幂。\n$$\nT(n) = d \\cdot n + \\frac{c \\cdot n (\\ln 3)^2}{6(\\ln 3)^3} (\\ln n)(\\ln n + \\ln 3)(2\\ln n + \\ln 3)\n$$\n$$\nT(n) = d \\cdot n + \\frac{c \\cdot n}{6 \\ln 3} (2(\\ln n)^3 + 3(\\ln 3)(\\ln n)^2 + (\\ln 3)^2 \\ln n)\n$$\n$$\nT(n) = d \\cdot n + \\frac{c}{3 \\ln 3} n(\\ln n)^3 + \\frac{c}{2} n(\\ln n)^2 + \\frac{c \\ln 3}{6} n \\ln n\n$$\n问题要求一个紧渐近表达式，忽略乘法常数和低阶项。当 $n \\to \\infty$ 时，$n(\\ln n)^3$ 项比所有其他项（包括 $n(\\ln n)^2$、$n \\ln n$ 和 $n$）增长得更快。因此，主导项与 $n(\\ln n)^3$ 成正比。\n乘法常数是 $\\frac{c}{3 \\ln 3}$。低阶项是那些增长率较慢的项。\n去掉常数和低阶项后，紧渐近表达式为 $n(\\ln n)^3$。\n这个结果可以通过分治递推关系的主定理来验证。递推关系 $T(n) = a T(n/b) + f(n)$ 中，$a=3$，$b=3$，有 $n^{\\log_b a} = n^{\\log_3 3} = n$。非递归项是 $f(n) = c n (\\ln n)^2$。这符合主定理的扩展情况，即 $f(n) = \\Theta(n^{\\log_b a} (\\ln n)^p)$，其中 $p=2$。这种情况的解是 $T(n) = \\Theta(n^{\\log_b a} (\\ln n)^{p+1})$，从而得到 $T(n) = \\Theta(n (\\ln n)^{2+1}) = \\Theta(n (\\ln n)^3)$，这证实了我们的推导。", "answer": "$$\n\\boxed{n \\left(\\ln n\\right)^{3}}\n$$"}]}