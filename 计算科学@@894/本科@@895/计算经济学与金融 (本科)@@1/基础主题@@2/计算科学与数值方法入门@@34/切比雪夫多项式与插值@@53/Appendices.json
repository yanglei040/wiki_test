{"hands_on_practices": [{"introduction": "理论学习之后，最好的巩固方式莫过于亲自动手计算。这个练习将引导你完成一个基础的切比雪夫插值过程，让你体验如何找到切比雪夫节点，并求解插值多项式的系数。通过对一个简单的函数 $f(x)=x^3$ 进行近似，你将直观地感受到切比雪夫插值在最小化误差方面的威力。[@problem_id:2187288]", "id": "2187288", "problem": "在数值分析中，使用切比雪夫节点的插值方法是比使用等距点更优越的替代方案，尤其是在避免龙格现象方面。该方法选择的插值点是切比雪夫多项式的根，这些点密集分布于区间的端点附近。\n\n考虑在区间 $[-1, 1]$ 上的函数 $f(x) = x^3$。你的任务是求出唯一的、次数至多为2的多项式（我们称之为 $P_2(x)$），该多项式在此区间上的三个切比雪夫节点处对 $f(x)$ 进行插值。这些节点被定义为3次第一类切比雪夫多项式 $T_3(x)$ 的根。\n\n请将你求得的 $P_2(x)$ 表示为一个关于 $x$ 的简化多项式。", "solution": "给定在 $[-1,1]$ 上的函数 $f(x)=x^{3}$，我们必须找到次数至多为 $2$ 的唯一多项式 $P_{2}(x)$，该多项式在 $[-1,1]$ 上的三个切比雪夫节点处对 $f$ 进行插值，而这些节点被定义为3次第一类切比雪夫多项式 $T_{3}(x)$ 的根。\n\n使用恒等式 $T_{3}(x)=\\cos\\!\\big(3\\arccos x\\big)=4x^{3}-3x$。$T_{3}$ 的根即为三个切比雪夫节点：\n$$\nT_{3}(x)=4x^{3}-3x=x\\big(4x^{2}-3\\big)=0\n\\quad\\Longrightarrow\\quad\nx\\in\\left\\{0,\\;\\pm\\frac{\\sqrt{3}}{2}\\right\\}.\n$$\n设 $P_{2}(x)=A x^{2}+B x+C$。插值条件为，在每个节点 $\\xi\\in\\left\\{0,\\pm\\frac{\\sqrt{3}}{2}\\right\\}$ 处，都有 $P_{2}(\\xi)=\\xi^{3}$。\n\n1) 当 $x=0$ 时：\n$$\nP_{2}(0)=C=0 \\quad\\Longrightarrow\\quad C=0.\n$$\n\n2) 设 $a=\\frac{\\sqrt{3}}{2}$。当 $x=a$ 和 $x=-a$ 时：\n$$\nP_{2}(a)=A a^{2}+B a=a^{3},\\qquad P_{2}(-a)=A a^{2}-B a=-a^{3}.\n$$\n将这两个方程相加可以消去 $B$：\n$$\n\\big(A a^{2}+B a\\big)+\\big(A a^{2}-B a\\big)=a^{3}+(-a^{3})\n\\;\\Longrightarrow\\;\n2A a^{2}=0\n\\;\\Longrightarrow\\;\nA=0\n\\quad(\\text{因为 }a\\neq 0).\n$$\n将 $A=0$ 代入 $A a^{2}+B a=a^{3}$ 以求解 $B$：\n$$\nB a=a^{3}\\;\\Longrightarrow\\;B=a^{2}.\n$$\n由于 $a=\\frac{\\sqrt{3}}{2}$，我们有\n$$\na^{2}=\\left(\\frac{\\sqrt{3}}{2}\\right)^{2}=\\frac{3}{4}.\n$$\n因此，\n$$\nP_{2}(x)=B x=\\frac{3}{4}\\,x.\n$$\n快速检验：$P_{2}(0)=0=f(0)$，并且 $P_{2}(\\pm a)=\\frac{3}{4}(\\pm a)=\\pm a\\cdot\\frac{3}{4}=\\pm a^{3}=f(\\pm a)$，因此在所有三个切比雪夫节点处，插值条件都得到满足。\n\n因此，次数至多为2的唯一插值多项式是 $P_{2}(x)=\\frac{3}{4}x$。", "answer": "$$\\boxed{\\frac{3}{4}x}$$"}, {"introduction": "在真实世界的问题中，一个关键的挑战是如何确定近似的“恰当”复杂度——也就是需要使用多高阶的多项式。这个练习将指导你编写一个程序，实现一种常用的自动化策略：通过监控切比雪夫系数的衰减速度来选择最优的多项式阶数。这项实践不仅能锻炼你的编程能力，还能加深你对函数平滑度与其近似效率之间关系的直观理解。[@problem_id:2379358]", "id": "2379358", "problem": "考虑在区间 $[-1,1]$ 上用截断的第一类切比雪夫级数逼近一个有界实值函数 $f$ 的问题。令 $\\{T_n(x)\\}_{n \\ge 0}$ 表示第一类切比雪夫多项式，其定义为 $T_n(x) = \\cos(n \\arccos x)$，其中 $x \\in [-1,1]$ 且角度以弧度为单位。$f$ 的切比雪夫级数由下式给出\n$$\nf(x) \\sim \\frac{1}{2} c_0 + \\sum_{n=1}^{\\infty} c_n T_n(x),\n$$\n其中切比雪夫系数 $\\{c_n\\}_{n \\ge 0}$ 定义为\n$$\nc_n = \\frac{2}{\\pi} \\int_{-1}^{1} \\frac{f(x)\\, T_n(x)}{\\sqrt{1-x^2}} \\, dx\n= \\frac{2}{\\pi} \\int_{0}^{\\pi} f(\\cos \\theta)\\, \\cos(n \\theta)\\, d\\theta,\n$$\n并约定 $N$ 次截断逼近为\n$$\np_N(x) = \\frac{1}{2} c_0 + \\sum_{n=1}^{N} c_n T_n(x).\n$$\n\n您的任务是编写一个完整、可运行的程序，通过监测切比雪夫系数的衰减，为下述每个测试用例计算一个数据驱动的阶数选择 $N^\\star$。决策规则完全根据系数 $\\{c_n\\}$ 定义如下。给定一个非负整数 $N_{\\max}$、一个容差 $\\varepsilon \\in (0,1)$ 和一个正整数窗口长度 $q$，定义 $K = N_{\\max} + q$。计算系数 $\\{c_n\\}_{n=0}^{K}$ 的数值近似。然后选择\n$$\nN^\\star = \\min \\left\\{ N \\in \\{0,1,\\dots,N_{\\max}-q\\} \\,:\\, \n\\max_{n \\in \\{N+1,\\dots,N+q\\}} |c_n| \\le \\varepsilon \\cdot \\max_{m \\in \\{0,\\dots,N\\}} |c_m| \\right\\},\n$$\n如果该集合为空，则设 $N^\\star = N_{\\max}$。所有三角函数的参数均以弧度为单位。您用于逼近积分的数值方法必须与上述定义一致，并且必须统一应用于所有情况。\n\n此标准旨在用于计算经济学和金融学中常用的全局多项式逼近（例如，价值函数、策略函数和定价核）的自动化基选择，同时通过切比雪夫系数的衰减来控制投影误差。\n\n测试套件。对于每个测试，都指定了函数 $f$、容差 $\\varepsilon$、窗口长度 $q$ 和上限 $N_{\\max}$：\n\n- 测试 A（解析函数，系数快速衰减）：\n  - $f(x) = e^{x}$，\n  - $\\varepsilon = 10^{-12}$，\n  - $q = 5$，\n  - $N_{\\max} = 200$。\n\n- 测试 B（解析函数，有理函数）：\n  - $f(x) = \\dfrac{1}{1 + 25 x^2}$，\n  - $\\varepsilon = 10^{-10}$，\n  - $q = 5$，\n  - $N_{\\max} = 200$。\n\n- 测试 C（在 $x=0$ 处非光滑）：\n  - $f(x) = |x|$，\n  - $\\varepsilon = 10^{-3}$，\n  - $q = 5$，\n  - $N_{\\max} = 200$。\n\n- 测试 D（常数函数，边界情况）：\n  - $f(x) = 3$，\n  - $\\varepsilon = 10^{-14}$，\n  - $q = 5$，\n  - $N_{\\max} = 50$。\n\n- 测试 E（单模切比雪夫多项式，精确结构）：\n  - $f(x) = \\cos\\!\\big(50 \\arccos x\\big)$，\n  - $\\varepsilon = 10^{-12}$，\n  - $q = 3$，\n  - $N_{\\max} = 200$。\n\n- 测试 F（严格的容差和小上限，上限前没有满足条件的窗口）：\n  - $f(x) = |x|$，\n  - $\\varepsilon = 10^{-6}$，\n  - $q = 5$，\n  - $N_{\\max} = 30$。\n\n最终输出格式。您的程序应生成单行输出，其中包含六个选定的阶数，这些阶数汇总在一个逗号分隔的列表中，并用方括号括起来，结果按 A、B、C、D、E、F 的顺序排列。例如，输出必须看起来像\n$$\n[\\text{result}_A,\\text{result}_B,\\text{result}_C,\\text{result}_D,\\text{result}_E,\\text{result}_F]\n$$\n其中每个条目都是一个整数。", "solution": "在尝试给出解决方案之前，首先对所提供的问题陈述进行验证。\n\n### 步骤1：提取给定信息\n- **待逼近函数：** 区间 $[-1,1]$ 上的有界实值函数 $f$。\n- **基：** 第一类切比雪夫多项式，$T_n(x) = \\cos(n \\arccos x)$。\n- **切比雪夫级数：** 形式为 $f(x) \\sim \\frac{1}{2} c_0 + \\sum_{n=1}^{\\infty} c_n T_n(x)$ 的展开式。\n- **切比雪夫系数：** 系数 $\\{c_n\\}$ 由积分 $c_n = \\frac{2}{\\pi} \\int_{0}^{\\pi} f(\\cos \\theta)\\, \\cos(n \\theta)\\, d\\theta$ 定义。\n- **逼近：** $N$ 次截断级数，记作 $p_N(x) = \\frac{1}{2} c_0 + \\sum_{n=1}^{N} c_n T_n(x)$。\n- **目标：** 对每个测试用例，根据系数衰减规则找到一个最优阶数 $N^\\star$。\n- **参数：**\n    - 考虑的最大阶数：$N_{\\max}$。\n    - 容差：$\\varepsilon \\in (0,1)$。\n    - 窗口长度：$q \\in \\mathbb{Z}^+$。\n- **决策规则：** 计算系数 $\\{c_n\\}_{n=0}^{K}$ 的数值近似，其中 $K = N_{\\max} + q$。然后找到 $N^\\star$ 如下：\n$$\nN^\\star = \\min \\left\\{ N \\in \\{0,1,\\dots,N_{\\max}-q\\} \\,:\\, \n\\max_{n \\in \\{N+1,\\dots,N+q\\}} |c_n| \\le \\varepsilon \\cdot \\max_{m \\in \\{0,\\dots,N\\}} |c_m| \\right\\}。\n$$\n如果该集合为空，则 $N^\\star = N_{\\max}$。\n- **数值方法：** 必须与定义一致并统一应用。\n- **测试套件：** 提供了六个测试用例 (A-F)，每个用例都指定了函数 $f$ 和参数 $\\varepsilon$、$q$ 和 $N_{\\max}$。\n\n### 步骤2：使用提取的给定信息进行验证\n根据所需标准评估问题：\n- **科学依据：** 该问题植根于正交多项式逼近的经典理论，这是数值分析的基石。切比雪夫多项式逼近是科学计算中广泛使用的标准、有效工具，包括文中所述的计算经济学和金融学领域。其基础是科学合理的。\n- **良构的(Well-Posed)：** $N^\\star$ 的决策规则是明确且无歧义的。对于任何一组计算出的系数，$N$ 的搜索空间是有限的（$\\{0, \\dots, N_{\\max}-q\\}$），并且保证存在最小值。备用赋值 $N^\\star = N_{\\max}$ 确保总能找到唯一的解。该问题是良构的。\n- **客观性：** 问题使用精确的数学定义和客观标准进行陈述。没有主观或含糊的术语。\n\n问题陈述没有科学谬误、模糊性和矛盾之处。计算解决方案所需的所有数据均已提供。因此，该问题被认定为**有效**。\n\n### 步骤3：结论与行动\n问题有效。将提供一个合理的解决方案。\n\n### 解决方案与算法设计\n问题的核心是计算切比雪夫系数 $\\{c_n\\}$ 的数值近似，然后应用指定的决策规则。\n\n**1. 系数的数值逼近**\n\n系数 $c_n$ 由一个积分定义。一种高精度且高效的逼近这些系数的方法是伪谱法或切比雪夫投影法。这涉及在一组特定节点上对函数 $f(x)$ 进行插值，然后计算所得插值多项式的系数。这些系数是真实级数系数的极佳近似，特别是对于光滑函数，它们呈现谱收敛。\n\n令 $K = N_{\\max} + q$。我们将构建一个 $K$ 次的插值多项式。这需要 $K+1$ 个插值点。为了稳定性和准确性，最佳选择是切比雪夫-高斯-洛巴托节点，它们是切比雪夫多项式 $T_K(x)$ 在区间 $[-1,1]$ 上的极值点。这些节点由下式给出：\n$$\nx_j = \\cos\\left(\\frac{j \\pi}{K}\\right), \\quad j = 0, 1, \\dots, K.\n$$\n设在这些节点上插值 $f(x)$ 的多项式为 $p_K(x) = \\sum_{n=0}^{K} a_n T_n(x)$。系数 $\\{a_n\\}$ 就是我们的数值近似。它们可以使用离散余弦变换（DCT，通常是类型I）高效计算。`numpy.polynomial.chebyshev.Chebyshev.fit` 方法为此任务提供了强大、标准的实现。给定节点 $x_j$ 和函数值 $f(x_j)$，它返回系数向量 $[a_0, a_1, \\dots, a_K]$。\n\n**2. 与问题定义的一致性**\n\n问题将逼近定义为 $p_N(x) = \\frac{1}{2} c_0 + \\sum_{n=1}^{N} c_n T_n(x)$，而标准的 `numpy` 基是 $\\{T_n(x)\\}_{n \\ge 0}$。系数之间的关系是 $a_0 = c_0/2$ 和 $a_n = c_n$（对于 $n \\ge 1$）。决策规则是根据 $\\{c_n\\}$ 来表述的。因此，从拟合过程中获得系数 $\\{a_n\\}$ 后，我们必须在应用规则之前将它们转换为 $\\{c_n\\}$：\n$$\nc_0 = 2a_0, \\quad c_n = a_n \\text{ for } n \\ge 1.\n$$\n这些计算出的系数，我们称之为 $\\hat{c}_n$ 以表示它们是近似值，将用于决策规则。\n\n**3. 实现决策规则**\n\n有了系数向量 $\\{\\hat{c}_n\\}_{n=0}^K$ 后，我们实现对 $N^\\star$ 的搜索。算法如下：\n- 将结果初始化为默认值，$N^\\star = N_{\\max}$。\n- 从 $0$ 到 $N_{\\max} - q$ 遍历候选值 $N$。\n- 对于每个 $N$，计算两个量：\n    - $M_{\\text{hist}} = \\max_{m \\in \\{0, \\dots, N\\}} |\\hat{c}_m|$。这表示截至阶数 $N$ 所见到的最大系数的量级。\n    - $M_{\\text{win}} = \\max_{n \\in \\{N+1, \\dots, N+q\\}} |\\hat{c}_n|$。这是后续大小为 $q$ 的窗口中最大系数的量级。\n- 检查是否满足条件 $M_{\\text{win}} \\le \\varepsilon \\cdot M_{\\text{hist}}$。\n    - 这个条件稳健地实现为乘法形式，避免了当 $M_{\\text{hist}}$ 为零时可能出现的除零问题。如果 $M_{\\text{hist}}=0$，该条件仅在 $M_{\\text{win}}=0$ 时成立，这在数学上是合理的解释。\n- 如果条件满足，我们找到了一个令人满意的阶数。由于问题要求最小的此类 $N$，我们设置 $N^\\star = N$ 并立即终止搜索。\n- 如果循环完成而条件从未满足，则保留初始值 $N^\\star = N_{\\max}$。\n\n此过程统一应用于问题陈述中指定的每个测试用例。例如，在测试 E 中，$f(x) = T_{50}(x)$，真实的系数是 $c_{50}=2$（在我们的 $\\{a_n\\}$ 基中，$a_{50}=1$），所有其他系数都为零。数值过程将得到 $\\hat{c}_{50} \\approx 2$，其他 $\\hat{c}_n$ 接近机器精度。对于 $N < 50$，规则将失败，因为要么 $M_{\\text{hist}}$ 很小而 $M_{\\text{win}}$ 包含大系数，要么两者都很小但不满足容差。对于 $N=50$，$M_{\\text{hist}} = |\\hat{c}_{50}| \\approx 2$，$M_{\\text{win}}$ 将接近机器精度。条件将得到满足，从而正确识别出 $N^\\star=50$。在测试 F 中，由于 $f(x)=|x|$ 的系数衰减缓慢，加上严格的容差 $\\varepsilon$ 和较小的 $N_{\\max}$，很可能导致循环完成而未找到合适的 $N$，从而得到默认值 $N^\\star=N_{max}$。", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\nfrom numpy.polynomial import chebyshev as cheb\n\ndef solve():\n    \"\"\"\n    Solves for the optimal Chebyshev truncation degree N* for a series of test cases.\n    \"\"\"\n\n    def compute_n_star(f, epsilon, q, n_max):\n        \"\"\"\n        Computes the data-driven degree selection N* for a given function and parameters.\n\n        Args:\n            f (callable): The function to approximate, defined on [-1, 1].\n            epsilon (float): The tolerance for the coefficient decay condition.\n            q (int): The window length for checking coefficient decay.\n            n_max (int): The maximum degree to consider.\n\n        Returns:\n            int: The selected degree N*.\n        \"\"\"\n        # The total number of coefficients to compute is K+1, where K = n_max + q.\n        # This corresponds to an interpolating polynomial of degree K.\n        K = n_max + q\n\n        # Generate K+1 Chebyshev-Gauss-Lobatto nodes, which are the extrema of T_K(x).\n        # np.polynomial.chebyshev.chebpts1(K + 1) generates x_j = cos(j*pi/K) for j=0,...,K.\n        nodes = cheb.chebpts1(K + 1)\n\n        # Evaluate the function at the nodes.\n        # Use np.clip to guard against floating-point errors in arccos for values just outside [-1, 1].\n        f_vals = f(nodes)\n\n        # Compute coefficients of the interpolating polynomial of degree K.\n        # Chebyshev.fit solves a least-squares problem, which for Chebyshev nodes\n        # and deg=K is equivalent to interpolation. It returns coefficients {a_n}.\n        poly_fit = cheb.Chebyshev.fit(nodes, f_vals, deg=K)\n        a_coeffs = poly_fit.coef\n\n        # The problem defines the series with a 1/2 factor for the first term,\n        # i.e., p_N(x) = 0.5*c_0 + sum_{n=1 to N} c_n*T_n(x).\n        # The numpy basis is p_N(x) = sum_{n=0 to N} a_n*T_n(x).\n        # The relationship is a_0 = c_0/2 and a_n = c_n for n > 0.\n        # We convert our computed {a_n} to {c_n} for the decision rule.\n        c_coeffs = a_coeffs.copy()\n        if len(c_coeffs) > 0:\n            c_coeffs[0] *= 2.0\n\n        # Apply the decision rule to find N*\n        n_star = n_max\n        for N in range(n_max - q + 1):\n            # max|c_m| for m in {0, ..., N}\n            # Slice is [0, N], so we need N+1 elements.\n            max_m = np.max(np.abs(c_coeffs[0 : N + 1]))\n            \n            # max|c_n| for n in {N+1, ..., N+q}\n            # Slice is [N+1, N+q], so N+q-N = q elements.\n            max_n = np.max(np.abs(c_coeffs[N + 1 : N + q + 1]))\n\n            # The condition is stated in multiplicative form to avoid division by zero.\n            if max_n <= epsilon * max_m:\n                n_star = N\n                break  # Found the minimum N, so we can stop.\n        \n        return n_star\n\n    # Define the test cases from the problem statement.\n    test_cases = [\n        # Test A (analytic, rapidly decaying coefficients)\n        {'f': lambda x: np.exp(x), 'eps': 1e-12, 'q': 5, 'n_max': 200},\n        # Test B (analytic, rational function)\n        {'f': lambda x: 1.0 / (1.0 + 25.0 * x**2), 'eps': 1e-10, 'q': 5, 'n_max': 200},\n        # Test C (nonsmooth at x=0)\n        {'f': lambda x: np.abs(x), 'eps': 1e-3, 'q': 5, 'n_max': 200},\n        # Test D (constant function, boundary case)\n        {'f': lambda x: np.full_like(x, 3.0), 'eps': 1e-14, 'q': 5, 'n_max': 50},\n        # Test E (single-mode Chebyshev polynomial, exact structure)\n        {'f': lambda x: np.cos(50.0 * np.arccos(np.clip(x, -1.0, 1.0))), 'eps': 1e-12, 'q': 3, 'n_max': 200},\n        # Test F (stringent tolerance with small cap, no satisfactory window before cap)\n        {'f': lambda x: np.abs(x), 'eps': 1e-6, 'q': 5, 'n_max': 30},\n    ]\n\n    results = []\n    for case in test_cases:\n        result = compute_n_star(case['f'], case['eps'], case['q'], case['n_max'])\n        results.append(result)\n\n    # Final print statement in the exact required format.\n    print(f\"[{','.join(map(str, results))}]\")\n\nsolve()\n```"}, {"introduction": "现在，让我们将所学技能应用于计算金融领域中的一个实际问题。这项练习展示了如何利用期权定价函数的切比雪夫近似来高效计算其风险敏感度指标（即“希腊字母”，如 $\\Delta$、$\\Gamma$ 和 $\\text{Vega}$）。这个例子凸显了切比雪夫方法的实用价值，因为对近似多项式进行解析求导，通常远比其他数值微分方法更为快捷和精确。[@problem_id:2379334]", "id": "2379334", "problem": "一个欧式看涨期权的价格是关于现货价格 $S$ 和波动率 $\\sigma$ 的函数，它在定义域 $S \\in [80, 120]$ 和 $\\sigma \\in [0.1, 0.4]$ 上，由一个关于 $S$ 的 2 次、关于 $\\sigma$ 的 1 次的第一类切比雪夫 (Chebyshev) 多项式的张量积来近似。设到切比雪夫 (Chebyshev) 域的仿射映射为\n$$\nx(S) \\equiv \\frac{2 S - (S_{\\max} + S_{\\min})}{S_{\\max} - S_{\\min}}, \\quad y(\\sigma) \\equiv \\frac{2 \\sigma - (\\sigma_{\\max} + \\sigma_{\\min})}{\\sigma_{\\max} - \\sigma_{\\min}},\n$$\n其中 $S_{\\min} = 80$，$S_{\\max} = 120$，$\\sigma_{\\min} = 0.1$ 且 $\\sigma_{\\max} = 0.4$。该近似式为\n$$\n\\widehat{P}(S,\\sigma) = \\sum_{i=0}^{2}\\sum_{j=0}^{1} a_{ij}\\, T_{i}(x(S))\\, T_{j}(y(\\sigma)),\n$$\n其中 $T_{n}$ 表示第一类切比雪夫 (Chebyshev) 多项式，且 $T_{0}(u) = 1$，$T_{1}(u) = u$，$T_{2}(u) = 2u^{2} - 1$。系数为\n$$\na_{00} = 10, \\quad a_{10} = 5, \\quad a_{20} = 2, \\quad a_{01} = 8, \\quad a_{11} = -3, \\quad a_{21} = 1.\n$$\n\n计算在 $S=105$ 和 $\\sigma=0.2$ 时，该近似期权的 Delta、Gamma 和 Vega，其中 Delta 为 $\\frac{\\partial \\widehat{P}}{\\partial S}$，Gamma 为 $\\frac{\\partial^{2} \\widehat{P}}{\\partial S^{2}}$，Vega 为 $\\frac{\\partial \\widehat{P}}{\\partial \\sigma}$。将你的最终答案按 $\\big(\\Delta, \\Gamma, \\text{Vega}\\big)$ 的顺序表示为一个单行矩阵。不要对答案进行四舍五入。", "solution": "该问题要求计算近似期权价格函数 $\\widehat{P}(S,\\sigma)$ 关于现货价格 $S$ 和波动率 $\\sigma$ 的三个偏导数。这些导数在金融学中被称为 Delta ($\\Delta$)、Gamma ($\\Gamma$) 和 Vega。分析过程如下。\n\n首先，对问题陈述进行验证。\n步骤 1：提取已知条件。\n- 期权价格的近似式为 $\\widehat{P}(S,\\sigma) = \\sum_{i=0}^{2}\\sum_{j=0}^{1} a_{ij}\\, T_{i}(x(S))\\, T_{j}(y(\\sigma))$。\n- 定义域为 $S \\in [S_{\\min}, S_{\\max}]$，其中 $S_{\\min} = 80$，$S_{\\max} = 120$；以及 $\\sigma \\in [\\sigma_{\\min}, \\sigma_{\\max}]$，其中 $\\sigma_{\\min} = 0.1$，$\\sigma_{\\max} = 0.4$。\n- 到规范切比雪夫 (Chebyshev) 域 $[-1, 1]$ 的仿射映射为：\n$$\nx(S) = \\frac{2 S - (S_{\\max} + S_{\\min})}{S_{\\max} - S_{\\min}} \\quad \\text{和} \\quad y(\\sigma) = \\frac{2 \\sigma - (\\sigma_{\\max} + \\sigma_{\\min})}{\\sigma_{\\max} - \\sigma_{\\min}}\n$$\n- 已给出的第一类切比雪夫 (Chebyshev) 多项式为：$T_{0}(u) = 1$，$T_{1}(u) = u$，$T_{2}(u) = 2u^{2} - 1$。\n- 系数给出如下：$a_{00} = 10$，$a_{10} = 5$，$a_{20} = 2$，$a_{01} = 8$，$a_{11} = -3$，$a_{21} = 1$。\n- 待计算的量为 $\\Delta = \\frac{\\partial \\widehat{P}}{\\partial S}$，$\\Gamma = \\frac{\\partial^{2} \\widehat{P}}{\\partial S^{2}}$ 和 Vega = $\\frac{\\partial \\widehat{P}}{\\partial \\sigma}$。\n- 求值点为 $(S, \\sigma) = (105, 0.2)$。\n\n步骤 2：使用提取的已知条件进行验证。\n该问题有科学依据、是适定的、客观且完整的。它展示了计算金融学领域中多元多项式近似和微分的一个标准应用。该问题没有违背任何科学原理，提供了所有必要的数据，并且术语定义明确。\n\n步骤 3：结论与行动。\n该问题是有效的。将推导出解答。\n\n首先计算仿射映射的导数。\n对于 $x(S)$：\n$$\nx(S) = \\frac{2S - (120 + 80)}{120 - 80} = \\frac{2S - 200}{40} = \\frac{S - 100}{20}\n$$\n关于 $S$ 的一阶和二阶导数分别为：\n$$\n\\frac{dx}{dS} = \\frac{1}{20} \\quad \\text{和} \\quad \\frac{d^{2}x}{dS^{2}} = 0\n$$\n对于 $y(\\sigma)$：\n$$\ny(\\sigma) = \\frac{2\\sigma - (0.4 + 0.1)}{0.4 - 0.1} = \\frac{2\\sigma - 0.5}{0.3}\n$$\n关于 $\\sigma$ 的一阶导数为：\n$$\n\\frac{dy}{d\\sigma} = \\frac{2}{0.3} = \\frac{20}{3}\n$$\n$\\widehat{P}$ 的完整表达式为：\n$$\n\\widehat{P}(S,\\sigma) = \\sum_{j=0}^{1} T_{j}(y) \\left( \\sum_{i=0}^{2} a_{ij} T_{i}(x) \\right) = T_{0}(y) \\sum_{i=0}^{2} a_{i0} T_{i}(x) + T_{1}(y) \\sum_{i=0}^{2} a_{i1} T_{i}(x)\n$$\n代入 $T_0(y)=1$ 和 $T_1(y)=y$：\n$$\n\\widehat{P}(S,\\sigma) = (a_{00} T_{0}(x) + a_{10} T_{1}(x) + a_{20} T_{2}(x)) + y (a_{01} T_{0}(x) + a_{11} T_{1}(x) + a_{21} T_{2}(x))\n$$\n\n为了计算关于 $S$ 和 $\\sigma$ 的导数，我们需要切比雪夫 (Chebyshev) 多项式的导数：\n$T'_{0}(u) = 0$，$T'_{1}(u) = 1$，$T'_{2}(u) = 4u$。\n$T''_{0}(u) = 0$，$T''_{1}(u) = 0$，$T''_{2}(u) = 4$。\n\n现在，我们使用链式法则计算 Delta、Gamma 和 Vega。\n\n1.  Delta ($\\Delta = \\frac{\\partial \\widehat{P}}{\\partial S}$):\n$$\n\\Delta = \\frac{\\partial \\widehat{P}}{\\partial S} = \\frac{\\partial \\widehat{P}}{\\partial x} \\frac{dx}{dS}\n$$\n关于 $x$ 的偏导数为：\n$$\n\\frac{\\partial \\widehat{P}}{\\partial x} = (a_{10} T'_{1}(x) + a_{20} T'_{2}(x)) + y (a_{11} T'_{1}(x) + a_{21} T'_{2}(x)) = (a_{10} + 4a_{20}x) + y (a_{11} + 4a_{21}x)\n$$\n因此，Delta 为：\n$$\n\\Delta = \\left[ (a_{10} + 4a_{20}x) + y (a_{11} + 4a_{21}x) \\right] \\frac{dx}{dS}\n$$\n\n2.  Gamma ($\\Gamma = \\frac{\\partial^{2} \\widehat{P}}{\\partial S^{2}}$):\n$$\n\\Gamma = \\frac{\\partial}{\\partial S} \\left( \\frac{\\partial \\widehat{P}}{\\partial S} \\right) = \\frac{\\partial}{\\partial S} \\left( \\frac{\\partial \\widehat{P}}{\\partial x} \\frac{dx}{dS} \\right) = \\frac{\\partial}{\\partial S} \\left( \\frac{\\partial \\widehat{P}}{\\partial x} \\right) \\frac{dx}{dS} + \\frac{\\partial \\widehat{P}}{\\partial x} \\frac{d^{2}x}{dS^{2}}\n$$\n因为 $\\frac{d^{2}x}{dS^{2}} = 0$，表达式简化为：\n$$\n\\Gamma = \\left( \\frac{\\partial}{\\partial x} \\left( \\frac{\\partial \\widehat{P}}{\\partial x} \\right) \\frac{dx}{dS} \\right) \\frac{dx}{dS} = \\frac{\\partial^{2} \\widehat{P}}{\\partial x^{2}} \\left( \\frac{dx}{dS} \\right)^{2}\n$$\n关于 $x$ 的二阶偏导数为：\n$$\n\\frac{\\partial^{2} \\widehat{P}}{\\partial x^{2}} = \\frac{\\partial}{\\partial x} \\left[ (a_{10} + 4a_{20}x) + y (a_{11} + 4a_{21}x) \\right] = 4a_{20} + 4a_{21}y\n$$\n因此，Gamma 为：\n$$\n\\Gamma = (4a_{20} + 4a_{21}y) \\left( \\frac{dx}{dS} \\right)^{2}\n$$\n\n3.  Vega ($\\text{Vega} = \\frac{\\partial \\widehat{P}}{\\partial \\sigma}$):\n$$\n\\text{Vega} = \\frac{\\partial \\widehat{P}}{\\partial \\sigma} = \\frac{\\partial \\widehat{P}}{\\partial y} \\frac{dy}{d\\sigma}\n$$\n关于 $y$ 的偏导数为：\n$$\n\\frac{\\partial \\widehat{P}}{\\partial y} = a_{01} T_{0}(x) + a_{11} T_{1}(x) + a_{21} T_{2}(x) = a_{01} + a_{11} x + a_{21}(2x^{2} - 1)\n$$\n因此，Vega 为：\n$$\n\\text{Vega} = \\left[ (a_{01} - a_{21}) + a_{11}x + 2a_{21}x^{2} \\right] \\frac{dy}{d\\sigma}\n$$\n最后，我们在点 $(S, \\sigma) = (105, 0.2)$ 处计算这些表达式的值。\n首先，计算 $x$ 和 $y$：\n$$\nx(105) = \\frac{105 - 100}{20} = \\frac{5}{20} = \\frac{1}{4}\n$$\n$$\ny(0.2) = \\frac{2(0.2) - 0.5}{0.3} = \\frac{0.4 - 0.5}{0.3} = \\frac{-0.1}{0.3} = -\\frac{1}{3}\n$$\n代入系数、$x$、$y$ 以及映射导数的值。\n\n对于 Delta：\n$$\n\\Delta = \\left[ (5 + 4(2)\\frac{1}{4}) + (-\\frac{1}{3}) ((-3) + 4(1)\\frac{1}{4}) \\right] \\left(\\frac{1}{20}\\right)\n$$\n$$\n\\Delta = \\left[ (5 + 2) + (-\\frac{1}{3}) (-3 + 1) \\right] \\left(\\frac{1}{20}\\right) = \\left[ 7 + (-\\frac{1}{3})(-2) \\right] \\left(\\frac{1}{20}\\right)\n$$\n$$\n\\Delta = \\left[ 7 + \\frac{2}{3} \\right] \\left(\\frac{1}{20}\\right) = \\left( \\frac{21+2}{3} \\right) \\left(\\frac{1}{20}\\right) = \\frac{23}{3} \\cdot \\frac{1}{20} = \\frac{23}{60}\n$$\n\n对于 Gamma：\n$$\n\\Gamma = (4(2) + 4(1)(-\\frac{1}{3})) \\left( \\frac{1}{20} \\right)^{2} = (8 - \\frac{4}{3}) \\left( \\frac{1}{400} \\right)\n$$\n$$\n\\Gamma = \\left( \\frac{24-4}{3} \\right) \\left( \\frac{1}{400} \\right) = \\frac{20}{3} \\cdot \\frac{1}{400} = \\frac{1}{3 \\cdot 20} = \\frac{1}{60}\n$$\n\n对于 Vega：\n$$\n\\text{Vega} = \\left[ (8 - 1) + (-3)(\\frac{1}{4}) + 2(1)(\\frac{1}{4})^{2} \\right] \\left( \\frac{20}{3} \\right)\n$$\n$$\n\\text{Vega} = \\left[ 7 - \\frac{3}{4} + 2(\\frac{1}{16}) \\right] \\left( \\frac{20}{3} \\right) = \\left[ 7 - \\frac{3}{4} + \\frac{1}{8} \\right] \\left( \\frac{20}{3} \\right)\n$$\n$$\n\\text{Vega} = \\left[ \\frac{56 - 6 + 1}{8} \\right] \\left( \\frac{20}{3} \\right) = \\left( \\frac{51}{8} \\right) \\left( \\frac{20}{3} \\right) = \\frac{17 \\cdot 5}{2} = \\frac{85}{2}\n$$\n最终结果是 $\\Delta = \\frac{23}{60}$，$\\Gamma = \\frac{1}{60}$ 以及 Vega $= \\frac{85}{2}$。", "answer": "$$\\boxed{\\begin{pmatrix} \\frac{23}{60} & \\frac{1}{60} & \\frac{85}{2} \\end{pmatrix}}$$"}]}