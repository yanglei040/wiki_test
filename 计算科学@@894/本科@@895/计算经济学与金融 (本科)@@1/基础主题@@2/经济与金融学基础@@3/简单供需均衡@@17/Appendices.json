{"hands_on_practices": [{"introduction": "我们从一个对标准线性供需模型的扩展开始。在现实世界中，生产常常受到最小运营规模的限制。这个练习将探讨当供应商存在最低生产门槛时，市场均衡会如何变化，这迫使我们不能只寻找曲线的交点，还必须检验解的可行性，从而理解角点解在经济分析中的重要性。[@problem_id:2429894]", "id": "2429894", "problem": "考虑一个单一商品的竞争性市场，其反需求曲线为向下倾斜的线性曲线，反供给曲线为向上倾斜的线性曲线。市场中唯一的供应商是一家工厂，其运营不能低于最低运营产能。设 $Q$ 表示数量，$P$ 表示价格。\n\n需求由反需求函数 $P_{D}(Q) = \\alpha - \\beta Q$（当 $Q \\ge 0$）给出，其中 $\\alpha > 0$ 且 $\\beta > 0$。抑制价格为 $P_{choke} = \\alpha$，在此价格下需求量为 $0$。\n\n供给的特点是存在最低运营产能约束：如果工厂运营，其产量必须至少为 $Q_{min}$ 单位。运营时，反供给函数为 $P_{S}(Q) = \\gamma + \\delta Q$（当 $Q \\ge Q_{min}$），其中 $\\gamma \\ge 0$ 且 $\\delta > 0$。如果工厂不运营，市场供给 $Q_{S} = 0$。\n\n一个市场均衡点 $(Q^{*}, P^{*})$ 满足市场出清和可行性条件：(i) 工厂运营，此时 $Q^{*} \\ge Q_{min}$，且 $P^{*} = P_{D}(Q^{*}) = P_{S}(Q^{*})$，$P^{*} \\ge 0$；或者 (ii) 工厂不运营，此时 $Q^{*} = 0$，价格必须在零需求下使市场出清，在这种情况下，选择能够出清市场的最小非负价格，即 $P^{*} = P_{choke} = \\alpha$。\n\n您的任务是编写一个程序，针对以下给出的每一组参数 $(\\alpha, \\beta, \\gamma, \\delta, Q_{min})$，根据上述定义计算均衡点对 $(Q^{*}, P^{*})$。报告的每个 $Q^{*}$ 和 $P^{*}$ 值都应四舍五入至六位小数。\n\n测试集（每个元组为 $(\\alpha, \\beta, \\gamma, \\delta, Q_{min})$）：\n\n- 情况 A: $(\\alpha, \\beta, \\gamma, \\delta, Q_{min}) = ($100$, $1$, $10$, $1$, $20$)$.\n- 情况 B: $(\\alpha, \\beta, \\gamma, \\delta, Q_{min}) = ($100$, $1$, $10$, $1$, $60$)$.\n- 情况 C: $(\\alpha, \\beta, \\gamma, \\delta, Q_{min}) = ($90$, $1.5$, $30$, $0.5$, $20$)$.\n- 情况 D (边界情况): $(\\alpha, \\beta, \\gamma, \\delta, Q_{min}) = ($110$, $2$, $10$, $2$, $25$)$.\n- 情况 E (标准情况，Q_min=0): $(\\alpha, \\beta, \\gamma, \\delta, Q_{min}) = ($80$, $2$, $20$, $4$, $0$)$.\n- 情况 F (无正数量交点): $(\\alpha, \\beta, \\gamma, \\delta, Q_{min}) = ($5$, $2$, $10$, $3$, $1$)$.\n\n最终输出格式：\n您的程序应生成单行输出，其中包含一个由方括号括起来的、以逗号分隔的数对列表，顺序与上述情况相同，每个数对的格式为 $[Q^{*},P^{*}]$，且两个条目均四舍五入至六位小数。例如，一个使用占位符数字的有效输出将类似于 $[[x_{1},y_{1}],[x_{2},y_{2}],\\dots,[x_{6},y_{6}]]$。", "solution": "首先将对所提供的问题进行严格验证。\n\n### 步骤 1：提取已知信息\n问题提供了以下数据和定义：\n- **反需求函数**：$P_{D}(Q) = \\alpha - \\beta Q$（当 $Q \\ge 0$），参数为 $\\alpha > 0$, $\\beta > 0$。\n- **反供给函数**：$P_{S}(Q) = \\gamma + \\delta Q$（当 $Q \\ge Q_{min}$），参数为 $\\gamma \\ge 0$, $\\delta > 0$。\n- **最低运营产能**：$Q_{min}$。如果工厂不运营，供给量 $Q_{S} = 0$。\n- **均衡定义**：一个市场均衡点 $(Q^{*}, P^{*})$ 是一个满足以下两个条件之一的数对：\n    1.  工厂运营：$Q^{*} \\ge Q_{min}$，$P^{*} = P_{D}(Q^{*}) = P_{S}(Q^{*})$，且 $P^{*} \\ge 0$。\n    2.  工厂不运营：$Q^{*} = 0$，市场出清价格为 $P^{*} = P_{choke} = \\alpha$。\n- **测试集**：\n    - 情况 A: $(\\alpha, \\beta, \\gamma, \\delta, Q_{min}) = (100, 1, 10, 1, 20)$\n    - 情况 B: $(\\alpha, \\beta, \\gamma, \\delta, Q_{min}) = (100, 1, 10, 1, 60)$\n    - 情况 C: $(\\alpha, \\beta, \\gamma, \\delta, Q_{min}) = (90, 1.5, 30, 0.5, 20)$\n    - 情况 D: $(\\alpha, \\beta, \\gamma, \\delta, Q_{min}) = (110, 2, 10, 2, 25)$\n    - 情况 E: $(\\alpha, \\beta, \\gamma, \\delta, Q_{min}) = (80, 2, 20, 4, 0)$\n    - 情况 F: $(\\alpha, \\beta, \\gamma, \\delta, Q_{min}) = (5, 2, 10, 3, 1)$\n\n### 步骤 2：使用提取的已知信息进行验证\n根据既定标准对问题进行验证。\n\n- **科学性基础**：问题描述了一个带有线性函数和最低生产约束的简单供需模型。这些是微观经济学中的标准基础概念。该问题具有科学合理性。\n- **问题的适定性**：问题以数学精度进行了规定。函数、参数和均衡条件都得到了明确定义。参数约束（$\\alpha > 0, \\beta > 0, \\delta > 0, \\gamma \\ge 0$）确保了需求向下倾斜和供给向上倾斜的经济意义。均衡的两部分定义涵盖了所有可能性，并为每种情况提供了唯一的结果。该问题是适定的。\n- **问题的客观性**：问题陈述完全是定量的和定义性的。它不包含任何主观语言或基于观点的论断。该问题是客观的。\n\n该问题没有科学性不健全、不完整或模棱两可等缺陷。它是在计算经济学指定领域内的一个可形式化的问题。\n\n### 步骤 3：结论与行动\n问题是**有效的**。将制定解决方案。\n\n### 解决方案的制定\n市场均衡点 $(Q^*, P^*)$ 的确定需要基于所提供的定义进行系统性评估。存在两种可能的均衡类型：一种是正产量均衡，另一种是零产量（停产）均衡。\n\n首先，我们确定一个潜在的正产量均衡点。根据定义，当存在一个数量 $Q_e$ 使得市场出清，即 $P_D(Q_e) = P_S(Q_e)$ 时，就会出现这种情况。这是无约束均衡点。我们求解这个数量，记为 $Q_e$：\n$$\n\\alpha - \\beta Q_e = \\gamma + \\delta Q_e\n$$\n$$\n\\alpha - \\gamma = (\\beta + \\delta) Q_e\n$$\n$$\nQ_e = \\frac{\\alpha - \\gamma}{\\beta + \\delta}\n$$\n由于 $\\beta > 0$ 且 $\\delta > 0$，分母 $(\\beta + \\delta)$ 始终为正。相应的均衡价格 $P_e$ 可以通过将 $Q_e$ 代入需求或供给函数求得：\n$$\nP_e = P_D(Q_e) = \\alpha - \\beta \\left( \\frac{\\alpha - \\gamma}{\\beta + \\delta} \\right) = \\frac{\\alpha(\\beta + \\delta) - \\beta(\\alpha - \\gamma)}{\\beta + \\delta} = \\frac{\\alpha\\delta + \\beta\\gamma}{\\beta + \\delta}\n$$\n鉴于约束条件 $\\alpha > 0, \\beta > 0, \\delta > 0, \\gamma \\ge 0$，价格 $P_e$ 始终为非负。\n\n问题规定，对于正产量均衡，必须有 $Q^* \\ge Q_{min}$。此类均衡的唯一候选点是 $(Q_e, P_e)$，因为只有在这一点上才满足条件 $P_D(Q^*) = P_S(Q^*)$。因此，核心的逻辑测试是这个无约束均衡点 $(Q_e, P_e)$ 在最低产能约束 $Q_{min}$ 下是否可行。\n\n这导出了一个简单的二分逻辑：\n\n**情况1：无约束均衡是可行的。**\n这个条件成立当且仅当 $Q_e \\ge Q_{min}$。\n如果为真，工厂能够并且将会以市场出清数量 $Q_e$ 进行生产。所有运营均衡的条件都得到了满足：$Q_e \\ge Q_{min}$，$P_D(Q_e) = P_S(Q_e)$，且 $P_e \\ge 0$。\n因此，市场均衡点为 $(Q^*, P^*) = (Q_e, P_e)$。\n\n**情况2：无约束均衡是不可行的。**\n这个条件成立当且仅当 $Q_e < Q_{min}$。这涵盖了两种情景：\n  a) 曲线相交于一个过小的正数量（$0 \\le Q_e < Q_{min}$）。\n  b) 曲线在非负数量上不相交（$\\alpha \\le \\gamma$，导致 $Q_e \\le 0$）。\n\n在任一情景下，唯一满足 $P_D(Q) = P_S(Q)$ 的点都发生在小于 $Q_{min}$ 的数量上。对于任何数量 $Q \\ge Q_{min}$，必然有 $Q > Q_e$。由于函数 $P_D(Q) - P_S(Q) = (\\alpha - \\gamma) - (\\beta + \\delta)Q$ 在 $Q$ 上是严格递减的，对于任何 $Q > Q_e$，我们都有 $P_D(Q) < P_S(Q)$。这意味着，对于任何达到或超过最低产能的生产水平，消费者愿意支付的价格都低于供应商要求的价格。因此，在任何可行的生产水平上，生产都是无利可图的。工厂将不会运营。\n\n在这种情况下，市场默认为问题陈述中定义的停产均衡：市场供给为零，均衡点为 $(Q^*, P^*) = (0, \\alpha)$。\n\n**算法总结：**\n1. 给定参数 $(\\alpha, \\beta, \\gamma, \\delta, Q_{min})$，计算无约束均衡数量 $Q_e = \\frac{\\alpha - \\gamma}{\\beta + \\delta}$。\n2. 如果 $Q_e \\ge Q_{min}$，则均衡点为 $Q^* = Q_e$，且 $P^* = \\alpha - \\beta Q_e$。\n3. 如果 $Q_e < Q_{min}$，则均衡点为 $Q^* = 0$，且 $P^* = \\alpha$。\n\n将实施此程序以解决给定的测试案例。所有结果将按要求四舍五入至六位小数。", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Computes the market equilibrium for a set of supply and demand parameters\n    with a minimum production capacity constraint.\n    \"\"\"\n    # Define the test cases from the problem statement as tuples of\n    # (alpha, beta, gamma, delta, Q_min).\n    test_cases = [\n        (100.0, 1.0, 10.0, 1.0, 20.0),   # Case A\n        (100.0, 1.0, 10.0, 1.0, 60.0),   # Case B\n        (90.0, 1.5, 30.0, 0.5, 20.0),   # Case C\n        (110.0, 2.0, 10.0, 2.0, 25.0),   # Case D (boundary)\n        (80.0, 2.0, 20.0, 4.0, 0.0),    # Case E (standard with Q_min=0)\n        (5.0, 2.0, 10.0, 3.0, 1.0),    # Case F (no positive-quantity intersection)\n    ]\n\n    results = []\n    \n    for case in test_cases:\n        alpha, beta, gamma, delta, q_min = case\n\n        # The denominator (beta + delta) is always positive given the problem constraints\n        # (beta > 0, delta > 0).\n        denominator = beta + delta\n\n        # Calculate the unconstrained equilibrium quantity, Q_e, where the\n        # supply and demand curves intersect.\n        # Q_e = (alpha - gamma) / (beta + delta)\n        q_e = (alpha - gamma) / denominator\n\n        q_star, p_star = 0.0, 0.0\n\n        # The core logic is to check if the unconstrained equilibrium is feasible.\n        # An operating equilibrium is only possible at the intersection point (Q_e, P_e).\n        # If Q_e is less than the minimum required production Q_min, then no\n        # production is profitable, and the market shuts down.\n        if q_e >= q_min:\n            # Case 1: The unconstrained equilibrium is feasible.\n            # The market operates at this point.\n            q_star = q_e\n            # Calculate the price P* using the inverse demand function.\n            p_star = alpha - beta * q_star\n        else:\n            # Case 2: The unconstrained equilibrium is not feasible (Q_e < Q_min).\n            # For any Q >= Q_min, P_D(Q) < P_S(Q), so production is not viable.\n            # The market shuts down as per the problem definition.\n            q_star = 0.0\n            p_star = alpha\n        \n        # Format the result for the current case as a string \"[Q*,P*]\" with\n        # values rounded to six decimal places.\n        results.append(f\"[{q_star:.6f},{p_star:.6f}]\")\n\n    # Final print statement must produce a single line with the specified format:\n    # [[Q1,P1],[Q2,P2],...,[QN,PN]]\n    print(f\"[{','.join(results)}]\")\n\nsolve()\n```"}, {"introduction": "接下来，我们挑战标准需求定律。对于某些炫耀性商品（凡勃伦商品），价格上涨反而可能刺激需求。本练习通过一个三次多项式需求函数来模拟这种行为，你将发现市场可能存在多个均衡点。这个任务要求你解出所有可能的均衡价格和数量，并根据经济可行性（价格和数量的非负性）筛选出有效的解，从而深入理解市场均衡的复杂性和多样性。[@problem_id:2429850]", "id": "2429850", "problem": "考虑一个价格 $P \\ge 0$ 且数量 $Q \\ge 0$ 的单一商品市场。竞争均衡是任何满足 $P^{\\ast} \\ge 0$ 和 $Q^{\\ast} \\ge 0$ 的数对 $(P^{\\ast}, Q^{\\ast})$，使得在价格 $P^{\\ast}$ 时需求量等于供给量，即 $Q_d(P^{\\ast}) = Q_s(P^{\\ast}) = Q^{\\ast}$。对于 Veblen 商品，需求可能在某个非空的价格区间内随价格上涨而增加。需求和供给模型如下：\n- 需求：$Q_d(P) = \\alpha - \\beta P + \\gamma P^2 - \\delta P^3$，其中参数 $\\alpha > 0$，$\\beta > 0$，$\\gamma > 0$，$\\delta > 0$。此设定允许存在 Veblen 区域，因为只要二次条件 $-\\beta + 2 \\gamma P - 3 \\delta P^2 > 0$ 的判别式为正，需求导数 $Q_d'(P) = -\\beta + 2 \\gamma P - 3 \\delta P^2$ 就可以在某个非空区间上为正。\n- 供给：$Q_s(P) = s_0 + s_1 P$，其中参数 $s_0 \\in \\mathbb{R}$ 且 $s_1 > 0$。\n\n你的任务是根据基本定义，为下面测试套件中的每组参数计算出所有的竞争均衡点 $(P^{\\ast}, Q^{\\ast})$。一个均衡点 $(P^{\\ast}, Q^{\\ast})$ 必须满足 $P^{\\ast} \\ge 0$，$Q^{\\ast} \\ge 0$ 以及 $Q_d(P^{\\ast}) = Q_s(P^{\\ast})$。如果不存在这样的数对，则该测试用例的输出为空列表。\n\n测试套件（每个用例为 $(\\alpha, \\beta, \\gamma, \\delta, s_0, s_1)$，按此顺序）：\n- 用例 $1$：$(\\alpha, \\beta, \\gamma, \\delta, s_0, s_1) = (\\,\\$120\\$, \\$60\\$, \\$12\\$, \\$0.6\\$, \\$20\\$, \\$8\\$\\,)$。\n- 用例 $2$：$(\\alpha, \\beta, \\gamma, \\delta, s_0, s_1) = (\\,\\$120\\$, \\$60\\$, \\$12\\$, \\$0.6\\$, \\$-33.6\\$, \\$16.8\\$\\,)$。此用例经过校准，使得供给曲线在某一正价格点上与需求曲线相切，从而产生一个带有重根的边界条件。\n- 用例 $3$：$(\\alpha, \\beta, \\gamma, \\delta, s_0, s_1) = (\\,\\$120\\$, \\$60\\$, \\$12\\$, \\$0.6\\$, \\$0\\$, \\$25\\$\\,)$。\n- 用例 $4$：$(\\alpha, \\beta, \\gamma, \\delta, s_0, s_1) = (\\,\\$120\\$, \\$60\\$, \\$12\\$, \\$0.6\\$, \\$250\\$, \\$15\\$\\,)$。\n\n输出规格：\n- 对于每个测试用例，生成所有均衡点的列表，格式为 $[ [P_1^{\\ast}, Q_1^{\\ast}], [P_2^{\\ast}, Q_2^{\\ast}], \\dots ]$，按价格 $P_i^{\\ast}$ 严格递增排序，其中每个数字精确到小数点后六位。\n- 将所有测试用例的输出汇总到单行，作为列表的列表：$[ \\text{case1\\_list}, \\text{case2\\_list}, \\text{case3\\_list}, \\text{case4\\_list} ]$。\n- 如果一个测试用例没有均衡点，则该用例输出空列表 $[\\ ]$。\n- 最终打印的行不得包含任何空格。例如，一个包含两个用例的输出可能看起来像 $[[[P^{\\ast}_1,Q^{\\ast}_1]],[]]$，其中每个 $P^{\\ast}_i$ 和 $Q^{\\ast}_i$ 都显示到小数点后六位。\n\n本问题不涉及物理单位。所有结果必须是实数，并遵守非负约束 $P^{\\ast} \\ge 0$ 和 $Q^{\\ast} \\ge 0$。", "solution": "该市场的竞争均衡是一个数对 $(P^{\\ast}, Q^{\\ast})$，它满足定义条件 $P^{\\ast} \\ge 0$，$Q^{\\ast} \\ge 0$ 以及 $Q_d(P^{\\ast}) = Q_s(P^{\\ast}) = Q^{\\ast}$。给定需求 $Q_d(P) = \\alpha - \\beta P + \\gamma P^2 - \\delta P^3$（其中 $\\alpha > 0$，$\\beta > 0$，$\\gamma > 0$，$\\delta > 0$）和供给 $Q_s(P) = s_0 + s_1 P$（其中 $s_1 > 0$），Veblen 属性的出现是因为需求导数为\n$$\nQ_d'(P) = -\\beta + 2 \\gamma P - 3 \\delta P^2,\n$$\n这是一个关于 $P$ 的凹二次函数。当其判别式为正时，存在一个非空区间 $(P_L, P_H)$，在此区间上 $Q_d'(P) > 0$，并且需求曲线在 $(P_L, P_H)$ 上是向上倾斜的。\n\n均衡出现在满足等式条件 $Q_d(P) = Q_s(P)$ 的价格 $P$ 处。定义\n$$\ng(P) \\equiv Q_d(P) - Q_s(P) = \\alpha - \\beta P + \\gamma P^2 - \\delta P^3 - s_0 - s_1 P.\n$$\n整理各项后，得到一个关于 $P$ 的三次多项式方程，\n$$\n-\\delta P^3 + \\gamma P^2 - (\\beta + s_1) P + (\\alpha - s_0) = 0.\n$$\n设 $P$ 的降幂排列系数为 $[-\\delta,\\ \\gamma,\\ -(\\beta + s_1),\\ (\\alpha - s_0)]$。该多项式的实根都是候选的均衡价格。由于价格和数量必须为非负，我们施加可行性约束 $P^{\\ast} \\ge 0$ 和 $Q^{\\ast} = Q_s(P^{\\ast}) = s_0 + s_1 P^{\\ast} \\ge 0$ 来筛选掉不合规的根。当一个根的重数大于一（例如，相切点），它代表一个单一的均衡价格，不应重复计算。对应的均衡数量 $Q^{\\ast}$ 则由 $Q^{\\ast} = Q_s(P^{\\ast})$ 给出。\n\n基于这些原则的算法规划：\n- 对于每个测试用例，构建三次方程的系数向量 $[-\\delta,\\ \\gamma,\\ -(\\beta + s_1),\\ (\\alpha - s_0)]$。\n- 计算三次方程的所有复数根，通过要求虚部在数值上可忽略不计来提取实数根，并按非递减顺序排序。\n- 施加 $P^{\\ast} \\ge 0$ 和 $Q^{\\ast} = s_0 + s_1 P^{\\ast} \\ge 0$ 以强制可行性。\n- 对几乎相同的价格进行去重，以处理重根（相切点）。\n- 报告所有 $(P^{\\ast}, Q^{\\ast})$ 对，按 $P^{\\ast}$ 排序，并将每个数字四舍五入到小数点后六位。\n\n将此方法应用于测试套件：\n- 用例 $1$：$(\\alpha, \\beta, \\gamma, \\delta, s_0, s_1) = (\\,\\$120\\$, \\$60\\$, \\$12\\$, \\$0.6\\$, \\$20\\$, \\$8\\$\\,)$。三次方程为 $-\\$0.6\\$ P^3 + \\$12\\$ P^2 - \\$68\\$ P + \\$100\\$ = 0$，它有三个满足 $P^{\\ast} \\ge 0$ 的不同实根。所有对应的数量 $Q^{\\ast} = \\$20\\$ + \\$8\\$ P^{\\ast}$ 均为非负，因此存在三个可接受的均衡点。数值上，这些均衡点出现在价格约 $P^{\\ast} \\approx \\$2.291600\\$, $P^{\\ast} \\approx \\$6.490000\\$, 和 $P^{\\ast} \\approx \\$11.229900\\$ 处，对应的数量分别为 $Q^{\\ast} \\approx \\$38.332800\\$, $Q^{\\ast} \\approx \\$71.920000\\$, 和 $Q^{\\ast} \\approx \\$109.839200\\$。\n- 用例 $2$：$(\\alpha, \\beta, \\gamma, \\delta, s_0, s_1) = (\\,\\$120\\$, \\$60\\$, \\$12\\$, \\$0.6\\$, \\$-33.6\\$, \\$16.8\\$\\,)$。三次方程为 $-\\$0.6\\$ P^3 + \\$12\\$ P^2 - \\$76.8\\$ P + \\$153.6\\$ = 0$。此配置是一个边界（相切）用例。事实上，$Q_d'(P) = -\\$60\\$ + \\$24\\$ P - \\$1.8\\$ P^2$ 且 $Q_s'(P) = \\$16.8\\$, 故在 $P = \\$8\\$, $Q_d'(8) = \\$16.8\\$ = Q_s'(8)$ 且 $Q_d(8) = \\$100.8\\$ = Q_s(8)$，证明了在 $P^{\\ast} = \\$8\\$$ 处存在一个重根（相切均衡点）。因式分解证实了 $-\\$0.6\\$ (P - \\$8\\$)^2 (P - \\$4\\$) = 0$，因此另一个均衡点为 $P^{\\ast} = \\$4\\$$，对应的 $Q^{\\ast} = \\$33.6\\$$。两个均衡点都满足非负性。\n- 用例 $3$：$(\\alpha, \\beta, \\gamma, \\delta, s_0, s_1) = (\\,\\$120\\$, \\$60\\$, \\$12\\$, \\$0.6\\$, \\$0\\$, \\$25\\$\\,)$。三次方程为 $-\\$0.6\\$ P^3 + \\$12\\$ P^2 - \\$85\\$ P + \\$120\\$ = 0$。在 $P \\ge 0$ 上只有一个可接受的交点；数值上，$P^{\\ast} \\approx \\$1.850700\\$, 对应的 $Q^{\\ast} = \\$25\\$ \\cdot P^{\\ast} \\approx \\$46.267500\\$. 其他根在 $P \\ge 0$ 上不可接受或是复数根。\n- 用例 $4$：$(\\alpha, \\beta, \\gamma, \\delta, s_0, s_1) = (\\,\\$120\\$, \\$60\\$, \\$12\\$, \\$0.6\\$, \\$250\\$, \\$15\\$\\,)$。三次方程为 $-\\$0.6\\$ P^3 + \\$12\\$ P^2 - \\$75\\$ P - \\$130\\$ = 0$。对于所有 $P \\ge 0$，$Q_s(P)$ 均超过 $Q_d(P)$，因此不存在满足 $P^{\\ast} \\ge 0$ 和 $Q^{\\ast} \\ge 0$ 的可接受均衡点 $(P^{\\ast}, Q^{\\ast})$。此用例的正确输出是空列表。\n\n程序计算实数根，强制可行性，对相切用例进行去重，按价格对均衡点排序，并打印所需的单行、无空格、列表的列表格式的输出，每个数字都四舍五入到小数点后六位。", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef find_equilibria(alpha, beta, gamma, delta, s0, s1, imag_tol=1e-9, p_tol=1e-7):\n    \"\"\"\n    Solve for all competitive equilibria (P*, Q*) given parameters of\n    Qd(P) = alpha - beta*P + gamma*P**2 - delta*P**3\n    Qs(P) = s0 + s1*P\n    Returns a list of [P*, Q*] pairs with P*, Q* rounded to 6 decimals.\n    \"\"\"\n    # Coefficients for g(P) = Qd(P) - Qs(P) = 0 in descending powers of P\n    # g(P) = -delta*P^3 + gamma*P^2 - (beta + s1)*P + (alpha - s0)\n    coefs = np.array([-delta, gamma, -(beta + s1), (alpha - s0)], dtype=float)\n\n    # Compute all roots of the cubic\n    roots = np.roots(coefs)\n\n    # Extract real roots within tolerance\n    real_ps = sorted(r.real for r in roots if abs(r.imag) <= imag_tol)\n\n    # Filter feasible equilibria: P >= 0 and Q >= 0\n    eqs = []\n    for p in real_ps:\n        if p >= -1e-10:  # allow tiny negative numerical noise\n            p_val = 0.0 if abs(p) < 1e-12 else p\n            q_val = s0 + s1 * p_val\n            if q_val >= -1e-10:\n                eqs.append((p_val, q_val))\n\n    # Sort by price\n    eqs.sort(key=lambda x: x[0])\n\n    # Deduplicate near-equal prices (handle repeated roots/tangency)\n    dedup = []\n    for p_val, q_val in eqs:\n        if not dedup:\n            dedup.append((p_val, q_val))\n        else:\n            p_prev, q_prev = dedup[-1]\n            if abs(p_val - p_prev) <= p_tol:\n                # Merge duplicates by averaging to reduce numerical jitter\n                merged_p = 0.5 * (p_prev + p_val)\n                merged_q = 0.5 * (q_prev + q_val)\n                dedup[-1] = (merged_p, merged_q)\n            else:\n                dedup.append((p_val, q_val))\n\n    # Round to 6 decimals\n    rounded = [[round(p, 6), round(s0 + s1 * p, 6)] for (p, _) in dedup]\n    return rounded\n\ndef format_output(all_results):\n    \"\"\"\n    Format nested list of results with no spaces and exactly six decimals.\n    all_results: list of test case results, each a list of [P, Q] lists.\n    \"\"\"\n    def fmt_num(x):\n        return f\"{x:.6f}\"\n\n    def fmt_case(case):\n        # case is a list of [P, Q]\n        pairs = []\n        for P, Q in case:\n            pairs.append(f\"[{fmt_num(P)},{fmt_num(Q)}]\")\n        return \"[\" + \",\".join(pairs) + \"]\"\n\n    return \"[\" + \",\".join(fmt_case(case) for case in all_results) + \"]\"\n\ndef solve():\n    # Define the test cases from the problem statement:\n    # Each tuple is (alpha, beta, gamma, delta, s0, s1)\n    test_cases = [\n        (120.0, 60.0, 12.0, 0.6, 20.0, 8.0),      # Case 1: three intersections\n        (120.0, 60.0, 12.0, 0.6, -33.6, 16.8),    # Case 2: tangency + one more\n        (120.0, 60.0, 12.0, 0.6, 0.0, 25.0),      # Case 3: single intersection\n        (120.0, 60.0, 12.0, 0.6, 250.0, 15.0),    # Case 4: no equilibrium\n    ]\n\n    results = []\n    for alpha, beta, gamma, delta, s0, s1 in test_cases:\n        equilibria = find_equilibria(alpha, beta, gamma, delta, s0, s1)\n        results.append(equilibria)\n\n    # Final print statement in the exact required format (single line, no spaces).\n    print(format_output(results))\n\nif __name__ == \"__main__\":\n    solve()\n```"}, {"introduction": "最后，我们探讨一个更高级的模型，其中需求本身受到市场总交易量的影响——即存在网络外部性。在这种情况下，均衡变成一个需要求解的“不动点”问题，这对于理解现代经济中许多市场（如社交网络和软件平台）至关重要。通过推导有效需求曲线并分析税收的无谓损失，你将把均衡分析与福利经济学的核心概念联系起来，这是一个强大的组合，用于评估经济政策的社会成本。[@problem_id:2429889]", "id": "2429889", "problem": "考虑一个单一商品的竞争市场，其供给和需求均为线性，且需求侧存在线性网络外部性。向消费者征收从量（单位）税。您必须为几组参数，数值上精确地计算该税收造成的无谓损失 (DWL)。\n\n基本要素与定义：\n- 反供给函数由 $P_S(Q) = s_0 + s_1 Q$ 给出，其中 $s_1 > 0$，$Q \\ge 0$，且 $P_S(Q)$ 是生产者收到的价格。\n- 具有线性网络外部性的直接需求函数由 $Q_D(P_c, Q) = a - b P_c + m Q$ 给出，其中 $b > 0$，$m < 1$，$Q \\ge 0$，且 $P_c$ 是消费者支付的价格。参数 $m$ 捕捉了网络效应：随着均衡数量 $Q$ 的增加，更高的 $m$ 会增加需求。\n- 对消费者征收税率为 $t \\ge 0$ 的从量税，因此消费者支付 $P_c = P + t$，而生产者收到 $P$，其中 $P$ 是与供给函数一致的市场价格。\n- 在任何税率 $t$ 下的市场均衡由不动点系统 $Q = Q_D(P + t, Q)$ 和 $P = P_S(Q)$ 以及可行性约束 $Q \\ge 0$ 定义。\n- 在给定均衡数量 $Q$ 下的总剩余定义为私人边际支付意愿函数（反需求函数）与反供给函数之间的面积，即反需求函数减去反供给函数后对数量从 $0$ 到 $Q$ 的定积分。税收的无谓损失 (DWL) 是总剩余中未被政府收入抵消的损失部分，等价于无税收时的总剩余与包含政府税收收入在内的有税总剩余之间的差额。\n\n任务：\n1. 从上述基本定义出发，推导与不动点需求 $Q_D(P_c, Q)$ 和线性网络外部性参数 $m$ 相一致的简化形式的反需求函数（即作为 $Q$ 函数的私人边际支付意愿）。然后，使用条件 $P_S(Q) = P$，将无税均衡数量 $Q_0$ 和有税均衡数量 $Q_t$ 表示为基本参数 $(a, b, m, s_0, s_1, t)$ 的函数，并施加可行性约束 $Q \\ge 0$。\n2. 使用总剩余的标准定义，即反需求函数减去反供给函数后从 $0$ 到 $Q$ 的定积分，将无谓损失 (DWL) 表示为 $Q_0$、$Q_t$ 和基本参数 $(a, b, m, s_0, s_1)$ 的函数。确保您的实现能正确处理 $Q_0 = 0$ 或 $Q_t = 0$ 的边界情况。\n3. 实现一个程序，为下面的测试套件中的每组参数计算无谓损失。将每个结果表示为保留六位小数的浮点数。\n\n参数约束：\n- $b > 0$，$s_1 > 0$，$m < 1$，$t \\ge 0$。选择满足 $Q \\ge 0$ 的主均衡。\n\n测试套件（每个测试用例是一个元组 $(a, b, m, s_0, s_1, t)$）：\n- 具有内部解的正常路径：$(\\$100\\$, \\$2\\$, \\$0.2\\$, \\$10\\$, \\$1\\$, \\$5\\$)$。\n- 零税收边界（DWL 应为零）：$(\\$80\\$, \\$1.5\\$, \\$0.5\\$, \\$5\\$, \\$0.5\\$, \\$0\\$)$。\n- 导致有税情况下无交易的高税收角点解：$(\\$60\\$, \\$1\\$, \\$0.3\\$, \\$20\\$, \\$0.8\\$, \\$50\\$)$。\n- 接近边界 $m \\to 1$ 的强网络效应：$(\\$100\\$, \\$3\\$, \\$0.95\\$, \\$5\\$, \\$0.2\\$, \\$2\\$)$。\n- 负网络效应（拥堵）：$(\\$90\\$, \\$2\\$, \\$-0.3\\$, \\$8\\$, \\$0.4\\$, \\$4\\$)$。\n\n最终输出格式：\n- 您的程序应输出一行结果，该结果为方括号内以逗号分隔的列表，其顺序与测试套件的顺序相同，例如 $[r_1,r_2,r_3,r_4,r_5]$，其中每个 $r_i$ 是测试用例 $i$ 的无谓损失，保留六位小数。\n- 不应打印任何其他输出。", "solution": "对问题陈述进行验证。\n\n步骤 1：提取给定信息\n- 反供给函数：$P_S(Q) = s_0 + s_1 Q$，其中 $s_1 > 0$，$Q \\ge 0$。\n- 具有网络外部性的直接需求函数：$Q_D(P_c, Q) = a - b P_c + m Q$，其中 $b > 0$，$m < 1$，$Q \\ge 0$。\n- 对消费者的从量税：税率 $t \\ge 0$。消费者价格 $P_c = P + t$。生产者价格为 $P$。市场价格 $P$ 与供给一致，因此 $P = P_S(Q)$。\n- 市场均衡条件：一个满足 $Q = Q_D(P + t, Q)$ 和 $P = P_S(Q)$ 的不动点 $(P, Q)$，且 $Q \\ge 0$。\n- 在数量 $Q$ 时的总剩余：私人边际支付意愿函数与反供给函数之间从 $0$ 到 $Q$ 的面积。\n- 无谓损失 (DWL)：总剩余中未被政府收入抵消的损失。\n- 任务 1：推导简化形式的反需求函数，以及无税均衡数量 $Q_0$ 和有税均衡数量 $Q_t$ 的表达式。\n- 任务 2：将 DWL 表示为 $Q_0$、$Q_t$ 和基本参数的函数。\n- 任务 3：实现一个程序来为给定的参数集计算 DWL。\n- 参数约束：$b > 0$，$s_1 > 0$，$m < 1$，$t \\ge 0$。\n- 测试套件：\n    1. $(a, b, m, s_0, s_1, t) = (100, 2, 0.2, 10, 1, 5)$\n    2. $(a, b, m, s_0, s_1, t) = (80, 1.5, 0.5, 5, 0.5, 0)$\n    3. $(a, b, m, s_0, s_1, t) = (60, 1, 0.3, 20, 0.8, 50)$\n    4. $(a, b, m, s_0, s_1, t) = (100, 3, 0.95, 5, 0.2, 2)$\n    5. $(a, b, m, s_0, s_1, t) = (90, 2, -0.3, 8, 0.4, 4)$\n\n步骤 2：使用提取的信息进行验证\n该问题具有科学依据，提法明确且客观。这是一个包含网络外部性和税收的标准微观经济学供需模型。所有术语都经过了正式且无歧义的定义。参数被约束（$s_1 > 0, b > 0, m < 1$）以确保供给和需求函数具有良好性质，从而得到唯一、稳定的均衡。这些任务是将经济学原理直接应用于给定模型。不存在事实错误、矛盾或信息缺失。该问题是一个计算经济学的正式练习。\n\n步骤 3：结论与行动\n问题有效。将提供解答。\n\n按要求，分析过程分三部分进行。\n\n首先，我们推导简化形式的反需求函数，它代表了私人边际支付意愿。这可以通过重新整理直接需求函数 $Q = a - b P_c + m Q$ 得到，即解出消费者价格 $P_c$ 作为数量 $Q$ 的函数。\n$$Q(1-m) = a - b P_c$$\n$$b P_c = a - (1-m)Q$$\n因此，我们记为 $P_D(Q)$ 的反需求函数为：\n$$P_D(Q) = \\frac{a}{b} - \\frac{1-m}{b}Q$$\n由于 $m < 1$ 且 $b > 0$，斜率 $-\\frac{1-m}{b}$ 为负，这与向下倾斜的需求曲线一致。反供给函数由 $P_S(Q) = s_0 + s_1 Q$ 给出。\n\n其次，我们确定市场均衡数量。均衡发生在需求量等于供给量之处。消费者愿意支付的价格 $P_D(Q)$ 必须等于供给者要求的价格 $P_S(Q)$ 加上任何单位税 $t$。均衡条件为 $P_D(Q) = P_S(Q) + t$。\n代入 $P_D(Q)$ 和 $P_S(Q)$ 的表达式：\n$$\\frac{a}{b} - \\frac{1-m}{b}Q = (s_0 + s_1 Q) + t$$\n我们求解均衡数量 $Q$，对于税率 $t$ 记为 $Q_t$：\n$$\\frac{a}{b} - s_0 - t = s_1 Q + \\frac{1-m}{b}Q$$\n$$\\frac{a - bs_0 - bt}{b} = \\left(\\frac{bs_1 + 1 - m}{b}\\right)Q_t$$\n$$Q_t = \\frac{a - bs_0 - bt}{1 - m + bs_1}$$\n在给定 $m < 1$，$b > 0$ 和 $s_1 > 0$ 的条件下，分母 $1 - m + bs_1$ 严格为正。数量 $Q_t$ 必须为非负数。因此，均衡数量为：\n$$Q_t = \\max\\left(0, \\frac{a - bs_0 - bt}{1 - m + bs_1}\\right)$$\n无税均衡数量 $Q_0$ 是 $t=0$ 时的特殊情况：\n$$Q_0 = \\max\\left(0, \\frac{a - bs_0}{1 - m + bs_1}\\right)$$\n\n第三，我们推导无谓损失 (DWL) 的公式。DWL 是由税收导致的总剩余损失。总剩余是私人反需求曲线 $P_D(Q)$ 和反供给曲线 $P_S(Q)$ 之间的面积。税收导致数量从有效率的水平 $Q_0$ 移动到扭曲的水平 $Q_t$。DWL 是在此数量减少上损失的剩余，即需求曲线与供给曲线之差从 $Q_t$ 到 $Q_0$ 的定积分。\n$$DWL = \\int_{Q_t}^{Q_0} [P_D(Q) - P_S(Q)] dQ$$\n设被积函数为 $f(Q) = P_D(Q) - P_S(Q)$。\n$$f(Q) = \\left(\\frac{a}{b} - \\frac{1-m}{b}Q\\right) - (s_0 + s_1 Q) = \\left(\\frac{a}{b} - s_0\\right) - \\left(s_1 + \\frac{1-m}{b}\\right)Q$$\n这是一个关于 $Q$ 的线性函数。该积分代表一个梯形的面积。一个更稳健的方法是直接使用这个函数形式。设 $C_1 = s_1 + \\frac{1-m}{b}$ 为 $f(Q)$ 斜率的绝对值。该积分变为：\n$$DWL = \\int_{Q_t}^{Q_0} f(Q) dQ = \\left[\\left(\\frac{a}{b} - s_0\\right)Q - \\frac{1}{2}\\left(s_1 + \\frac{1-m}{b}\\right)Q^2\\right]_{Q_t}^{Q_0}$$\n这个表达式可以被简化。注意到 $Q_0 - Q_t = \\frac{bt}{1 - m + bs_1} = \\frac{t}{C_1}$。梯形的面积也由 $\\frac{1}{2}(f(Q_t) + f(Q_0))(Q_0 - Q_t)$ 给出。\n如果 $Q_0 > 0$，那么 $f(Q_0) = P_D(Q_0) - P_S(Q_0) = 0$。\n如果 $Q_t > 0$，那么 $f(Q_t) = P_D(Q_t) - P_S(Q_t) = t$。在这种内部解的情况下，$DWL = \\frac{1}{2}(t+0)(Q_0 - Q_t)$。\n然而，如果税收高到禁止交易，使得 $Q_t=0$ 而 $Q_0 > 0$，这个简单的公式是不正确的。DWL 变为全部初始剩余。\n从线性函数的性质可以推导出一个普遍正确的公式：\n$$DWL = \\frac{1}{2} C_1 (Q_0 - Q_t)^2 = \\frac{1}{2} \\left(s_1 + \\frac{1-m}{b}\\right) (Q_0 - Q_t)^2$$\n这个公式能正确计算所有情况下的剩余三角形/梯形的面积，包括内部解（$Q_t > 0$）、税收导致数量为零的角点解（$Q_t = 0$）以及无税情况（$t=0$，此时 $Q_t=Q_0$ 且 $DWL=0$）。\n\n计算算法如下：\n1. 对于每组参数 $(a, b, m, s_0, s_1, t)$：\n2. 计算公共分母：$D = 1 - m + b s_1$。\n3. 计算无税均衡数量：$Q_0 = \\max(0, (a - b s_0) / D)$。\n4. 计算有税均衡数量：$Q_t = \\max(0, (a - b s_0 - b t) / D)$。\n5. 计算斜率系数：$C_1 = s_1 + (1 - m) / b$。\n6. 计算无谓损失：$DWL = 0.5 \\times C_1 \\times (Q_0 - Q_t)^2$。\n7. 将最终的 $DWL$ 四舍五入到六位小数。\n\n下面实现了这个过程。", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Computes the deadweight loss of a per-unit tax in a market with a\n    linear network externality.\n    \"\"\"\n\n    # Define the test cases from the problem statement.\n    # Each tuple is (a, b, m, s0, s1, t)\n    test_cases = [\n        (100.0, 2.0, 0.2, 10.0, 1.0, 5.0),    # Happy path\n        (80.0, 1.5, 0.5, 5.0, 0.5, 0.0),    # Zero-tax boundary\n        (60.0, 1.0, 0.3, 20.0, 0.8, 50.0),   # High-tax corner\n        (100.0, 3.0, 0.95, 5.0, 0.2, 2.0),   # Strong network effect\n        (90.0, 2.0, -0.3, 8.0, 0.4, 4.0),    # Negative network effect\n    ]\n\n    results = []\n    for params in test_cases:\n        a, b, m, s0, s1, t = params\n\n        # The model assumes b > 0, s1 > 0, m < 1.\n        # These are crucial for a well-defined equilibrium.\n        \n        # Denominator in the quantity expressions. It is always positive\n        # under the given parameter constraints.\n        denom = 1 - m + b * s1\n\n        # Calculate no-tax equilibrium quantity (Q_0)\n        # Q_0 = max(0, (a - b*s0) / denom)\n        q0_numerator = a - b * s0\n        q0 = 0.0\n        if q0_numerator > 0:\n            q0 = q0_numerator / denom\n\n        # Calculate with-tax equilibrium quantity (Q_t)\n        # Q_t = max(0, (a - b*s0 - b*t) / denom)\n        qt_numerator = a - b * s0 - b * t\n        qt = 0.0\n        if qt_numerator > 0:\n            qt = qt_numerator / denom\n            \n        # The deadweight loss is the area of a triangle/trapezoid representing\n        # the loss in total surplus. The robust formula for linear curves is:\n        # DWL = 0.5 * C1 * (Q0 - Qt)^2\n        # where C1 is the sum of the magnitudes of the slopes of the inverse\n        # supply and inverse demand curves.\n        # C1 = s1 + (1 - m) / b\n        c1 = s1 + (1 - m) / b\n        \n        # Calculate the quantity difference\n        quantity_diff = q0 - qt\n        \n        # Calculate the deadweight loss\n        dwl = 0.5 * c1 * (quantity_diff ** 2)\n        \n        # Format the result to six decimal places\n        results.append(f\"{dwl:.6f}\")\n\n    # Final print statement in the exact required format.\n    print(f\"[{','.join(results)}]\")\n\nsolve()\n```"}]}