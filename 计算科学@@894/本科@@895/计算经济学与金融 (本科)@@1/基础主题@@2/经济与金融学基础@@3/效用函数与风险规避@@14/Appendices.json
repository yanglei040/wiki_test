{"hands_on_practices": [{"introduction": "1111这个练习将一个标准问题反向思考。我们不再是利用给定的风险规避系数来预测行为，而是利用观察到的投资行为来反推投资者潜在的风险规避程度。通过应用经典的Merton投资组合选择模型，你将从投资者在股票市场中的资产配置中计算出其隐含的相对风险规避系数（$\\\\gamma$），从而将抽象的理论与可观察的市场数据联系起来。[@problem_id:2445855]", "id": "2445855", "problem": "一位投资者将其财富的固定比例分配给标准普尔（S&amp;P）$500$指数，其余部分则分配给无风险货币市场账户。该投资者对期末财富具有恒定相对风险厌恶（CRRA）偏好，其效用函数为 $U(W) = \\frac{W^{1-\\gamma}}{1-\\gamma}$，其中 $\\gamma > 0, \\gamma \\neq 1$。S&amp;P $500$指数价格 $S_t$ 服从几何布朗运动（GBM），由 $\\mathrm{d}S_t/S_t = \\mu \\,\\mathrm{d}t + \\sigma \\,\\mathrm{d}B_t$ 给出，其中 $\\mu$ 和 $\\sigma$ 是常数，$B_t$ 是标准布朗运动。无风险利率为常数 $r$。在 $[0,T]$ 的投资期内，该投资者始终保持在S&amp;P $500$中的投资组合权重为常数 $\\omega$，并将 $1-\\omega$ 投资于无风险资产。\n\n你观察到 $\\omega = 0.60$。假设年化参数为 $\\mu = 0.07$，$\\sigma = 0.20$ 和 $r = 0.02$，所有单位均为年化单位。在维持的假设下，推断该投资者的隐含相对风险厌恶系数 $\\gamma$。将你的答案四舍五入到三位有效数字。", "solution": "该问题要求从投资者观察到的最优投资组合配置中推断其相对风险厌恶系数 $\\gamma$。我们首先验证问题陈述。\n\n步骤1：提取已知条件。\n- 投资者效用函数：$U(W) = \\frac{W^{1-\\gamma}}{1-\\gamma}$，其中 $\\gamma > 0, \\gamma \\neq 1$。这是一个恒定相对风险厌恶（CRRA）效用函数。\n- 风险资产（S&P 500）价格动态：$\\frac{\\mathrm{d}S_t}{S_t} = \\mu \\,\\mathrm{d}t + \\sigma \\,\\mathrm{d}B_t$。\n- 无风险资产回报率：常数 $r$。\n- 投资组合配置：固定比例 $\\omega$ 投资于风险资产， $1-\\omega$ 投资于无风险资产。\n- 观察到和给定的参数：\n  - $\\omega = 0.60$\n  - $\\mu = 0.07$（风险资产的年化期望回报率）\n  - $\\sigma = 0.20$（风险资产的年化波动率）\n  - $r = 0.02$（年化无风险利率）\n  - 投资期：$[0,T]$。\n\n步骤2：使用提取的已知条件进行验证。\n这个问题具有科学依据，因为它是Merton投资组合问题的直接应用，这是数学金融中的一个经典和基础课题。它是适定的，因为可以从给定的参数和已建立的理论模型中确定一个唯一的 $\\gamma$ 值。问题的陈述是客观的，具有精确的数值和函数形式。它是自洽的，没有矛盾。提供的参数值对于金融市场是现实的。因此，该问题被认为是有效的，可以构建一个解决方案。\n\n步骤3：进行求解。\n投资者的目标是最大化期末财富的期望效用 $E[U(W_T)]$。对于一个具有CRRA效用函数的投资者，在只有一个服从几何布朗运动的风险资产和恒定无风险利率的市场中，分配给风险资产的最优财富比例 $\\omega^*$ 是不随时间变化的。这是Merton投资组合理论的一个标准结果。\n\n令 $W_t$ 为投资者在时间 $t$ 的财富。财富过程的动态由投资组合各组成部分的回报决定。财富的变化 $dW_t$ 由风险头寸和无风险头寸的回报之和给出：\n$$ dW_t = (\\omega W_t) \\frac{dS_t}{S_t} + ((1-\\omega)W_t) r dt $$\n代入风险资产的随机微分方程（SDE）$\\frac{dS_t}{S_t} = \\mu dt + \\sigma dB_t$：\n$$ dW_t = \\omega W_t (\\mu dt + \\sigma dB_t) + (1-\\omega)W_t r dt $$\n我们可以通过组合确定性项（$dt$）和随机项（$dB_t$）来重新整理这个方程：\n$$ dW_t = [\\omega \\mu + (1-\\omega)r] W_t dt + \\omega \\sigma W_t dB_t $$\n两边除以 $W_t$ 得到财富投资组合的回报率的SDE：\n$$ \\frac{dW_t}{W_t} = [\\omega(\\mu - r) + r] dt + \\omega \\sigma dB_t $$\n优化问题 $\\max_{\\omega} E\\left[\\frac{W_T^{1-\\gamma}}{1-\\gamma}\\right]$ 的解给出了最优配置 $\\omega^*$。对于给定的效用函数，相对风险厌恶系数定义为 $RRA(W) = - \\frac{W U''(W)}{U'(W)}$。对于指定的效用函数，$U'(W) = W^{-\\gamma}$ 且 $U''(W) = -\\gamma W^{-\\gamma-1}$，这给出 $RRA(W) = - \\frac{W (-\\gamma W^{-\\gamma-1})}{W^{-\\gamma}} = \\gamma$。\n\n著名的Merton比例给出了最优配置为：\n$$ \\omega^* = \\frac{\\mu - r}{\\gamma \\sigma^2} $$\n这里，$\\mu - r$ 是市场风险价格，或称股权风险溢价。项 $\\gamma \\sigma^2$ 是投资者的风险厌恶程度与风险资产回报方差的乘积。\n\n问题陈述该投资者保持一个恒定配置 $\\omega = 0.60$。我们将此观察到的配置等同于投资者的最优配置，因此我们设 $\\omega^* = \\omega$。我们已知以下参数值：\n- $\\mu = 0.07$\n- $r = 0.02$\n- $\\sigma = 0.20$\n- $\\omega^* = 0.60$\n\n现在我们可以通过重新整理最优配置公式来求解隐含的相对风险厌恶系数 $\\gamma$：\n$$ \\gamma = \\frac{\\mu - r}{\\omega^* \\sigma^2} $$\n将给定的数值代入此表达式：\n$$ \\gamma = \\frac{0.07 - 0.02}{0.60 \\times (0.20)^2} $$\n首先，我们计算分子和分母中的各项：\n- 股权风险溢价：$\\mu - r = 0.05$。\n- 风险资产的方差：$\\sigma^2 = (0.20)^2 = 0.04$。\n- 分母的乘积：$\\omega^* \\sigma^2 = 0.60 \\times 0.04 = 0.024$。\n\n现在，将这些值代回 $\\gamma$ 的表达式中：\n$$ \\gamma = \\frac{0.05}{0.024} $$\n为了计算数值，我们可以将其表示为整数的分数：\n$$ \\gamma = \\frac{50}{24} = \\frac{25}{12} $$\n计算结果约为 $2.08333...$。问题要求答案四舍五入到三位有效数字。\n$$ \\gamma \\approx 2.08 $$\n这个值是一个合理的风险厌恶度量。", "answer": "$$\n\\boxed{2.08}\n$$"}, {"introduction": "尽管市场层面的数据能提供宏观的洞见，经济学家们也常利用受控实验来更精确地衡量个人偏好。这个练习将让你扮演一名计量经济学家的角色，分析来自这类实验的数据。你将学习应用强大的最大似然估计（Maximum Likelihood Estimation, MLE）方法，将一个恒定相对风险规避（CRRA）效用模型拟合到一系列假想的个人选择中，从而从决策者的行为中估计出其风险规避系数。[@problem_id:2445881]", "id": "2445881", "problem": "给定由单个决策者在确定性收益和风险彩票之间做出的一系列二元选择，假设决策者使用恒定相对风险规避 (CRRA) 幂效用函数来评估结果。财富的效用由下式给出\n$$\nU(W) =\n\\begin{cases}\n\\dfrac{W^{1-\\gamma}}{1-\\gamma}, & \\gamma \\neq 1, \\\\\n\\log(W), & \\gamma = 1,\n\\end{cases}\n$$\n其中 $W$ 是收益（假设在所有任务中 $W$ 都以相同的货币单位计量，并且初始财富为 $0$，因此 $W$ 是每个任务中的总财富），$\\gamma$ 是待估计的风险规避系数。对于每次选择，决策者在确定性收益 $S$ 和一个风险彩票之间进行选择，该彩票以概率 $p$ 支付 $x_h$，以概率 $1-p$ 支付 $x_\\ell$，其中 $x_h > 0$, $x_\\ell > 0$, $S > 0$，并且 $p \\in (0,1)$ 以小数形式给出。假设一个二元响应模型，其中选择风险彩票的概率为\n$$\nP_{\\text{risky}}(\\gamma) = \\frac{1}{1+\\exp\\left(-\\lambda \\cdot \\Delta(\\gamma)\\right)},\n$$\n其中\n$$\n\\Delta(\\gamma) = \\left[p \\cdot U(x_h) + (1-p)\\cdot U(x_\\ell)\\right] - U(S),\n$$\n并且 $\\lambda > 0$ 是给定的敏感度参数。每个任务观察到的选择用 $c \\in \\{0,1\\}$ 表示，其中 $c=1$ 表示选择了风险彩票， $c=0$ 表示选择了确定性收益。单次观测的对数似然贡献为\n$$\n\\ell(\\gamma) = c \\cdot \\log\\left(P_{\\text{risky}}(\\gamma)\\right) + (1-c)\\cdot \\log\\left(1 - P_{\\text{risky}}(\\gamma)\\right).\n$$\n您的任务是编写一个程序，为每个选择数据集计算闭区间 $[\\underline{\\gamma},\\overline{\\gamma}]$ 内的 $\\gamma$ 值，该值能够最大化总对数似然，即该数据集中所有观测的 $\\ell(\\gamma)$ 之和。\n\n使用以下参数值（这些值适用于所有数据集）：\n- 敏感度参数 $\\lambda = 1.0$。\n- 风险规避搜索区间 $[\\underline{\\gamma},\\overline{\\gamma}] = [0.01, 3.0]$。\n\n测试套件（每个数据集是选择元组 $(S,p,x_h,x_\\ell,c)$ 的有序列表，$p$ 以小数表示）：\n\n- 数据集 A（一般情况，通过数据隐式包含了效用定义中 $\\gamma=1$ 的边界）：\n  1. $(4.0,\\, 0.5,\\, 10.0,\\, 2.0,\\, 1)$\n  2. $(5.0,\\, 0.5,\\, 10.0,\\, 2.0,\\, 0)$\n  3. $(8.0,\\, 0.5,\\, 20.0,\\, 4.0,\\, 1)$\n  4. $(9.5,\\, 0.5,\\, 20.0,\\, 4.0,\\, 0)$\n  5. $(2.0,\\, 0.5,\\, 5.0,\\, 1.0,\\, 1)$\n  6. $(2.8,\\, 0.5,\\, 5.0,\\, 1.0,\\, 0)$\n\n- 数据集 B（较低风险规避，接近风险中性）：\n  1. $(8.0,\\, 0.5,\\, 16.0,\\, 4.0,\\, 1)$\n  2. $(10.0,\\, 0.5,\\, 16.0,\\, 4.0,\\, 0)$\n  3. $(4.0,\\, 0.5,\\, 8.0,\\, 2.0,\\, 1)$\n  4. $(5.0,\\, 0.5,\\, 8.0,\\, 2.0,\\, 0)$\n  5. $(17.0,\\, 0.5,\\, 32.0,\\, 8.0,\\, 1)$\n  6. $(19.0,\\, 0.5,\\, 32.0,\\, 8.0,\\, 0)$\n\n- 数据集 C（较高风险规避）：\n  1. $(4.0,\\, 0.5,\\, 12.0,\\, 3.0,\\, 1)$\n  2. $(5.2,\\, 0.5,\\, 12.0,\\, 3.0,\\, 0)$\n  3. $(9.0,\\, 0.5,\\, 24.0,\\, 6.0,\\, 1)$\n  4. $(10.0,\\, 0.5,\\, 24.0,\\, 6.0,\\, 0)$\n  5. $(2.2,\\, 0.5,\\, 6.0,\\, 1.5,\\, 1)$\n  6. $(2.6,\\, 0.5,\\, 6.0,\\, 1.5,\\, 0)$\n\n最终输出格式：\n- 您的程序应生成单行输出，其中包含数据集 A、数据集 B 和数据集 C 的估计风险规避系数，按此顺序排列，形式为用方括号括起来的逗号分隔列表。每个估计值必须是保留六位小数的浮点数。例如：“[0.723456,1.234567,2.345678]”。", "solution": "该问题要求通过最大化一系列观察到的二元选择的对数似然来估计风险规避参数 $\\gamma$。这是一个计算经济学中的标准问题。在继续之前，必须验证问题陈述的科学合理性和一致性。\n\n**步骤 1：提取已知条件**\n- **效用函数**：恒定相对风险规避 (CRRA) 幂效用函数定义为，当 $\\gamma \\neq 1$ 时为 $U(W) = \\frac{W^{1-\\gamma}}{1-\\gamma}$，当 $\\gamma = 1$ 时为 $U(W) = \\log(W)$。假设初始财富为 $0$，因此收益 $W$ 代表总财富。所有收益 $W>0$。\n- **选择任务**：在确定性收益 $S$ 和风险彩票（以概率 $p$ 获得 $x_h$，以概率 $1-p$ 获得 $x_\\ell$）之间进行选择。\n- **选择概率模型**：选择风险彩票的概率由逻辑斯蒂函数给出，$P_{\\text{risky}}(\\gamma) = \\frac{1}{1+\\exp\\left(-\\lambda \\cdot \\Delta(\\gamma)\\right)}$。\n- **效用差异**：逻辑斯蒂函数的参数基于 $\\Delta(\\gamma) = \\left[p \\cdot U(x_h) + (1-p)\\cdot U(x_\\ell)\\right] - U(S)$。\n- **观测数据**：每个任务的观测选择为 $c \\in \\{0,1\\}$，其中 $c=1$ 表示风险选择，$c=0$ 表示确定性选择。\n- **对数似然函数**：单次观测的对数似然为 $\\ell(\\gamma) = c \\cdot \\log\\left(P_{\\text{risky}}(\\gamma)\\right) + (1-c)\\cdot \\log\\left(1 - P_{\\text{risky}}(\\gamma)\\right)$。\n- **目标**：关于 $\\gamma$ 最大化总对数似然 $\\sum_i \\ell_i(\\gamma)$。\n- **参数**：敏感度参数为 $\\lambda = 1.0$。最优 $\\gamma$ 的搜索被限制在闭区间 $[\\underline{\\gamma},\\overline{\\gamma}] = [0.01, 3.0]$ 内。\n- **测试套件**：提供了三个数据集（A、B、C），每个数据集包含一系列选择元组 $(S,p,x_h,x_\\ell,c)$。\n\n**步骤 2：使用提取的已知条件进行验证**\n- **科学依据**：该问题坚实地植根于微观经济学理论。CRRA 效用函数是用于建模风险下选择的决策理论的基石。使用逻辑斯蒂函数来建模概率选择（一种量化反应均衡的形式）是标准且广为接受的计量经济学方法。该问题在科学上是合理的。\n- **适定性**：目标是在一个紧区间上最大化一个函数，即总对数似然。该模型的对数似然函数通常是良态的，其最大化是标准的最大似然估计 (MLE) 问题。预期在指定界限内存在唯一解。该问题是适定的。\n- **客观性和完整性**：问题陈述使用了精确的数学定义和客观的数值数据。求解所需的所有参数、函数和数据都已明确提供。该问题是自包含且客观的。\n\n**步骤 3：结论和行动**\n该问题是有效的，因为它在科学上合理、适定、客观且完整。将构建解决方案。\n\n**求解方法**\n\n任务是找到风险规避参数 $\\gamma$ 的值，该值能够为给定的 $N$ 个观测数据集最大化总对数似然函数 $L(\\gamma) = \\sum_{i=1}^{N} \\ell_i(\\gamma)$。这通过数值优化实现。\n\n效用函数是：\n$$\nU(W, \\gamma) =\n\\begin{cases}\n\\dfrac{W^{1-\\gamma}}{1-\\gamma}, & \\gamma \\neq 1 \\\\\n\\log(W), & \\gamma = 1\n\\end{cases}\n$$\n对于由元组 $(S_i, p_i, x_{h,i}, x_{\\ell,i}, c_i)$ 定义的每个选择任务 $i$，我们首先计算效用差异 $\\Delta_i(\\gamma)$：\n$$\n\\Delta_i(\\gamma) = \\left[ p_i \\cdot U(x_{h,i}, \\gamma) + (1-p_i) \\cdot U(x_{\\ell,i}, \\gamma) \\right] - U(S_i, \\gamma)\n$$\n选择风险彩票的概率则为：\n$$\nP_{\\text{risky},i}(\\gamma) = \\frac{1}{1+\\exp\\left(-\\lambda \\cdot \\Delta_i(\\gamma)\\right)}\n$$\n观测 $i$ 的对数似然贡献是：\n$$\n\\ell_i(\\gamma) = c_i \\cdot \\log\\left(P_{\\text{risky},i}(\\gamma)\\right) + (1-c_i)\\cdot \\log\\left(1 - P_{\\text{risky},i}(\\gamma)\\right)\n$$\n一个数据集的总对数似然是 $L(\\gamma) = \\sum_{i} \\ell_i(\\gamma)$。我们的目标是为每个数据集解决以下优化问题：\n$$\n\\hat{\\gamma} = \\arg\\max_{\\gamma \\in [0.01, 3.0]} L(\\gamma)\n$$\n这等价于最小化负对数似然：\n$$\n\\hat{\\gamma} = \\arg\\min_{\\gamma \\in [0.01, 3.0]} -L(\\gamma)\n$$\n这是一个一维有界优化问题。可以使用标准的数值算法高效解决，例如 `scipy.optimize.minimize_scalar` 提供的 `bounded` 方法。\n\n为了数值稳定性，对数似然的计算应避免直接计算大 $z$ 值的 $\\exp(-z)$ 和 $p$ 接近 $0$ 时的 $\\log(p)$。令 $z_i = \\lambda \\Delta_i(\\gamma)$。选择风险选项和确定性选项的对数概率可以用对数S型函数 (log-sigmoid) 来表示，该函数通常以数值稳定的方式实现。具体来说，$\\log(P_{\\text{risky}}) = \\log(\\sigma(z)) = -\\log(1+e^{-z})$ 和 $\\log(1-P_{\\text{risky}}) = \\log(\\sigma(-z)) = -\\log(1+e^{z})$。这可以避免溢出并保持精度。\n\n步骤如下：\n1. 对于每个数据集，定义一个目标函数，它以 $\\gamma$ 为输入，并返回总对数似然的负值，即 $-L(\\gamma)$。\n2. 使用数值最小化程序，在区间 $[0.01, 3.0]$ 内找到使该目标函数最小化的 $\\gamma$ 值。\n3. 得到的 $\\gamma$ 值即为最大似然估计值。对数据集 A、B 和 C 重复此过程。", "answer": "```python\nimport numpy as np\nfrom scipy.optimize import minimize_scalar\n\ndef solve():\n    \"\"\"\n    Solves for the maximum likelihood estimate of the CRRA risk aversion parameter\n    for three given datasets of choices under risk.\n    \"\"\"\n    \n    # Define the utility function as per the problem statement.\n    def utility(W, gamma):\n        \"\"\"\n        Computes the CRRA utility for a given wealth W and risk aversion gamma.\n        Handles the special case where gamma is close to 1.\n        \"\"\"\n        # np.isclose is used for robust floating-point comparison.\n        if np.isclose(gamma, 1.0):\n            # The problem statement ensures W > 0.\n            return np.log(W)\n        else:\n            return (W**(1 - gamma)) / (1 - gamma)\n\n    # Define the total log-likelihood function for a dataset.\n    def total_log_likelihood(gamma, dataset, lambda_param):\n        \"\"\"\n        Computes the total log-likelihood for a dataset given a value for gamma\n        and the sensitivity parameter lambda.\n        \"\"\"\n        log_likelihood_sum = 0.0\n\n        for S, p, x_h, x_l, c in dataset:\n            # Calculate expected utility of the lottery.\n            eu_lottery = p * utility(x_h, gamma) + (1 - p) * utility(x_l, gamma)\n            # Calculate utility of the certain amount.\n            u_certain = utility(S, gamma)\n\n            # Calculate the difference in utility.\n            delta_u = eu_lottery - u_certain\n            \n            z = lambda_param * delta_u\n            \n            # Use a numerically stable formulation for log-likelihood of a\n            # logistic model.\n            # log(sigmoid(z)) = -log(1 + exp(-z)) = -logaddexp(0, -z)\n            # log(1-sigmoid(z)) = log(sigmoid(-z)) = -log(1 + exp(z)) = -logaddexp(0, z)\n            # This avoids overflow/underflow issues.\n            log_p_risky = -np.logaddexp(0, -z)\n            log_p_certain = -np.logaddexp(0, z)\n            \n            log_likelihood_i = c * log_p_risky + (1 - c) * log_p_certain\n            \n            log_likelihood_sum += log_likelihood_i\n            \n        return log_likelihood_sum\n\n    # Define global parameters and test cases from the problem statement.\n    lambda_param = 1.0\n    gamma_bounds = (0.01, 3.0)\n\n    test_cases = [\n        # Dataset A\n        [\n          (4.0, 0.5, 10.0, 2.0, 1),\n          (5.0, 0.5, 10.0, 2.0, 0),\n          (8.0, 0.5, 20.0, 4.0, 1),\n          (9.5, 0.5, 20.0, 4.0, 0),\n          (2.0, 0.5, 5.0, 1.0, 1),\n          (2.8, 0.5, 5.0, 1.0, 0)\n        ],\n        # Dataset B\n        [\n          (8.0, 0.5, 16.0, 4.0, 1),\n          (10.0, 0.5, 16.0, 4.0, 0),\n          (4.0, 0.5, 8.0, 2.0, 1),\n          (5.0, 0.5, 8.0, 2.0, 0),\n          (17.0, 0.5, 32.0, 8.0, 1),\n          (19.0, 0.5, 32.0, 8.0, 0)\n        ],\n        # Dataset C\n        [\n          (4.0, 0.5, 12.0, 3.0, 1),\n          (5.2, 0.5, 12.0, 3.0, 0),\n          (9.0, 0.5, 24.0, 6.0, 1),\n          (10.0, 0.5, 24.0, 6.0, 0),\n          (2.2, 0.5, 6.0, 1.5, 1),\n          (2.6, 0.5, 6.0, 1.5, 0)\n        ]\n    ]\n    \n    results = []\n    \n    # Iterate through each dataset to find the optimal gamma.\n    for dataset in test_cases:\n        # The optimizer minimizes a function, so we minimize the negative\n        # log-likelihood to maximize the log-likelihood.\n        objective_function = lambda gamma: -total_log_likelihood(gamma, dataset, lambda_param)\n        \n        # Use scipy.optimize.minimize_scalar for 1D bounded optimization.\n        opt_result = minimize_scalar(\n            objective_function,\n            bounds=gamma_bounds,\n            method='bounded'\n        )\n        \n        estimated_gamma = opt_result.x\n        results.append(f\"{estimated_gamma:.6f}\")\n\n    # Print the final output in the specified format.\n    print(f\"[{','.join(results)}]\")\n\n# Execute the solver function.\nsolve()\n```"}, {"introduction": "标准效用理论有时难以解释现实世界中的某些行为，例如为何同一个人既会购买保险（一种风险规避行为）又会购买彩票（一种风险寻求行为）。本练习将引入诺贝尔奖得主的行为模型——累积前景理论（Cumulative Prospect Theory, CPT），来解决这一经典悖论。你将通过计算实现CPT的核心特征——损失规避和概率权重——来展示该理论如何能够同时解释风险规避和风险寻求这两种看似矛盾的行为。[@problem_id:2445905]", "id": "2445905", "problem": "构建一个完整的程序，在累积前景理论（CPT）下评估选择，以确定一个个体是否会同时购买彩票和购买保险。评估必须从 CPT 的第一性原理出发，并使用零作为参考点。对于每个测试用例，您将获得 CPT 价值函数和概率权重函数的参数，以及两个二元决策的描述：购买彩票和购买保险。您的程序必须为每个测试用例输出两个整数，分别表示是否严格偏好购买彩票和购买保险。\n\n使用以下定义。\n\n1. 价值函数。对于结果 $x$（衡量的是相对于参考点 $0$ 的变化），\n$$\nv(x) =\n\\begin{cases}\nx^{\\alpha}, & \\text{if } x \\ge 0, \\\\\n-\\lambda \\, (-x)^{\\beta}, & \\text{if } x &lt; 0,\n\\end{cases}\n$$\n其中 $\\alpha \\in (0,1]$，$\\beta \\in (0,1]$，以及 $\\lambda \\ge 1$。\n\n2. 概率权重。对于任意概率 $p \\in (0,1)$，将收益侧权重函数 $w^{+}(p)$ 和损失侧权重函数 $w^{-}(p)$ 定义为\n$$\nw^{+}(p) = \\frac{p^{\\gamma}}{\\left(p^{\\gamma} + (1-p)^{\\gamma}\\right)^{1/\\gamma}}, \\quad\nw^{-}(p) = \\frac{p^{\\delta}}{\\left(p^{\\delta} + (1-p)^{\\delta}\\right)^{1/\\delta}},\n$$\n其中 $\\gamma \\in (0,1]$ 和 $\\delta \\in (0,1]$。\n\n3. 累积前景理论（CPT）下的决策评估。\n- 彩票购买决策：代理人在不购买（确定结果为 $0$）和购买彩票之间进行选择。如果购买彩票，结果是以概率 $p$ 获得收益 $g-c$，并以概率 $1-p$ 遭受损失 $-c$，其中 $g \\ge 0$ 为奖金， $c \\ge 0$ 为彩票成本， $p \\in (0,1)$。购买的 CPT 值为\n$$\nV_{\\text{buy-lottery}} = w^{+}(p)\\, v(g-c) + w^{-}(1-p)\\, v(-c).\n$$\n当且仅当 $V_{\\text{buy-lottery}} &gt; 0$ 时，代理人严格偏好购买彩票。\n\n- 保险购买决策：代理人在不投保和购买全额保险之间进行选择。如果不投保，结果是以概率 $q$ 遭受损失 $-L$，并以概率 $1-q$ 结果为 $0$，其中 $L \\ge 0$ 为损失额， $q \\in (0,1)$ 为损失概率。如果投保，结果是确定的损失 $-\\pi$，其中 $\\pi \\ge 0$ 为保险费。CPT 值为\n$$\nV_{\\text{uninsured}} = w^{-}(q)\\, v(-L), \\quad V_{\\text{insured}} = v(-\\pi).\n$$\n当且仅当 $V_{\\text{insured}} &gt; V_{\\text{uninsured}}$ 时，代理人严格偏好购买保险。\n\n您的程序必须精确实现上述定义。对于严格不等式的数值比较，如果左侧值减去右侧值超过 $10^{-12}$，则视为严格大于。\n\n测试套件。使用以下四个测试用例，每个用例由参数元组 $(\\alpha,\\beta,\\lambda,\\gamma,\\delta,p,g,c,q,L,\\pi)$ 指定。\n\n- 案例 1：$(0.88, 0.88, 2.25, 0.61, 0.69, 0.01, 500, 5, 0.01, 500, 6)$。\n- 案例 2：$(1.0, 1.0, 1.0, 1.0, 1.0, 0.01, 500, 5, 0.01, 500, 5)$。\n- 案例 3：$(0.88, 0.88, 1.1, 0.4, 1.0, 0.01, 500, 5, 0.01, 500, 8)$。\n- 案例 4：$(0.6, 0.9, 3.5, 1.0, 0.5, 0.01, 500, 5, 0.01, 500, 6)$。\n\n答案规格与输出格式。对于每个测试用例，计算两个整数：\n- $b_{\\ell} \\in \\{0,1\\}$，如果 $V_{\\text{buy-lottery}} > 0$ 则等于 $1$，否则等于 $0$。\n- $b_{i} \\in \\{0,1\\}$，如果 $V_{\\text{insured}} > V_{\\text{uninsured}}$ 则等于 $1$，否则等于 $0$。\n\n您的程序应生成单行输出，其中包含一个由方括号括起来的、包含 $8$ 个整数的逗号分隔列表，顺序为 $[b_{\\ell}^{(1)}, b_{i}^{(1)}, b_{\\ell}^{(2)}, b_{i}^{(2)}, b_{\\ell}^{(3)}, b_{i}^{(3)}, b_{\\ell}^{(4)}, b_{i}^{(4)}]$，其中上标表示测试用例的索引。输出行中不允许包含任何额外的文本或空白字符。", "solution": "该问题要求根据一组指定参数，在累积前景理论（CPT）下评估决策。在提供解决方案之前，必须对问题陈述的科学合理性、完整性和客观性进行验证。\n\n**步骤 1：提取已知条件**\n\n问题提供了以下定义和数据：\n\n1.  **价值函数**：对于相对于参考点 $0$ 的结果 $x$，价值函数 $v(x)$ 定义为：\n    $$\n    v(x) =\n    \\begin{cases}\n    x^{\\alpha}, & \\text{if } x \\ge 0 \\\\\n    -\\lambda \\, (-x)^{\\beta}, & \\text{if } x < 0\n    \\end{cases}\n    $$\n    参数为 $\\alpha \\in (0,1]$，$\\beta \\in (0,1]$，以及 $\\lambda \\ge 1$。\n\n2.  **概率权重函数**：对于概率 $p \\in (0,1)$，权重函数为：\n    $$\n    w^{+}(p) = \\frac{p^{\\gamma}}{\\left(p^{\\gamma} + (1-p)^{\\gamma}\\right)^{1/\\gamma}} \\quad (\\text{用于收益})\n    $$\n    $$\n    w^{-}(p) = \\frac{p^{\\delta}}{\\left(p^{\\delta} + (1-p)^{\\delta}\\right)^{1/\\delta}} \\quad (\\text{用于损失})\n    $$\n    参数为 $\\gamma \\in (0,1]$ 和 $\\delta \\in (0,1]$。\n\n3.  **彩票购买决策**：选择介于不购买（结果为 $0$）和购买彩票之间。购买彩票以概率 $p$ 获得收益 $g-c$，以概率 $1-p$ 遭受损失 $-c$。购买的 CPT 值为：\n    $$\n    V_{\\text{buy-lottery}} = w^{+}(p)\\, v(g-c) + w^{-}(1-p)\\, v(-c)\n    $$\n    当且仅当 $V_{\\text{buy-lottery}} > 0$ 时存在严格购买偏好。\n\n4.  **保险购买决策**：选择介于不投保（以概率 $q$ 遭受损失 $-L$，否则为 $0$）和购买保险（确定损失 $-\\pi$）之间。CPT 值为：\n    $$\n    V_{\\text{uninsured}} = w^{-}(q)\\, v(-L)\n    $$\n    $$\n    V_{\\text{insured}} = v(-\\pi)\n    $$\n    当且仅当 $V_{\\text{insured}} > V_{\\text{uninsured}}$ 时存在严格购买保险的偏好。\n\n5.  **数值容差**：如果 $A - B > 10^{-12}$，则严格不等式 $A > B$ 成立。\n\n6.  **测试用例**：提供了四个案例，其参数元组为 $(\\alpha, \\beta, \\lambda, \\gamma, \\delta, p, g, c, q, L, \\pi)$：\n    *   案例 1：$(0.88, 0.88, 2.25, 0.61, 0.69, 0.01, 500, 5, 0.01, 500, 6)$\n    *   案例 2：$(1.0, 1.0, 1.0, 1.0, 1.0, 0.01, 500, 5, 0.01, 500, 5)$\n    *   案例 3：$(0.88, 0.88, 1.1, 0.4, 1.0, 0.01, 500, 5, 0.01, 500, 8)$\n    *   案例 4：$(0.6, 0.9, 3.5, 1.0, 0.5, 0.01, 500, 5, 0.01, 500, 6)$\n\n**步骤 2：使用提取的已知条件进行验证**\n\n根据指定标准对问题进行验证。\n\n*   **科学性**：该问题基于累积前景理论，这是由 Tversky 和 Kahneman 发展的行为经济学基石。价值函数表现出边际敏感性递减和损失厌恶，概率权重函数捕捉了对小概率事件的高估，这些都是已证实的经验发现。将其应用于彩票-保险悖论是 CPT 的经典用例。所提供的公式是针对特定简单前景的 CPT 的正确应用。该问题具有科学合理性。\n*   **适定性**：问题提供了所有必要的数学公式、每个测试用例的参数以及明确的决策规则。计算是确定性的，确保了每个案例都有唯一的解。该问题是适定的。\n*   **客观性**：问题采用精确的数学语言表述，不包含任何主观或模糊的术语。\n\n问题陈述没有科学上不合理、不完整、矛盾或模糊之处。这是一个在计算经济学领域内的形式化、可解决的问题。\n\n**步骤 3：结论与行动**\n\n该问题是**有效的**。将构建一个解决方案。\n\n**基于原理的设计与求解算法**\n\n任务是按规定实现 CPT 框架，并将其应用于四个测试用例。对于每个案例，我们必须确定两个二元结果：购买彩票的决策（$b_{\\ell}$）和购买保险的决策（$b_{i}$）。解决方案是直接实现所提供的公式。\n\n**1. 核心 CPT 函数的实现**\n\n首先，我们必须实现模型的三个基本组成部分。\n\n*   **价值函数 $v(x)$**：将创建一个函数，根据参数 $\\alpha$、$\\beta$ 和 $\\lambda$ 计算结果 $x$ 的价值。\n    *   如果 $x \\ge 0$，函数返回 $x^{\\alpha}$。\n    *   如果 $x < 0$，函数返回 $-\\lambda(-x)^{\\beta}$。\n    \n*   **收益侧权重函数 $w^{+}(p)$**：一个函数将根据参数 $\\gamma$ 计算收益概率 $p$ 的决策权重。公式为 $w^{+}(p) = p^{\\gamma} / (p^{\\gamma} + (1-p)^{\\gamma})^{1/\\gamma}$。\n\n*   **损失侧权重函数 $w^{-}(p)$**：一个函数将根据参数 $\\delta$ 计算损失概率 $p$ 的决策权重。公式为 $w^{-}(p) = p^{\\delta} / (p^{\\delta} + (1-p)^{\\delta})^{1/\\delta}$。\n\n**2. 彩票决策评估**\n\n对于每个测试用例，购买彩票的决策评估如下：\n\n1.  识别彩票决策的参数：$\\alpha, \\beta, \\lambda, \\gamma, \\delta, p, g, c$。\n2.  计算相对于参考点 $0$ 的两个可能结果：收益 $x_{g} = g-c$ 和损失 $x_{\\ell} = -c$。\n3.  使用价值函数计算这些结果的价值：$v(x_{g})$ 和 $v(x_{\\ell})$。\n4.  计算所需的决策权重。收益 $g-c$ 发生的概率为 $p$，因此我们需要 $w^{+}(p)$。损失 $-c$ 发生的概率为 $1-p$，因此我们需要 $w^{-}(1-p)$。\n5.  使用提供的公式计算购买彩票的 CPT 值：\n    $$\n    V_{\\text{buy-lottery}} = w^{+}(p) v(g-c) + w^{-}(1-p) v(-c)\n    $$\n6.  应用决策规则。如果 $V_{\\text{buy-lottery}} > 0$，代理人严格偏好购买彩票。使用指定的容差，这被检查为 $V_{\\text{buy-lottery}} > 10^{-12}$。\n7.  如果条件满足，将决策变量 $b_{\\ell}$ 设置为 $1$，否则设置为 $0$。\n\n**3. 保险决策评估**\n\n同样，对于每个测试用例，购买保险的决策评估如下：\n\n1.  识别保险决策的参数：$\\alpha, \\beta, \\lambda, \\delta, q, L, \\pi$。注意，不使用 $\\gamma$。\n2.  计算“不投保”前景的 CPT 值。这涉及一个非零结果，即以概率 $q$ 遭受损失 $-L$。其值为：\n    $$\n    V_{\\text{uninsured}} = w^{-}(q) v(-L)\n    $$\n    这需要计算 $v(-L)$ 和决策权重 $w^{-}(q)$。\n3.  计算“投保”前景的 CPT 值。这是一个确定的结果：损失保费 $-\\pi$。其值就是：\n    $$\n    V_{\\text{insured}} = v(-\\pi)\n    $$\n4.  应用决策规则。如果 $V_{\\text{insured}} > V_{\\text{uninsured}}$，代理人严格偏好购买保险。这被检查为 $V_{\\text{insured}} - V_{\\text{uninsured}} > 10^{-12}$。\n5.  如果条件满足，将决策变量 $b_{i}$ 设置为 $1$，否则设置为 $0$。\n\n**4. 程序执行**\n\n将构建一个程序来执行此逻辑。它将遍历四个测试用例。在每次迭代中，它将解包这 11 个参数，调用实现上述逻辑的函数来计算 $b_{\\ell}$ 和 $b_{i}$，并存储这两个整数结果。最后，程序将把所有来自四个案例的 8 个计算出的整数格式化为单个由方括号括起来的逗号分隔列表，以满足要求。\n\n这一结构化过程确保了解决方案严格遵守问题陈述中定义的 CPT 第一性原理，并以指定格式生成正确输出。使用像 NumPy 这样的数值库适合于精确处理幂运算。", "answer": "```python\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Evaluates lottery and insurance decisions under Cumulative Prospect Theory (CPT)\n    for a given set of test cases.\n    \"\"\"\n\n    # Define the test cases from the problem statement.\n    # Each case is a tuple: (alpha, beta, lam, gamma, delta, p, g, c, q, L, pi)\n    test_cases = [\n        (0.88, 0.88, 2.25, 0.61, 0.69, 0.01, 500, 5, 0.01, 500, 6),\n        (1.0, 1.0, 1.0, 1.0, 1.0, 0.01, 500, 5, 0.01, 500, 5),\n        (0.88, 0.88, 1.1, 0.4, 1.0, 0.01, 500, 5, 0.01, 500, 8),\n        (0.6, 0.9, 3.5, 1.0, 0.5, 0.01, 500, 5, 0.01, 500, 6),\n    ]\n\n    TOLERANCE = 1e-12\n    results = []\n\n    def value_func(x, alpha, beta, lam):\n        \"\"\"CPT value function v(x).\"\"\"\n        if x >= 0:\n            return np.power(x, alpha)\n        else:\n            return -lam * np.power(-x, beta)\n\n    def weight_func_plus(p, gamma):\n        \"\"\"CPT gain-side probability weighting function w+(p).\"\"\"\n        if p == 0.0 or p == 1.0:\n            return p\n        p_gamma = np.power(p, gamma)\n        one_minus_p_gamma = np.power(1.0 - p, gamma)\n        return p_gamma / np.power(p_gamma + one_minus_p_gamma, 1.0 / gamma)\n\n    def weight_func_minus(p, delta):\n        \"\"\"CPT loss-side probability weighting function w-(p).\"\"\"\n        if p == 0.0 or p == 1.0:\n            return p\n        p_delta = np.power(p, delta)\n        one_minus_p_delta = np.power(1.0 - p, delta)\n        return p_delta / np.power(p_delta + one_minus_p_delta, 1.0 / delta)\n    \n    for case in test_cases:\n        alpha, beta, lam, gamma, delta, p, g, c, q, L, pi = case\n\n        # --- Lottery Decision ---\n        gain_outcome = g - c\n        loss_outcome = -c\n        \n        v_gain = value_func(gain_outcome, alpha, beta, lam)\n        v_loss = value_func(loss_outcome, alpha, beta, lam)\n        \n        w_plus_p = weight_func_plus(p, gamma)\n        w_minus_1_minus_p = weight_func_minus(1.0 - p, delta)\n        \n        V_buy_lottery = w_plus_p * v_gain + w_minus_1_minus_p * v_loss\n        \n        b_l = 1 if V_buy_lottery > TOLERANCE else 0\n        \n        # --- Insurance Decision ---\n        V_uninsured = weight_func_minus(q, delta) * value_func(-L, alpha, beta, lam)\n        V_insured = value_func(-pi, alpha, beta, lam)\n        \n        b_i = 1 if (V_insured - V_uninsured) > TOLERANCE else 0\n        \n        results.extend([b_l, b_i])\n\n    # Final print statement in the exact required format.\n    print(f\"[{','.join(map(str, results))}]\")\n\nsolve()\n```"}]}