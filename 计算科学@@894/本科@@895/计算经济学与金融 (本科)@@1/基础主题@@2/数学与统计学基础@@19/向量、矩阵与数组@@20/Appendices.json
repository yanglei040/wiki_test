{"hands_on_practices": [{"introduction": "在金融实践中，理论模型必须考虑交易成本等现实摩擦。这个练习将向量运算应用于一个核心的投资组合管理任务：计算重新平衡投资组合时的交易成本。通过这个练习 [@problem_id:2447786]，你将看到向量减法和哈达玛（Hadamard）积等基本操作如何为量化金融中的常见计算提供一个清晰高效的框架。", "id": "2447786", "problem": "一位投资组合经理在一个存在比例交易成本的有摩擦市场中，对一个包含五种资产的投资组合进行再平衡。当前的投资组合权重为 $w^{(0)} = (0.25, 0.35, 0.10, 0.20, 0.10)$，再平衡后的目标权重为 $w^{(1)} = (0.20, 0.40, 0.15, 0.15, 0.10)$。投资组合权重的交易向量为 $x = w^{(1)} - w^{(0)}$。每单位交易的投资组合财富，第 $i$ 种资产会产生一个比例交易成本率 $c_i$，成本率由向量 $c = (0.001, 0.0015, 0.0005, 0.002, 0.001)$ 给出。单期总交易成本占初始总财富的比例，定义为绝对交易向量与成本向量的哈达玛（逐元素）乘积的各项之和，即：\n$$S = \\sum_{i=1}^{5} |x_i|\\,c_i.$$\n计算 $S$。请将您的答案表示为小数（不带百分号）。如果值为精确值，则无需进行四舍五入。", "solution": "该问题陈述已经过验证，被认为是科学上合理的、适定的和客观的。它提供了计算金融领域一套完整且一致的数据和定义，从而能够得出一个唯一且有意义的解。因此，我们可以着手进行计算。\n\n该问题要求计算对一个五资产投资组合进行再平衡的总交易成本 $S$。我们已知初始投资组合权重向量 $w^{(0)}$、目标权重向量 $w^{(1)}$ 以及比例交易成本率向量 $c$。\n\n初始权重向量为：\n$$w^{(0)} = (0.25, 0.35, 0.10, 0.20, 0.10)$$\n再平衡后的目标权重为：\n$$w^{(1)} = (0.20, 0.40, 0.15, 0.15, 0.10)$$\n\n首先，我们必须计算交易向量 $x$，它被定义为目标权重与当前权重之差：\n$$x = w^{(1)} - w^{(0)}$$\n代入给定的向量，我们进行逐元素减法：\n$$x = (0.20 - 0.25, 0.40 - 0.35, 0.15 - 0.10, 0.15 - 0.20, 0.10 - 0.10)$$\n$$x = (-0.05, 0.05, 0.05, -0.05, 0.00)$$\n该向量的分量 $x_i$ 代表每种资产 $i$ 的投资组合权重的变化。负值表示卖出，正值表示买入。\n\n总交易成本 $S$ 定义为每笔交易成本的总和，由以下公式给出：\n$$S = \\sum_{i=1}^{5} |x_i|\\,c_i$$\n这个公式对应于绝对交易向量 $|x|$ 与成本率向量 $c$ 的点积。绝对交易向量包含 $x$ 各分量的绝对值：\n$$|x| = (|-0.05|, |0.05|, |0.05|, |-0.05|, |0.00|)$$\n$$|x| = (0.05, 0.05, 0.05, 0.05, 0.00)$$\n交易成本率向量为：\n$$c = (0.001, 0.0015, 0.0005, 0.002, 0.001)$$\n\n现在，我们可以将 $|x_i|$ 和 $c_i$ 的值代入求和公式来计算 $S$：\n$$S = |x_1|c_1 + |x_2|c_2 + |x_3|c_3 + |x_4|c_4 + |x_5|c_5$$\n$$S = (0.05)(0.001) + (0.05)(0.0015) + (0.05)(0.0005) + (0.05)(0.002) + (0.00)(0.001)$$\n我们来计算每一项：\n$$S = 0.00005 + 0.000075 + 0.000025 + 0.0001 + 0$$\n将这些值相加得到总交易成本：\n$$S = 0.00025$$\n或者，我们可以从前四项中提取公因数 $0.05$：\n$$S = 0.05 \\times (0.001 + 0.0015 + 0.0005 + 0.002) + 0$$\n$$S = 0.05 \\times (0.005)$$\n$$S = 0.00025$$\n结果是一个精确的小数值，代表总交易成本占投资组合初始总财富的比例。", "answer": "$$\\boxed{0.00025}$$"}, {"introduction": "经济模型常常描述众多主体之间的复杂互动关系，而矩阵代数正是优雅地表达这些系统的强大工具。本练习探讨了国际贸易中的经典引力模型，该模型将贸易流量与国家的经济规模和地理距离联系起来。通过构建预测贸易流量的矩阵方程 [@problem_id:2447752]，你将学会使用外积和哈达玛（Hadamard）运算来捕捉和分析多边经济关系，这是计算经济学中的一项关键技能。", "id": "2447752", "problem": "考虑一个有三个国家的世界。设以共同货币单位计量的国内生产总值（GDP）向量为 $g \\in \\mathbb{R}^{3}$，且 $g = \\begin{pmatrix} 2 \\\\ 3 \\\\ 5 \\end{pmatrix}$。设对称距离矩阵为\n$$\nD \\;=\\; \\begin{pmatrix}\n1 & 1 & 2 \\\\\n1 & 1 & 4 \\\\\n2 & 4 & 1\n\\end{pmatrix},\n$$\n其中，当 $i \\neq j$ 时，$D_{ij}$ 是国家 $i$ 和国家 $j$ 之间以共同距离单位计量的双边距离，而对角线上的元素是占位符，由于不考虑国内贸易，因此不会被使用。定义离对角线掩码矩阵\n$$\nM \\;=\\; \\begin{pmatrix}\n0 & 1 & 1 \\\\\n1 & 0 & 1 \\\\\n1 & 1 & 0\n\\end{pmatrix}.\n$$\n对于具有严格正元素的适形矩阵 $X$ 和 $Y$，定义哈达玛（逐元素）积为 $(X \\circ Y)_{ij} = X_{ij} Y_{ij}$，哈达玛（逐元素）除法为 $(X \\oslash Y)_{ij} = X_{ij} / Y_{ij}$。\n\n国际贸易的基本引力模型假定，对于 $i \\neq j$，从国家 $i$ 到国家 $j$ 的预测双边贸易流量与它们GDP的乘积成正比，与它们之间的距离成反比，且具有一个共同的比例常数 $A > 0$。使用外积和哈达玛运算，将预测的双边贸易流量的 $3 \\times 3$ 矩阵定义为\n$$\nT \\;=\\; A \\,\\big( (g g^{\\top}) \\oslash D \\big) \\circ M.\n$$\n\n假设所有有序国家对的总观测双边贸易额为 $S = 2.95$，其单位与 $T$ 的贸易流量单位相同。选择 $A$ 使得 $T$ 的离对角线元素之和等于 $S$。计算 $A$ 的数值。提供一个实数；无需四舍五入，且最终答案中不要包含单位。", "solution": "首先对问题陈述进行验证。经核实，该问题具有科学依据，描述了计算经济学中一个标准的贸易引力模型。问题设定良好，为求得唯一解提供了所有必要的数据和定义。其表述客观、明确。所有有效性所需条件均已满足。因此，推导出解答如下。\n\n该问题要求我们根据国内生产总值向量 $g$、距离矩阵 $D$、掩码矩阵 $M$ 以及观测到的双边贸易总额 $S$，求出比例常数 $A$ 的值。预测的双边贸易流量矩阵 $T$ 由以下方程定义：\n$$\nT \\;=\\; A \\,\\big( (g g^{\\top}) \\oslash D \\big) \\circ M\n$$\n确定 $A$ 的条件是，$T$ 的离对角线元素之和必须等于观测到的贸易总额 $S = 2.95$。我们用 $\\Sigma(X)$ 表示矩阵 $X$ 的所有元素之和。该条件为 $\\sum_{i \\neq j} T_{ij} = S$。\n\n掩码矩阵 $M$ 定义如下：\n$$\nM \\;=\\; \\begin{pmatrix}\n0 & 1 & 1 \\\\\n1 & 0 & 1 \\\\\n1 & 1 & 0\n\\end{pmatrix}\n$$\n$M$ 主对角线上的元素均为 $0$。根据哈达玛积 `$\\circ$` 的定义，这意味着 $T$ 主对角线上的元素也将为 $0$，因为 $(X \\circ M)_{ii} = X_{ii} M_{ii} = X_{ii} \\cdot 0 = 0$。因此，$T$ 的离对角线元素之和与 $T$ 的所有元素之和是相同的。因此，控制方程为 $\\Sigma(T) = S$。\n\n我们定义矩阵 $T_0 = \\big( (g g^{\\top}) \\oslash D \\big) \\circ M$。那么贸易矩阵为 $T = A \\cdot T_0$。其元素之和为 $\\Sigma(T) = \\Sigma(A \\cdot T_0) = A \\cdot \\Sigma(T_0)$。求解 $A$ 的方程变为：\n$$\nA \\cdot \\Sigma(T_0) = S\n$$\n由此可得 $A = \\frac{S}{\\Sigma(T_0)}$。我们的任务简化为计算 $\\Sigma(T_0)$ 的数值。\n\n给定数据为：\n$S = 2.95$，$g = \\begin{pmatrix} 2 \\\\ 3 \\\\ 5 \\end{pmatrix}$，以及 $D = \\begin{pmatrix} 1 & 1 & 2 \\\\ 1 & 1 & 4 \\\\ 2 & 4 & 1 \\end{pmatrix}$。\n\n首先，我们计算外积 $g g^{\\top}$：\n$$\ng g^{\\top} \\;=\\; \\begin{pmatrix} 2 \\\\ 3 \\\\ 5 \\end{pmatrix} \\begin{pmatrix} 2 & 3 & 5 \\end{pmatrix} \\;=\\; \\begin{pmatrix} 2 \\times 2 & 2 \\times 3 & 2 \\times 5 \\\\ 3 \\times 2 & 3 \\times 3 & 3 \\times 5 \\\\ 5 \\times 2 & 5 \\times 3 & 5 \\times 5 \\end{pmatrix} \\;=\\; \\begin{pmatrix} 4 & 6 & 10 \\\\ 6 & 9 & 15 \\\\ 10 & 15 & 25 \\end{pmatrix}\n$$\n\n其次，我们将 $g g^{\\top}$ 与距离矩阵 $D$ 进行哈达玛（逐元素）除法：\n$$\n(g g^{\\top}) \\oslash D \\;=\\; \\begin{pmatrix} \\frac{4}{1} & \\frac{6}{1} & \\frac{10}{2} \\\\ \\frac{6}{1} & \\frac{9}{1} & \\frac{15}{4} \\\\ \\frac{10}{2} & \\frac{15}{4} & \\frac{25}{1} \\end{pmatrix} \\;=\\; \\begin{pmatrix} 4 & 6 & 5 \\\\ 6 & 9 & 3.75 \\\\ 5 & 3.75 & 25 \\end{pmatrix}\n$$\n请注意，$D$ 的对角线元素被描述为占位符，由于掩码矩阵 $M$ 的存在，它们在最终计算中不会被使用。$D$ 的离对角线元素均为非零，因此对于相关元素，该除法是良定义的。\n\n第三，我们通过与掩码矩阵 $M$ 进行哈达玛积来计算 $T_0$：\n$$\nT_0 \\;=\\; \\big( (g g^{\\top}) \\oslash D \\big) \\circ M \\;=\\; \\begin{pmatrix} 4 & 6 & 5 \\\\ 6 & 9 & 3.75 \\\\ 5 & 3.75 & 25 \\end{pmatrix} \\circ \\begin{pmatrix} 0 & 1 & 1 \\\\ 1 & 0 & 1 \\\\ 1 & 1 & 0 \\end{pmatrix} \\;=\\; \\begin{pmatrix} 0 & 6 & 5 \\\\ 6 & 0 & 3.75 \\\\ 5 & 3.75 & 0 \\end{pmatrix}\n$$\n\n第四，我们计算 $T_0$ 的所有元素之和，我们将其记为 $\\Sigma(T_0)$：\n$$\n\\Sigma(T_0) \\;=\\; 0 + 6 + 5 + 6 + 0 + 3.75 + 5 + 3.75 + 0\n$$\n$$\n\\Sigma(T_0) \\;=\\; (6 + 6) + (5 + 5) + (3.75 + 3.75) \\;=\\; 12 + 10 + 7.5 = 29.5\n$$\n\n最后，我们将 $S$ 和 $\\Sigma(T_0)$ 的值代入 $A$ 的表达式中：\n$$\nA \\;=\\; \\frac{S}{\\Sigma(T_0)} \\;=\\; \\frac{2.95}{29.5}\n$$\n$$\nA \\;=\\; \\frac{29.5 \\times 0.1}{29.5} \\;=\\; 0.1\n$$\n比例常数 $A$ 精确等于 $0.1$。此结果与条件 $A>0$ 一致。", "answer": "$$ \\boxed{0.1} $$"}, {"introduction": "在现代投资组合理论中，一个核心目标是构建具有特定风险暴露特征的投资组合。本练习将引导你完成一个高级应用：构建一个与市场主要风险因子（即主成分）不相关的“特征投资组合”。这个挑战性的问题 [@problem_id:2447812] 综合了协方差矩阵的特征分解、利用正交性施加约束以及求解约束最优化问题，最终让你掌握如何利用金融市场的深层结构（特征向量）来设计精密复杂的投资策略。", "id": "2447812", "problem": "给定一个对称正定协方差矩阵 $\\Sigma \\in \\mathbb{R}^{n \\times n}$，它描述了 $n$ 种资产收益率的联合分布，以及一个整数 $k$，满足 $0 \\le k \\le n-1$。设 $\\Sigma = Q \\Lambda Q^{\\top}$ 是其特征值分解，其中 $Q$ 的列是标准正交的特征向量，且 $\\Lambda = \\mathrm{diag}(\\lambda_1,\\dots,\\lambda_n)$，满足 $\\lambda_1 \\ge \\lambda_2 \\ge \\dots \\ge \\lambda_n > 0$。在主成分分析 (Principal Component Analysis, PCA) 意义下，前 $k$ 个主成分是对应于最大 $k$ 个特征值的特征向量，即 $Q$ 的前 $k$ 列。一个投资组合权重向量 $w \\in \\mathbb{R}^n$ 与第 $i$ 个主成分时间序列零相关的充要条件是 $w^{\\top} \\Sigma v_i = 0$，其中 $v_i$ 是 $\\Sigma$ 的第 $i$ 个特征向量。\n\n构建一个特征投资组合 (eigen-portfolio) 权重向量 $w$，使其满足以下两个条件：\n- 零相关性约束：对于所有 $i \\in \\{1,2,\\dots,k\\}$，$w^{\\top} \\Sigma v_i = 0$。\n- 单位预算约束：$\\mathbf{1}^{\\top} w = 1$，其中 $\\mathbf{1} \\in \\mathbb{R}^n$ 是全为 1 的向量。\n\n在所有满足条件的 $w$ 中，选择方差 $w^{\\top} \\Sigma w$ 的唯一最小化向量。您的程序必须为下面测试套件中的每个测试用例计算 $w$，并报告所得的权重向量。\n\n不涉及角度。不涉及物理单位。所有报告的数字必须是实数。您的程序必须将结果输出为单行，形式为逗号分隔的列表的列表，其中每个内部列表包含一个测试用例的投资组合权重，四舍五入到 $6$ 位小数。\n\n测试套件：\n- 测试用例 #1：$n=3$, $k=1$, \n  $\\Sigma = \\mathrm{diag}([\\,0.16,\\,0.09,\\,0.04\\,])$。\n- 测试用例 #2：$n=4$, $k=2$, \n  $\\Sigma = \\mathrm{diag}([\\,0.09,\\,0.0625,\\,0.04,\\,0.0225\\,])$。\n- 测试用例 #3：$n=5$, $k=0$, \n  $\\Sigma = \\mathrm{diag}([\\,0.25,\\,0.16,\\,0.09,\\,0.04,\\,0.01\\,])$。\n- 测试用例 #4：$n=5$, $k=4$, \n  $\\Sigma = \\mathrm{diag}([\\,0.25,\\,0.16,\\,0.09,\\,0.04,\\,0.01\\,])$。\n\n最终输出格式：\n你的程序应生成单行输出，其中包含测试套件的权重向量，格式为一个由方括号括起来的逗号分隔列表，每个向量序列化为一个包含 $n$ 个浮点数的列表，四舍五入到6位小数，并与测试用例的顺序相同。例如，包含两个向量的输出应如下所示：$[[w_{1,1},w_{1,2},\\dots],[w_{2,1},w_{2,2},\\dots]]$。", "solution": "所提出的问题是在金融投资组合理论背景下的一个有约束的二次优化问题。我们的任务是构建一个投资组合权重向量 $w \\in \\mathbb{R}^n$，在遵守一组线性约束的同时，最小化由 $w^{\\top} \\Sigma w$ 给出的投资组合方差。这些约束要求投资组合与资产收益率的前 $k$ 个主成分零相关，并且是全额投资的。\n\n首先，我们将优化问题形式化。我们寻求找到能解决以下问题的 $w$：\n$$ \\text{最小化} \\quad f(w) = w^{\\top} \\Sigma w $$\n约束条件为：\n1.  $w^{\\top} \\Sigma v_i = 0$ for $i \\in \\{1, 2, \\dots, k\\}$ (零相关性约束)\n2.  $\\mathbf{1}^{\\top} w = 1$ (单位预算约束)\n\n这里，$\\Sigma$ 是一个对称正定协方差矩阵，$v_i$ 是 $\\Sigma$ 对应于特征值 $\\lambda_i$ 的第 $i$ 个特征向量，$\\mathbf{1}$ 是全为 1 的向量。特征值按 $\\lambda_1 \\ge \\lambda_2 \\ge \\dots \\ge \\lambda_n > 0$ 的顺序排列。\n\n零相关性约束可以被简化。根据特征向量的定义，$\\Sigma v_i = \\lambda_i v_i$。将此代入约束条件，得到：\n$$ w^{\\top} (\\lambda_i v_i) = \\lambda_i (w^{\\top} v_i) = 0 $$\n由于 $\\Sigma$ 是正定的，其所有特征值 $\\lambda_i$ 均为严格正数。因此，我们可以除以 $\\lambda_i$，约束等价于：\n$$ w^{\\top} v_i = 0 \\quad \\text{for } i \\in \\{1, 2, \\dots, k\\} $$\n这个条件表明权重向量 $w$ 必须与 $\\Sigma$ 的前 $k$ 个特征向量正交。特征向量 $\\{v_1, \\dots, v_n\\}$ 构成 $\\mathbb{R}^n$ 的一个标准正交基。一个与前 $k$ 个基向量正交的向量必须位于由余下的 $n-k$ 个基向量 $\\{v_{k+1}, \\dots, v_n\\}$ 张成的子空间中。\n因此，$w$ 可以表示为这些余下特征向量的线性组合：\n$$ w = \\sum_{j=k+1}^{n} c_j v_j $$\n其中 $c_{k+1}, \\dots, c_n$ 为标量系数。设 $c$ 为这些系数组成的向量。\n\n现在，我们将 $w$ 的这个表达式代入目标函数和单位预算约束中。\n目标函数变为：\n$$ w^{\\top} \\Sigma w = \\left(\\sum_{j=k+1}^{n} c_j v_j\\right)^{\\top} \\Sigma \\left(\\sum_{l=k+1}^{n} c_l v_l\\right) = \\sum_{j=k+1}^{n} \\sum_{l=k+1}^{n} c_j c_l (v_j^{\\top} \\Sigma v_l) $$\n由于性质 $v_j^{\\top} \\Sigma v_l = v_j^{\\top} (\\lambda_l v_l) = \\lambda_l (v_j^{\\top} v_l) = \\lambda_l \\delta_{jl}$（其中 $\\delta_{jl}$ 是克罗内克 δ），目标函数简化为：\n$$ w^{\\top} \\Sigma w = \\sum_{j=k+1}^{n} c_j^2 \\lambda_j $$\n单位预算约束变为：\n$$ \\mathbf{1}^{\\top} w = \\mathbf{1}^{\\top} \\left(\\sum_{j=k+1}^{n} c_j v_j\\right) = \\sum_{j=k+1}^{n} c_j (\\mathbf{1}^{\\top} v_j) = 1 $$\n我们定义 $u_j = \\mathbf{1}^{\\top} v_j$。那么约束条件就是 $\\sum_{j=k+1}^{n} c_j u_j = 1$。\n\n问题现在简化为求解以下问题的系数 $c_j$：\n$$ \\text{最小化} \\quad \\sum_{j=k+1}^{n} c_j^2 \\lambda_j $$\n$$ \\text{约束条件为} \\quad \\sum_{j=k+1}^{n} c_j u_j = 1 $$\n这是一个可以用拉格朗日乘数法解决的标准问题。拉格朗日函数是：\n$$ \\mathcal{L}(c, \\mu) = \\sum_{j=k+1}^{n} c_j^2 \\lambda_j - \\mu \\left(\\sum_{j=k+1}^{n} c_j u_j - 1\\right) $$\n对每个 $c_j$ 求偏导数并令其为零，得到一阶条件：\n$$ \\frac{\\partial \\mathcal{L}}{\\partial c_j} = 2 c_j \\lambda_j - \\mu u_j = 0 \\implies c_j = \\frac{\\mu u_j}{2 \\lambda_j} $$\n我们将 $c_j$ 的这个表达式代回约束条件中，以求解拉格朗日乘数 $\\mu$：\n$$ \\sum_{j=k+1}^{n} \\left(\\frac{\\mu u_j}{2 \\lambda_j}\\right) u_j = 1 \\implies \\frac{\\mu}{2} \\sum_{j=k+1}^{n} \\frac{u_j^2}{\\lambda_j} = 1 $$\n$$ \\mu = \\frac{2}{\\sum_{i=k+1}^{n} u_i^2 / \\lambda_i} $$\n将 $\\mu$ 代回 $c_j$ 的表达式：\n$$ c_j = \\frac{u_j}{\\lambda_j} \\left( \\frac{1}{\\sum_{i=k+1}^{n} u_i^2 / \\lambda_i} \\right) $$\n最终的权重向量则重构为 $w = \\sum_{j=k+1}^{n} c_j v_j$。\n\n对于所提供的具体测试用例，协方差矩阵 $\\Sigma$ 是对角矩阵。这大大简化了计算。对于对角矩阵 $\\Sigma = \\mathrm{diag}(\\lambda_1, \\dots, \\lambda_n)$，特征值是其对角元素 $\\lambda_i$，对应的特征向量是标准基向量 $v_i = e_i$，其中 $e_i$ 在第 $i$ 个位置为 1，其余位置为 0。\n在这种情况下，标量 $u_j$ 变为：\n$$ u_j = \\mathbf{1}^{\\top} v_j = \\mathbf{1}^{\\top} e_j = 1 \\quad \\text{for all } j $$\n系数 $c_j$ 的表达式简化为：\n$$ c_j = \\frac{1}{\\lambda_j} \\left( \\frac{1}{\\sum_{i=k+1}^{n} 1 / \\lambda_i} \\right) $$\n权重向量 $w$ 为 $w = \\sum_{j=k+1}^{n} c_j e_j$。这意味着 $w$ 的分量（记为 $w_j$）是：\n$$ w_j = \\begin{cases} 0 & \\text{if } 1 \\le j \\le k \\\\ c_j & \\text{if } k+1 \\le j \\le n \\end{cases} $$\n所以，对于 $j \\in \\{k+1, \\dots, n\\}$，权重为：\n$$ w_j = \\frac{1/\\lambda_j}{\\sum_{i=k+1}^{n} 1/\\lambda_i} $$\n这个公式为计算给定测试用例的权重向量提供了一个直接的方法。前 $k$ 个权重为零，其余的 $n-k$ 个权重按其对应特征值的倒数成比例分配，并归一化以使它们的总和为一。", "answer": "```python\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Solves the eigen-portfolio optimization problem for a suite of test cases.\n    \"\"\"\n\n    test_cases = [\n        {'sigma_diag': np.array([0.16, 0.09, 0.04]), 'k': 1},\n        {'sigma_diag': np.array([0.09, 0.0625, 0.04, 0.0225]), 'k': 2},\n        {'sigma_diag': np.array([0.25, 0.16, 0.09, 0.04, 0.01]), 'k': 0},\n        {'sigma_diag': np.array([0.25, 0.16, 0.09, 0.04, 0.01]), 'k': 4},\n    ]\n\n    def compute_weights(sigma_diag: np.ndarray, k: int) -> list[float]:\n        \"\"\"\n        Computes the optimal portfolio weights for a diagonal covariance matrix.\n\n        Args:\n            sigma_diag: A numpy array containing the diagonal elements of Sigma,\n                        which are the eigenvalues sorted in descending order.\n            k: The number of principal components to be uncorrelated with.\n\n        Returns:\n            A list of portfolio weights rounded to 6 decimal places.\n        \"\"\"\n        n = len(sigma_diag)\n        \n        # The weights corresponding to the first k principal components are zero.\n        # Problem statement uses 1-based indexing for k, so in 0-based Python,\n        # weights w[0]...w[k-1] are zero.\n        # The remaining weights are calculated for indices k to n-1.\n        w = np.zeros(n)\n\n        # The problem constraints ensure 0 <= k <= n-1, so the slice for\n        # relevant_lambdas is always non-empty.\n        \n        # Eigenvalues to be used are from index k to n-1.\n        relevant_lambdas = sigma_diag[k:]\n        \n        # The formula for weights w_j (for j >= k) is (1/lambda_j) / sum(1/lambda_i)\n        # where the sum is over i from k to n-1.\n        inv_lambdas = np.reciprocal(relevant_lambdas)\n        sum_inv_lambdas = np.sum(inv_lambdas)\n        \n        # Calculate the non-zero portion of the weights\n        non_zero_weights = inv_lambdas / sum_inv_lambdas\n        \n        # Assign the calculated weights to the final weight vector\n        w[k:] = non_zero_weights\n        \n        return list(np.round(w, 6))\n\n    all_results = []\n    for case in test_cases:\n        weights = compute_weights(case['sigma_diag'], case['k'])\n        all_results.append(weights)\n        \n    # Format the final output string according to the problem specification.\n    # Ex: [[w11,w12,...],[w21,w22,...]]\n    # This requires creating a string for each inner list and then joining them.\n    \n    # Using python's default str(list) representation introduces spaces\n    # after commas, which might be undesirable. Manual formatting ensures\n    # the output is exactly as specified.\n    # Example: [0.0, 0.36, 0.64] -> \"[0.000000,0.360000,0.640000]\"\n    \n    w_strings = []\n    for w_vector in all_results:\n        w_str = f\"[{','.join([f'{x:.6f}' for x in w_vector])}]\"\n        w_strings.append(w_str)\n    \n    final_output = f\"[{','.join(w_strings)}]\"\n    \n    print(final_output)\n\nsolve()\n```"}]}