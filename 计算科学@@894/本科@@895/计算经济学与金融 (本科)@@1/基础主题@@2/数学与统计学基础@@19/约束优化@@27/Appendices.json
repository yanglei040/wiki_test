{"hands_on_practices": [{"introduction": "在我们深入研究复杂的经济模型之前，首先必须掌握其核心的数学工具——拉格朗日乘数法。这个练习提供了一个清晰直观的起点，它将抽象的数学概念与一个物理类比联系起来：在受约束的平面上寻找一个点的最低势能。通过解决这个问题 [@problem_id:4164]，你将能够练习并巩固使用拉格朗日乘数法求解约束最优化问题的基本步骤，为后续更复杂的应用打下坚实的基础。", "id": "4164", "problem": "一个粒子在三维空间中运动，其势能由函数 $U(x, y, z) = x^2 + y^2 + z^2$ 描述。粒子的运动受限于由方程 $x + 2y + 3z = 6$ 定义的一个平面。\n\n使用拉格朗日乘数法，确定粒子在约束平面上运动时所能具有的最小势能。", "solution": "我们要求在约束条件 $x + 2y + 3z = 6$ 下，$U = x^2 + y^2 + z^2$ 的最小值。引入拉格朗日乘数 $\\lambda$，并设\n$$L(x,y,z,\\lambda) = x^2 + y^2 + z^2 - \\lambda\\,(x + 2y + 3z - 6).$$\n计算偏导数：\n$$\\frac{\\partial L}{\\partial x} = 2x - \\lambda = 0,$$\n$$\\frac{\\partial L}{\\partial y} = 2y - 2\\lambda = 0,$$\n$$\\frac{\\partial L}{\\partial z} = 2z - 3\\lambda = 0,$$\n$$\\frac{\\partial L}{\\partial \\lambda} = -(x + 2y + 3z - 6) = 0.$$\n\n由前三个方程可得\n$$2x = \\lambda,\\quad 2y = 2\\lambda,\\quad 2z = 3\\lambda,$$\n因此\n$$x = \\frac{\\lambda}{2},\\quad y = \\lambda,\\quad z = \\frac{3\\lambda}{2}.$$\n\n代入约束条件：\n$$\\frac{\\lambda}{2} + 2\\lambda + 3\\cdot\\frac{3\\lambda}{2} = 6.$$\n合并项：\n$$\\frac{\\lambda}{2} + 2\\lambda + \\frac{9\\lambda}{2} = 6,\\quad\n\\frac{1\\lambda + 4\\lambda + 9\\lambda}{2} = 6,\\quad\n7\\lambda = 6\\quad\\Longrightarrow\\quad \\lambda = \\frac{6}{7}.$$\n\n因此，驻点为\n$$x = \\frac{3}{7},\\quad y = \\frac{6}{7},\\quad z = \\frac{9}{7}.$$\n计算势能：\n$$U_{\\min} = \\left(\\frac{3}{7}\\right)^2 + \\left(\\frac{6}{7}\\right)^2 + \\left(\\frac{9}{7}\\right)^2\n= \\frac{9 + 36 + 81}{49} = \\frac{126}{49} = \\frac{18}{7}.$$", "answer": "$$\\boxed{\\frac{18}{7}}$$"}, {"introduction": "掌握了拉格朗日乘数法的基本原理后，我们现在可以将其应用于经济学的一个基石问题：消费者选择理论。这个练习 [@problem_id:2293283] 模拟了一个经典的场景，即消费者如何在有限的预算内，通过分配支出来最大化其满意度（即效用）。通过求解这个问题，你将亲身体验如何将抽象的优化技术转化为对现实经济行为的深刻洞见，这是连接数学理论与经济学实践的关键一步。", "id": "2293283", "problem": "一位名叫 Alex 的经济学学生正在分析自己每月的数字消费预算。Alex 的满意度由一个石头-基里效用函数 $U(x, y) = (x-x_{0})^{0.4}(y-y_{0})^{0.6}$ 建模，其中 $x$ 表示每月使用的移动数据总量，单位为千兆字节 (GB)，$y$ 表示流媒体服务的订阅数量。根据过去的行为，Alex 确定了其生存水平消费（低于该水平则无法获得效用）为 $x_0 = 5$ GB 的数据和 $y_0 = 1$ 项流媒体服务。\n\n移动数据的价格是每 GB $p_x = \\$2$，每项流媒体服务的价格是 $p_y = \\$15$。Alex 每月用于这两项的总预算为 $I = \\$200$。为简化模型，$x$ 和 $y$ 均可视为连续实数变量。\n\n假设 Alex 希望在预算约束下最大化其效用，请确定最优消费束。求出使 Alex 效用最大化的 $x$ 和 $y$ 的值。请将您的答案表示为数对 $(x, y)$，并将每个值四舍五入到三位有效数字。", "solution": "我们需要在预算约束 $p_{x}x+p_{y}y=I$ 和定义域约束 $x\\geq x_{0}$，$y\\geq y_{0}$ 下，最大化石头-基里效用函数 $U(x,y)=(x-x_{0})^{a}(y-y_{0})^{b}$，其中 $a=0.4$，$b=0.6$。由于 $\\ln$ 函数是严格递增的，并且在内部最优解处有 $x>x_{0}$ 和 $y>y_{0}$，我们可以等价地在预算约束 $p_{x}x+p_{y}y=I$ 下最大化 $\\ln U=a\\ln(x-x_{0})+b\\ln(y-y_{0})$。\n\n建立拉格朗日函数\n$$\n\\mathcal{L}=a\\ln(x-x_{0})+b\\ln(y-y_{0})+\\lambda\\left(I-p_{x}x-p_{y}y\\right).\n$$\n对于内部最优解，一阶条件为\n$$\n\\frac{\\partial \\mathcal{L}}{\\partial x}=\\frac{a}{x-x_{0}}-\\lambda p_{x}=0,\\quad\n\\frac{\\partial \\mathcal{L}}{\\partial y}=\\frac{b}{y-y_{0}}-\\lambda p_{y}=0,\\quad\n\\frac{\\partial \\mathcal{L}}{\\partial \\lambda}=I-p_{x}x-p_{y}y=0.\n$$\n由前两个条件可得，\n$$\nx-x_{0}=\\frac{a}{\\lambda p_{x}},\\qquad y-y_{0}=\\frac{b}{\\lambda p_{y}}.\n$$\n代入预算约束中：\n$$\np_{x}\\left(x_{0}+\\frac{a}{\\lambda p_{x}}\\right)+p_{y}\\left(y_{0}+\\frac{b}{\\lambda p_{y}}\\right)=I\n\\;\\;\\Longrightarrow\\;\\;\np_{x}x_{0}+p_{y}y_{0}+\\frac{a}{\\lambda}+\\frac{b}{\\lambda}=I.\n$$\n因此\n$$\n\\frac{a+b}{\\lambda}=I-p_{x}x_{0}-p_{y}y_{0}\n\\;\\;\\Longrightarrow\\;\\;\n\\lambda=\\frac{a+b}{\\,I-p_{x}x_{0}-p_{y}y_{0}\\,}.\n$$\n所以，\n$$\nx^{\\ast}=x_{0}+\\frac{a}{p_{x}}\\cdot\\frac{I-p_{x}x_{0}-p_{y}y_{0}}{a+b},\\qquad\ny^{\\ast}=y_{0}+\\frac{b}{p_{y}}\\cdot\\frac{I-p_{x}x_{0}-p_{y}y_{0}}{a+b}.\n$$\n当 $a=0.4$，$b=0.6$（因此 $a+b=1$），$x_{0}=5$，$y_{0}=1$，$p_{x}=2$，$p_{y}=15$ 且 $I=200$ 时，可自由支配收入为\n$$\nI-p_{x}x_{0}-p_{y}y_{0}=200-2\\cdot 5-15\\cdot 1=175>0,\n$$\n因此存在内部解。于是\n$$\nx^{\\ast}=5+\\frac{0.4}{2}\\cdot 175=5+35=40,\\qquad\ny^{\\ast}=1+\\frac{0.6}{15}\\cdot 175=1+7=8.\n$$\n该消费束是可行的，并用尽了全部预算：$2\\cdot 40+15\\cdot 8=200$。将每个值四舍五入到三位有效数字，得到 $x^{\\ast}=40.0$ 和 $y^{\\ast}=8.00$。", "answer": "$$\\boxed{\\begin{pmatrix}40.0 & 8.00\\end{pmatrix}}$$"}, {"introduction": "在掌握了单个决策者的优化模型后，我们将视野扩展到更复杂的企业级决策。这个练习 [@problem_id:2383221] 模拟了一家公司在面临多种资源（如机器、劳动力、原材料）限制的情况下，如何制定生产计划以实现利润最大化。对于这种规模的问题，手算求解已不现实，我们必须依赖计算方法，如线性规划。这个实践将引导你将一个真实的商业挑战构建成一个严谨的线性规划模型，并使用软件工具进行求解，为你提供了宝贵的计算经济学实战经验。", "id": "2383221", "problem": "一家公司使用共享资源生产多种产品。假设有 $6$ 种产品，索引为 $j \\in \\{1,2,3,4,5,6\\}$，决策变量为 $x_j \\ge 0$，表示要生产的产品 $j$ 的数量。生产需要 $4$ 台机器的产能、$2$ 种类型的劳动工时以及 $4$ 种供应链投入。每单位产品 $j$ 产生收入 $r_j$，并产生可变成本 $v_j$。公司旨在选择 $x \\in \\mathbb{R}^6_{\\ge 0}$，以在资源约束下最大化总利润。\n\n定义线性规划（Linear Program, LP）标准形式如下：\n最大化\n$$\n\\sum_{j=1}^{6} (r_j - v_j) x_j,\n$$\n约束条件：\n$$\nA x \\le B, \\quad L x \\le H, \\quad S x \\le \\bar{S}, \\quad x \\ge 0,\n$$\n其中 $A \\in \\mathbb{R}^{4 \\times 6}$ 是每单位产品的机器时间需求矩阵，$B \\in \\mathbb{R}^{4}$ 是可用机器工时向量，$L \\in \\mathbb{R}^{2 \\times 6}$ 是每单位产品的劳动工时需求矩阵，$H \\in \\mathbb{R}^{2}$ 是可用劳动工时向量，$S \\in \\mathbb{R}^{4 \\times 6}$ 是每单位产品的投入使用矩阵，以及 $\\bar{S} \\in \\mathbb{R}^{4}$ 是可用投入数量向量。\n\n使用以下固定的技术系数（所有测试用例均相同）：\n\n每单位产品的机器工时需求矩阵：\n$$\nA = \\begin{bmatrix}\n1.0 & 0.5 & 0.2 & 0.0 & 0.3 & 0.8 \\\\\n0.2 & 1.2 & 0.0 & 0.6 & 0.4 & 0.1 \\\\\n0.0 & 0.4 & 1.5 & 0.7 & 0.2 & 0.3 \\\\\n0.5 & 0.0 & 0.4 & 1.0 & 0.6 & 0.2\n\\end{bmatrix}.\n$$\n每单位产品的劳动工时需求矩阵：\n$$\nL = \\begin{bmatrix}\n0.6 & 0.8 & 0.3 & 0.5 & 0.2 & 0.4 \\\\\n0.4 & 0.2 & 0.5 & 0.6 & 0.3 & 0.7\n\\end{bmatrix}.\n$$\n每单位产品的投入使用矩阵：\n$$\nS = \\begin{bmatrix}\n1.0 & 0.5 & 0.3 & 0.4 & 0.2 & 0.1 \\\\\n0.2 & 0.8 & 0.6 & 0.1 & 0.4 & 0.3 \\\\\n0.0 & 0.1 & 0.5 & 0.9 & 0.2 & 0.0 \\\\\n0.3 & 0.2 & 0.4 & 0.0 & 1.1 & 0.6\n\\end{bmatrix}.\n$$\n基准单位收入和可变成本：\n$$\nr = \\begin{bmatrix}100 & 120 & 90 & 110 & 80 & 130\\end{bmatrix}, \\quad\nv = \\begin{bmatrix}40 & 50 & 30 & 60 & 20 & 70\\end{bmatrix}.\n$$\n\n您的任务是计算下面每个测试用例的最优总利润\n$$\n\\Pi^\\star = \\sum_{j=1}^{6} (r_j - v_j) x_j^\\star,\n$$\n其中 $x^\\star$ 是该案例的线性规划解。所有最终利润都以与 $r_j$ 和 $v_j$ 相同的货币单位表示（无货币符号），作为实数。\n\n测试套件：\n- 测试用例 $1$（基准产能和投入）：\n  - 机器产能：\n    $$\n    B^{(1)} = \\begin{bmatrix}500 & 400 & 450 & 380\\end{bmatrix}.\n    $$\n  - 劳动力可用量：\n    $$\n    H^{(1)} = \\begin{bmatrix}600 & 550\\end{bmatrix}.\n    $$\n  - 投入可用量：\n    $$\n    \\bar{S}^{(1)} = \\begin{bmatrix}300 & 250 & 200 & 220\\end{bmatrix}.\n    $$\n  - 收入和成本：\n    $$\n    r^{(1)} = r, \\quad v^{(1)} = v.\n    $$\n- 测试用例 $2$（第三种投入的供应链中断和产品价格冲击）：\n  - 机器产能：\n    $$\n    B^{(2)} = \\begin{bmatrix}500 & 400 & 450 & 380\\end{bmatrix}.\n    $$\n  - 劳动力可用量：\n    $$\n    H^{(2)} = \\begin{bmatrix}600 & 550\\end{bmatrix}.\n    $$\n  - 投入可用量（第三种投入减少）：\n    $$\n    \\bar{S}^{(2)} = \\begin{bmatrix}300 & 250 & 80 & 220\\end{bmatrix}.\n    $$\n  - 收入和成本（产品 $4$ 的收入增加）：\n    $$\n    r^{(2)} = \\begin{bmatrix}100 & 120 & 90 & 130 & 80 & 130\\end{bmatrix}, \\quad v^{(2)} = v.\n    $$\n- 测试用例 $3$（机器 $4$ 停机和产品 $2$ 的收入降低）：\n  - 机器产能（第四台机器受限）：\n    $$\n    B^{(3)} = \\begin{bmatrix}500 & 400 & 450 & 50\\end{bmatrix}.\n    $$\n  - 劳动力可用量：\n    $$\n    H^{(3)} = \\begin{bmatrix}600 & 550\\end{bmatrix}.\n    $$\n  - 投入可用量：\n    $$\n    \\bar{S}^{(3)} = \\begin{bmatrix}300 & 250 & 200 & 220\\end{bmatrix}.\n    $$\n  - 收入和成本（产品 $2$ 的收入减少）：\n    $$\n    r^{(3)} = \\begin{bmatrix}100 & 110 & 90 & 110 & 80 & 130\\end{bmatrix}, \\quad v^{(3)} = v.\n    $$\n- 测试用例 $4$（所有资源可用性为零的边缘情况）：\n  - 机器产能：\n    $$\n    B^{(4)} = \\begin{bmatrix}0 & 0 & 0 & 0\\end{bmatrix}.\n    $$\n  - 劳动力可用量：\n    $$\n    H^{(4)} = \\begin{bmatrix}0 & 0\\end{bmatrix}.\n    $$\n  - 投入可用量：\n    $$\n    \\bar{S}^{(4)} = \\begin{bmatrix}0 & 0 & 0 & 0\\end{bmatrix}.\n    $$\n  - 收入和成本：\n    $$\n    r^{(4)} = r, \\quad v^{(4)} = v.\n    $$\n\n要求的最终输出格式：\n您的程序应生成一行输出，其中包含 $4$ 个测试用例的最优总利润，形式为方括号括起来的逗号分隔列表（例如，$[p_1,p_2,p_3,p_4]$），其中每个 $p_i$ 是一个实数（货币单位，无货币符号）。不应打印任何其他文本。", "solution": "问题陈述已经过严格验证，并被确认为有效。它构成一个标准的线性规划问题，是运筹学和计算经济学中的一个基本结构。该问题具有科学依据，是适定的、客观的，并为确定解决方案提供了一套完整且一致的数据。我们将继续进行形式化推导和计算。\n\n目标是最大化总利润 $\\Pi$，它是生产数量 $x_j$（$j \\in \\{1, 2, 3, 4, 5, 6\\}$）的线性函数。用向量表示法，目标函数为：\n$$\n\\text{maximize} \\quad \\Pi = c^T x\n$$\n其中 $x \\in \\mathbb{R}^6$ 是决策变量向量 ($x_j \\ge 0$)，$c = r - v$ 是单位利润向量（收入减去可变成本）。\n\n生产受到对 $4$ 台机器、$2$ 种劳动力类型和 $4$ 种供应投入的约束。这些约束表示为线性不等式组：$A x \\le B$，$L x \\le H$ 和 $S x \\le \\bar{S}$。这些可以合并成一个单一的矩阵不等式。我们通过垂直堆叠各个系数矩阵 $A$、$L$ 和 $S$ 来定义一个复合约束矩阵 $A_{ub}$，并通过连接相应的可用性向量 $B$、$H$ 和 $\\bar{S}$ 来定义一个复合资源向量 $b_{ub}$。\n$$\nA_{ub} = \\begin{bmatrix} A \\\\ L \\\\ S \\end{bmatrix}, \\quad b_{ub} = \\begin{bmatrix} B \\\\ H \\\\ \\bar{S} \\end{bmatrix}\n$$\n矩阵 $A$ 的维度是 $4 \\times 6$，$L$ 是 $2 \\times 6$，$S$ 是 $4 \\times 6$。因此，$A_{ub}$ 是一个 $10 \\times 6$ 的矩阵。向量 $b_{ub}$ 有 $10$ 个对应的条目。\n\n完整的线性规划（LP）问题具有以下标准形式：\n$$\n\\begin{aligned}\n\\text{maximize} \\quad & c^T x \\\\\n\\text{subject to} \\quad & A_{ub} x \\le b_{ub} \\\\\n& x \\ge 0\n\\end{aligned}\n$$\n为了进行计算求解，我们使用 `scipy.optimize` 库中的 `linprog` 函数。该函数旨在解决最小化问题。为了使我们的最大化问题与求解器的要求保持一致，我们将目标重构为最小化负利润：\n$$\n\\text{minimize} \\quad -c^T x\n$$\n提供给求解器的目标系数向量将是 $-c$。最优利润 $\\Pi^\\star$ 则是求解器返回的最小值的负数，即 $\\Pi^\\star = -(\\text{result.fun})$。\n\n固定的技术系数矩阵 $A$、$L$ 和 $S$ 用于构建常数 $10 \\times 6$ 矩阵 $A_{ub}$。然后，我们通过为每个案例 $i$ 定义特定的利润向量 $c^{(i)}$ 和资源向量 $b_{ub}^{(i)}$ 来求解 $4$ 个测试用例的线性规划问题。\n\n对于测试用例 1，即基准情景，利润向量是 $c^{(1)} = r - v = [60, 70, 60, 50, 60, 60]^T$，资源向量是 $b_{ub}^{(1)} = [500, 400, 450, 380, 600, 550, 300, 250, 200, 220]^T$。求解该线性规划问题得到最优利润 $\\Pi_1^\\star$。\n\n对于测试用例 2，产品 $4$ 的收入增加，导致新的利润向量 $c^{(2)} = [60, 70, 60, 70, 60, 60]^T$。第三种投入的可用性减少，修改了资源向量的第九个元素，因此 $b_{ub}^{(2)} = [500, 400, 450, 380, 600, 550, 300, 250, 80, 220]^T$。相应的最优利润是 $\\Pi_2^\\star$。\n\n对于测试用例 3，产品 $2$ 的收入减少，得到利润向量 $c^{(3)} = [60, 60, 60, 50, 60, 60]^T$。第四台机器的产能受限，改变了资源向量的第四个元素，因此 $b_{ub}^{(3)} = [500, 400, 450, 50, 600, 550, 300, 250, 200, 220]^T$。最优利润是 $\\Pi_3^\\star$。\n\n对于测试用例 4，所有资源可用性均为零，$b_{ub}^{(4)} = 0$。约束变为 $A_{ub} x \\le 0$。由于 $A_{ub}$ 和 $x$ 的所有元素都必须是非负的，唯一的可行解是原点，$x^\\star = 0$。因此，最优利润确定性地为零：$\\Pi_4^\\star = c^T x^\\star = 0$。这个案例可以作为对模型和求解器逻辑一致性的宝贵检验。\n\n实施过程包括为每个案例设置这些向量，并调用 `scipy.optimize.linprog` 求解器。最终结果是为 $4$ 个案例计算出的最优利润。", "answer": "```python\nimport numpy as np\nfrom scipy.optimize import linprog\n\ndef solve():\n    \"\"\"\n    Solves a series of linear programming problems for a firm's production plan.\n    \"\"\"\n    # Define fixed technical coefficients as specified in the problem statement.\n    A = np.array([\n        [1.0, 0.5, 0.2, 0.0, 0.3, 0.8],\n        [0.2, 1.2, 0.0, 0.6, 0.4, 0.1],\n        [0.0, 0.4, 1.5, 0.7, 0.2, 0.3],\n        [0.5, 0.0, 0.4, 1.0, 0.6, 0.2]\n    ])\n\n    L = np.array([\n        [0.6, 0.8, 0.3, 0.5, 0.2, 0.4],\n        [0.4, 0.2, 0.5, 0.6, 0.3, 0.7]\n    ])\n\n    S = np.array([\n        [1.0, 0.5, 0.3, 0.4, 0.2, 0.1],\n        [0.2, 0.8, 0.6, 0.1, 0.4, 0.3],\n        [0.0, 0.1, 0.5, 0.9, 0.2, 0.0],\n        [0.3, 0.2, 0.4, 0.0, 1.1, 0.6]\n    ])\n\n    # Baseline per-unit revenues and variable costs.\n    r_base = np.array([100, 120, 90, 110, 80, 130])\n    v_base = np.array([40, 50, 30, 60, 20, 70])\n\n    # Define the four test cases with their specific parameters.\n    test_cases = [\n        # Test Case 1: Baseline scenario.\n        {\n            \"r\": r_base,\n            \"v\": v_base,\n            \"B\": np.array([500, 400, 450, 380]),\n            \"H\": np.array([600, 550]),\n            \"S_bar\": np.array([300, 250, 200, 220])\n        },\n        # Test Case 2: Supply chain disruption and price shock.\n        {\n            \"r\": np.array([100, 120, 90, 130, 80, 130]),\n            \"v\": v_base,\n            \"B\": np.array([500, 400, 450, 380]),\n            \"H\": np.array([600, 550]),\n            \"S_bar\": np.array([300, 250, 80, 220])\n        },\n        # Test Case 3: Machine outage and revenue decrease.\n        {\n            \"r\": np.array([100, 110, 90, 110, 80, 130]),\n            \"v\": v_base,\n            \"B\": np.array([500, 400, 450, 50]),\n            \"H\": np.array([600, 550]),\n            \"S_bar\": np.array([300, 250, 200, 220])\n        },\n        # Test Case 4: Zero availability of all resources.\n        {\n            \"r\": r_base,\n            \"v\": v_base,\n            \"B\": np.array([0, 0, 0, 0]),\n            \"H\": np.array([0, 0]),\n            \"S_bar\": np.array([0, 0, 0, 0])\n        }\n    ]\n\n    # Combine A, L, S into a single constraint matrix A_ub. This is constant for all cases.\n    A_ub = np.vstack([A, L, S])\n    \n    results = []\n    for case in test_cases:\n        # Construct the objective vector c = r - v. The solver minimizes -c^T x.\n        c_profit = case[\"r\"] - case[\"v\"]\n        c_solver = -c_profit\n        \n        # Construct the upper-bound vector b_ub for the constraints.\n        b_ub = np.concatenate([case[\"B\"], case[\"H\"], case[\"S_bar\"]])\n        \n        # All decision variables must be non-negative (x_j >= 0).\n        bounds = (0, None)\n        \n        # Solve the linear programming problem using the 'highs' method.\n        res = linprog(c_solver, A_ub=A_ub, b_ub=b_ub, bounds=bounds, method='highs')\n        \n        # The optimal profit is the negative of the minimized objective function value.\n        if res.success:\n            optimal_profit = -res.fun\n            results.append(optimal_profit)\n        else:\n            # This case indicates a solver failure, which is not expected for these well-posed problems.\n            # We append numpy.nan as a placeholder for robustness.\n            results.append(np.nan)\n\n    # Print the final list of results in the specified format.\n    print(f\"[{','.join(map(str, results))}]\")\n\nsolve()\n```"}]}