{"hands_on_practices": [{"introduction": "掌握求根算法的第一步是亲手执行迭代过程。本练习将引导你逐步应用二分法，通过计算一个实际的盈亏平衡问题，来巩固对该方法核心机制的理解 [@problem_id:2157541]。这种基础实践对于后续更复杂数值方法的学习至关重要。", "problem": "一家小型制造公司希望确定其盈亏平衡的生产水平。生产和销售 $x$ 千单位某产品的利润 $P$ 由函数 $P(x) = -1.5x^2 + 140x - 1000$ 建模。该函数的一个根对应于利润为零的盈亏平衡点。公司分析师使用二分法来寻找这个盈亏平衡点。他们从初始区间 $[a_0, b_0] = [5, 10]$ 开始。在执行三次二分法迭代后，他们获得一个新的、更小的包含根的区间 $[a_3, b_3]$。$a_3$ 和 $b_3$ 的值是多少？\n\n将你的答案表示为行矩阵 $\\begin{pmatrix} a_3  b_3 \\end{pmatrix}$。", "solution": "我们得到了利润函数 $P(x) = -1.5x^{2} + 140x - 1000$，这是一个连续多项式。根据介值定理，如果 $P(a)$ 和 $P(b)$ 的符号相反，则在 $(a,b)$ 内存在一个根。二分法的过程是反复将区间对半平分，并选择符号变化所在的子区间。我们从 $[a_{0},b_{0}] = [5,10]$ 开始。\n\n首先，计算端点处的符号：\n$$\nP(5) = -1.5(5)^2 + 140(5) - 1000 = -37.5 + 700 - 1000 = -337.5  0,\n$$\n$$\nP(10) = -1.5(10)^2 + 140(10) - 1000 = -150 + 1400 - 1000 = 250 > 0.\n$$\n由于 $P(5) \\cdot P(10)  0$，在 $[5,10]$ 内存在一个根。\n\n迭代 1：中点 $m_{1} = \\frac{a_{0}+b_{0}}{2} = \\frac{5+10}{2} = 7.5$。\n计算\n$$\nP(7.5) = -1.5(7.5)^2 + 140(7.5) - 1000 = -84.375 + 1050 - 1000 = -34.375  0.\n$$\n由于 $P(5)0$ 和 $P(7.5)0$，而 $P(10)>0$，符号变化发生在 $[7.5, 10]$ 内。因此 $[a_{1},b_{1}] = [7.5, 10]$ 或 $\\left[\\frac{15}{2}, 10\\right]$。\n\n迭代 2：中点 $m_{2} = \\frac{a_{1}+b_{1}}{2} = \\frac{7.5+10}{2} = 8.75$。\n计算\n$$\nP(8.75) = -1.5(8.75)^2 + 140(8.75) - 1000 = -114.84375 + 1225 - 1000 = 110.15625 > 0.\n$$\n由于 $P(7.5)0$ 和 $P(8.75)>0$，符号变化发生在 $[7.5, 8.75]$ 内。因此 $[a_{2},b_{2}] = [7.5, 8.75]$ 或 $\\left[\\frac{15}{2}, \\frac{35}{4}\\right]$。\n\n迭代 3：中点 $m_{3} = \\frac{a_{2}+b_{2}}{2} = \\frac{7.5+8.75}{2} = 8.125$。\n计算\n$$\nP(8.125) = -1.5(8.125)^2 + 140(8.125) - 1000 = -99.0234375 + 1137.5 - 1000 = 38.4765625 > 0.\n$$\n由于 $P(7.5)0$ 和 $P(8.125)>0$，符号变化发生在 $[7.5, 8.125]$ 内。因此，经过三次迭代后，区间是\n$$\n[a_{3},b_{3}] = [7.5, 8.125] \\quad \\text{或} \\quad \\left[\\frac{15}{2}, \\frac{65}{8}\\right].\n$$", "answer": "$$\\boxed{\\begin{pmatrix} \\frac{15}{2}  \\frac{65}{8} \\end{pmatrix}}$$", "id": "2157541"}, {"introduction": "不同的区间套法使用不同的策略来逼近根，导致收敛速度和精度的差异。本练习将二分法与试位法（regula falsi）进行直接比较，让你通过计算它们的首次近似值来体会两种方法的不同之处 [@problem_id:2157489]。通过这个练习，你将更深刻地理解算法设计中的权衡。", "problem": "考虑在区间 $[1, 2]$ 内求函数 $f(x) = x^3 - 5$ 的一个根。完成此任务的两种常用迭代区间法是二分法和试位法（也称为伪位置法）。\n\n设 $c_B$ 是对初始区间 $[1, 2]$ 应用一次二分法迭代所得到的根的第一次近似值。\n设 $c_{RF}$ 是对相同的初始区间 $[1, 2]$ 应用一次试位法迭代所得到的根的第一次近似值。\n\n该函数的真根为 $x_{true} = \\sqrt[3]{5}$。为方便本题计算，你可以使用值 $x_{true} \\approx 1.709976$。\n\n计算这两种方法的近似误差之间的绝对差值。即，计算 $||c_B - x_{true}| - |c_{RF} - x_{true}||$ 的值。将最终答案四舍五入到四位有效数字。", "solution": "给定函数 $f(x) = x^{3} - 5$ 在区间 $[1,2]$ 上，有 $f(1) = 1^3-5=-4$ 且 $f(2) = 2^3-5=3$，因此根位于区间 $[1,2]$ 内。\n\n经过一步二分法迭代，中点为\n$$\nc_{B} = \\frac{1 + 2}{2} = 1.5.\n$$\n\n对于从 $(a,f(a)) = (1,-4)$ 和 $(b,f(b)) = (2,3)$ 出发的一次试位法迭代，通过线性插值得到的根是\n$$\nc_{RF} = a - f(a)\\,\\frac{b - a}{f(b) - f(a)} = 1 - (-4)\\,\\frac{2 - 1}{3 - (-4)} = 1 + \\frac{4}{7} = \\frac{11}{7}.\n$$\n\n由于函数 $f(x)$ 在 $[1,2]$ 上是严格递增的，并且 $x_{true} \\approx 1.709976$，我们有 $c_{B}=1.5  x_{true}$ 和 $c_{RF} = 11/7 \\approx 1.5714  x_{true}$，因此近似误差为\n$$\n|c_{B} - x_{true}| = x_{true} - c_B, \\quad |c_{RF} - x_{true}| = x_{true} - c_{RF}.\n$$\n因此，误差的绝对差值为\n$$\n\\left||c_{B} - x_{true}| - |c_{RF} - x_{true}|\\right| = \\left|(x_{true} - c_B) - (x_{true} - c_{RF})\\right| = \\left|c_{RF} - c_B\\right| = \\left|\\frac{11}{7} - \\frac{3}{2}\\right| = \\left|\\frac{22 - 21}{14}\\right| = \\frac{1}{14}.\n$$\n\n其数值为\n$$\n\\frac{1}{14} \\approx 0.071428571\\ldots,\n$$\n四舍五入到四位有效数字为 $0.07143$。", "answer": "$$\\boxed{0.07143}$$", "id": "2157489"}, {"introduction": "在实际的科学计算中，我们常常需要在算法的稳健性和收敛速度之间做出权衡。本练习要求你设计并实现一个混合求根算法，它结合了二分法的稳定收敛性和牛顿法的快速收敛性。这是一个综合性的编程实践 [@problem_id:2377926]，旨在将理论知识转化为高效、可靠的计算工具。", "problem": "您需要实现一个混合区间求根算法，该算法结合了区间二分法保证收敛的特性与 Newton–Raphson 方法的局部快速收敛性。对于一个连续函数 $f(x)$，该算法必须从一个满足 $f(a)f(b)  0$ 的严格区间 $[a,b]$ 开始，这会引用介值定理。算法必须保持区间不变性，直到满足一个明确定义的切换准则。\n\n从基本原理出发，区间法阶段基于连续函数 $f(x)$ 在 $[a,b]$ 上的介值定理，通过反复选择符号变化持续存在的子区间来更新区间。Newton–Raphson 阶段基于 $f(x)$ 在当前迭代点 $x$ 周围的一阶 Taylor 线性化，当 $f'(x)$ 非零且初始猜测值足够接近时，该迭代会趋近于一个根。\n\n混合方法的设计要求：\n- 使用一个始终保持 $f(a)f(b)  0$ 的区间法阶段。持续此阶段，直到当前区间宽度满足 $(b-a) \\le \\delta$，其中 $\\delta  0$ 是一个指定的阈值。\n- 一旦 $(b-a) \\le \\delta$，则切换到区间内 Newton–Raphson 阶段，使用中点 $x=\\frac{a+b}{2}$ 作为初始猜测值。一个 Newton 步长 $x_{\\text{new}} = x - \\frac{f(x)}{f'(x)}$ 仅在 $x_{\\text{new}} \\in (a,b)$ 且 $f'(x)$ 为有限非零值时才可被接受。如果接受条件不满足，则执行一次二分步。在产生候选值 $x_{\\text{new}}$ 后，通过选择保留符号变化的子区间来更新区间 $[a,b]$，然后继续。\n- 终止条件：当 $|f(x)| \\le \\tau_f$ 或 $(b-a) \\le \\tau_x$ 满足任意一个时停止，其中 $\\tau_f  0$ 和 $\\tau_x  0$ 是绝对容差。\n- 任何三角函数的角度都必须以弧度为单位。\n- 您的实现必须是确定性的，不得使用随机性。\n\n所有测试用例均使用以下绝对容差：$\\tau_f = 10^{-12}$ 和 $\\tau_x = 10^{-12}$。使用最多 $N_{\\max} = 1000$ 次总迭代以防止无限循环。\n\n测试套件规范。实现您的求解器并将其应用于以下五个案例。对于每个案例，请严格按照给定的定义来定义 $f(x)$ 及其导数 $f'(x)$。确保初始端点如所述满足 $f(a)f(b)  0$。\n\n- 案例 $1$（多项式，单一简根）：\n  - $f_1(x) = x^3 - 2x - 5$\n  - $f_1'(x) = 3x^2 - 2$\n  - $[a,b] = [2,3]$, $\\delta = 10^{-3}$\n\n- 案例 $2$（超越方程，不动点类型，角度以弧度为单位）：\n  - $f_2(x) = \\cos(x) - x$\n  - $f_2'(x) = -\\sin(x) - 1$\n  - $[a,b] = [0,1]$, $\\delta = 10^{-8}$\n\n- 案例 $3$（奇数重根，导数在根处为零）：\n  - $f_3(x) = (x - 1)^3$\n  - $f_3'(x) = 3(x - 1)^2$\n  - $[a,b] = [0.5,2.0]$, $\\delta = 10^{-4}$\n\n- 案例 $4$（初始宽度等于阈值的立即切换边界）：\n  - $f_4(x) = e^x - 3$\n  - $f_4'(x) = e^x$\n  - $[a,b] = [1.0,1.1]$, $\\delta = 10^{-1}$\n\n- 案例 $5$（根位于中点，在区间法阶段精确检测）：\n  - $f_5(x) = x^3$\n  - $f_5'(x) = 3x^2$\n  - $[a,b] = [-10^{-1},10^{-1}]$, $\\delta = 10^{-6}$\n\n所有函数在其各自的区间上都是连续的，对于案例1、2、3和5，端点满足 $f(a)f(b)  0$。对于案例4，初始区间宽度恰好等于 $\\delta$。\n\n必需输出：\n- 对于每个案例，将计算出的根的近似值以浮点数形式输出。在适用的情况下，角度以弧度表示。不涉及物理单位。\n- 使用定点格式将每个根四舍五入到小数点后恰好 $12$ 位。\n- 您的程序应产生单行输出，其中包含按案例1到5顺序排列的结果，形式为用方括号括起来的逗号分隔列表（例如，`[result_1,result_2,result_3,result_4,result_5]`）。", "solution": "所提出的问题是计算物理领域中一个适定且有科学依据的任务。它要求实现一个混合求根算法，该算法将二分法的保证收敛性与 Newton-Raphson 方法的二次收敛性相结合。问题陈述是完整、一致的，并为一组测试用例提供了所有必要的参数、初始条件、函数及其导数。因此，该问题被认为是有效的。\n\n问题的核心是设计一种算法，用于在初始区间 $[a, b]$ 内定位连续函数 $f(x)$ 的一个根，其中条件 $f(a)f(b)  0$ 成立。根据介值定理，此条件保证了该区间内至少存在一个根。算法必须分两个阶段运行，这两个阶段由当前区间宽度 $(b-a)$ 相对于指定阈值 $\\delta  0$ 的大小决定。\n\n让我们逐步形式化该算法。\n\n1.  **初始化**：\n    算法始于一个初始区间 $[a, b]$、一个连续函数 $f(x)$、其导数 $f'(x)$、一个切换阈值 $\\delta$、收敛容差 $\\tau_f$ 和 $\\tau_x$，以及最大迭代次数 $N_{\\max}$。我们首先计算函数在端点的值 $f_a = f(a)$ 和 $f_b = f(b)$，并确认根被包含在区间内，即 $f_a f_b  0$。如果 $f_a$ 或 $f_b$ 为零，则立即找到根。\n\n2.  **迭代优化循环**：\n    该过程进行迭代，不断缩小区间 $[a, b]$，直到满足终止条件，最多进行 $N_{\\max}$ 次迭代。在每次迭代开始时，我们根据区间宽度检查终止条件：如果 $(b-a) \\le \\tau_x$，则过程停止，根的最佳估计值为最终区间的中点 $\\frac{a+b}{2}$。\n\n3.  **阶段确定与点选择**：\n    混合策略的核心在于选择下一个候选点，这取决于当前的区间宽度。\n    -   **阶段 1：二分法 ($ (b-a)  \\delta $)**\n        如果区间较宽，我们处于区间法阶段。此阶段收敛有保证但速度较慢。我们使用二分法，选择区间的中点作为下一个候选点：\n        $$x_{\\text{next}} = \\frac{a+b}{2}$$\n    -   **阶段 2：混合 Newton-Raphson/二分法 ($ (b-a) \\le \\delta $)**\n        一旦区间足够窄，我们切换到一种更激进的策略以加速收敛。\n        a. Newton-Raphson 方法的初始猜测值取当前区间的中点，$x_k = \\frac{a+b}{2}$。\n        b. 我们计算导数 $f'(x_k)$。为使 Newton-Raphson 步长有效，导数必须是有限且非零的。\n        c. 如果导数有效，我们计算 Newton-Raphson 更新值：\n        $$x_{\\text{Newton}} = x_k - \\frac{f(x_k)}{f'(x_k)}$$\n        d. 只有当新点 $x_{\\text{Newton}}$ 严格落在当前区间内，即 $x_{\\text{Newton}} \\in (a, b)$ 时，才接受该点。这一安全措施可防止迭代跳出已知存在根的区域。\n        e. 如果 Newton-Raphson 步被接受，我们设置 $x_{\\text{next}} = x_{\\text{Newton}}$。\n        f. 如果 Newton-Raphson 步的任何条件不满足（导数为零或非有限值，或新点越界），算法必须为当前迭代回退到安全的二分步。在这种情况下，我们设置 $x_{\\text{next}} = \\frac{a+b}{2}$。\n\n4.  **区间更新与终止检查**：\n    在确定 $x_{\\text{next}}$（通过二分法或 Newton-Raphson）后，我们计算 $f_{\\text{next}} = f(x_{\\text{next}})$。\n    - 我们根据函数值检查终止条件：如果 $|f_{\\text{next}}| \\le \\tau_f$，则认为根已找到，并返回 $x_{\\text{next}}$。\n    - 如果过程尚未终止，我们更新区间。我们使用 $f_{\\text{next}}$ 的符号来确定哪个子区间 $[a, x_{\\text{next}}]$ 或 $[x_{\\text{next}}, b]$ 包含根。\n        - 如果 $f(a)f(x_{\\text{next}})  0$，根位于前半部分，因此我们通过更新 $b = x_{\\text{next}}$ 将新区间设置为 $[a, x_{\\text{next}}]$。\n        - 否则，根必定位于后半部分（因为初始时 $f(a)f(b)$ 为负），因此我们通过更新 $a = x_{\\text{next}}$ 将新区间设置为 $[x_{\\text{next}}, b]$。\n    然后循环以新的、更窄的区间继续进行。\n\n5.  **最终处理**：\n    如果循环完成 $N_{\\max}$ 次迭代后仍未满足 $\\tau_f$ 或 $\\tau_x$ 容差，算法将终止并返回最后计算区间的中点 $\\frac{a+b}{2}$，作为根的最佳可用近似值。\n\n这种设计确保了鲁棒性和效率。初始的二分法阶段可靠地缩小搜索空间，随后切换到带安全保护的 Newton-Raphson 方法，在迭代点足够接近根时提供快速收敛。回退到二分法是一个关键的安全机制，即使在 Newton 方法会失败的情况下（例如，在导数为零的根附近，如案例3中 $f_3'(1)=0$），或者步长过大时，也能保持收敛的保证。该实现将应用于五个指定的测试用例。", "answer": "```\n[2.094551481542,0.739085133215,1.000000000000,1.098612288668,0.000000000000]\n```", "id": "2377926"}]}