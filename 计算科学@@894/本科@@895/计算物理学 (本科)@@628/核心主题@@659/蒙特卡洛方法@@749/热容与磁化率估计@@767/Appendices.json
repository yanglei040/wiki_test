{"hands_on_practices": [{"introduction": "本练习旨在巩固统计力学的一个基石：涨落-耗散定理。通过数值验证，您将确认热容 $C_v$ 和磁化率 $\\chi$ 既可以通过微观能量和磁矩的涨落计算，也可以通过平均能量和平均磁矩对温度或磁场的宏观响应（即求导）来计算。对于一个简单的无相互作用顺磁体模型，这个练习将帮助您深入、实践性地理解宏观与微观世界之间的深刻联系。[@problem_id:2400547]", "problem": "一个无相互作用的自旋-$\\tfrac{1}{2}$顺磁体由$N$个相同的独立磁矩构成，每个磁矩的大小为$\\mu$，置于均匀磁场$B$中。每个自旋 $s_i \\in \\{+1,-1\\}$ 贡献的能量为 $-\\mu B s_i$，因此总能量为 $E=-\\mu B \\sum_{i=1}^{N} s_i$，总磁矩为 $M=\\mu \\sum_{i=1}^{N} s_i$。系统与温度为 $T$ 的热浴处于热平衡状态，并由正则系综描述，其逆温度为 $\\beta = 1/(k_B T)$，其中 $k_B$ 是玻尔兹曼常数。\n\n你的任务是，对于下面测试套件中的每一组参数，使用平衡统计力学的第一性原理计算以下四个量：\n1) 由能量涨落计算的定容热容 $C_v$，其定义为 $C_v = \\langle(\\Delta E)^2\\rangle/(k_B T^2)$，其中 $\\langle(\\Delta E)^2\\rangle = \\langle E^2 \\rangle - \\langle E \\rangle^2$ 是在指定温度 $T$ 和磁场 $B$ 下正则系综中的能量方差。\n2) 通过在固定磁场 $B$ 下对平均能量关于温度 $T$ 进行数值微分计算热容 $C_v$，即 $C_v = \\mathrm{d}\\langle E \\rangle/\\mathrm{d}T$。\n3) 由磁化强度涨落计算的磁化率 $\\chi$，其定义为 $\\chi = \\beta \\langle(\\Delta M)^2\\rangle$，其中 $\\langle(\\Delta M)^2\\rangle = \\langle M^2 \\rangle - \\langle M \\rangle^2$ 是在指定温度 $T$ 和磁场 $B$ 下正则系综中的磁化强度方差。\n4) 通过在固定温度 $T$ 下对平均磁化强度关于磁场 $B$ 进行数值微分计算磁化率 $\\chi$，即 $\\chi = \\mathrm{d}\\langle M \\rangle/\\mathrm{d}B$。\n\n使用由指定模型的微观态的 Boltzmann 权重导出的正则系综平均值 $\\langle \\cdot \\rangle$ 的定义。所有计算必须使用国际单位制 (SI) 表示：使用 $k_B = 1.380649\\times 10^{-23}\\,\\mathrm{J/K}$ 和 $\\mu = \\mu_B = 9.2740100783\\times 10^{-24}\\,\\mathrm{J/T}$。$C_v$ 的单位为 $\\mathrm{J/K}$，$\\chi$ 的单位为 $\\mathrm{A\\,m^2/T}$。本问题不涉及角度。不要使用百分比。\n\n对每组参数，产生两个诊断输出：\n- 两个 $C_v$ 估算值之间的绝对差，即 $|C_v^{\\mathrm{fluct}} - C_v^{\\mathrm{num}}|$，单位为 $\\mathrm{J/K}$。\n- 两个 $\\chi$ 估算值之间的绝对差，即 $|\\chi^{\\mathrm{fluct}} - \\chi^{\\mathrm{num}}|$，单位为 $\\mathrm{A\\,m^2/T}$。\n\n测试套件（每个案例列出 $(N,\\mu,B,T)$）：\n- 案例 A: $(N=\\;50,\\;\\mu=\\;9.2740100783\\times 10^{-24}\\,\\mathrm{J/T},\\;B=\\;0.1\\,\\mathrm{T},\\;T=\\;5.0\\,\\mathrm{K})$\n- 案例 B: $(N=\\;50,\\;\\mu=\\;9.2740100783\\times 10^{-24}\\,\\mathrm{J/T},\\;B=\\;0.0\\,\\mathrm{T},\\;T=\\;10.0\\,\\mathrm{K})$\n- 案例 C: $(N=\\;200,\\;\\mu=\\;9.2740100783\\times 10^{-24}\\,\\mathrm{J/T},\\;B=\\;2.0\\,\\mathrm{T},\\;T=\\;0.5\\,\\mathrm{K})$\n- 案例 D: $(N=\\;1,\\;\\mu=\\;9.2740100783\\times 10^{-24}\\,\\mathrm{J/T},\\;B=\\;0.5\\,\\mathrm{T},\\;T=\\;1000.0\\,\\mathrm{K})$\n\n你的程序应生成单行输出，其中包含所有案例的结果，形式为方括号内以逗号分隔的列表。对于每个案例，首先列出 $C_v$ 的绝对差（单位 $\\mathrm{J/K}$），然后列出 $\\chi$ 的绝对差（单位 $\\mathrm{A\\,m^2/T}$）。所有数字必须以科学记数法打印，小数点后精确到六位。因此，对于上述四个案例，输出必须按顺序包含8个数字：$[\\;|C_v^{\\mathrm{fluct}}-C_v^{\\mathrm{num}}|_{\\mathrm{A}},\\;|\\chi^{\\mathrm{fluct}}-\\chi^{\\mathrm{num}}|_{\\mathrm{A}},\\;|C_v^{\\mathrm{fluct}}-C_v^{\\mathrm{num}}|_{\\mathrm{B}},\\;|\\chi^{\\mathrm{fluct}}-\\chi^{\\mathrm{num}}|_{\\mathrm{B}},\\;|C_v^{\\mathrm{fluct}}-C_v^{\\mathrm{num}}|_{\\mathrm{C}},\\;|\\chi^{\\mathrm{fluct}}-\\chi^{\\mathrm{num}}|_{\\mathrm{C}},\\;|C_v^{\\mathrm{fluct}}-C_v^{\\mathrm{num}}|_{\\mathrm{D}},\\;|\\chi^{\\mathrm{fluct}}-\\chi^{\\mathrm{num}}|_{\\mathrm{D}}\\;]$。", "solution": "所提出的问题是平衡统计力学中一个标准的、基础的练习。它具有科学依据，问题明确且客观。因此，我们将着手解决它。\n\n系统由 $N$ 个相同的、无相互作用的磁矩（自旋）组成，每个磁矩的大小为 $\\mu$。在磁场 $B$ 中，单个自旋 $s_i \\in \\{+1, -1\\}$ 的能态为 $E_{\\pm} = \\mp \\mu B$。系统在温度 $T$ 下处于热平衡状态。逆温度为 $\\beta = 1/(k_B T)$，其中 $k_B$ 是玻尔兹曼常数。\n\n首先，我们必须推导正则配分函数，所有热力学量都可以从中获得。对于单个自旋，配分函数 $z$ 是其两个状态的 Boltzmann 因子的总和：\n$$z = e^{-\\beta E_{+1}} + e^{-\\beta E_{-1}} = e^{-\\beta(-\\mu B)} + e^{-\\beta(+\\mu B)} = e^{\\beta \\mu B} + e^{-\\beta \\mu B} = 2 \\cosh(\\beta \\mu B)$$\n由于 $N$ 个自旋是独立的，系统的总配分函数 $Z$ 是单自旋配分函数的乘积：\n$$Z = z^N = \\left[ 2 \\cosh(\\beta \\mu B) \\right]^N$$\n配分函数的对数为 $\\ln Z = N \\ln\\left[2 \\cosh(\\beta \\mu B)\\right]$。为方便起见，我们定义无量纲变量 $x = \\beta \\mu B = \\frac{\\mu B}{k_B T}$。因此，$\\ln Z = N \\ln\\left[2 \\cosh(x)\\right]$。\n\n平均能量 $\\langle E \\rangle$ 和平均总磁矩 $\\langle M \\rangle$ 从 $\\ln Z$ 导出：\n$$\\langle E \\rangle = -\\frac{\\partial (\\ln Z)}{\\partial \\beta} = -\\frac{\\partial}{\\partial \\beta} \\left[ N \\ln\\left(2 \\cosh(\\beta \\mu B)\\right) \\right] = -N \\frac{1}{2\\cosh(\\beta \\mu B)} \\cdot 2\\sinh(\\beta \\mu B) \\cdot \\mu B$$\n$$\\langle E \\rangle = -N \\mu B \\tanh(\\beta \\mu B) = -N \\mu B \\tanh(x)$$\n总能量为 $E = -MB$，所以 $\\langle E \\rangle = -\\langle M \\rangle B$。这意味着：\n$$\\langle M \\rangle = N \\mu \\tanh(\\beta \\mu B) = N \\mu \\tanh(x)$$\n\n问题要求通过统计力学规定的两种不同方法计算热容 $C_v$ 和磁化率 $\\chi$。\n\n**方法一：通过涨落计算**\n\n第一种方法利用了涨落-耗散定理，该定理将响应函数（$C_v$, $\\chi$）与热力学量（$E$, $M$）的方差联系起来。\n\n定容热容由 $C_v = \\langle (\\Delta E)^2 \\rangle / (k_B T^2)$ 给出，其中能量方差为 $\\langle (\\Delta E)^2 \\rangle = \\langle E^2 \\rangle - \\langle E \\rangle^2 = -\\frac{\\partial \\langle E \\rangle}{\\partial \\beta}$。\n$$\\langle (\\Delta E)^2 \\rangle = -\\frac{\\partial}{\\partial \\beta} [-N \\mu B \\tanh(\\beta \\mu B)] = N \\mu B \\cdot \\text{sech}^2(\\beta \\mu B) \\cdot \\mu B = N(\\mu B)^2 \\text{sech}^2(x)$$\n因此，由涨落计算的热容 $C_v^{\\mathrm{fluct}}$ 为：\n$$C_v^{\\mathrm{fluct}} = \\frac{N(\\mu B)^2 \\text{sech}^2(x)}{k_B T^2} = \\frac{N(k_B T x)^2 \\text{sech}^2(x)}{k_B T^2} = N k_B x^2 \\text{sech}^2(x)$$\n\n磁化率由 $\\chi = \\beta \\langle (\\Delta M)^2 \\rangle$ 给出，其中磁化强度方差为 $\\langle (\\Delta M)^2 \\rangle = \\langle M^2 \\rangle - \\langle M \\rangle^2 = \\frac{1}{\\beta}\\frac{\\partial \\langle M \\rangle}{\\partial B}$。\n$$\\langle (\\Delta M)^2 \\rangle = \\frac{1}{\\beta} \\frac{\\partial}{\\partial B} [N\\mu \\tanh(\\beta \\mu B)] = \\frac{1}{\\beta} \\left[ N\\mu \\cdot \\text{sech}^2(\\beta \\mu B) \\cdot \\beta \\mu \\right] = N \\mu^2 \\text{sech}^2(x)$$\n因此，由涨落计算的磁化率 $\\chi^{\\mathrm{fluct}}$ 为：\n$$\\chi^{\\mathrm{fluct}} = \\beta (N \\mu^2 \\text{sech}^2(x)) = \\frac{N \\mu^2}{k_B T} \\text{sech}^2(x)$$\n\n**方法二：通过数值微分计算**\n\n第二种方法使用 $C_v$ 和 $\\chi$ 的热力学定义，即作为平均量的导数。这些必须通过数值方法计算。\n\n热容是平均能量对温度的导数： $C_v = (\\frac{\\partial \\langle E \\rangle}{\\partial T})_B$。我们使用中心有限差分公式和一个小的步长 $h_T$ 来近似这个导数：\n$$C_v^{\\mathrm{num}} = \\frac{\\langle E \\rangle(T+h_T, B) - \\langle E \\rangle(T-h_T, B)}{2h_T}$$\n其中 $\\langle E \\rangle(T, B) = -N\\mu B \\tanh(\\frac{\\mu B}{k_B T})$。为了数值稳定性，我们选择一个相对步长 $h_T = \\delta_T \\cdot T$，其中 $\\delta_T = 10^{-6}$。\n\n磁化率是平均磁化强度对磁场的导数：$\\chi = (\\frac{\\partial \\langle M \\rangle}{\\partial B})_T$。我们再次使用中心有限差分公式，步长为 $h_B$：\n$$\\chi^{\\mathrm{num}} = \\frac{\\langle M \\rangle(T, B+h_B) - \\langle M \\rangle(T, B-h_B)}{2h_B}$$\n其中 $\\langle M \\rangle(T, B) = N\\mu \\tanh(\\frac{\\mu B}{k_B T})$。步长 $h_B$ 的选择需要小心。如果 $B \\neq 0$，一个相对步长 $h_B = \\delta_B \\cdot B$（其中 $\\delta_B = 10^{-6}$）是合适的。然而，对于 $B=0$ 的情况，这将导致步长为零。在这种特殊情况下，我们必须使用一个小的绝对步长， $h_B = h_{abs}$ (例如, $10^{-8}\\,\\mathrm{T}$)，以在原点评估导数。\n\n**最终计算**\n\n对于测试套件中给出的每组参数 $(N, \\mu, B, T)$，我们将计算：\n1.  $C_v^{\\mathrm{fluct}} = N k_B (\\frac{\\mu B}{k_B T})^2 \\text{sech}^2(\\frac{\\mu B}{k_B T})$\n2.  通过对 $\\langle E \\rangle(T)$ 进行数值微分计算 $C_v^{\\mathrm{num}}$\n3.  $\\chi^{\\mathrm{fluct}} = \\frac{N \\mu^2}{k_B T} \\text{sech}^2(\\frac{\\mu B}{k_B T})$\n4.  通过对 $\\langle M \\rangle(B)$ 进行数值微分计算 $\\chi^{\\mathrm{num}}$\n\n最后，我们将计算绝对差 $|C_v^{\\mathrm{fluct}} - C_v^{\\mathrm{num}}|$ 和 $|\\chi^{\\mathrm{fluct}} - \\chi^{\\mathrm{num}}|$。这些差异预计会非常小，完全由有限差分近似的截断误差引起，其量级为 $O(h^2)$。因此，该问题用于数值验证此系统的涨落-耗散定理。所有计算都将按规定使用国际单位制 (SI) 进行。", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Solves the paramagnet problem by calculating heat capacity and magnetic\n    susceptibility using two different methods (fluctuations and numerical\n    differentiation) and reports the absolute difference between them.\n    \"\"\"\n    # Physical constants in SI units\n    k_B = 1.380649e-23  # Boltzmann constant in J/K\n    \n    # Test suite from the problem statement\n    test_cases = [\n        # (N, mu, B, T)\n        (50, 9.2740100783e-24, 0.1, 5.0),\n        (50, 9.2740100783e-24, 0.0, 10.0),\n        (200, 9.2740100783e-24, 2.0, 0.5),\n        (1, 9.2740100783e-24, 0.5, 1000.0)\n    ]\n\n    results = []\n\n    def avg_E(N, mu, B, T, k_B_val):\n        \"\"\"Calculates the average energy <E>.\"\"\"\n        if T <= 0:\n            return np.nan\n        if B == 0.0:\n            return 0.0\n        x = mu * B / (k_B_val * T)\n        return -N * mu * B * np.tanh(x)\n\n    def avg_M(N, mu, B, T, k_B_val):\n        \"\"\"Calculates the average magnetization <M>.\"\"\"\n        if T <= 0:\n            return np.nan\n        # tanh(x) is an odd function, so we can handle B=0 without an explicit check\n        # as tanh(0) = 0.\n        x = mu * B / (k_B_val * T)\n        return N * mu * np.tanh(x)\n\n    for N, mu, B, T in test_cases:\n        # --- Method 1: Calculation from Fluctuations (Analytical) ---\n\n        # The dimensionless argument for hyperbolic functions\n        # T is guaranteed to be > 0 in all test cases.\n        x = mu * B / (k_B * T)\n        \n        # sech(x) = 1/cosh(x)\n        sech_x = 1.0 / np.cosh(x)\n\n        # C_v from energy fluctuations\n        # For B=0, x=0, and Cv_fluct becomes 0.\n        Cv_fluct = N * k_B * x**2 * sech_x**2\n\n        # chi from magnetization fluctuations\n        chi_fluct = (N * mu**2 / (k_B * T)) * sech_x**2\n\n        # --- Method 2: Calculation from Numerical Differentiation ---\n\n        # C_v = d<E>/dT\n        h_T_rel = 1e-7 # Relative step for temperature derivative\n        h_T = h_T_rel * T\n        # Central difference formula\n        E_plus = avg_E(N, mu, B, T + h_T, k_B)\n        E_minus = avg_E(N, mu, B, T - h_T, k_B)\n        Cv_num = (E_plus - E_minus) / (2 * h_T)\n        \n        # chi = d<M>/dB\n        h_B_rel = 1e-7 # Relative step for magnetic field derivative\n        h_B_abs = 1e-9 # Absolute step for B=0 case\n        \n        if B == 0.0:\n            h_B = h_B_abs\n        else:\n            h_B = h_B_rel * B\n        \n        # Central difference formula\n        M_plus = avg_M(N, mu, B + h_B, T, k_B)\n        M_minus = avg_M(N, mu, B - h_B, T, k_B)\n        chi_num = (M_plus - M_minus) / (2 * h_B)\n        \n        # --- Diagnostic Outputs: Absolute Differences ---\n\n        diff_Cv = abs(Cv_fluct - Cv_num)\n        diff_chi = abs(chi_fluct - chi_num)\n\n        results.append(f\"{diff_Cv:.6e}\")\n        results.append(f\"{diff_chi:.6e}\")\n        \n    print(f\"[{','.join(results)}]\")\n\nsolve()\n```", "id": "2400547"}, {"introduction": "在掌握了基本概念之后，本练习将带您探索一维伊辛模型，这是理解相互作用系统和磁性的一个基石模型。您将使用强大的传递矩阵法——一种精确求解技术——来计算热力学性质，并探究一个关键的物理问题：一维系统在有限温度下是否存在相变？通过分析热容峰值 $c_N^{\\max}$ 随系统尺寸 $N$ 的变化行为，您将亲自用数值计算来验证一个著名的理论结果。[@problem_id:2400552]", "problem": "您的任务是编写一个完整的、可运行的程序，对一维伊辛模型进行数值分析，以估算热容和磁化率，并检验热容峰值是否随系统尺寸发散。使用约化单位，其中耦合常数 $J$ 和玻尔兹曼常数 $k_B$ 均设为 $1$，因此温度 $T$ 是无量纲的，单位自旋热容也是无量纲的，磁场 $h$ 的单位与 $J$ 相同。在这些约化单位中，单位自旋静态磁化率的单位是 $1/J$，即 $1$，因此可以作为无量纲数报告。\n\n模型：考虑一个具有 $N$ 个自旋 $s_i \\in \\{-1,+1\\}$ 且满足周期性边界条件的一维伊辛模型，其哈密顿量为\n$$\nH(\\{s_i\\}) \\;=\\; -J \\sum_{i=1}^{N} s_i s_{i+1} \\;-\\; h \\sum_{i=1}^{N} s_i,\n$$\n其中 $s_{N+1} \\equiv s_1$，并使用 $J=1$。在温度为 $T$ 的正则系综中（$\\beta \\equiv 1/T$），配分函数为\n$$\nZ_N(\\beta,h) \\;=\\; \\sum_{\\{s_i\\}} e^{-\\beta H(\\{s_i\\})}.\n$$\n自由能为 $F = -\\beta^{-1} \\ln Z_N$，内能满足 $\\langle E \\rangle = -\\partial_{\\beta} \\ln Z_N$，单位自旋热容为\n$$\nc_N(T) \\;=\\; \\frac{\\beta^2}{N}\\,\\frac{\\partial^2 \\ln Z_N}{\\partial \\beta^2}.\n$$\n根据涨落-耗散定理，零场下的单位自旋静态磁化率定义为\n$$\n\\chi_N(T) \\;=\\; \\frac{1}{\\beta N}\\,\\left.\\frac{\\partial^2 \\ln Z_N(\\beta,h)}{\\partial h^2}\\right|_{h=0}.\n$$\n通过 $2\\times 2$ 转移矩阵计算 $\\ln Z_N$，并使用中心有限差分法对 $\\beta$ 和 $h$ 求二阶导数，从而数值计算这些物理量。为确保大 $N$ 时 $\\ln Z_N$ 的数值稳定性，请使用一个通过提出转移矩阵最大特征值来避免溢出的表达式。\n\n数值方法要求：\n- 构建 $2\\times 2$ 转移矩阵 $T(\\beta,h)$，其元素为 $T_{s,s'} = \\exp\\left(\\beta J s s' + \\tfrac{1}{2}\\beta h (s+s')\\right)$，其中 $s,s'\\in\\{-1,+1\\}$ 且 $J=1$，并计算其两个正特征值 $\\lambda_1(\\beta,h)$ 和 $\\lambda_2(\\beta,h)$。\n- 稳定地计算 $\\ln Z_N(\\beta,h)$：\n$$\n\\ln Z_N(\\beta,h) \\;=\\; N \\ln \\lambda_{\\max}(\\beta,h) \\;+\\; \\ln\\left(1 + \\left[\\frac{\\lambda_{\\min}(\\beta,h)}{\\lambda_{\\max}(\\beta,h)}\\right]^N\\right),\n$$\n其中 $\\lambda_{\\max}$ 和 $\\lambda_{\\min}$ 分别是较大和较小的特征值。\n- 使用小步长通过中心有限差分法计算二阶导数：\n  - 对于 $\\beta$ 的导数，使用步长 $\\delta_\\beta = 10^{-5}$：\n  $$\n  \\frac{\\partial^2 \\ln Z_N}{\\partial \\beta^2}(\\beta,0) \\;\\approx\\; \\frac{\\ln Z_N(\\beta+\\delta_\\beta,0) - 2\\ln Z_N(\\beta,0) + \\ln Z_N(\\beta-\\delta_\\beta,0)}{\\delta_\\beta^2}.\n  $$\n  - 对于 $h$ 的导数，使用步长 $\\delta_h = 10^{-4}$：\n  $$\n  \\left.\\frac{\\partial^2 \\ln Z_N}{\\partial h^2}\\right|_{h=0} \\;\\approx\\; \\frac{\\ln Z_N(\\beta,\\delta_h) - 2\\ln Z_N(\\beta,0) + \\ln Z_N(\\beta,-\\delta_h)}{\\delta_h^2}.\n  $$\n\n您的程序必须：\n- 对于每个系统尺寸 $N \\in \\{16,64,256\\}$，在温度网格 $T \\in [0.2,5.0]$（均匀间距 $\\Delta T = 0.002$）上计算单位自旋热容 $c_N(T)$，并报告每个 $N$ 在此网格上的最大值 $c_N^{\\max}$。\n- 通过报告差异 $\\Delta_{64,16} = c_{64}^{\\max} - c_{16}^{\\max}$ 和 $\\Delta_{256,64} = c_{256}^{\\max} - c_{64}^{\\max}$ 以及一个指示符 $I$ 来量化峰值的不发散性。如果 $\\Delta_{256,64} < \\Delta_{64,16}$ 且 $\\max(\\Delta_{64,16},\\Delta_{256,64}) < 0.05$，则定义 $I$ 为 $1$，否则为 $0$。\n- 对于 $N \\in \\{16,64,256\\}$，使用上述关于 $h$ 的二阶导数方法，计算在 $T=1.0$ 和 $h=0$ 时的单位自旋静态磁化率 $\\chi_N(T)$。\n\n测试套件（待评估的参数集）：\n- 对于 $N=16$，在网格 $T \\in [0.2,5.0]$（$\\Delta T = 0.002$）上进行热容峰值计算。\n- 对于 $N=64$，在相同网格上进行热容峰值计算。\n- 对于 $N=256$，在相同网格上进行热容峰值计算。\n- 对于 $N\\in\\{16,64,256\\}$，在 $T=1.0$ 和 $h=0$ 时进行磁化率计算。\n\n定量输出与单位：\n- 以无量纲数（约化单位）报告 $c_{16}^{\\max}$、$c_{64}^{\\max}$、$c_{256}^{\\max}$。\n- 以无量纲数报告 $\\Delta_{64,16}$ 和 $\\Delta_{256,64}$。\n- 以 $\\{0,1\\}$ 中的整数报告 $I$。\n- 以 $1/J$ 为单位报告 $\\chi_{16}(T{=}1.0)$、$\\chi_{64}(T{=}1.0)$、$\\chi_{256}(T{=}1.0)$；由于 $J=1$，这些值在数值上是无量纲的。\n\n最终输出格式：\n- 您的程序应生成单行输出，其中包含一个逗号分隔的列表，用方括号括起来，结果顺序如下：\n$$\n[c_{16}^{\\max},\\, c_{64}^{\\max},\\, c_{256}^{\\max},\\, \\Delta_{64,16},\\, \\Delta_{256,64},\\, I,\\, \\chi_{16}(T{=}1.0),\\, \\chi_{64}(T{=}1.0),\\, \\chi_{256}(T{=}1.0)].\n$$\n- 每个浮点数必须四舍五入到恰好 $6$ 位小数。指示符 $I$ 必须是整数 $0$ 或 $1$。", "solution": "该问题已经过验证，被认为是科学上可靠、定义明确且客观的。它提出了一个标准的计算物理任务：使用转移矩阵方法分析一维伊辛模型。所有必需的物理量、参数和数值步骤都得到了明确的定义。因此，提供一个解是合理的。\n\n问题的核心在于分析一维伊辛模型。一个由 $N$ 个自旋 $s_i \\in \\{-1, +1\\}$ 组成的链，其耦合常数为 $J$，外磁场为 $h$，其哈密顿量为\n$$\nH(\\{s_i\\}) = -J \\sum_{i=1}^{N} s_i s_{i+1} - h \\sum_{i=1}^{N} s_i\n$$\n问题指定了周期性边界条件 $s_{N+1} \\equiv s_1$，并使用了约化单位，其中 $J=1$，玻尔兹曼常数 $k_B=1$。因此，温度 $T$ 是无量纲的，且 $\\beta = 1/T$。\n\n配分函数 $Z_N$ 是对所有可能自旋构型的求和：\n$$\nZ_N(\\beta,h) = \\sum_{\\{s_i\\}} e^{-\\beta H(\\{s_i\\})}\n$$\n这个求和可以通过转移矩阵方法高效计算。我们可以将哈密顿量重写为最近邻相互作用之和：\n$$\nH = \\sum_{i=1}^{N} \\left( -J s_i s_{i+1} - \\frac{h}{2} (s_i + s_{i+1}) \\right)\n$$\n这使我们能够将配分函数表示为一个 $2 \\times 2$ 转移矩阵 $T$ 的 $N$ 次方的迹：\n$$\nZ_N = \\sum_{s_1 \\dots s_N} \\prod_{i=1}^N e^{\\beta J s_i s_{i+1} + \\frac{\\beta h}{2}(s_i+s_{i+1})} = \\sum_{s_1} \\left( T^N \\right)_{s_1,s_1} = \\text{Tr}(T^N)\n$$\n转移矩阵 $T$ 的元素，由自旋值 $s, s' \\in \\{+1, -1\\}$ 索引，由下式给出：\n$$\nT_{s,s'} = \\exp\\left(\\beta J s s' + \\frac{\\beta h}{2}(s+s')\\right)\n$$\n当 $J=1$ 时，矩阵为：\n$$\nT(\\beta,h) = \\begin{pmatrix} T_{1,1} & T_{1,-1} \\\\ T_{-1,1} & T_{-1,-1} \\end{pmatrix} = \\begin{pmatrix} e^{\\beta(1+h)} & e^{-\\beta} \\\\ e^{-\\beta} & e^{\\beta(1-h)} \\end{pmatrix}\n$$\n配分函数是 $T$ 的特征值的 $N$ 次方之和，$Z_N = \\lambda_1^N + \\lambda_2^N$。特征值 $\\lambda$ 通过求解特征方程 $\\det(T - \\lambda I) = 0$ 得到。特征值的解析解为：\n$$\n\\lambda(\\beta,h) = e^{\\beta} \\cosh(\\beta h) \\pm \\sqrt{e^{2\\beta} \\sinh^2(\\beta h) + e^{-2\\beta}}\n$$\n令 $\\lambda_{\\max}$ 为较大的特征值，$\\lambda_{\\min}$ 为较小的特征值。对于大的 $N$，直接计算 $\\lambda_{\\max}^N$ 可能导致数值溢出。需要一个数值稳定的配分函数对数表达式：\n$$\n\\ln Z_N(\\beta,h) = \\ln(\\lambda_{\\max}^N + \\lambda_{\\min}^N) = \\ln\\left(\\lambda_{\\max}^N \\left(1 + \\left(\\frac{\\lambda_{\\min}}{\\lambda_{\\max}}\\right)^N\\right)\\right) = N \\ln \\lambda_{\\max} + \\ln\\left(1 + \\left(\\frac{\\lambda_{\\min}}{\\lambda_{\\max}}\\right)^N\\right)\n$$\n此表达式避免了溢出，并用于所有后续计算。\n\n热力学量由 $\\ln Z_N$ 导出。单位自旋热容 $c_N(T)$ 由下式给出：\n$$\nc_N(T) = \\frac{1}{N} \\frac{\\partial \\langle E \\rangle}{\\partial T} = \\frac{1}{N} \\frac{\\partial}{\\partial T} \\left(-\\frac{\\partial \\ln Z_N}{\\partial \\beta}\\right) = \\frac{1}{N} \\frac{\\partial\\beta}{\\partial T} \\frac{\\partial}{\\partial\\beta} \\left(-\\frac{\\partial \\ln Z_N}{\\partial \\beta}\\right) = \\frac{\\beta^2}{N} \\frac{\\partial^2 \\ln Z_N}{\\partial \\beta^2}\n$$\n零场下的单位自旋静态磁化率 $\\chi_N(T)$ 由涨落-耗散定理得到：\n$$\n\\chi_N(T) = \\frac{\\beta}{N} \\langle (M - \\langle M \\rangle)^2 \\rangle = \\frac{1}{\\beta N} \\left. \\frac{\\partial^2 \\ln Z_N(\\beta,h)}{\\partial h^2} \\right|_{h=0}\n$$\n两个二阶导数都使用中心有限差分近似进行数值计算。对于函数 $f(x)$，其二阶导数近似为：\n$$\nf''(x) \\approx \\frac{f(x+\\delta) - 2f(x) + f(x-\\delta)}{\\delta^2}\n$$\n对于热容，我们使用步长 $\\delta_\\beta = 10^{-5}$ 计算 $\\ln Z_N$ 在 $h=0$ 时对 $\\beta$ 的导数。\n对于磁化率，我们使用步长 $\\delta_h = 10^{-4}$ 计算 $\\ln Z_N$ 在 $h=0$ 时对 $h$ 的导数。\n\n计算步骤如下：\n1. 实现一个函数，利用解析公式计算给定 $\\beta$ 和 $h$ 时的两个特征值 $\\lambda_{\\max}$ 和 $\\lambda_{\\min}$。\n2. 实现一个计算 $\\ln Z_N(\\beta,h)$ 的函数，使用数值稳定的表达式。\n3. 对于系统尺寸 $N \\in \\{16, 64, 256\\}$，在温度网格 $T \\in [0.2, 5.0]$（间距 $\\Delta T = 0.002$）上计算热容 $c_N(T)$。对于每个 $N$，找到该网格上的最大值 $c_N^{\\max}$。\n4. 计算峰值高度的差异，$\\Delta_{64,16} = c_{64}^{\\max} - c_{16}^{\\max}$ 和 $\\Delta_{256,64} = c_{256}^{\\max} - c_{64}^{\\max}$。\n5. 确定指示符 $I$：如果 $\\Delta_{256,64} < \\Delta_{64,16}$ 和 $\\max(\\Delta_{64,16}, \\Delta_{256,64}) < 0.05$ 同时成立，则 $I=1$，否则 $I=0$。这用于检验热容峰值的不发散性，这一特性是一维伊辛模型的已知特征。\n6. 对于 $N \\in \\{16, 64, 256\\}$，计算在 $T=1.0$ 时的磁化率 $\\chi_N(T)$。\n7. 将所有计算出的值收集并按指定格式整理成单行输出，浮点数四舍五入到 $6$ 位小数。", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n# from scipy import ... # Scipy is available but not required for this solution.\n\ndef solve():\n    \"\"\"\n    Numerically analyzes the 1D Ising model using the transfer matrix method\n    to estimate heat capacity and magnetic susceptibility.\n    \"\"\"\n\n    # --- Numerical Parameters ---\n    DELTA_BETA = 1e-5\n    DELTA_H = 1e-4\n    N_VALS = [16, 64, 256]\n    T_START, T_END, T_STEP = 0.2, 5.0, 0.002\n    \n    # --- Helper Functions ---\n\n    def get_eigenvalues(beta, h):\n        \"\"\"\n        Calculates the eigenvalues of the 2x2 transfer matrix for given beta and h.\n        J=1 is assumed.\n        \"\"\"\n        # Using the analytical solution for the eigenvalues:\n        # lambda = exp(beta) * cosh(beta*h) +/- sqrt(exp(2*beta)*sinh^2(beta*h) + exp(-2*beta))\n        term1 = np.exp(beta) * np.cosh(beta * h)\n        \n        # Use np.exp2 instead of np.exp to potentially avoid intermediate overflow\n        # on very large beta, though numpy handles large numbers well.\n        # exp(2*beta) = exp(beta)^2\n        exp_beta = np.exp(beta)\n        discriminant_term1 = (exp_beta * np.sinh(beta * h))**2\n        discriminant_term2 = np.exp(-2.0 * beta)\n        \n        sqrt_term = np.sqrt(discriminant_term1 + discriminant_term2)\n        \n        lambda_max = term1 + sqrt_term\n        lambda_min = term1 - sqrt_term\n        \n        return lambda_max, lambda_min\n\n    def log_Z_N(N, beta, h):\n        \"\"\"\n        Calculates the natural logarithm of the partition function Z_N using a\n        numerically stable formula to avoid overflow.\n        \"\"\"\n        if beta <= 0:\n            # Physical temperatures are positive, T > 0, so beta > 0.\n            # Handle beta=0 (T=inf) case to avoid division by zero in T=1/beta.\n            # At T=inf, all states are equally likely. Z = 2^N.\n            if beta == 0:\n                return N * np.log(2.0)\n            return np.nan\n\n        lambda_max, lambda_min = get_eigenvalues(beta, h)\n        \n        # The ratio lambda_min/lambda_max can be negative if h is complex, \n        # but for real h, both eigenvalues are positive.\n        ratio = lambda_min / lambda_max\n\n        # The term (ratio)^N can underflow to 0 for large N, which is fine.\n        # np.log1p(x) calculates log(1+x) accurately for small x.\n        log_Z = N * np.log(lambda_max) + np.log1p(ratio**N)\n        \n        return log_Z\n\n    # --- Main Calculation Logic ---\n\n    # Part 1: Heat Capacity\n    c_max_values = []\n    T_grid = np.arange(T_START, T_END + T_STEP / 2, T_STEP) # Ensure endpoint inclusion\n    \n    for N in N_VALS:\n        c_N_values = []\n        for T in T_grid:\n            beta = 1.0 / T\n            \n            # Finite difference for second derivative w.r.t. beta\n            lnZ_plus = log_Z_N(N, beta + DELTA_BETA, 0)\n            lnZ_mid = log_Z_N(N, beta, 0)\n            lnZ_minus = log_Z_N(N, beta - DELTA_BETA, 0)\n            \n            d2_lnZ_dbeta2 = (lnZ_plus - 2 * lnZ_mid + lnZ_minus) / (DELTA_BETA**2)\n            \n            # Heat capacity per spin\n            c_N = (beta**2 / N) * d2_lnZ_dbeta2\n            c_N_values.append(c_N)\n        \n        c_max_values.append(np.max(c_N_values))\n\n    c16_max, c64_max, c256_max = c_max_values[0], c_max_values[1], c_max_values[2]\n\n    # Part 2: Peak Divergence Analysis\n    delta_64_16 = c64_max - c16_max\n    delta_256_64 = c256_max - c64_max\n\n    is_slowing_down = delta_256_64 < delta_64_16\n    is_small_increase = max(delta_64_16, delta_256_64) < 0.05\n    indicator_I = 1 if is_slowing_down and is_small_increase else 0\n\n    # Part 3: Magnetic Susceptibility\n    chi_values = []\n    T_chi = 1.0\n    beta_chi = 1.0 / T_chi\n\n    for N in N_VALS:\n        # Finite difference for second derivative w.r.t. h\n        # Note: Z(h) = Z(-h), so lnZ(h) = lnZ(-h).\n        # We compute explicitly as per problem statement for robustness.\n        lnZ_plus = log_Z_N(N, beta_chi, DELTA_H)\n        lnZ_mid = log_Z_N(N, beta_chi, 0)\n        lnZ_minus = log_Z_N(N, beta_chi, -DELTA_H)\n        \n        d2_lnZ_dh2 = (lnZ_plus - 2 * lnZ_mid + lnZ_minus) / (DELTA_H**2)\n        \n        # Susceptibility per spin\n        chi_N = (1.0 / (beta_chi * N)) * d2_lnZ_dh2\n        chi_values.append(chi_N)\n\n    chi16, chi64, chi256 = chi_values[0], chi_values[1], chi_values[2]\n\n    # --- Final Output Formatting ---\n    \n    results = [\n        c16_max, c64_max, c256_max,\n        delta_64_16, delta_256_64,\n        indicator_I,\n        chi16, chi64, chi256\n    ]\n\n    formatted_results = [\n        f\"{results[0]:.6f}\", f\"{results[1]:.6f}\", f\"{results[2]:.6f}\",\n        f\"{results[3]:.6f}\", f\"{results[4]:.6f}\",\n        f\"{results[5]}\",\n        f\"{results[6]:.6f}\", f\"{results[7]:.6f}\", f\"{results[8]:.6f}\"\n    ]\n    \n    print(f\"[{','.join(formatted_results)}]\")\n\nsolve()\n```", "id": "2400552"}, {"introduction": "现在，我们将从识别相变的缺失，转向定量研究系统在临界点附近的行为。本练习将介绍一种强大的技术——有限尺寸标度（finite-size scaling），这是现代临界现象研究的基石。您将利用给定的模拟实验数据，通过分析峰值磁化率 $\\chi_{\\max}$ 如何随系统尺寸 $L$ 标度变化，来学习如何提取普适的临界指数 $\\gamma$，从而体验物理学中数据驱动的发现过程。[@problem_id:2400586]", "problem": "给定一系列独立的、无量纲的数值实验，这些实验是关于空间维度为 $d$、线性尺度为 $L$ 的格点自旋系统。每个实验都报告了在零场下磁化率的峰值，记为 $\\chi_{\\max}(L)$，该值是在对应有限尺寸的系统伪临界温度附近测量的。您的目标是，从一个基本的标度假设出发，推导出一个算法估计量，从而使用有限尺寸标度法为每个实验估计临界指数 $\\gamma$。\n\n从约化自由能密度的奇异部分的有限尺寸标度 ansatz 出发，\n$$\nf_{\\mathrm{s}}(t,h,L) = L^{-d}\\,\\mathcal{F}\\!\\left(t\\,L^{1/\\nu},\\,h\\,L^{y_h}\\right),\n$$\n其中 $t$ 是约化温度，$h$ 是外磁场，$\\nu$ 是相关长度指数，$y_h$ 是与 $h$ 共轭的重正化群场指数，而 $\\mathcal{F}$ 是一个标度函数。使用标准热力学定义，将每个格点的零场磁化率表示为自由能密度对场的二阶导数，并由此推断在 $h=0$ 时 $\\chi(t,L)$ 的有限尺寸标度形式。论证峰值 $\\chi_{\\max}(L)$（即在伪临界约化温度 $t^\\star(L)$ 处，$\\chi$ 对该 $L$ 达到最大值）是 $L$ 的幂律函数，其指数可以用 $\\nu$ 和 $\\gamma$ 表示。通过取对数推导出一个适于回归的关系式，并解释在给定一个独立指定的 $\\nu$ 值的情况下，如何从线性拟合中提取 $\\gamma$。\n\n然后，实现一个算法，为每个实验执行以下步骤：\n- 给定一组系统尺寸 $L_i$ 和相应的测量值 $\\chi_{\\max}(L_i)$，计算这两个量的自然对数，并对 $\\ln \\chi_{\\max}$ 与 $\\ln L$ 进行无权线性最小二乘拟合，以估计标度斜率。\n- 使用为该实验提供的 $\\nu$ 值，将拟合得到的斜率转换为对 $\\gamma$ 的估计。\n- 返回所有实验的 $\\gamma$ 估计值。\n\n此问题中所有量均为无量纲，因此不需要物理单位。\n\n您的程序必须将上述过程应用于以下测试集。每个实验 $k$ 提供一个元组 $\\left(\\{L_i\\},\\{\\chi_{\\max}(L_i)\\},\\nu\\right)$：\n\n- 实验 1（二维类 Ising 数据，具有小的有限尺寸噪声）：\n  - 尺寸 $L$: $[8,16,32,64,128]$\n  - 测得的 $\\chi_{\\max}$: $[19.21727,63.04,216.3451,718.995,2435.985]$\n  - 相关长度指数 $\\nu$: $1.0$\n- 实验 2（三维类 Ising 合成数据，具有中等噪声）：\n  - 尺寸 $L$: $[8,12,16,24,32,48]$\n  - 测得的 $\\chi_{\\max}$: $[24.243,51.967,92.64,207.868,353.192,798.372]$\n  - 相关长度指数 $\\nu$: $0.630$\n- 实验 3（二维数据，具有轻微的标度解析修正）：\n  - 尺寸 $L$: $[16,24,32]$\n  - 测得的 $\\chi_{\\max}$: $[40.8,81.3625,133.183]$\n  - 相关长度指数 $\\nu$: $1.0$\n- 实验 4（高有效维度下的类平均场合成数据，具有小噪声）：\n  - 尺寸 $L$: $[16,32,64,128,256]$\n  - 测得的 $\\chi_{\\max}$: $[51.2,206.848,802.816,3276.8,13302.808]$\n  - 相关长度指数 $\\nu$: $0.5$\n\n您的程序应如上所述为每个实验估计 $\\gamma$。程序应生成单行输出，其中包含用方括号括起来的、以逗号分隔的结果列表，结果按实验顺序排列，每个值四舍五入到小数点后 $3$ 位。例如，格式必须与 $[g_1,g_2,g_3,g_4]$ 完全一样，其中每个 $g_k$ 是一个四舍五入到 $3$ 位小数的浮点数。", "solution": "问题陈述已经过验证，被认为是科学上有效、问题定义良好且自洽的。它描述了计算统计物理中一个标准流程，即基于已建立的有限尺寸标度理论，从有限尺寸数据中确定临界指数。所有需要的数据和理论前提都已提供，不存在矛盾或模糊之处。我们可以开始求解。\n\n目标是从给定的自由能密度奇异部分 $f_{\\mathrm{s}}$ 的有限尺寸标度 ansatz 推导出临界指数 $\\gamma$ 的估计量，然后将其应用于给定的实验数据。\n\n出发点是每个格点的约化自由能密度的奇异部分的有限尺寸标度形式：\n$$\nf_{\\mathrm{s}}(t,h,L) = L^{-d}\\,\\mathcal{F}\\!\\left(t\\,L^{1/\\nu},\\,h\\,L^{y_h}\\right)\n$$\n这里，$t$ 是约化温度 $t = (T-T_c)/T_c$，$h$ 是外磁场，$L$ 是线性系统尺寸，$d$ 是空间维度，$\\nu$ 是相关长度临界指数，$y_h$ 是磁标度指数。函数 $\\mathcal{F}$ 是一个普适标度函数。\n\n每个格点的零场磁化率 $\\chi$ 定义为自由能密度对磁场的二阶导数，并在 $h=0$ 处取值：\n$$\n\\chi(t,h) = -\\frac{\\partial^2 f(t,h)}{\\partial h^2}\n$$\n总自由能 $f$ 是一个正则部分 $f_{\\mathrm{reg}}$ 和奇异部分 $f_{\\mathrm{s}}$ 的和。在临界点附近，奇异行为由 $f_{\\mathrm{s}}$ 主导，因此我们关注磁化率的奇异部分 $\\chi_{\\mathrm{s}}$ 的标度行为。对 $f_{\\mathrm{s}}$ 求关于 $h$ 的导数，我们应用链式法则。设 $x_t = tL^{1/\\nu}$ 和 $x_h = hL^{y_h}$ 为 $\\mathcal{F}$ 的自变量。\n$$\n\\frac{\\partial f_{\\mathrm{s}}}{\\partial h} = L^{-d} \\frac{\\partial \\mathcal{F}(x_t, x_h)}{\\partial x_h} \\frac{\\partial x_h}{\\partial h} = L^{-d} \\mathcal{F}^{(0,1)}(x_t, x_h) L^{y_h}\n$$\n其中 $\\mathcal{F}^{(i,j)}$ 表示对第一个自变量的 $i$ 阶偏导数和对第二个自变量的 $j$ 阶偏导数。二阶导数为：\n$$\n\\frac{\\partial^2 f_{\\mathrm{s}}}{\\partial h^2} = L^{-d} L^{y_h} \\frac{\\partial}{\\partial h} \\left(\\mathcal{F}^{(0,1)}(x_t, x_h)\\right) = L^{-d} L^{y_h} \\left( \\mathcal{F}^{(0,2)}(x_t, x_h) \\frac{\\partial x_h}{\\partial h} \\right) = L^{-d} (L^{y_h})^2 \\mathcal{F}^{(0,2)}(x_t, x_h)\n$$\n因此，磁化率的奇异部分是：\n$$\n\\chi_{\\mathrm{s}}(t,h,L) = -L^{2y_h-d} \\mathcal{F}^{(0,2)}(tL^{1/\\nu}, hL^{y_h})\n$$\n我们关心的是零场磁化率，所以我们令 $h=0$：\n$$\n\\chi_{\\mathrm{s}}(t,0,L) = L^{2y_h-d} \\left[-\\mathcal{F}^{(0,2)}(tL^{1/\\nu}, 0)\\right]\n$$\n我们定义一个新的标度函数 $\\mathcal{G}(x) = -\\mathcal{F}^{(0,2)}(x, 0)$。表达式则简化为：\n$$\n\\chi_{\\mathrm{s}}(t,0,L) = L^{2y_h-d} \\mathcal{G}(tL^{1/\\nu})\n$$\n问题指明 $\\chi_{\\max}(L)$ 是磁化率的峰值，对于有限系统，该峰值出现在伪临界温度 $t^\\star(L)$ 处。这对应于 $\\mathcal{G}$ 的自变量取值为 $x^\\star = t^\\star(L)L^{1/\\nu}$，该值使得函数 $\\mathcal{G}(x)$ 最大化。由于在大 $L$ 极限下 $x^\\star$ 和 $\\mathcal{G}(x^\\star)$ 是常数，因此峰值磁化率的标度行为完全由包含 $L$ 的前置因子决定：\n$$\n\\chi_{\\max}(L) \\equiv \\chi(t^\\star(L), 0, L) \\propto L^{2y_h-d}\n$$\n为了将其与常规临界指数 $\\gamma$ 联系起来，我们使用标准标度关系。磁场的标度指数 $y_h$ 与反常维度指数 $\\eta$ 通过关系式 $2y_h = d+2-\\eta$ 相关联。代入该式，得到 $L$ 的指数为：\n$$\n2y_h-d = (d+2-\\eta) - d = 2-\\eta\n$$\n此外，超标度关系 $\\gamma = \\nu(2-\\eta)$ 将 $\\gamma$、$\\nu$ 和 $\\eta$联系起来。由此，我们有 $2-\\eta = \\gamma/\\nu$。因此，峰值磁化率的标度行为由下式给出：\n$$\n\\chi_{\\max}(L) \\propto L^{\\gamma/\\nu}\n$$\n这是我们必须使用的基本幂律关系。为了从提供的数据中提取指数 $\\gamma/\\nu$，我们通过对两边取自然对数来线性化这个关系：\n$$\n\\ln \\chi_{\\max}(L) = \\ln(C) + \\left(\\frac{\\gamma}{\\nu}\\right) \\ln L\n$$\n其中 $C$ 是比例常数。这个方程是直线形式 $y = m x + c$，其中：\n- 因变量 $y = \\ln \\chi_{\\max}(L)$。\n- 自变量 $x = \\ln L$。\n- 斜率 $m = \\gamma/\\nu$。\n- 截距 $c = \\ln(C)$。\n\n规定的算法是对每个实验的数据点 $(\\ln L_i, \\ln \\chi_{\\max}(L_i))$ 进行线性最小二乘回归。该拟合会产生斜率的估计值 $\\hat{m}$。给定实验中已知的 $\\nu$ 值，临界指数 $\\gamma$ 的估计值则计算如下：\n$$\n\\hat{\\gamma} = \\hat{m} \\cdot \\nu\n$$\n实现将对四个实验数据集中的每一个遵循此过程。将对对数变换后的数据进行线性回归以找到斜率，并由此计算出 $\\gamma$。\n每个实验的最终结果将被收集并按要求格式化。对于无权线性最小二乘拟合，`numpy.polyfit` 函数是一个合适且高效的工具。", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Solves for the critical exponent gamma for multiple experiments\n    using finite-size scaling analysis.\n    \"\"\"\n    \n    # Define the test cases from the problem statement.\n    # Each case is a tuple: (list of L, list of chi_max, nu)\n    test_cases = [\n        # Experiment 1\n        (\n            [8, 16, 32, 64, 128],\n            [19.21727, 63.04, 216.3451, 718.995, 2435.985],\n            1.0\n        ),\n        # Experiment 2\n        (\n            [8, 12, 16, 24, 32, 48],\n            [24.243, 51.967, 92.64, 207.868, 353.192, 798.372],\n            0.630\n        ),\n        # Experiment 3\n        (\n            [16, 24, 32],\n            [40.8, 81.3625, 133.183],\n            1.0\n        ),\n        # Experiment 4\n        (\n            [16, 32, 64, 128, 256],\n            [51.2, 206.848, 802.816, 3276.8, 13302.808],\n            0.5\n        )\n    ]\n\n    results = []\n    for L_values, chi_max_values, nu in test_cases:\n        # Convert lists to NumPy arrays for vectorized operations.\n        L = np.array(L_values)\n        chi_max = np.array(chi_max_values)\n\n        # Compute the natural logarithms of L and chi_max.\n        # This transforms the power-law relation into a linear one.\n        # ln(chi_max) = (gamma/nu) * ln(L) + const\n        log_L = np.log(L)\n        log_chi_max = np.log(chi_max)\n\n        # Perform unweighted linear least-squares regression.\n        # np.polyfit with deg=1 fits a polynomial of degree 1 (a line).\n        # It returns the coefficients [slope, intercept].\n        slope, intercept = np.polyfit(log_L, log_chi_max, 1)\n\n        # The slope of the fit is an estimate for the ratio gamma/nu.\n        m_hat = slope\n\n        # Calculate the estimate for gamma using the given value of nu.\n        # gamma = (gamma/nu) * nu\n        gamma_hat = m_hat * nu\n        \n        results.append(gamma_hat)\n\n    # Format the results into a string with each value rounded to 3 decimal places.\n    # The f-string format specifier '{value:.3f}' ensures three decimal places,\n    # including trailing zeros.\n    formatted_results = [f\"{g:.3f}\" for g in results]\n    output_string = f\"[{','.join(formatted_results)}]\"\n\n    # Final print statement in the exact required format.\n    print(output_string)\n\nsolve()\n```", "id": "2400586"}]}