{"hands_on_practices": [{"introduction": "要真正掌握一种数值方法，没有什么比亲自动手计算更能打下坚实的基础了。这个练习将引导你完成你的第一次FTCS计算。通过为一个一维热传导问题 [@problem_id:2171711] 手动执行单步时间演化，你将熟悉离散化方程以及如何利用邻近网格点的信息来预测未来的状态。", "problem": "一根用于原型电子设备散热的导热汇流排，被建模为长度为 $L = 0.5$ m 的一维杆。该杆具有均匀的热扩散系数 $\\alpha = 1.2 \\times 10^{-5}$ m$^2$/s。杆的两端连接到大型热沉，维持 $0$ °C 的恒定温度，因此对于所有时间 $t \\ge 0$，边界条件为 $u(0, t) = 0$ °C 和 $u(L, t) = 0$ °C。\n\n在时间 $t=0$ 时，该设备被短暂激活，在杆上产生了一个由函数 $u(x, 0) = 1600x(L-x)$ 给出的初始温度分布，其中 $x$ 是沿杆的位置，单位为米。\n\n为了分析冷却过程，需要使用有限差分法对一维热传导方程 $\\frac{\\partial u}{\\partial t} = \\alpha \\frac{\\partial^2 u}{\\partial x^2}$ 进行数值求解。空间域 $[0, L]$ 被离散化为 $N=5$ 个相等的段，从而创建了一系列网格点 $x_i = i \\Delta x$，$i=0, 1, \\dots, 5$。模拟以 $\\Delta t = 200$ s 的固定时间步长进行。\n\n计算第一个时间步长 $t_1 = \\Delta t$ 后，第一个内部网格点 $x_1$ 处的温度。答案以摄氏度表示，并四舍五入到三位有效数字。", "solution": "我们用一维热传导方程 $\\frac{\\partial u}{\\partial t} = \\alpha \\frac{\\partial^2 u}{\\partial x^2}$ 来模拟在 $[0,L]$ 上的温度演化，其狄利克雷边界条件为对所有 $t\\ge 0$ 有 $u(0,t)=0$ 和 $u(L,t)=0$，初始条件为 $u(x,0)=1600\\,x(L-x)$。空间区间被划分为 $N=5$ 个相等的段，得到网格点 $x_{i}=i\\Delta x$，$i=0,1,\\dots,5$，其中 $\\Delta x=\\frac{L}{N}$。使用显式前向时间中心空间（FTCS）有限差分格式，内部节点的更新公式为\n$$\nu_{i}^{n+1}=u_{i}^{n}+r\\left(u_{i+1}^{n}-2u_{i}^{n}+u_{i-1}^{n}\\right)\n$$\n其中 $r=\\frac{\\alpha \\Delta t}{(\\Delta x)^{2}}$。边界值满足对所有 $n$ 都有 $u_{0}^{n}=0$ 和 $u_{5}^{n}=0$。\n\n计算空间步长：\n$$\n\\Delta x=\\frac{L}{N}=\\frac{0.5}{5}=0.1\n$$\n计算稳定性参数：\n$$\nr=\\frac{\\alpha \\Delta t}{(\\Delta x)^{2}}=\\frac{\\left(1.2\\times 10^{-5}\\right)\\cdot 200}{(0.1)^{2}}=\\frac{1.2\\times 10^{-5}\\cdot 200}{0.01}=0.24\n$$\n初始离散温度为 $u_{i}^{0}=u(x_{i},0)=1600\\,x_{i}\\left(L-x_{i}\\right)$，其中 $x_{i}=i\\cdot 0.1$。具体来说，\n$$\nu_{0}^{0}=0,\\quad u_{1}^{0}=1600\\cdot 0.1\\cdot(0.5-0.1)=64,\\quad u_{2}^{0}=1600\\cdot 0.2\\cdot(0.5-0.2)=96\n$$\n对第一个内部点 $i=1$ 和第一个时间步应用FTCS更新公式：\n$$\nu_{1}^{1}=u_{1}^{0}+r\\left(u_{2}^{0}-2u_{1}^{0}+u_{0}^{0}\\right)=64+0.24\\left(96-2\\cdot 64+0\\right)=64+0.24\\cdot(-32)=64-7.68=56.32\n$$\n四舍五入到三位有效数字，第一个时间步后 $x_{1}$ 处的温度是 $56.3$ 摄氏度。", "answer": "$$\\boxed{56.3}$$", "id": "2171711"}, {"introduction": "在掌握了FTCS的基本操作之后，我们来探讨其最重要的一个特性：数值稳定性。这个练习 [@problem_id:2164702] 将揭示一个在计算物理中普遍存在的权衡关系。通过分析空间分辨率（网格细化）如何影响最大允许时间步长，你将深刻理解稳定性条件在实际模拟中的关键作用。", "problem": "一位工程师正在模拟一根用于热管理系统的细长一维杆上的散热情况。该模拟使用显式数值方法来求解其控制热扩散方程。这种数值格式的稳定性已知取决于时间步长和空间网格尺寸之间的关系，这通常被称为 Courant-Friedrichs-Lewy (CFL) 条件。\n\n在一次初始模拟中，工程师使用的空间网格间距为 $\\Delta x_1 = 0.12$ m。在此设置下，确定了维持稳定解的最大允许时间步长为 $\\Delta t_1 = 1.0 \\times 10^{-3}$ s。\n\n为了获得更精细的温度分布，模拟使用更细的网格重新运行，其中空间间距减小到 $\\Delta x_2 = 0.07$ m。假设模拟始终在稳定性条件所允许的最大时间步长下运行，计算新的最大时间步长 $\\Delta t_2$。\n\n将 $\\Delta t_2$ 的答案以秒为单位表示，并四舍五入到两位有效数字。", "solution": "我们考虑使用显式前向时间、中心空间 (FTCS) 格式求解的一维热方程 $\\frac{\\partial u}{\\partial t} = \\alpha \\frac{\\partial^2 u}{\\partial x^2}$。此格式的稳定性条件 (CFL 型) 要求无量纲参数\n$$\nr \\equiv \\frac{\\alpha \\,\\Delta t}{(\\Delta x)^{2}} \\leq \\frac{1}{2}\n$$\n因此，最大稳定时间步长为\n$$\n\\Delta t_{\\max} = \\frac{1}{2}\\,\\frac{(\\Delta x)^{2}}{\\alpha}\n$$\n对于使用相同材料（即 $\\alpha$ 相同）的两次模拟，最大时间步长与空间步长的平方成正比：\n$$\n\\frac{\\Delta t_{2}}{\\Delta t_{1}} = \\left(\\frac{\\Delta x_{2}}{\\Delta x_{1}}\\right)^{2}\n$$\n因此，\n$$\n\\Delta t_{2} = \\Delta t_{1}\\left(\\frac{\\Delta x_{2}}{\\Delta x_{1}}\\right)^{2}\n$$\n代入给定值 $ \\Delta x_{1} = 0.12 $，$ \\Delta t_{1} = 1.0 \\times 10^{-3} $ 和 $ \\Delta x_{2} = 0.07 $（所有单位均为一致的国际单位制单位），\n$$\n\\Delta t_{2} = \\left(1.0 \\times 10^{-3}\\right)\\left(\\frac{0.07}{0.12}\\right)^{2}\n= \\left(1.0 \\times 10^{-3}\\right)\\left(\\frac{7}{12}\\right)^{2}\n= \\left(1.0 \\times 10^{-3}\\right)\\frac{49}{144}\n$$\n计算数值：\n$$\n\\frac{49}{144} \\approx 0.340277\\ldots,\\quad \\Rightarrow\\quad \\Delta t_{2} \\approx 3.40277\\ldots \\times 10^{-4}\n$$\n四舍五入到两位有效数字，\n$$\n\\Delta t_{2} \\approx 3.4 \\times 10^{-4}\n$$", "answer": "$$\\boxed{3.4 \\times 10^{-4}}$$", "id": "2164702"}, {"introduction": "现在，让我们将知识从一维扩展到二维，并通过编程来观察理论的实际效果。在这个高级练习 [@problem_id:2391393] 中，你将模拟二维板上的热扩散并故意违反稳定性条件。你将亲眼目睹当数值参数 $r$ 设置不当时，经典的“棋盘”不稳定性模式是如何出现的，这为理论分析提供了强有力的视觉证明。", "problem": "考虑二维热传导方程，该方程模拟方形板上的温度扩散，其偏微分方程为 $u_t = \\alpha \\left(u_{xx} + u_{yy}\\right)$，其中 $u(x,y,t)$ 是温度，$\\alpha$ 是热扩散系数，下标表示偏导数，$t$ 表示时间。使用显式前向时间中心空间 (FTCS) 方法，在均匀周期性网格上推进解。该方法在时间上采用前向差分，在空间上采用中心差分。周期性网格有 $N \\times N$ 个节点，在两个方向上的均匀间距均为 $h$。令 $r = \\alpha \\,\\Delta t / h^2$ 表示无量纲时间步长参数。在两个方向上实现周期性边界条件。不要先验地假设任何稳定性属性；而是通过数值方式观察其行为。从离散网格上的以下初始条件开始：一个纯交错符号模式 $u_{i,j}^0 = (-1)^{i+j}$，适用于所有网格索引 $i,j$。这是周期性条件下的最高波数模式。通过重复应用 FTCS 更新来演化此初始条件。您的程序必须完成以下操作：\n- 实现与有限差分定义一致的 FTCS 离散化：时间层 $n$ 的时间导数用前向差分替换，每个二阶空间导数用均匀网格上的中心差分替换。应用周期性边界条件，使得邻居索引在两个方向的边界处都能回绕。\n- 对于给定的 $r$、时间步数 $n_{\\text{steps}}$ 和网格大小 $N$，计算比率 $R = \\left|A^{n_{\\text{steps}}}\\right| / \\left|A^0\\right|$，其中 $A^n$ 是时间层 $n$ 时交错符号模式的标量振幅，由离散内积 $A^n = \\frac{1}{N^2}\\sum_{i=0}^{N-1}\\sum_{j=0}^{N-1} u_{i,j}^n \\, (-1)^{i+j}$ 定义。\n- 使用周期性边界条件以确保此交错符号模式是一个离散傅里叶模式。\n- 输出中无需物理单位，因为 $R$ 是无量纲的。\n\n测试套件：在以下三个参数集上运行程序，它们共同提供了一个一般情况、一个边界情况以及一个违反经典稳定性条件的情况：\n- 情况 $1$ (稳定内部)：$(N, r, n_{\\text{steps}}) = (64, 0.2, 12)$。\n- 情况 $2$ (稳定性边界)：$(N, r, n_{\\text{steps}}) = (64, 0.25, 12)$。\n- 情况 $3$ (不稳定，预期的棋盘格增长)：$(N, r, n_{\\text{steps}}) = (64, 0.3, 12)$。\n\n最终输出格式：您的程序应生成单行输出，其中包含一个用方括号括起来的逗号分隔列表，按 $[R_1, R_2, R_3]$ 的顺序排列，分别对应情况 $1$、$2$ 和 $3$。每个 $R_k$ 必须打印为浮点数，并四舍五入到小数点后恰好六位，例如 $[0.123456,1.000000,9.876543]$。唯一允许的输出就是这一行。不允许用户输入或使用外部文件，所有计算必须以编程方式执行。", "solution": "问题陈述已经过严格验证，并被确定为有效。它具有科学依据、是适定的、客观的，并包含进行唯一、可验证求解所需的所有必要信息。\n\n控制偏微分方程 (PDE) 是二维热传导方程：\n$$ u_t = \\alpha \\left(u_{xx} + u_{yy}\\right) $$\n此处，$u(x,y,t)$ 表示空间坐标 $(x,y)$ 和时间 $t$ 处的温度，$\\alpha$ 是热扩散常数。问题要求使用显式前向时间中心空间 (FTCS) 方法在尺寸为 $N \\times N$、空间步长为 $h$、时间步长为 $\\Delta t$ 的均匀周期性网格上进行离散化。\n\n首先，我们对 PDE 进行离散化。时间导数 $u_t$ 在时间层 $n$ 处使用前向差分近似：\n$$ u_t \\approx \\frac{u_{i,j}^{n+1} - u_{i,j}^n}{\\Delta t} $$\n其中 $u_{i,j}^n$ 表示网格点 $(i,j)$ 和时间步 $n$ 处的数值解。二阶空间导数 $u_{xx}$ 和 $u_{yy}$ 使用中心差分近似：\n$$ u_{xx} \\approx \\frac{u_{i+1,j}^n - 2u_{i,j}^n + u_{i-1,j}^n}{h^2} $$\n$$ u_{yy} \\approx \\frac{u_{i,j+1}^n - 2u_{i,j}^n + u_{i,j-1}^n}{h^2} $$\n将这些近似代入热传导方程，得到完整的离散化形式：\n$$ \\frac{u_{i,j}^{n+1} - u_{i,j}^n}{\\Delta t} = \\alpha \\left( \\frac{u_{i+1,j}^n - 2u_{i,j}^n + u_{i-1,j}^n}{h^2} + \\frac{u_{i,j+1}^n - 2u_{i,j}^n + u_{i,j-1}^n}{h^2} \\right) $$\n我们给定无量纲参数 $r = \\alpha \\Delta t / h^2$。通过重新整理方程以求解下一个时间步的解 $u_{i,j}^{n+1}$，我们得到 FTCS 更新规则：\n$$ u_{i,j}^{n+1} = u_{i,j}^n + r \\left( u_{i+1,j}^n + u_{i-1,j}^n + u_{i,j+1}^n + u_{i,j-1}^n - 4u_{i,j}^n \\right) $$\n这可以重写为：\n$$ u_{i,j}^{n+1} = (1 - 4r)u_{i,j}^n + r(u_{i+1,j}^n + u_{i-1,j}^n + u_{i,j+1}^n + u_{i,j-1}^n) $$\n问题指定了一个初始条件，对应于周期性网格上的最高波数模式：\n$$ u_{i,j}^0 = (-1)^{i+j} $$\n该模式是离散数值算子的一个本征模。为了证明这一点，我们将 $u_{i,j}^0$ 代入更新规则。相邻点的值与中心点的值相差一个因子 $-1$：\n$$ u_{i \\pm 1, j}^0 = (-1)^{i \\pm 1 + j} = -(-1)^{i+j} = -u_{i,j}^0 $$\n$$ u_{i, j \\pm 1}^0 = (-1)^{i + j \\pm 1} = -(-1)^{i+j} = -u_{i,j}^0 $$\n将这些代入第一个时间步的更新规则中，得到：\n$$ u_{i,j}^1 = (1 - 4r)u_{i,j}^0 + r(-u_{i,j}^0 - u_{i,j}^0 - u_{i,j}^0 - u_{i,j}^0) = (1 - 4r)u_{i,j}^0 - 4r u_{i,j}^0 = (1 - 8r)u_{i,j}^0 $$\n因此，该模式从一个时间步到下一个时间步的放大因子是 $G = (1 - 8r)$。经过 $n_{\\text{steps}}$ 步后，解为：\n$$ u_{i,j}^{n_{\\text{steps}}} = G^{n_{\\text{steps}}} u_{i,j}^0 = (1 - 8r)^{n_{\\text{steps}}} (-1)^{i+j} $$\n数值格式的稳定性由此放大因子的大小决定。为保证稳定性，我们需要 $|G| \\le 1$。对于这个特定模式，条件是 $|1 - 8r| \\le 1$，这等价于 $0 \\le r \\le 1/4$。这证实了最高波数模式决定了整个格式的稳定性极限。\n\n问题要求计算比率 $R = |A^{n_{\\text{steps}}}| / |A^0|$，其中振幅 $A^n$ 由离散内积定义：\n$$ A^n = \\frac{1}{N^2}\\sum_{i=0}^{N-1}\\sum_{j=0}^{N-1} u_{i,j}^n \\, (-1)^{i+j} $$\n首先，我们计算初始振幅 $A^0$：\n$$ A^0 = \\frac{1}{N^2}\\sum_{i=0}^{N-1}\\sum_{j=0}^{N-1} u_{i,j}^0 (-1)^{i+j} = \\frac{1}{N^2}\\sum_{i=0}^{N-1}\\sum_{j=0}^{N-1} (-1)^{i+j} (-1)^{i+j} = \\frac{1}{N^2}\\sum_{i=0}^{N-1}\\sum_{j=0}^{N-1} 1 = 1 $$\n接下来，我们计算在 $n_{\\text{steps}}$ 时的振幅：\n$$ A^{n_{\\text{steps}}} = \\frac{1}{N^2}\\sum_{i=0}^{N-1}\\sum_{j=0}^{N-1} u_{i,j}^{n_{\\text{steps}}} (-1)^{i+j} = \\frac{1}{N^2}\\sum_{i=0}^{N-1}\\sum_{j=0}^{N-1} \\left( (1 - 8r)^{n_{\\text{steps}}} (-1)^{i+j} \\right) (-1)^{i+j} $$\n$$ A^{n_{\\text{steps}}} = (1 - 8r)^{n_{\\text{steps}}} \\left( \\frac{1}{N^2}\\sum_{i=0}^{N-1}\\sum_{j=0}^{N-1} 1 \\right) = (1 - 8r)^{n_{\\text{steps}}} $$\n因此，所要求的比率 $R$ 是：\n$$ R = \\frac{|A^{n_{\\text{steps}}}|}{|A^0|} = \\frac{|(1 - 8r)^{n_{\\text{steps}}}|}{|1|} = |1 - 8r|^{n_{\\text{steps}}} $$\n这个解析结果提供了一个精确的理论预测。实现将按要求执行完整的数值模拟，其结果必须与此理论结果高度匹配。\n\n计算过程如下：\n1. 对于每个测试用例 $(N, r, n_{\\text{steps}})$，用初始条件 $u_{i,j}^0 = (-1)^{i+j}$ 初始化一个 $N \\times N$ 的网格。\n2. 创建第二个 $N \\times N$ 的网格来表示投影模式 $p_{i,j} = (-1)^{i+j}$。\n3. 初始振幅 $A^0$ 作为初始网格和投影模式网格的归一化内积计算。其值将恰好为 $1.0$。\n4. 一个循环运行 $n_{\\text{steps}}$ 次迭代。在每次迭代中，将 FTCS 更新规则应用于网格上的每个点。通过对索引使用模运算来处理周期性边界条件，这可通过向量化的数组移位（例如 `numpy.roll`）高效实现。\n5. 循环结束后，以与 $A^0$ 类似的方式计算最终振幅 $A^{n_{\\text{steps}}}$。\n6. 比率 $R$ 计算为 $|A^{n_{\\text{steps}}}| / |A^0|$。\n7. 收集三种情况的结果并按指定格式打印。测试用例探索了稳定区域（$r=0.2$, $|G|=0.6<1$）、稳定性边界（$r=0.25$, $|G|=1$）和不稳定区域（$r=0.3$, $|G|=1.4>1$）。", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Solves the 2D heat equation using the FTCS method for a specific initial mode\n    and computes the amplitude ratio over a number of time steps.\n    \"\"\"\n    # Define the test cases from the problem statement.\n    test_cases = [\n        # Case 1 (stable interior): (N, r, n_steps)\n        (64, 0.2, 12),\n        # Case 2 (stability boundary): (N, r, n_steps)\n        (64, 0.25, 12),\n        # Case 3 (unstable): (N, r, n_steps)\n        (64, 0.3, 12),\n    ]\n\n    results = []\n    for case in test_cases:\n        N, r, n_steps = case\n\n        # Create the grid and initialize with the alternating-sign mode\n        # u_{i,j}^0 = (-1)^(i+j)\n        i, j = np.meshgrid(np.arange(N), np.arange(N), indexing='ij')\n        u = np.power(-1.0, i + j)\n\n        # This mode is used to project the solution and find the amplitude\n        projector_mode = u.copy()\n        \n        # Calculate the initial amplitude A^0\n        # A^n = (1/N^2) * sum_{i,j} u_{i,j}^n * (-1)^(i+j)\n        A0 = np.sum(u * projector_mode) / (N * N)\n\n        # Evolve the solution for n_steps\n        for _ in range(n_steps):\n            # Apply FTCS update rule using vectorized operations for efficiency\n            # and to handle periodic boundary conditions with np.roll.\n            # u_new = (1 - 4r)u + r*(u_{i+1,j} + u_{i-1,j} + u_{i,j+1} + u_{i,j-1})\n            \n            # Sum of neighbors with periodic BC\n            neighbors_sum = (\n                np.roll(u, 1, axis=0) + \n                np.roll(u, -1, axis=0) +\n                np.roll(u, 1, axis=1) + \n                np.roll(u, -1, axis=1)\n            )\n            \n            # Update the solution grid\n            u = (1.0 - 4.0 * r) * u + r * neighbors_sum\n\n        # Calculate the final amplitude A^n_steps\n        A_final = np.sum(u * projector_mode) / (N * N)\n\n        # Compute the ratio R = |A^n_steps| / |A^0|\n        # Since A0 is 1.0, this simplifies to |A_final|\n        ratio = np.abs(A_final) / np.abs(A0)\n        \n        results.append(ratio)\n\n    # Final print statement in the exact required format.\n    # Each result is a float rounded to exactly six digits after the decimal point.\n    print(f\"[{','.join(f'{res:.6f}' for res in results)}]\")\n\nsolve()\n```", "id": "2391393"}]}