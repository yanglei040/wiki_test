{"hands_on_practices": [{"introduction": "理论上的不稳定性在数值模拟中会产生非常真实且可观测的后果。本练习将让你亲眼见证前向时间中心空间（FTCS）格式在应用于波动方程时的失效过程。通过对比一个尖锐的、不连续的初始条件（类似冲击波）和一个平滑的初始条件，你将直观地理解为何数值不稳定性尤其偏爱放大初始数据中的高频成分，从而深入体会该格式的不可靠性。[@problem_id:2396336]", "problem": "你需要研究前向时间中心差分（FTCS）格式在应用于具有周期性边界条件的一维波动方程时的无条件不稳定性，通过比较对于不连续与平滑的初始条件，数值解变得不可用的速度。考虑无量纲的一维波动方程\n$$\nu_{tt}(x,t) = c^2\\,u_{xx}(x,t),\n$$\n其中 $x \\in [0,L)$ 且 $t \\ge 0$，具有周期性边界条件 $u(0,t) = u(L,t)$ 和 $u_x(0,t) = u_x(L,t)$。假设 $c>0$ 是一个恒定的波速。引入辅助变量 $v(x,t) = u_t(x,t)$，使方程组变为\n$$\nu_t(x,t) = v(x,t), \\quad v_t(x,t) = c^2\\,u_{xx}(x,t).\n$$\n在由 $N$ 个点组成的均匀网格上对空间进行离散化，点间距为 $\\Delta x = L/N$，索引为 $j = 0,1,\\dots,N-1$，并用均匀步长 $\\Delta t$ 对时间进行离散化。对此一阶系统在时间上使用FTCS离散格式，对空间二阶导数使用标准的二阶中心差分，并结合模$N$的周期性索引 $j\\pm 1$。所有量都是无量纲的；最终结果中不需要物理单位。\n\n定义失效的度量如下：令 $U^0_{\\max} = \\max_j |u_j^0|$ 为初始离散场的最大绝对值，并令 $U^n_{\\max} = \\max_j |u_j^n|$ 为时间步 $n$ 上的最大绝对值。对于给定的阈值因子 $\\alpha > 1$，将失效时间索引 $n_\\mathrm{fail}$ 定义为满足 $U^n_{\\max} > \\alpha\\,U^0_{\\max}$ 的最小非负整数 $n$。如果在预设的最大时间步数 $S$ 内未满足此条件，则报告 $n_\\mathrm{fail} = S$。\n\n实现一个程序，对于下面指定的参数值，计算并报告所描述的三种初始条件中每一种的 $n_\\mathrm{fail}$。空间域是周期性的，长度 $L = 1$，波速 $c = 1$，空间网格点数为 $N = 400$，库朗数定义为 $r = c\\,\\Delta t/\\Delta x = 0.2$，这确定了 $\\Delta t = r\\,\\Delta x/c$。使用最大时间步数 $S = 2000$ 和阈值因子 $\\alpha = 10$。\n\n$t=0$ 时的初始条件测试套件：\n- 情况 A（不连续阶跃）：当 $x \\in [0,0.5)$ 时 $u(x,0) = 1$，当 $x \\in [0.5,1)$ 时 $u(x,0) = 0$；$v(x,0) = 0$。\n- 情况 B（平滑高斯函数）：$u(x,0) = \\exp\\!\\big(-((x-0.5)/\\sigma)^2\\big)$，其中 $\\sigma = 0.1$；$v(x,0) = 0$。\n- 情况 C（中等波数的平滑正弦波）：$u(x,0) = \\sin(2\\pi m x)$，其中 $m = 32$；$v(x,0) = 0$。\n\n您的程序必须：\n- 在空间上使用周期性边界条件。\n- 对所有情况使用由 $r = 0.2$, $L = 1$, $N = 400$ 和 $c = 1$ 定义的相同的 $\\Delta t$ 和 $\\Delta x$。\n- 对于每种情况，使用 FTCS 格式演化解，直到 $U^n_{\\max} > \\alpha\\,U^0_{\\max}$ 或 $n = S$ 为止，然后记录 $n_\\mathrm{fail}$。\n\n最终输出格式：您的程序应生成单行输出，其中包含一个用方括号括起来的逗号分隔列表形式的结果，顺序为 [情况 A, 情况 B, 情况 C]，例如，“[nA,nB,nC]”。每个条目必须是一个整数。", "solution": "所提出的问题是计算物理学中的一个有效练习。它要求使用前向时间中心差分（FTCS）格式对一维波动方程进行数值模拟，该方法对于此双曲型偏微分方程是无条件不稳定的。其目标是观察并量化这种不稳定性对于具有不同平滑度的初始条件所表现出的速率。该问题具有科学依据，是适定的，并且所有参数和条件都得到了明确的规定。\n\n控制方程是一维波动方程，$u_{tt}(x,t) = c^2\\,u_{xx}(x,t)$，其中 $u(x,t)$ 是波幅，$c$ 是波速，$x$ 是空间坐标，$t$ 是时间。为了应用一阶时间积分格式，我们通过引入辅助变量 $v(x,t) = u_t(x,t)$ 将这个二阶方程转换为一个一阶方程组。该方程组变为：\n$$\n\\frac{\\partial u}{\\partial t} = v(x,t)\n$$\n$$\n\\frac{\\partial v}{\\partial t} = c^2 \\frac{\\partial^2 u}{\\partial x^2}\n$$\n域为 $x \\in [0, L)$，具有周期性边界条件。\n\n我们将空间离散化为 $N$ 个网格点 $x_j = j \\Delta x$（$j = 0, 1, \\dots, N-1$），网格间距为 $\\Delta x = L/N$。时间被离散化为步长 $t^n = n \\Delta t$，其中 $\\Delta t$ 是时间步长。令 $u_j^n \\approx u(x_j, t^n)$ 且 $v_j^n \\approx v(x_j, t^n)$。\n\nFTCS 格式在时间上使用前向差分（前向欧拉法），在空间上使用中心差分。将此应用于我们的系统，得到以下更新规则：\n$$\n\\frac{u_j^{n+1} - u_j^n}{\\Delta t} = v_j^n \\implies u_j^{n+1} = u_j^n + \\Delta t v_j^n\n$$\n$$\n\\frac{v_j^{n+1} - v_j^n}{\\Delta t} = c^2 \\left( \\frac{u_{j+1}^n - 2u_j^n + u_{j-1}^n}{(\\Delta x)^2} \\right) \\implies v_j^{n+1} = v_j^n + \\frac{c^2 \\Delta t}{(\\Delta x)^2} (u_{j+1}^n - 2u_j^n + u_{j-1}^n)\n$$\n空间索引是周期性处理的，即 $u_{N}^n = u_0^n$ 且 $u_{-1}^n = u_{N-1}^n$。这些更新是显式的，因为时间步 $n+1$ 的状态完全由时间步 $n$ 的状态计算得出。\n\n该格式的稳定性可以使用 von Neumann 分析来研究。通过将形式为 $u_j^n = \\hat{u}(\\xi,k)^n e^{i k x_j}$ 的试探解代入离散方程，可以推导出将解的傅里叶振幅从时间步 $n$ 映射到 $n+1$ 的放大矩阵 $G$。$G$ 的特征值 $\\lambda$ 决定了稳定性。对于此格式，特征值被发现为 $\\lambda = 1 \\pm 2i r |\\sin(k\\Delta x/2)|$，其中 $r = c\\Delta t/\\Delta x$ 是库朗数，$k$ 是波数。这些特征值的模为：\n$$\n|\\lambda| = \\sqrt{1^2 + \\left(2r \\sin\\left(\\frac{k\\Delta x}{2}\\right)\\right)^2} = \\sqrt{1 + 4r^2 \\sin^2\\left(\\frac{k\\Delta x}{2}\\right)}\n$$\n对于任何非零的库朗数 $r > 0$ 以及任何使得 $\\sin(k\\Delta x/2) \\neq 0$ 的波数 $k$，其模 $|\\lambda|$ 严格大于 1。这意味着数值解的傅里叶模式的振幅在每个时间步都会指数级增长。因此，该格式是无条件不稳定的。对于网格上可表示的最高频率模式（其中 $k\\Delta x = \\pi$），增长最快。\n\n确定失效时间索引 $n_\\mathrm{fail}$ 的算法如下：\n1. 初始化常数和网格参数：$L=1$, $c=1$, $N=400$, $r=0.2$, $S=2000$, $\\alpha=10$。由此得出 $\\Delta x = L/N = 1/400$ 和 $\\Delta t = r \\Delta x / c = 0.2 \\times (1/400) / 1 = 0.0005$。\n2. 对于三种初始条件（情况 A、B、C）中的每一种，执行以下步骤：\n   a. 在空间网格上设置初始离散场 $u^0$ 和 $v^0$。对于所有情况，对所有 $j$ 都有 $v^0_j = 0$。\n   b. 计算初始最大振幅 $U^0_{\\max} = \\max_j |u_j^0|$ 和失效阈值 $T = \\alpha U^0_{\\max}$。\n   c. 启动从 $n=0$ 到最多 $S-1$ 步的时间演化循环。\n   d. 在每次迭代中，使用 FTCS 更新规则计算场 $u^{n+1}$ 和 $v^{n+1}$。周期性边界条件通过环形数组移位实现。\n   e. 计算新时间步的最大振幅 $U^{n+1}_{\\max} = \\max_j |u_j^{n+1}|$。\n   f. 检查是否满足失效判据 $U^{n+1}_{\\max} > T$。\n   g. 如果满足，失效时间为 $n_\\mathrm{fail} = n+1$。该情况的模拟终止，并记录此值。\n   h. 如果循环完成至第 $S$ 步（即 $u^S$ 已被计算和检查）而判据未被满足，则失效时间记录为 $n_\\mathrm{fail} = S$。\n\n失效的速率预计取决于初始条件的频谱成分。\n- 情况 A（阶跃函数）：不连续性在整个频谱上都包含显著的能量，包括最不稳定的高频模式。这种情况应该会非常快地失效。\n- 情况 B（高斯函数）：平滑的高斯函数其频谱也是高斯的，这意味着其高频成分呈指数级减小。不稳定性将从这些微小的分量和数值舍入误差中增长，因此这种情况应该是最后失效的。\n- 情况 C（正弦波）：初始状态是一个单一的、中等偏低波数的模式（$m=32$）。虽然这个模式本身增长不快，但数值格式的截断误差（取决于更高阶的空间导数）充当一个源项，催生出其他更不稳定的高频模式。对于正弦波 $u(x,0)=\\sin(2\\pi m x)$，四阶导数与 $m^4$ 成比例，对于 $m=32$ 来说这个值很大。这种大的截断误差将比非常平滑的高斯函数情况更快地激发不稳定模式。\n因此，预期的失效时间顺序是 $n_{\\mathrm{fail}, A} < n_{\\mathrm{fail}, C} < n_{\\mathrm{fail}, B}$。", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Solves the problem of finding the failure time for the FTCS scheme\n    applied to the 1D wave equation for three different initial conditions.\n    \"\"\"\n\n    # Define simulation parameters\n    L = 1.0       # Domain length\n    c = 1.0       # Wave speed\n    N = 400       # Number of spatial grid points\n    r = 0.2       # Courant number\n    S = 2000      # Maximum number of time steps\n    alpha = 10.0  # Threshold factor for failure\n\n    # Calculate derived parameters\n    dx = L / N\n    dt = r * dx / c\n    \n    # Pre-calculate coefficient for the v-update equation\n    # C_v = c^2 * dt / dx^2\n    # This can be simplified using r: C_v = c*r/dx\n    C_v = c**2 * dt / (dx**2)\n\n    # Define the spatial grid\n    # x points from 0 to L-dx, size N\n    x = np.linspace(0, L, N, endpoint=False)\n\n    # Define initial conditions\n    # Case A: Discontinuous step function\n    u0_A = np.ones(N)\n    u0_A[x >= 0.5] = 0.0\n\n    # Case B: Smooth Gaussian\n    sigma = 0.1\n    u0_B = np.exp(-((x - 0.5) / sigma)**2)\n\n    # Case C: Smooth sinusoid of moderate wavenumber\n    m = 32\n    u0_C = np.sin(2 * np.pi * m * x)\n    \n    test_cases = [u0_A, u0_B, u0_C]\n    results = []\n\n    def run_simulation(u0_initial):\n        \"\"\"\n        Runs the FTCS simulation for a given initial condition u0.\n        The initial velocity v0 is assumed to be zero.\n        \"\"\"\n        u = u0_initial.copy()\n        v = np.zeros_like(u)\n\n        # Calculate initial max absolute value and the failure threshold\n        u0_max = np.max(np.abs(u))\n        \n        # If u0_max is zero, any non-zero state is a failure.\n        # This problem's initial conditions all have u0_max > 0.\n        if u0_max == 0.0:\n            threshold = 1e-9 # A small number to detect any growth\n        else:\n            threshold = alpha * u0_max\n        \n        # The condition is U^n_max > alpha*U^0_max. For n=0, this is false.\n        # We start checking from n=1.\n\n        for n in range(S):\n            # Calculate the discrete Laplacian of u at step n using periodic BCs\n            lapl_u = np.roll(u, -1) - 2 * u + np.roll(u, 1)\n\n            # Calculate u and v at step n+1\n            # Note: The updates for u_next and v_next must both use data from step n.\n            # Python's evaluation order ensures this is safe.\n            v_next = v + C_v * lapl_u\n            u_next = u + dt * v # Uses v at step n, not v_next\n\n            u = u_next\n            v = v_next\n\n            # Check for failure condition at step n+1\n            u_max_current = np.max(np.abs(u))\n            if u_max_current > threshold:\n                return n + 1  # Failure occurred at step n+1\n\n        # If the loop completes, the condition was not met within S steps\n        return S\n\n    for u0 in test_cases:\n        n_fail = run_simulation(u0)\n        results.append(n_fail)\n\n    # Final print statement in the exact required format.\n    print(f\"[{','.join(map(str, results))}]\")\n\nsolve()\n```", "id": "2396336"}, {"introduction": "在我们已经看到 FTCS 格式是不稳定的之后，现在让我们更深入地探究其不稳定的行为。本练习将揭示一个更微妙的现象：在有限的模拟时间内，不稳定的增长速度不仅取决于初始条件的光滑度，还取决于其具体形式。通过比较一个从初始位移开始的波包和一个从初始速度开始的波包，我们将发现数值误差增长的复杂动态，这与格式放大矩阵的非正规（non-normal）性质有关。[@problem_id:2396360]", "problem": "考虑一个长度为 $L$ 的周期性域上的一维线性波动方程的无量纲形式：$$u_{tt}(x,t)=c^2\\,u_{xx}(x,t),\\quad x\\in[0,L],\\ t\\ge 0,$$ 边界条件为周期性的，即对所有 $t\\ge 0$ 都有 $u(0,t)=u(L,t)$ 和 $u_x(0,t)=u_x(L,t)$。设 $N_x$ 为等距网格点的数量，网格间距为 $\\Delta x=L/N_x$，并定义时间步长为 $\\Delta t$。将前向时间中心空间 (FTCS) 格式应用于一阶系统 $$u_t=v,\\qquad v_t=c^2 u_{xx}$$ 其离散时间更新形式如下，对于 $n=0,1,2,\\dots$：$$u^{n+1}_i=u^n_i+\\Delta t\\,v^n_i,\\qquad v^{n+1}_i=v^n_i+\\Delta t\\,c^2\\,\\frac{u^n_{i+1}-2u^n_i+u^n_{i-1}}{\\Delta x^2},$$ 对所有网格索引 $i=0,1,\\dots,N_x-1$ 成立，并采用周期性环绕索引，即 $u^n_{-1}\\equiv u^n_{N_x-1}$ 和 $u^n_{N_x}\\equiv u^n_0$。设空间网格为 $x_i=i\\,\\Delta x$，其中 $i=0,1,\\dots,N_x-1$。考虑在相同的网格和时间步长下进行两次模拟，总共进行 $N_t$ 个时间步，其中 $N_t=\\mathrm{round}(T/\\Delta t)$:\n- 模拟 A（位移初始化）：$$u^0_i = \\exp\\!\\Big(-\\frac{(x_i-x_0)^2}{2\\sigma^2}\\Big)\\,\\cos\\!\\big(k_m\\,(x_i-x_0)\\big),\\qquad v^0_i=0.$$ \n- 模拟 B（速度初始化）：$$u^0_i=0,\\qquad v^0_i = \\exp\\!\\Big(-\\frac{(x_i-x_0)^2}{2\\sigma^2}\\Big)\\,\\cos\\!\\big(k_m\\,(x_i-x_0)\\big).$$ \n此处 $x_0=L/2$，$\\sigma$ 是高斯包络的无量纲宽度，$k_m=2\\pi m/L$ 是无量纲载波波数，其中 $m\\ge 0$ 为整数。定义状态 $(u^n,v^n)$ 的离散 $L^2$ 范数为 $$\\|(u^n,v^n)\\|_2=\\Big(\\Delta x\\sum_{i=0}^{N_x-1}\\big((u^n_i)^2+(v^n_i)^2\\big)\\Big)^{1/2}.$$ 对于每次模拟，定义整个运行过程中的每步几何放大因子 $r$ 为 $$r=\\exp\\Big(\\frac{\\ln\\|(u^{N_t},v^{N_t})\\|_2-\\ln\\|(u^{0},v^{0})\\|_2}{N_t}\\Big).$$ 对于给定的参数集，通过模拟 A 计算 $r_{\\mathrm{disp}}$，通过模拟 B 计算 $r_{\\mathrm{vel}}$，并报告其绝对差 $$\\Delta = |r_{\\mathrm{disp}}-r_{\\mathrm{vel}}|.$$ 所有量均为无量纲，因此不需要物理单位。\n\n您的程序必须精确地实现上述模型，并为以下参数集测试套件生成结果，每个参数集指定为 $(L,c,N_x,\\Delta t,T,\\sigma,m)$:\n- 测试 $1$：$(L,c,N_x,\\Delta t,T,\\sigma,m)=(1,\\,1,\\,256,\\,10^{-4},\\,5\\times 10^{-2},\\,5\\times 10^{-2},\\,0)$。\n- 测试 $2$：$(L,c,N_x,\\Delta t,T,\\sigma,m)=(1,\\,1,\\,256,\\,5\\times 10^{-5},\\,5\\times 10^{-2},\\,5\\times 10^{-2},\\,0)$。\n- 测试 $3$：$(L,c,N_x,\\Delta t,T,\\sigma,m)=(1,\\,1,\\,512,\\,10^{-4},\\,3\\times 10^{-2},\\,4\\times 10^{-2},\\,20)$。\n- 测试 $4$：$(L,c,N_x,\\Delta t,T,\\sigma,m)=(1,\\,1,\\,64,\\,5\\times 10^{-4},\\,2\\times 10^{-1},\\,8\\times 10^{-2},\\,5)$。\n\n您的程序应生成单行输出，其中包含测试 1-4 的四个 $\\Delta$ 值，顺序相同，形式为用方括号括起来的逗号分隔列表（例如 $[d_1,d_2,d_3,d_4]$）。输出值必须是实数。", "solution": "所述问题构成了计算物理学中一个有效且适定的练习。它要求使用前向时间中心空间 (FTCS) 格式对一个一阶系统实现一维波动方程的数值模拟。其目标是计算并比较由两种不同类型的初始条件产生的数值放大因子。所有参数和过程都得到了明确的定义。所指定的格式，虽然已知对于波动方程是不稳定的，却是数值方法课程中一个标准的分析课题。研究其行为是一项合理的科学任务。因此，我们将着手提供一个完整的解决方案。\n\n控制偏微分方程为一维线性波动方程：\n$$u_{tt} = c^2 u_{xx}$$\n这个二阶方程通过引入速度 $v = u_t$ 被改写为由两个一阶方程组成的系统：\n$$\n\\begin{cases}\nu_t = v \\\\\nv_t = c^2 u_{xx}\n\\end{cases}\n$$\n该问题指定了前向时间中心空间 (FTCS) 离散化格式。时间导数 $u_t$ 和 $v_t$ 使用前向差分近似，而空间导数 $u_{xx}$ 使用中心差分近似。在一个空间步长为 $\\Delta x$、时间步长为 $\\Delta t$ 的离散网格上，其中 $u_i^n \\approx u(i\\Delta x, n\\Delta t)$，该格式由以下公式给出：\n$$u_i^{n+1} = u_i^n + \\Delta t \\, v_i^n$$\n$$v_i^{n+1} = v_i^n + \\Delta t \\, c^2 \\frac{u_{i+1}^n - 2u_i^n + u_{i-1}^n}{\\Delta x^2}$$\n这些更新利用周期性边界条件，同时应用于所有空间网格点 $i=0, 1, \\dots, N_x-1$。\n\n任何数值格式的一个关键方面是其稳定性。我们通过考虑形式为 $(u_i^n, v_i^n) = (\\hat{u}^n_k, \\hat{v}^n_k) e^{I k x_i}$ 的单个傅里叶模态解来进行 von Neumann 稳定性分析，其中 $k$ 是波数，$I = \\sqrt{-1}$。将此代入格式中，可得到关于傅里叶系数的矩阵方程：\n$$\n\\begin{pmatrix} \\hat{u}^{n+1}_k \\\\ \\hat{v}^{n+1}_k \\end{pmatrix}\n=\nG(k)\n\\begin{pmatrix} \\hat{u}^n_k \\\\ \\hat{v}^n_k \\end{pmatrix}\n$$\n矩阵 $G(k)$ 称为放大矩阵，由下式给出：\n$$\nG(k) = \\begin{pmatrix}\n1 & \\Delta t \\\\\n\\frac{\\Delta t \\, c^2}{\\Delta x^2} (e^{I k \\Delta x} - 2 + e^{-I k \\Delta x}) & 1\n\\end{pmatrix}\n=\n\\begin{pmatrix}\n1 & \\Delta t \\\\\n-\\frac{4 \\Delta t \\, c^2}{\\Delta x^2} \\sin^2\\left(\\frac{k \\Delta x}{2}\\right) & 1\n\\end{pmatrix}\n$$\n为使格式稳定，对所有波数 $k$，$G(k)$ 的谱半径（记为 $\\rho(G(k))$）必须小于或等于 $1$。$G(k)$ 的特征值 $\\lambda$ 可通过特征方程 $\\det(G(k) - \\lambda I_2) = 0$ 求得，其中 $I_2$ 是 $2 \\times 2$ 单位矩阵：\n$$(1-\\lambda)^2 + \\frac{4 \\Delta t^2 c^2}{\\Delta x^2} \\sin^2\\left(\\frac{k \\Delta x}{2}\\right) = 0$$\n解出 $\\lambda$ 得到：\n$$\\lambda_{\\pm} = 1 \\pm I \\, \\frac{2 c \\Delta t}{\\Delta x} \\left|\\sin\\left(\\frac{k \\Delta x}{2}\\right)\\right|$$\n这些特征值的模为：\n$$|\\lambda_{\\pm}| = \\sqrt{1^2 + \\left(\\frac{2 c \\Delta t}{\\Delta x} \\left|\\sin\\left(\\frac{k \\Delta x}{2}\\right)\\right|\\right)^2}$$\n对于任何满足 $\\sin(k \\Delta x/2) \\neq 0$ 的模态，其模 $|\\lambda_{\\pm}|$ 严格大于 1。这证明了用于波动方程的 FTCS 格式是无条件不稳定的。任何包含非零频率分量的初始扰动都将随时间被指数级放大。问题要求通过每步几何放大因子 $r$ 来量化这种放大。\n\n实现过程首先从建立计算网格和参数开始。对于每个测试用例 $(L,c,N_x,\\Delta t,T,\\sigma,m)$，我们定义空间网格 $x_i = i \\Delta x$，其中 $\\Delta x = L/N_x$，$i \\in \\{0, \\dots, N_x-1\\}$。时间步数是 $N_t = \\mathrm{round}(T/\\Delta t)$。\n\n运行两次模拟：\n1.  模拟 A（位移初始化）：初始状态为 $(u^0, v^0)$，其中 $u^0$ 是一个高斯调制的余弦波，$v^0$ 为零。\n2.  模拟 B（速度初始化）：初始状态为 $(u^0, v^0)$，其中 $u^0$ 为零，$v^0$ 具有与模拟 A 中 $u^0$ 相同的空间分布。\n\n对于每次模拟，我们计算初始时刻（$n=0$）和最终时刻（$n=N_t$）的离散 $L^2$ 范数：\n$$\\|(u^n,v^n)\\|_2 = \\left(\\Delta x \\sum_{i=0}^{N_x-1}\\left((u^n_i)^2 + (v^n_i)^2\\right)\\right)^{1/2}$$\n然后，每步几何放大因子 $r$ 计算如下：\n$$r = \\exp\\left(\\frac{\\ln\\|(u^{N_t},v^{N_t})\\|_2 - \\ln\\|(u^0,v^0)\\|_2}{N_t}\\right) = \\left(\\frac{\\|(u^{N_t},v^{N_t})\\|_2}{\\|(u^0,v^0)\\|_2}\\right)^{1/N_t}$$\n这分别为模拟 A 和 B 提供了 $r_{\\mathrm{disp}}$ 和 $r_{\\mathrm{vel}}$。最终结果是它们的绝对差 $\\Delta = |r_{\\mathrm{disp}} - r_{\\mathrm{vel}}|$。\n\n$r_{\\mathrm{disp}}$ 和 $r_{\\mathrm{vel}}$ 之间的预期差异源于放大矩阵 $G(k)$ 的非正规性。一个非正规矩阵 ($G G^H \\neq G^H G$) 可以表现出瞬态增长，即状态向量的范数在由特征值决定的渐近行为主导之前可能会显著增长。两个初始条件 $(u^0, 0)$ 和 $(0, v^0)$ 对应于每个傅里叶模态在相空间中的不同初始向量。在有限的步数 $N_t$ 内，这些向量被不同地放大，导致了不同的有效放大因子 $r$。因此，该问题旨在衡量这种瞬态效应。\n\n数值实现将使用数组来表示场 $u$ 和 $v$。周期性边界条件可以通过对数组进行循环移位操作来高效处理，例如在 Python 中使用 `numpy.roll`。时间演化循环根据 FTCS 方程对数组 $u$ 和 $v$ 进行 $N_t$ 次迭代更新。必须非常小心，确保第 $n+1$ 步的状态仅使用第 $n$ 步的状态来计算。", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Main solver function that runs the specified test cases and prints the results.\n    \"\"\"\n    # Define the test cases from the problem statement.\n    test_cases = [\n        # (L, c, Nx, dt, T, sigma, m)\n        (1.0, 1.0, 256, 1e-4, 5e-2, 5e-2, 0),\n        (1.0, 1.0, 256, 5e-5, 5e-2, 5e-2, 0),\n        (1.0, 1.0, 512, 1e-4, 3e-2, 4e-2, 20),\n        (1.0, 1.0, 64, 5e-4, 2e-1, 8e-2, 5),\n    ]\n\n    results = []\n    for params in test_cases:\n        delta = calculate_delta_for_case(params)\n        results.append(delta)\n\n    # Final print statement in the exact required format.\n    print(f\"[{','.join(map(str, results))}]\")\n\ndef l2_norm(u, v, dx):\n    \"\"\"\n    Computes the discrete L2 norm of the state (u, v).\n    \"\"\"\n    return np.sqrt(dx * (np.sum(u**2) + np.sum(v**2)))\n\ndef run_simulation(L, c, Nx, dt, Nt, u0, v0):\n    \"\"\"\n    Runs a single simulation for a given initial state and returns the amplification factor r.\n    \"\"\"\n    dx = L / Nx\n    u, v = u0.copy(), v0.copy()\n\n    norm_initial = l2_norm(u, v, dx)\n\n    # If initial norm is zero, amplification is undefined. However, per problem\n    # constraints, this will not occur. If it did, amplification factor of 1 is logical.\n    if norm_initial == 0:\n        return 1.0\n\n    # Constant factor for the v update\n    cfl_factor = dt * c**2 / dx**2\n    \n    # Time-stepping loop\n    for _ in range(Nt):\n        # We must use the state at step 'n' to compute the state at 'n+1'.\n        # First, compute the spatial derivative term using u at step 'n'.\n        d2u_dx2_term = np.roll(u, -1) - 2 * u + np.roll(u, 1)\n        \n        # Store the next state in temporary variables to ensure a parallel update.\n        u_next = u + dt * v\n        v_next = v + cfl_factor * d2u_dx2_term\n        \n        u, v = u_next, v_next\n\n    norm_final = l2_norm(u, v, dx)\n\n    # Calculate per-step geometric amplification factor r, using logs for numerical stability.\n    if norm_final <= 0 or norm_initial <= 0:\n        # This case should not be reached with the given unstable scheme.\n        # Fallback to avoid math domain errors.\n        return 1.0\n        \n    r = np.exp((np.log(norm_final) - np.log(norm_initial)) / Nt)\n    \n    return r\n\ndef calculate_delta_for_case(params):\n    \"\"\"\n    Calculates the absolute difference Delta for a single parameter set.\n    \"\"\"\n    L, c, Nx, dt, T, sigma, m = params\n\n    # Derived parameters\n    dx = L / Nx\n    x0 = L / 2\n    km = 2 * np.pi * m / L\n    Nt = int(round(T / dt))\n    \n    # Grid points x_i = i * dx\n    x = np.arange(Nx) * dx\n\n    # Spatial profile for initial conditions\n    gauss_cos_profile = np.exp(-((x - x0)**2) / (2 * sigma**2)) * np.cos(km * (x - x0))\n\n    # --- Simulation A (displacement-initialized) ---\n    u0_A = gauss_cos_profile\n    v0_A = np.zeros(Nx)\n    r_disp = run_simulation(L, c, Nx, dt, Nt, u0_A, v0_A)\n\n    # --- Simulation B (velocity-initialized) ---\n    u0_B = np.zeros(Nx)\n    v0_B = gauss_cos_profile\n    r_vel = run_simulation(L, c, Nx, dt, Nt, u0_B, v0_B)\n\n    # --- Compute the absolute difference ---\n    delta = abs(r_disp - r_vel)\n    \n    return delta\n\nsolve()\n```", "id": "2396360"}, {"introduction": "在充分展示了 FTCS 格式的缺陷之后，是时候构建一个更好的数值方法了。本练习将引导你从分析问题转向构建解决方案，这是一项计算物理中常见的“纸笔”工作。我们将利用时间上的泰勒展开，一步步推导出著名且稳定的二阶精度 Lax-Wendroff 格式。这个练习不仅提供了一个 FTCS 的可靠替代方案，也展示了计算物理学家如何通过理论分析来开发稳健的数值工具。[@problem_id:2396322]", "problem": "考虑一维波动方程 $u_{tt}(x,t)=c^2 u_{xx}(x,t)$，其中波速 $c>0$ 为常数，定义在空间步长为 $\\Delta x$、时间步长为 $\\Delta t$ 的无限均匀网格上。通过定义 $q(x,t)=u_{t}(x,t)$ 和 $r(x,t)=c\\,u_{x}(x,t)$，引入一阶对称双曲系统，使得\n$$\nq_{t}(x,t)=c\\,r_{x}(x,t),\\qquad r_{t}(x,t)=c\\,q_{x}(x,t).\n$$\n设 $x_{j}=j\\,\\Delta x$ 和 $t^{n}=n\\,\\Delta t$，其中 $j$ 和 $n$ 为整数，并将网格函数记为 $q_{j}^{n}\\approx q(x_{j},t^{n})$ 和 $r_{j}^{n}\\approx r(x_{j},t^{n})$。定义库朗数 $\\sigma=c\\,\\Delta t/\\Delta x$。\n\n任务 A：为上述一阶系统在同位网格 $\\{x_{j}\\}$ 上，写出前向时间、中心空间 (FTCS) 显式格式。\n\n任务 B：受 Lax–Wendroff 构造方法的启发，为同一一阶系统推导一个显式的、时间与空间均为二阶精度的单步更新格式。将你的最终格式完全用 $q_{j\\pm 1}^{n}$、$q_{j}^{n}$、$r_{j\\pm 1}^{n}$、$r_{j}^{n}$ 和 $\\sigma$ 表示。\n\n任务 C：指出两种格式中用于更新 $q_{j}^{n+1}$ 和 $r_{j}^{n+1}$ 的空间模板，并指明哪些相邻网格点和场分量直接对每次更新有贡献。\n\n任务 D：对你的二阶格式在无限网格上进行 von Neumann 傅里叶稳定性分析，并确定使得所有傅里叶模式都不被放大的库朗数 $\\sigma$ 的最大值。将最终答案表示为这个最大允许库朗数的精确值。\n\n答案格式要求：作为最终答案，提供最大允许库朗数 $\\sigma$ 的精确实数值（无单位）。不包含任何单位。不要四舍五入。", "solution": "该问题首先需要经过科学合理性和完整性验证。\n\n第 1 步：提取已知条件。\n- 控制偏微分方程为一维波动方程 $u_{tt}(x,t)=c^2 u_{xx}(x,t)$，其中波速 $c>0$ 为常数。\n- 定义域为空间步长为 $\\Delta x$、时间步长为 $\\Delta t$ 的无限均匀网格。\n- 二阶方程被重构为一阶对称双曲系统：\n  $q_{t}(x,t)=c\\,r_{x}(x,t)$\n  $r_{t}(x,t)=c\\,q_{x}(x,t)$\n  其中 $q(x,t)=u_{t}(x,t)$ 且 $r(x,t)=c\\,u_{x}(x,t)$。\n- 网格记法定义为 $x_{j}=j\\,\\Delta x$，$t^{n}=n\\,\\Delta t$，$q_{j}^{n}\\approx q(x_{j},t^{n})$，以及 $r_{j}^{n}\\approx r(x_{j},t^{n})$。\n- 库朗数定义为 $\\sigma=c\\,\\Delta t/\\Delta x$。\n- 指定了四个任务：（A）写出前向时间、中心空间 (FTCS) 格式，（B）推导一个二阶 Lax-Wendroff 型格式，（C）指出两种格式的模板，以及（D）对二阶格式进行 von Neumann 稳定性分析，以找到最大稳定库朗数。\n\n第 2 步：验证。\n该问题具有科学依据，植根于偏微分方程和数值分析等成熟领域。将波动方程转换为一阶系统是一种标准技术。FTCS 和 Lax-Wendroff 格式是求解此类系统的典型方法。von Neumann 稳定性分析是在无限网格上分析有限差分格式稳定性的正确且标准的程序。该问题是适定的，所有必要的定义和参数都已提供。不存在矛盾、模糊或主观因素。该问题是计算物理学中的一个标准练习。\n\n第 3 步：结论。\n问题有效。将提供完整解答。\n\n现在将按顺序解决这些任务。\n\n任务 A：前向时间、中心空间 (FTCS) 格式\nFTCS 格式是通过用前向差分对时间导数进行离散化，用中心差分对空间导数进行离散化来构建的。所有空间导数都在时间层 $n$ 上进行计算。\n时间导数近似为：\n$$\nq_{t} \\approx \\frac{q_{j}^{n+1} - q_{j}^{n}}{\\Delta t}, \\qquad r_{t} \\approx \\frac{r_{j}^{n+1} - r_{j}^{n}}{\\Delta t}\n$$\n空间导数近似为：\n$$\nr_{x} \\approx \\frac{r_{j+1}^{n} - r_{j-1}^{n}}{2\\Delta x}, \\qquad q_{x} \\approx \\frac{q_{j+1}^{n} - q_{j-1}^{n}}{2\\Delta x}\n$$\n将这些近似值代入一阶系统 $q_{t}=c\\,r_{x}$ 和 $r_{t}=c\\,q_{x}$ 可得：\n$$\n\\frac{q_{j}^{n+1} - q_{j}^{n}}{\\Delta t} = c \\frac{r_{j+1}^{n} - r_{j-1}^{n}}{2\\Delta x}\n$$\n$$\n\\frac{r_{j}^{n+1} - r_{j}^{n}}{\\Delta t} = c \\frac{q_{j+1}^{n} - q_{j-1}^{n}}{2\\Delta x}\n$$\n对时间层 $n+1$ 的更新值进行整理，并使用库朗数 $\\sigma = c\\,\\Delta t/\\Delta x$ 的定义，我们得到 FTCS 格式：\n$$\nq_{j}^{n+1} = q_{j}^{n} + \\frac{\\sigma}{2} (r_{j+1}^{n} - r_{j-1}^{n})\n$$\n$$\nr_{j}^{n+1} = r_{j}^{n} + \\frac{\\sigma}{2} (q_{j+1}^{n} - q_{j-1}^{n})\n$$\n\n任务 B：二阶 Lax-Wendroff 型格式\n为了推导一个在时间和空间上都是二阶精度的格式，我们从 $q$ 和 $r$ 在时间上围绕 $t^{n}$ 的泰勒级数展开式开始，展开到二阶项：\n$$\nq_{j}^{n+1} = q_{j}^{n} + \\Delta t (q_{t})_{j}^{n} + \\frac{(\\Delta t)^{2}}{2} (q_{tt})_{j}^{n} + O((\\Delta t)^{3})\n$$\n$$\nr_{j}^{n+1} = r_{j}^{n} + \\Delta t (r_{t})_{j}^{n} + \\frac{(\\Delta t)^{2}}{2} (r_{tt})_{j}^{n} + O((\\Delta t)^{3})\n$$\n接下来，我们使用控制偏微分方程将时间导数替换为空间导数。一阶导数由 $(q_{t})_{j}^{n} = c(r_{x})_{j}^{n}$ 和 $(r_{t})_{j}^{n} = c(q_{x})_{j}^{n}$ 给出。对于二阶导数：\n$$\nq_{tt} = \\frac{\\partial}{\\partial t}(q_{t}) = \\frac{\\partial}{\\partial t}(c\\,r_{x}) = c\\,(r_{t})_{x} = c\\,(c\\,q_{x})_{x} = c^{2}q_{xx}\n$$\n$$\nr_{tt} = \\frac{\\partial}{\\partial t}(r_{t}) = \\frac{\\partial}{\\partial t}(c\\,q_{x}) = c\\,(q_{t})_{x} = c\\,(c\\,r_{x})_{x} = c^{2}r_{xx}\n$$\n将这些代入泰勒展开式：\n$$\nq_{j}^{n+1} = q_{j}^{n} + c\\,\\Delta t (r_{x})_{j}^{n} + \\frac{c^{2}(\\Delta t)^{2}}{2} (q_{xx})_{j}^{n} + O((\\Delta t)^{3})\n$$\n$$\nr_{j}^{n+1} = r_{j}^{n} + c\\,\\Delta t (q_{x})_{j}^{n} + \\frac{c^{2}(\\Delta t)^{2}}{2} (r_{xx})_{j}^{n} + O((\\Delta t)^{3})\n$$\n现在，我们为时间层 $n$ 上的空间导数引入二阶精度的中心有限差分近似：\n$$\n(r_{x})_{j}^{n} \\approx \\frac{r_{j+1}^{n} - r_{j-1}^{n}}{2\\Delta x}, \\qquad (q_{x})_{j}^{n} \\approx \\frac{q_{j+1}^{n} - q_{j-1}^{n}}{2\\Delta x}\n$$\n$$\n(q_{xx})_{j}^{n} \\approx \\frac{q_{j+1}^{n} - 2q_{j}^{n} + q_{j-1}^{n}}{(\\Delta x)^{2}}, \\qquad (r_{xx})_{j}^{n} \\approx \\frac{r_{j+1}^{n} - 2r_{j}^{n} + r_{j-1}^{n}}{(\\Delta x)^{2}}\n$$\n将这些代入展开后的方程，并使用 $\\sigma = c\\,\\Delta t/\\Delta x$，得到 Lax-Wendroff 型格式：\n$$\nq_{j}^{n+1} = q_{j}^{n} + c\\,\\Delta t \\left(\\frac{r_{j+1}^{n} - r_{j-1}^{n}}{2\\Delta x}\\right) + \\frac{c^{2}(\\Delta t)^{2}}{2} \\left(\\frac{q_{j+1}^{n} - 2q_{j}^{n} + q_{j-1}^{n}}{(\\Delta x)^{2}}\\right)\n$$\n$$\nr_{j}^{n+1} = r_{j}^{n} + c\\,\\Delta t \\left(\\frac{q_{j+1}^{n} - q_{j-1}^{n}}{2\\Delta x}\\right) + \\frac{c^{2}(\\Delta t)^{2}}{2} \\left(\\frac{r_{j+1}^{n} - 2r_{j}^{n} + r_{j-1}^{n}}{(\\Delta x)^{2}}\\right)\n$$\n化简后，我们得到最终形式：\n$$\nq_{j}^{n+1} = q_{j}^{n} + \\frac{\\sigma}{2}(r_{j+1}^{n} - r_{j-1}^{n}) + \\frac{\\sigma^{2}}{2}(q_{j+1}^{n} - 2q_{j}^{n} + q_{j-1}^{n})\n$$\n$$\nr_{j}^{n+1} = r_{j}^{n} + \\frac{\\sigma}{2}(q_{j+1}^{n} - q_{j-1}^{n}) + \\frac{\\sigma^{2}}{2}(r_{j+1}^{n} - 2r_{j}^{n} + r_{j-1}^{n})\n$$\n\n任务 C：空间模板\n对于这两种格式，网格点 $j$ 处的更新需要来自前一时间步的相邻点的信息。\n- 对于 FTCS 格式，$q_{j}^{n+1}$ 的计算取决于 $q_{j}^{n}$、$r_{j-1}^{n}$ 和 $r_{j+1}^{n}$。$r_{j}^{n+1}$ 的计算取决于 $r_{j}^{n}$、$q_{j-1}^{n}$ 和 $q_{j+1}^{n}$。用于更新对 $(q_j, r_j)$ 的空间模板涉及网格点 $\\{j-1, j, j+1\\}$。分量是耦合的，$q$ 的更新依赖于 $r$，反之亦然。\n- 对于 Lax-Wendroff 格式，$q_{j}^{n+1}$ 的计算取决于 $q_{j-1}^{n}$、$q_{j}^{n}$、$q_{j+1}^{n}$ 以及 $r_{j-1}^{n}$、$r_{j+1}^{n}$。类似地，$r_{j}^{n+1}$ 的计算取决于 $r_{j-1}^{n}$、$r_{j}^{n}$、$r_{j+1}^{n}$ 以及 $q_{j-1}^{n}$、$q_{j+1}^{n}$。用于更新对 $(q_j, r_j)$ 的空间模板也涉及网格点 $\\{j-1, j, j+1\\}$。更新需要模板中所有三个点的两个场分量 $q$ 和 $r$。\n\n任务 D：二阶格式的 Von Neumann 稳定性分析\n我们分析单个傅里叶模式的放大情况。设解向量为 $\\mathbf{U}_{j}^{n} = \\begin{pmatrix} q_{j}^{n} \\\\ r_{j}^{n} \\end{pmatrix}$。我们假设解的形式为 $\\mathbf{U}_{j}^{n} = \\hat{\\mathbf{U}}^{n}(k) \\exp(i k x_{j})$，其中 $k$ 是波数，$i=\\sqrt{-1}$。设 $\\theta = k \\Delta x$。则 $\\mathbf{U}_{j\\pm 1}^{n} = \\hat{\\mathbf{U}}^{n} \\exp(i k (j\\pm 1)\\Delta x) = \\mathbf{U}_{j}^{n} \\exp(\\pm i\\theta)$。\n将这些形式代入任务 B 中的格式：\n$$\n\\hat{q}^{n+1}\\exp(ij\\theta) = \\left[ \\hat{q}^{n} + \\frac{\\sigma}{2}(\\hat{r}^{n}e^{i\\theta} - \\hat{r}^{n}e^{-i\\theta}) + \\frac{\\sigma^{2}}{2}(\\hat{q}^{n}e^{i\\theta} - 2\\hat{q}^{n} + \\hat{q}^{n}e^{-i\\theta}) \\right] \\exp(ij\\theta)\n$$\n$$\n\\hat{r}^{n+1}\\exp(ij\\theta) = \\left[ \\hat{r}^{n} + \\frac{\\sigma}{2}(\\hat{q}^{n}e^{i\\theta} - \\hat{q}^{n}e^{-i\\theta}) + \\frac{\\sigma^{2}}{2}(\\hat{r}^{n}e^{i\\theta} - 2\\hat{r}^{n} + \\hat{r}^{n}e^{-i\\theta}) \\right] \\exp(ij\\theta)\n$$\n两边同除以 $\\exp(ij\\theta)$ 并使用 $e^{i\\theta} - e^{-i\\theta} = 2i\\sin\\theta$ 和 $e^{i\\theta} + e^{-i\\theta} = 2\\cos\\theta$：\n$$\n\\hat{q}^{n+1} = \\hat{q}^{n} + \\frac{\\sigma}{2}(2i\\sin\\theta)\\hat{r}^{n} + \\frac{\\sigma^{2}}{2}(2\\cos\\theta - 2)\\hat{q}^{n} = (1 + \\sigma^{2}(\\cos\\theta-1))\\hat{q}^{n} + (i\\sigma\\sin\\theta)\\hat{r}^{n}\n$$\n$$\n\\hat{r}^{n+1} = \\hat{r}^{n} + \\frac{\\sigma}{2}(2i\\sin\\theta)\\hat{q}^{n} + \\frac{\\sigma^{2}}{2}(2\\cos\\theta - 2)\\hat{r}^{n} = (i\\sigma\\sin\\theta)\\hat{q}^{n} + (1 + \\sigma^{2}(\\cos\\theta-1))\\hat{r}^{n}\n$$\n这可以写成矩阵形式 $\\hat{\\mathbf{U}}^{n+1} = G(\\theta) \\hat{\\mathbf{U}}^{n}$，其中 $G(\\theta)$ 是放大矩阵：\n$$\nG(\\theta) = \\begin{pmatrix} 1 - \\sigma^{2}(1-\\cos\\theta) & i\\sigma\\sin\\theta \\\\ i\\sigma\\sin\\theta & 1 - \\sigma^{2}(1-\\cos\\theta) \\end{pmatrix}\n$$\n为了保证稳定性，对于所有 $\\theta \\in [-\\pi, \\pi]$，$G(\\theta)$ 的谱半径必须小于或等于 1。设 $\\lambda$ 是 $G(\\theta)$ 的一个特征值。特征方程为 $\\det(G-\\lambda I) = 0$。\n$$\n(1 - \\sigma^{2}(1-\\cos\\theta) - \\lambda)^{2} - (i\\sigma\\sin\\theta)^{2} = 0\n$$\n$$\n(1 - \\sigma^{2}(1-\\cos\\theta) - \\lambda)^{2} + \\sigma^{2}\\sin^{2}\\theta = 0\n$$\n特征值为 $\\lambda_{\\pm} = 1 - \\sigma^{2}(1-\\cos\\theta) \\pm \\sqrt{-\\sigma^{2}\\sin^{2}\\theta}$，可得：\n$$\n\\lambda_{\\pm} = 1 - \\sigma^{2}(1-\\cos\\theta) \\pm i\\sigma\\sin\\theta\n$$\n稳定性条件是 $|\\lambda_{\\pm}| \\le 1$。我们计算其模的平方：\n$$\n|\\lambda_{\\pm}|^{2} = \\left(1 - \\sigma^{2}(1-\\cos\\theta)\\right)^{2} + (\\sigma\\sin\\theta)^{2}\n$$\n$$\n|\\lambda_{\\pm}|^{2} = 1 - 2\\sigma^{2}(1-\\cos\\theta) + \\sigma^{4}(1-\\cos\\theta)^{2} + \\sigma^{2}\\sin^{2}\\theta\n$$\n使用 $\\sin^{2}\\theta = 1-\\cos^{2}\\theta = (1-\\cos\\theta)(1+\\cos\\theta)$：\n$$\n|\\lambda_{\\pm}|^{2} = 1 - 2\\sigma^{2}(1-\\cos\\theta) + \\sigma^{4}(1-\\cos\\theta)^{2} + \\sigma^{2}(1-\\cos\\theta)(1+\\cos\\theta)\n$$\n提出公因式 $(1-\\cos\\theta)$：\n$$\n|\\lambda_{\\pm}|^{2} = 1 + (1-\\cos\\theta) \\left[ -2\\sigma^{2} + \\sigma^{4}(1-\\cos\\theta) + \\sigma^{2}(1+\\cos\\theta) \\right]\n$$\n$$\n|\\lambda_{\\pm}|^{2} = 1 + (1-\\cos\\theta) \\left[ -2\\sigma^{2} + \\sigma^{4} - \\sigma^{4}\\cos\\theta + \\sigma^{2} + \\sigma^{2}\\cos\\theta \\right]\n$$\n$$\n|\\lambda_{\\pm}|^{2} = 1 + (1-\\cos\\theta) \\left[ -\\sigma^{2} + \\sigma^{4} - (\\sigma^{4}-\\sigma^{2})\\cos\\theta \\right]\n$$\n$$\n|\\lambda_{\\pm}|^{2} = 1 + (1-\\cos\\theta) \\left[ -\\sigma^{2}(1-\\sigma^{2}) + \\sigma^{2}(1-\\sigma^{2})\\cos\\theta \\right]\n$$\n$$\n|\\lambda_{\\pm}|^{2} = 1 - \\sigma^{2}(1-\\sigma^{2})(1-\\cos\\theta)^{2}\n$$\n稳定性条件 $|\\lambda_{\\pm}|^{2} \\le 1$ 要求：\n$$\n1 - \\sigma^{2}(1-\\sigma^{2})(1-\\cos\\theta)^{2} \\le 1\n$$\n$$\n-\\sigma^{2}(1-\\sigma^{2})(1-\\cos\\theta)^{2} \\le 0\n$$\n因为 $\\sigma = c\\Delta t/\\Delta x > 0$，所以 $\\sigma^{2} > 0$。并且，$(1-\\cos\\theta)^{2} \\ge 0$ 对所有 $\\theta$ 成立。因此，为了使不等式对所有 $\\theta$ 成立，我们必须有：\n$$\n-(1-\\sigma^{2}) \\le 0 \\implies 1-\\sigma^{2} \\ge 0 \\implies \\sigma^{2} \\le 1\n$$\n由于 $\\sigma$ 是正数，稳定性条件是 $0 < \\sigma \\le 1$。\n该格式保持稳定的库朗数 $\\sigma$ 的最大值为 1。", "answer": "$$\\boxed{1}$$", "id": "2396322"}]}