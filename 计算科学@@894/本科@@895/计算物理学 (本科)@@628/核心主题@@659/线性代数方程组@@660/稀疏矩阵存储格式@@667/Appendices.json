{"hands_on_practices": [{"introduction": "为了真正掌握稀疏矩阵的存储格式，我们首先必须学会“阅读”并理解它们的结构。本练习提供了一项基础实践：从压缩稀疏行（CSR）表示中重建完整的密集矩阵。通过手动解码 `V`、`C` 和 `R` 数组，你将对这些组件如何协同工作以仅高效存储非零元素建立具体的理解。[@problem_id:2204554]", "problem": "在许多科学和工程应用中，矩阵通常是“稀疏”的，即其大部分元素为零。存储所有这些零的效率很低。压缩稀疏行（CSR）格式是存储稀疏矩阵的一种常用方法，它使用三个一维数组。\n\n考虑一个大小为 $4 \\times 4$ 的稀疏矩阵 $A$。在CSR格式（使用基于0的索引）中，该矩阵由以下三个数组表示：\n1.  一个数组 `V`，包含 $A$ 的非零元素，逐行从左到右读取。\n2.  一个数组 `C`，包含 `V` 中每个元素对应的列索引。\n3.  一个大小为 $m+1$（其中 $m$ 为行数）的数组 `R`（行指针），其中第 $i$ 个元素指示第 $i$ 行的数据在 `V` 和 `C` 中开始的索引。`R` 的最后一个元素是非零元素的总数。\n\n对于我们的 $4 \\times 4$ 矩阵 $A$，给出的三个数组如下：\n- `V = [5.1, -1.2, 2.0, -3.5, 4.0, 9.8]`\n- `C = [1, 3, 0, 2, 3, 0]`\n- `R = [0, 2, 3, 5, 6]`\n\n重建原始的 $4 \\times 4$ 稠密矩阵 $A$。以一个 $4 \\times 4$ 矩阵的形式给出您的答案。", "solution": "我们使用基于0索引的CSR定义。对于每个行索引 $i \\in \\{0,1,2,3\\}$，第 $i$ 行的非零项存储在 `V` 和 `C` 中，其索引 $j$ 的范围是从 $R[i]$ 到 $R[i+1]-1$。其中，列索引为 $C[j]$，值为 $V[j]$。最后一个元素 $R[4]=6$ 等于非零元素的总数，这与 $\\lvert V \\rvert=6$ 一致。\n\n第 $0$ 行：索引 $j=R[0]\\ldots R[1]-1=0\\ldots 1$。\n- $j=0$：$C[0]=1$，$V[0]=5.1$ 得到 $A_{0,1}=5.1$。\n- $j=1$：$C[1]=3$，$V[1]=-1.2$ 得到 $A_{0,3}=-1.2$。\n因此第 $0$ 行为 $[0,\\,5.1,\\,0,\\,-1.2]$。\n\n第 $1$ 行：索引 $j=R[1]\\ldots R[2]-1=2\\ldots 2$。\n- $j=2$：$C[2]=0$，$V[2]=2.0$ 得到 $A_{1,0}=2.0$。\n因此第 $1$ 行为 $[2.0,\\,0,\\,0,\\,0]$。\n\n第 $2$ 行：索引 $j=R[2]\\ldots R[3]-1=3\\ldots 4$。\n- $j=3$：$C[3]=2$，$V[3]=-3.5$ 得到 $A_{2,2}=-3.5$。\n- $j=4$：$C[4]=3$，$V[4]=4.0$ 得到 $A_{2,3}=4.0$。\n因此第 $2$ 行为 $[0,\\,0,\\,-3.5,\\,4.0]$。\n\n第 $3$ 行：索引 $j=R[3]\\ldots R[4]-1=5\\ldots 5$。\n- $j=5$：$C[5]=0$，$V[5]=9.8$ 得到 $A_{3,0}=9.8$。\n因此第 $3$ 行为 $[9.8,\\,0,\\,0,\\,0]$。\n\n因此，重建的稠密矩阵 $A$ 为\n$$\n\\begin{pmatrix}\n0 & 5.1 & 0 & -1.2 \\\\\n2.0 & 0 & 0 & 0 \\\\\n0 & 0 & -3.5 & 4.0 \\\\\n9.8 & 0 & 0 & 0\n\\end{pmatrix}.\n$$", "answer": "$$\\boxed{\\begin{pmatrix}0 & 5.1 & 0 & -1.2 \\\\ 2.0 & 0 & 0 & 0 \\\\ 0 & 0 & -3.5 & 4.0 \\\\ 9.8 & 0 & 0 & 0\\end{pmatrix}}$$", "id": "2204554"}, {"introduction": "稀疏格式的真正威力在于能够高效执行复杂运算，而无需承受使用密集矩阵带来的高昂成本。本实践要求你计算转置向量积 $y = A^T x$，其中矩阵 $A$ 以 CSR 格式存储，这是迭代求解器中的一项常见任务。这个练习将展示如何在一个面向行的数据结构中，高效地执行一个本质上面向列的计算，从而突显稀疏存储所带来的多功能性和巧妙算法。[@problem_id:2204555]", "problem": "在数值线性代数中，稀疏矩阵通常以特殊格式存储，以节省内存和计算成本。其中最常见的一种是压缩稀疏行（CSR）格式。一个大小为 $m \\times n$ 的稀疏矩阵 $A$ 由三个使用从0开始索引的一维数组表示：\n\n1.  `values`：一个包含 $A$ 的所有非零元素的数组，按行主序排列。\n2.  `col_indices`：一个与 `values` 大小相同的数组，用于存储每个相应非零值的列索引。\n3.  `row_ptr`：一个大小为 $m+1$ 的数组。第 `i` 行（其中 $0 \\le i < m$）的元素从 `values[row_ptr[i]]` 开始，到 `values[row_ptr[i+1] - 1]` 结束。最后一个元素 `row_ptr[m]` 存储了非零元素的总数。\n\n考虑一个大小为 $4 \\times 5$ 的稀疏矩阵 $A$，它以CSR格式由以下数组表示：\n`values` = `[2.0, -1.0, 3.0, 5.0, 1.0, 4.0, -3.0, 2.0]`\n`col_indices` = `[1, 3, 0, 4, 1, 2, 0, 3]`\n`row_ptr` = `[0, 2, 4, 6, 8]`\n\n另外给定一个向量 $x = [1.0, 0.5, -2.0, -1.0]^T$。\n\n你的任务是计算转置向量积 $y = A^T x$，而无需显式构造矩阵 $A$ 或其转置 $A^T$。确定结果向量 $y$ 的分量。你的答案应该是 $y$ 的分量，按从 $y_0$ 到 $y_4$ 的顺序列出。", "solution": "给定一个CSR格式的稀疏矩阵 $A \\in \\mathbb{R}^{4 \\times 5}$，其\n$\\text{values} = [2.0, -1.0, 3.0, 5.0, 1.0, 4.0, -3.0, 2.0]$，$\\text{col\\_indices} = [1, 3, 0, 4, 1, 2, 0, 3]$，和 $\\text{row\\_ptr} = [0, 2, 4, 6, 8]$，以及一个向量 $x = [1.0, 0.5, -2.0, -1.0]^{T}$。目标是计算 $y = A^{T} x$ 而不生成 $A$ 或 $A^{T}$。根据转置矩阵与向量相乘的定义，每个分量满足\n$$\ny_{j} = \\sum_{i=0}^{3} A_{i,j} x_{i} \\quad \\text{，其中 } j \\in \\{0,1,2,3,4\\}。\n$$\n在CSR格式中，对于每一行 $i$，非零元位于从 $\\text{row\\_ptr}[i]$ 到 $\\text{row\\_ptr}[i+1]-1$ 的索引 $k$ 处，其列为 $j = \\text{col\\_indices}[k]$，值为 $A_{i,j} = \\text{values}[k]$。因此我们可以累加\n$$\ny_{j} \\mathrel{+}= \\text{values}[k] \\, x_{i} \\quad \\text{，对每个非零元 } (i,j)。\n$$\n初始化 $y = [0,0,0,0,0]$。逐行处理：\n\n第 $i=0$ 行使用 $k \\in \\{0,1\\}$，因为 $\\text{row\\_ptr}[0]=0$ 且 $\\text{row\\_ptr}[1]=2$，其中 $x_{0} = 1.0$。\n- 对于 $k=0$：$j=\\text{col\\_indices}[0]=1$，$\\text{values}[0]=2.0$，所以 $y_{1} \\mathrel{+}= 2.0 \\cdot 1.0 = 2.0$。\n- 对于 $k=1$：$j=\\text{col\\_indices}[1]=3$，$\\text{values}[1]=-1.0$，所以 $y_{3} \\mathrel{+}= (-1.0) \\cdot 1.0 = -1.0$。\n\n第 $i=1$ 行使用 $k \\in \\{2,3\\}$，其中 $x_{1} = 0.5$。\n- 对于 $k=2$：$j=\\text{col\\_indices}[2]=0$，$\\text{values}[2]=3.0$，所以 $y_{0} \\mathrel{+}= 3.0 \\cdot 0.5 = 1.5$。\n- 对于 $k=3$：$j=\\text{col\\_indices}[3]=4$，$\\text{values}[3]=5.0$，所以 $y_{4} \\mathrel{+}= 5.0 \\cdot 0.5 = 2.5$。\n\n第 $i=2$ 行使用 $k \\in \\{4,5\\}$，其中 $x_{2} = -2.0$。\n- 对于 $k=4$：$j=\\text{col\\_indices}[4]=1$，$\\text{values}[4]=1.0$，所以 $y_{1} \\mathrel{+}= 1.0 \\cdot (-2.0) = -2.0$。\n- 对于 $k=5$：$j=\\text{col\\_indices}[5]=2$，$\\text{values}[5]=4.0$，所以 $y_{2} \\mathrel{+}= 4.0 \\cdot (-2.0) = -8.0$。\n\n第 $i=3$ 行使用 $k \\in \\{6,7\\}$，其中 $x_{3} = -1.0$。\n- 对于 $k=6$：$j=\\text{col\\_indices}[6]=0$，$\\text{values}[6]=-3.0$，所以 $y_{0} \\mathrel{+}= (-3.0) \\cdot (-1.0) = 3.0$。\n- 对于 $k=7$：$j=\\text{col\\_indices}[7]=3$，$\\text{values}[7]=2.0$，所以 $y_{3} \\mathrel{+}= 2.0 \\cdot (-1.0) = -2.0$。\n\n按分量将贡献值相加，得到\n$$\ny_{0} = 1.5 + 3.0 = 4.5,\\quad\ny_{1} = 2.0 - 2.0 = 0.0,\\quad\ny_{2} = -8.0,\\quad\ny_{3} = -1.0 - 2.0 = -3.0,\\quad\ny_{4} = 2.5.\n$$\n因此，\n$$\ny = \\begin{pmatrix} 4.5 \\\\ 0.0 \\\\ -8.0 \\\\ -3.0 \\\\ 2.5 \\end{pmatrix}.\n$$", "answer": "$$\\boxed{\\begin{pmatrix}4.5 \\\\ 0.0 \\\\ -8.0 \\\\ -3.0 \\\\ 2.5\\end{pmatrix}}$$", "id": "2204555"}, {"introduction": "理解不同稀疏格式之间的关系是编写灵活高效代码的关键。这最后一个实践将探讨压缩稀疏行（CSR）和压缩稀疏列（CSC）格式之间优雅的对偶性。你将发现，对一个以 CSR 格式存储的矩阵进行转置，可以通过简单地将其数据数组重新解释为 CSC 格式的矩阵来实现，这使得转置成为一个几乎“无成本”的操作，并揭示了一种深刻的结构对称性。[@problem_id:2204588]", "problem": "在许多计算领域，例如科学计算和网络分析中，矩阵通常是“稀疏”的，这意味着它们的大多数元素为零。为了节省内存和计算时间，这些矩阵以专门的格式存储。\n\n其中一种格式是压缩稀疏行（Compressed Sparse Row, CSR）表示法，它使用三个一维数组来存储矩阵的非零元素。对于一个有 `NNZ` 个非零元素的 $M \\times N$ 矩阵，CSR 格式由以下部分定义：\n1.  `values`：一个长度为 `NNZ` 的浮点数数组，按行存储矩阵的非零元素。\n2.  `col_indices`：一个长度为 `NNZ` 的整数数组，存储 `values` 数组中每个对应元素的列索引。在每一行内，列索引按升序排序。\n3.  `row_pointers`：一个长度为 $M+1$ 的整数数组。条目 `row_pointers[i]` 给出了第 `i` 行的元素在 `values` 数组中的起始索引。最后一个元素 `row_pointers[M]` 存储了非零元素的总数 `NNZ`。\n\n另一种常见格式是压缩稀疏列（Compressed Sparse Column, CSC）表示法，它与 CSR 类似，但是按列存储矩阵。对于一个有 `NNZ` 个非零元素的 $P \\times Q$ 矩阵，CSC 格式如下：\n1.  `values`：一个长度为 `NNZ` 的浮点数数组，按列存储非零元素。\n2.  `row_indices`：一个长度为 `NNZ` 的整数数组，存储 `values` 中每个元素的行索引。在每一列内，行索引按升序排序。\n3.  `col_pointers`：一个长度为 $Q+1$ 的整数数组，其中 `col_pointers[j]` 给出第 `j` 列在 `values` 中的起始索引。\n\n考虑一个表示加权有向交互图的 $5 \\times 5$ 矩阵 $A$。该矩阵由其从0开始索引的 CSR 表示法给出，包含以下数组：\n`values` = `[10.0, 12.0, 5.0, 1.0, 7.0, 8.0, 2.0]`\n`col_indices` = `[1, 4, 3, 0, 2, 3, 1]`\n`row_pointers` = `[0, 2, 3, 4, 6, 7]`\n\n你的任务是确定该矩阵的转置 $A^T$ 的 CSC 表示法。设 $A^T$ 的 CSC 表示法的三个数组为 $V_T$、 $R_T$ 和 $C_T$，分别对应于 `values`、`row_indices` 和 `col_pointers` 数组。\n\n计算 $V_T$ 中所有元素的和、$R_T$ 中所有元素的和以及 $C_T$ 中所有元素的和。将你的答案以一组三个数的形式呈现。", "solution": "我们给定一个 CSR 格式的矩阵 $A \\in \\mathbb{R}^{5 \\times 5}$，其数组如下：\n$$\\text{values} = [10.0,\\, 12.0,\\, 5.0,\\, 1.0,\\, 7.0,\\, 8.0,\\, 2.0],$$\n$$\\text{col\\_indices} = [1,\\, 4,\\, 3,\\, 0,\\, 2,\\, 3,\\, 1],$$\n$$\\text{row\\_pointers} = [0,\\, 2,\\, 3,\\, 4,\\, 6,\\, 7].$$\n要确定 $A^T$ 的 CSC 表示，我们需要按列优先顺序列出 $A^T$ 的非零元素。$A^T$ 的列主序等同于 $A$ 的行主序。由于给定的 CSR 格式已经按行主序（并在每行内按列索引排序）存储了 $A$ 的非零元素，因此 $A^T$ 的 CSC 表示中的值和行索引数组将与 $A$ 的 CSR 表示中的值和列索引数组具有相同的顺序。\n\n具体来说， $A^T$ 的 CSC 表示由以下数组 $(V_T, R_T, C_T)$ 构成：\n1.  **$V_T$ (values):** $A^T$ 的非零值，按列主序排列。这与 $A$ 的非零值按行主序排列是相同的。因此，$V_T = \\text{values}$。\n2.  **$R_T$ (row_indices):** $A^T$ 中每个值的行索引。$A^T$ 中 $(j,i)$ 处的值对应于 $A$ 中 $(i,j)$ 处的值。因此，$A^T$ 的行索引 $j$ 对应于 $A$ 的列索引。所以，$R_T = \\text{col\\_indices}$。\n3.  **$C_T$ (col_pointers):** 指向每列数据在 $V_T$ 和 $R_T$ 中起始位置的指针。$A^T$ 的第 $j$ 列对应于 $A$ 的第 $j$ 行。因此，指向 $A^T$ 列的指针与指向 $A$ 行的指针相同。所以，$C_T = \\text{row\\_pointers}$。\n\n因此，我们有：\n$$V_{T} = [10.0,\\, 12.0,\\, 5.0,\\, 1.0,\\, 7.0,\\, 8.0,\\, 2.0],$$\n$$R_{T} = [1,\\, 4,\\, 3,\\, 0,\\, 2,\\, 3,\\, 1],$$\n$$C_{T} = [0,\\, 2,\\, 3,\\, 4,\\, 6,\\, 7].$$\n\n我们现在计算所需的和：\n$$\\sum V_{T} = 10.0 + 12.0 + 5.0 + 1.0 + 7.0 + 8.0 + 2.0 = 45.0,$$\n$$\\sum R_{T} = 1 + 4 + 3 + 0 + 2 + 3 + 1 = 14,$$\n$$\\sum C_{T} = 0 + 2 + 3 + 4 + 6 + 7 = 22.$$\n因此，所求的三元组是 $\\begin{pmatrix}45.0 & 14 & 22\\end{pmatrix}$。", "answer": "$$\\boxed{\\begin{pmatrix}45.0 & 14 & 22\\end{pmatrix}}$$", "id": "2204588"}]}