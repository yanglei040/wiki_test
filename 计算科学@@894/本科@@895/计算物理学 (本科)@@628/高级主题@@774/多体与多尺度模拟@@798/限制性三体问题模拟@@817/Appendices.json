{"hands_on_practices": [{"introduction": "为了计算的便利性和数值稳定性，天体力学仿真通常在无量纲的坐标系中进行。然而，为了让仿真结果在真实世界（例如地月系统）中具有意义，我们必须掌握将这些无量纲数据转换回物理单位（如千米和秒）的方法。这个练习将引导你完成这一关键的实践步骤，将抽象的数学模型与可观测的物理现实联系起来 [@problem_id:2223530]。", "problem": "一名学生正在基于圆形限制性三体问题（CR3BP），通过数值模拟来分析一艘小型航天器在地月系统中的轨道。在这个模型中，地球和月球被视为质点，绕着它们的共同质心作圆周运动。\n\n该模拟使用一个无量纲的旋转坐标系，其中原点位于质心，x轴始终从地球指向月球，z轴平行于地月系统的角速度矢量。\n\n模拟中的单位按如下方式进行归一化：\n- 长度单位是地球和月球之间的平均距离 $D$。\n- 质量单位是地球和月球的质量之和 $M_E + M_M$。\n- 时间单位的选取使得旋转坐标系的角速度 $\\Omega$ 的无量纲值为1。\n\n在某一特定时刻，模拟报告航天器的无量纲位置矢量为 $\\vec{\\tilde{r}} = (1.160, 0.050, -0.020)$，其*相对于旋转坐标系*的无量纲速度矢量为 $\\vec{\\tilde{v}}_{rot} = (0.100, -0.250, 0.080)$。\n\n使用下面提供的物理常数，计算航天器在非旋转惯性系中的速度大小（即其速率），该惯性系的原点也位于地月质心。\n\n物理常数：\n- 引力常数，$G = 6.674 \\times 10^{-11} \\text{ m}^3 \\text{kg}^{-1} \\text{s}^{-2}$\n- 地球质量，$M_E = 5.972 \\times 10^{24} \\text{ kg}$\n- 月球质量，$M_M = 7.342 \\times 10^{22} \\text{ kg}$\n- 地月平均距离，$D = 3.844 \\times 10^{8} \\text{ m}$\n\n请将您的答案以千米每秒（km/s）为单位表示，并四舍五入到三位有效数字。", "solution": "在旋转坐标系中，惯性速度是旋转坐标系中的速度与坐标系旋转贡献项之和：\n$$\\vec{v}_{\\text{inertial}} = \\vec{v}_{\\text{rot}} + \\vec{\\Omega} \\times \\vec{r}.$$\n在所述的无量纲CR3BP单位中，角速度矢量为 $\\tilde{\\vec{\\Omega}} = (0,0,1)$，且给定的矢量是无量纲的。因此，\n$$\\vec{\\tilde{v}}_{\\text{inertial}} = \\vec{\\tilde{v}}_{\\text{rot}} + \\tilde{\\vec{\\Omega}} \\times \\vec{\\tilde{r}}.$$\n已知 $\\vec{\\tilde{r}} = (1.160,\\,0.050,\\,-0.020)$ 和 $\\vec{\\tilde{v}}_{\\text{rot}} = (0.100,\\,-0.250,\\,0.080)$，并利用 $\\tilde{\\vec{\\Omega}} \\times \\vec{\\tilde{r}} = (-\\tilde{y},\\,\\tilde{x},\\,0)$，我们得到\n$$(\\tilde{\\vec{\\Omega}} \\times \\vec{\\tilde{r}}) = (-0.050,\\,1.160,\\,0),$$\n$$\\vec{\\tilde{v}}_{\\text{inertial}} = (0.100-0.050,\\,-0.250+1.160,\\,0.080+0) = (0.050,\\,0.910,\\,0.080).$$\n其无量纲大小为\n$$|\\vec{\\tilde{v}}_{\\text{inertial}}| = \\sqrt{0.050^{2} + 0.910^{2} + 0.080^{2}} = \\sqrt{0.0025 + 0.8281 + 0.0064} = \\sqrt{0.837} \\approx 0.914877.$$\n\n为了转换为物理单位，注意所选的无量纲化方法设定了时间尺度，使得无量纲角速度为单位1。物理上的平均角速度是\n$$\\Omega = \\sqrt{\\frac{G(M_{E}+M_{M})}{D^{3}}},$$\n所以时间单位是 $T = \\Omega^{-1}$，速度单位是\n$$U = \\frac{D}{T} = D\\,\\Omega = \\sqrt{\\frac{G(M_{E}+M_{M})}{D}}.$$\n因此物理速率为\n$$v_{\\text{phys}} = U\\,|\\vec{\\tilde{v}}_{\\text{inertial}}| = \\sqrt{\\frac{G(M_{E}+M_{M})}{D}}\\;|\\vec{\\tilde{v}}_{\\text{inertial}}|.$$\n代入给定的常数，\n$$G(M_{E}+M_{M}) = (6.674 \\times 10^{-11})\\,(5.972 \\times 10^{24} + 7.342 \\times 10^{22}) \\text{ m}^{3}\\text{s}^{-2} \\approx 4.034713308 \\times 10^{14},$$\n$$\\frac{G(M_{E}+M_{M})}{D} \\approx \\frac{4.034713308 \\times 10^{14}}{3.844 \\times 10^{8}} \\approx 1.04961324 \\times 10^{6} \\text{ m}^{2}\\text{s}^{-2},$$\n$$U = \\sqrt{1.04961324 \\times 10^{6}} \\text{ m/s} \\approx 1.02450634 \\times 10^{3} \\text{ m/s}.$$\n因此\n$$v_{\\text{phys}} \\approx (1.02450634 \\times 10^{3} \\text{ m/s}) \\times 0.914877 \\approx 9.372972868 \\times 10^{2} \\text{ m/s} = 0.9372972868 \\text{ km/s}.$$\n四舍五入到三位有效数字，得到 $0.937$ km/s。", "answer": "$$\\boxed{0.937}$$", "id": "2223530"}, {"introduction": "雅可比积分是限制性三体问题 ($CR3BP$) 中的一个核心守恒量，其地位类似于简单系统中的能量。它定义了所谓的“零速度面”，从而限制了第三天体的运动区域。本练习要求你应用这一定律，通过计算必要的初始条件，将一个粒子放置在特定的能量水平上，这是设置仿真以研究稳定轨道或混沌运动等现象时的常见任务 [@problem_id:2060444]。", "problem": "考虑一个行星系统模型，该模型包含两个质量分别为 $m_1$ 和 $m_2$ 的主天体，它們围绕共同的质心做圆形轨道运动，以及第三个质量可忽略不计的测试粒子，在该引力场中运动。该系统在一个共转参考系中进行分析，该参考系与两个主天体以相同的恒定角速度 $\\omega$ 旋转。\n\n我们使用一套归一化单位，其中引力常数 $G=1$，主天体质量之和 $m_1+m_2=1$，主天体之间的恒定距离 $D=1$。在这些单位中，参考系的角速度变为 $\\omega=1$。天体的运动被限制在一个平面内。\n\n设质量参数定义为 $\\mu = \\frac{m_2}{m_1+m_2}$。以质心为原点 $(0,0)$，两个主天体的位置固定在 x 轴上，质量为 $m_1=1-\\mu$ 的天体位于 $(-\\mu, 0)$，质量为 $m_2=\\mu$ 的天体位于 $(1-\\mu, 0)$。\n\n对于在这个旋转参考系中位置为 $(x,y)$、速度为 $(v_x, v_y)$ 的测试粒子，一个称为雅可比积分的守恒量由下式给出：\n$$K = (x^2+y^2) + 2\\left(\\frac{1-\\mu}{r_1} + \\frac{\\mu}{r_2}\\right) - (v_x^2+v_y^2)$$\n其中 $r_1$ 和 $r_2$ 分别是测试粒子到质量为 $m_1$ 和 $m_2$ 的天体的距离。\n\n假设我们正在建立一个数值模拟。第一个测试粒子被静置（在旋转参考系中速度为零）于点 $P_1 = \\left(\\frac{1}{2}-\\mu, \\frac{\\sqrt{3}}{2}\\right)$。第二个测试粒子被放置在点 $P_2 = (1-\\mu+d, 0)$，其中 $d$ 是一个小的正数距离。给这个粒子一个完全沿 y 轴方向的初始速度。\n\n确定必须给予在 $P_2$ 点的第二个粒子的初始速度大小，以使其具有与在 $P_1$ 点的第一个粒子相同的雅可比积分 $K$ 值。请用质量参数 $\\mu$ 和距离 $d$ 将您的答案表示为单个闭式解析表达式。", "solution": "我们利用旋转参考系中雅可比积分 $K$ 的守恒性：\n$$\nK=(x^{2}+y^{2})+2\\left(\\frac{1-\\mu}{r_{1}}+\\frac{\\mu}{r_{2}}\\right)-(v_{x}^{2}+v_{y}^{2}).\n$$\n对于在 $P_{1}=\\left(\\frac{1}{2}-\\mu,\\frac{\\sqrt{3}}{2}\\right)$ 点且速度为零的第一个粒子，我们计算它到位于 $(-\\mu,0)$ 和 $(1-\\mu,0)$ 的主天体的距离。距离的平方为\n$$\nr_{1}^{2}=\\left(\\frac{1}{2}\\right)^{2}+\\left(\\frac{\\sqrt{3}}{2}\\right)^{2}=1,\\quad r_{2}^{2}=\\left(-\\frac{1}{2}\\right)^{2}+\\left(\\frac{\\sqrt{3}}{2}\\right)^{2}=1,\n$$\n因此 $r_{1}=r_{2}=1$。此外，\n$$\nx_{1}^{2}+y_{1}^{2}=\\left(\\frac{1}{2}-\\mu\\right)^{2}+\\left(\\frac{\\sqrt{3}}{2}\\right)^{2}=\\mu^{2}-\\mu+1.\n$$\n因此，\n$$\nK_{1}=(\\mu^{2}-\\mu+1)+2\\left((1-\\mu)+\\mu\\right)=\\mu^{2}-\\mu+3.\n$$\n\n对于在 $P_{2}=(1-\\mu+d,0)$ 点且速度大小为 $v$、方向纯沿 y 轴（因此 $v_{x}=0$, $v_{y}=\\pm v$）的第二个粒子，我们有\n$$\nx_{2}^{2}+y_{2}^{2}=(1-\\mu+d)^{2},\\quad r_{1}=|(1-\\mu+d)-(-\\mu)|=1+d,\\quad r_{2}=|(1-\\mu+d)-(1-\\mu)|=d.\n$$\n因此其雅可比积分是\n$$\nK_{2}=(1-\\mu+d)^{2}+2\\left(\\frac{1-\\mu}{1+d}+\\frac{\\mu}{d}\\right)-v^{2}.\n$$\n令 $K_{2}=K_{1}$ 得\n$$\nv^{2}=(1-\\mu+d)^{2}+2\\left(\\frac{1-\\mu}{1+d}+\\frac{\\mu}{d}\\right)-(\\mu^{2}-\\mu+3),\n$$\n所以所需的速度大小为\n$$\nv=\\sqrt{(1-\\mu+d)^{2}+2\\left(\\frac{1-\\mu}{1+d}+\\frac{\\mu}{d}\\right)-(\\mu^{2}-\\mu+3)}.\n$$\n该表达式仅取决于 $\\mu$ 和 $d$，符合要求。", "answer": "$$\\boxed{\\sqrt{(1-\\mu+d)^{2}+2\\left(\\frac{1-\\mu}{1+d}+\\frac{\\mu}{d}\\right)-\\left(\\mu^{2}-\\mu+3\\right)}}$$", "id": "2060444"}, {"introduction": "这是本章的压轴实践，我们将亲手编写一个完整的仿真程序。对于像限制性三体问题这样的哈密顿 ($Hamiltonian$) 系统，并非所有数值积分器都能胜任长期演化的模拟。这个练习让你直接比较一种标准方法（四阶龙格-库塔法）和一种辛积分器在长期仿真中的表现，从而揭示它们在稳定性和能量守恒方面的巨大差异，这是计算物理中至关重要的一课 [@problem_id:2444608]。", "problem": "实现一个程序，用于比较一个辛积分器和一个非辛积分器在匀速旋转参考系中对平面圆形限制性三体问题（CRTBP）的长期行为，重点关注在地球-太阳系统的三角拉格朗日平衡点 $L_4$ 和 $L_5$ 附近初始化的轨道。你的推导和算法设计仅能使用第一性原理。\n\n从以下基本基础开始：\n- 哈密顿力学及其哈密顿方程 $\\dot{q}_i=\\partial H/\\partial p_i$ 和 $\\dot{p}_i=-\\partial H/\\partial q_i$。\n- 旋转参考系中的平面CRTBP，采用无量纲单位，使得主天体之间的距离为 $1$，旋转角速度为 $1$（因此主天体在此参考系中是固定的），总质量为 $1$。设太阳质量为 $1-\\mu$，地球质量为 $\\mu$，对于地球-太阳系统，$\\mu=3.003489614915\\times 10^{-6}$。\n- 使用正则坐标 $(x,y,p_x,p_y)$ 和不含时的哈密顿量\n$$\nH(x,y,p_x,p_y)=\\tfrac{1}{2}\\left(p_x^2+p_y^2\\right)+y\\,p_x-x\\,p_y-\\left(\\frac{1-\\mu}{r_1}+\\frac{\\mu}{r_2}\\right),\n$$\n其中 $r_1=\\sqrt{(x+\\mu)^2+y^2}$ 且 $r_2=\\sqrt{(x-1+\\mu)^2+y^2}$。该哈密顿量通过哈密顿方程可导出标准的旋转参考系CRTBP方程。守恒的雅可比积分是 $C=-2H$。\n- 三角拉格朗日点位于\n$$\nL_4:\\ \\left(x_{L_4},y_{L_4}\\right)=\\left(\\tfrac{1}{2}-\\mu,\\tfrac{\\sqrt{3}}{2}\\right),\\quad\nL_5:\\ \\left(x_{L_5},y_{L_5}\\right)=\\left(\\tfrac{1}{2}-\\mu,-\\tfrac{\\sqrt{3}}{2}\\right).\n$$\n在旋转参考系中，$L_4$ 和 $L_5$ 处的平衡速度为零。与零物理速度一致的正则动量为 $p_x(0)=-y_0$ 和 $p_y(0)=x_0$，其中 $(x_0,y_0)$ 是初始位置。\n\n任务：\n1. 从哈密顿方程和给定的哈密顿量，推导关于 $(x,y,p_x,p_y)$ 的一阶常微分方程组，并实现两种时间步进方法：\n   - 一种辛方法：使用直接从哈密顿结构推导的一阶辛欧拉方法（你必须通过以保持辛形式的方式应用哈密顿方程来设计更新步骤）。\n   - 一种非辛方法：对同一一阶系统应用经典的四阶显式龙格-库塔方法。\n\n2. 使用两种积分器，模拟在 $L_4$ 和 $L_5$ 附近初始化的长期轨道，并量化两个反映稳定性和长期精度的诊断指标：\n   - 整个轨道上的最大哈密顿量绝对偏差，\n     $$\n     \\max_{0\\le n\\le N}\\left|H_n-H_0\\right|,\n     $$\n     其中 $H_n$ 是在第 $n$ 步计算的哈密顿量。\n   - 离相应平衡点的最大绝对位移，\n     $$\n     \\max_{0\\le n\\le N}\\sqrt{(x_n-x_{\\mathrm{eq}})^2+(y_n-y_{\\mathrm{eq}})^2}.\n     $$\n\n使用以下测试套件（每种情况都必须用两种积分器进行模拟）：\n- 所有情况的通用参数：\n  - 质量参数 $\\mu=3.003489614915\\times 10^{-6}$。\n  - 主天体公转圈数 $N_p=30$。名义积分时间为 $T=2\\pi N_p$。使用恒定步长 $h$，并在每次模拟中执行 $N=\\left\\lfloor T/h\\right\\rfloor$ 步。\n  - 旋转参考系中的初始速度为零。使用 $p_x(0)=-y_0$，$p_y(0)=x_0$ 将其转换为正则动量。\n- 情况A（$L_4$ 附近的常规路径）：平衡点 $L_4$，初始位置 $(x_0,y_0)=(x_{L_4}+\\varepsilon,y_{L_4})$，其中 $\\varepsilon=10^{-6}$，步长 $h=0.01$。\n- 情况B（$L_5$ 附近的常规路径）：平衡点 $L_5$，初始位置 $(x_0,y_0)=(x_{L_5}+\\varepsilon,y_{L_5})$，其中 $\\varepsilon=10^{-6}$，步长 $h=0.01$。\n- 情况C（$L_4$ 附近使用较大步长）：平衡点 $L_4$，初始位置 $(x_0,y_0)=(x_{L_4}+\\varepsilon,y_{L_4})$，其中 $\\varepsilon=10^{-6}$，步长 $h=0.05$。\n- 情况D（$L_4$ 处的边界平衡）：平衡点 $L_4$，精确的平衡初始位置 $(x_0,y_0)=(x_{L_4},y_{L_4})$，其中 $\\varepsilon=0$，步长 $h=0.05$。\n\n角度单位是弧度。所有量都是无量纲的。对于每种情况，按以下顺序计算四个浮点数：\n- $E^{\\mathrm{sym}}$：辛方法的最大哈密顿量绝对偏差。\n- $E^{\\mathrm{rk4}}$：龙格-库塔方法的最大哈密顿量绝对偏差。\n- $D^{\\mathrm{sym}}$：辛方法离平衡点的最大绝对位移。\n- $D^{\\mathrm{rk4}}$：龙格-库塔方法离平衡点的最大绝对位移。\n\n最终输出格式：\n你的程序应生成单行输出，其中包含按顺序汇总的情况A、B、C和D的16个结果，并打印为方括号括起来的逗号分隔列表，即\n$[E^{\\mathrm{sym}}_{\\mathrm{A}},E^{\\mathrm{rk4}}_{\\mathrm{A}},D^{\\mathrm{sym}}_{\\mathrm{A}},D^{\\mathrm{rk4}}_{\\mathrm{A}},E^{\\mathrm{sym}}_{\\mathrm{B}},E^{\\mathrm{rk4}}_{\\mathrm{B}},D^{\\mathrm{sym}}_{\\mathrm{B}},D^{\\mathrm{rk4}}_{\\mathrm{B}},E^{\\mathrm{sym}}_{\\mathrm{C}},E^{\\mathrm{rk4}}_{\\mathrm{C}},D^{\\mathrm{sym}}_{\\mathrm{C}},D^{\\mathrm{rk4}}_{\\mathrm{C}},E^{\\mathrm{sym}}_{\\mathrm{D}},E^{\\mathrm{rk4}}_{\\mathrm{D}},D^{\\mathrm{sym}}_{\\mathrm{D}},D^{\\mathrm{rk4}}_{\\mathrm{D}}]$。", "solution": "所提出的问题是有效的。它在科学上基于哈密顿力学和天体力学的原理，特别是圆形限制性三体问题。问题定义明确，提供了所有必要的常数、初始条件、方程和清晰的目标。语言精确客观，该任务是计算物理学中比较数值积分器长期性能的标准练习。\n\n第一步是根据给定的哈密顿量推导出一阶常微分方程（ODE）的显式系统。系统的状态由正则坐标 $(q,p) = (x, y, p_x, p_y)$ 描述。哈密顿量由下式给出\n$$H(x,y,p_x,p_y)=\\tfrac{1}{2}\\left(p_x^2+p_y^2\\right)+y\\,p_x-x\\,p_y-\\left(\\frac{1-\\mu}{r_1}+\\frac{\\mu}{r_2}\\right)$$\n其中 $r_1=\\sqrt{(x+\\mu)^2+y^2}$ 且 $r_2=\\sqrt{(x-1+\\mu)^2+y^2}$。运动方程是哈密顿方程，$\\dot{q}_i = \\partial H / \\partial p_i$ 和 $\\dot{p}_i = -\\partial H / \\partial q_i$。\n\n对动量的导数为：\n$$\\dot{x} = \\frac{\\partial H}{\\partial p_x} = p_x + y$$\n$$\\dot{y} = \\frac{\\partial H}{\\partial p_y} = p_y - x$$\n\n对位置的导数需要计算 $H$ 的偏导数。我们有：\n$$\\frac{\\partial H}{\\partial x} = -p_y - (1-\\mu)(-\\frac{1}{r_1^2})\\frac{\\partial r_1}{\\partial x} - \\mu(-\\frac{1}{r_2^2})\\frac{\\partial r_2}{\\partial x} = -p_y + \\frac{(1-\\mu)(x+\\mu)}{r_1^3} + \\frac{\\mu(x-1+\\mu)}{r_2^3}$$\n$$\\frac{\\partial H}{\\partial y} = p_x - (1-\\mu)(-\\frac{1}{r_1^2})\\frac{\\partial r_1}{\\partial y} - \\mu(-\\frac{1}{r_2^2})\\frac{\\partial r_2}{\\partial y} = p_x + \\frac{(1-\\mu)y}{r_1^3} + \\frac{\\mu y}{r_2^3}$$\n从 $\\dot{p}_i = -\\partial H/\\partial q_i$ 可得到动量的方程：\n$$\\dot{p}_x = p_y - \\frac{(1-\\mu)(x+\\mu)}{r_1^3} - \\frac{\\mu(x-1+\\mu)}{r_2^3}$$\n$$\\dot{p}_y = -p_x - y\\left(\\frac{1-\\mu}{r_1^3} + \\frac{\\mu}{r_2^3}\\right)$$\n这个由四个耦合的、自治的一阶常微分方程组成的系统，$\\dot{\\mathbf{z}} = \\mathbf{f}(\\mathbf{z})$，其中 $\\mathbf{z}=(x,y,p_x,p_y)^T$，控制着动力学过程。\n\n接下来，我们指定数值积分方法。\n1.  **一阶辛欧拉方法：** 该方法保持相空间的辛结构，这对于哈密顿系统模拟的长期定性精度至关重要。对于在时间 $t_n$ 的状态 $\\mathbf{z}_n = (\\mathbf{q}_n, \\mathbf{p}_n)$，一个常用的一阶显式辛欧拉格式（也称为Euler-B）通过以下两步更新得到时间 $t_{n+1} = t_n + h$ 的状态：\n    $$\\mathbf{p}_{n+1} = \\mathbf{p}_n - h \\frac{\\partial H}{\\partial \\mathbf{q}}(\\mathbf{q}_n, \\mathbf{p}_n)$$\n    $$\\mathbf{q}_{n+1} = \\mathbf{q}_n + h \\frac{\\partial H}{\\partial \\mathbf{p}}(\\mathbf{q}_n, \\mathbf{p}_{n+1})$$\n    注意位置 $\\mathbf{q}$ 的更新使用了新计算出的动量 $\\mathbf{p}_{n+1}$。对于给定的CRTBP哈密顿量，这转化为以下一个时间步长 $h$ 的显式算法：\n    给定 $(\\mathbf{q}_n, \\mathbf{p}_n)=(x_n, y_n, p_{x,n}, p_{y,n})$：\n    首先，使用在当前状态下评估的力来更新动量：\n    $$p_{x, n+1} = p_{x,n} + h \\left(p_{y,n} - \\frac{(1-\\mu)(x_n+\\mu)}{r_{1,n}^3} - \\frac{\\mu(x_n-1+\\mu)}{r_{2,n}^3}\\right)$$\n    $$p_{y, n+1} = p_{y,n} + h \\left(-p_{x,n} - y_n\\left(\\frac{1-\\mu}{r_{1,n}^3} + \\frac{\\mu}{r_{2,n}^3}\\right)\\right)$$\n    其次，使用*新*动量和*旧*位置来更新位置：\n    $$x_{n+1} = x_n + h (p_{x,n+1} + y_n)$$\n    $$y_{n+1} = y_n + h (p_{y,n+1} - x_n)$$\n    该方法具有一阶精度，但对于哈密顿系统，其长期稳定性优于同阶的非辛方法。\n\n2.  **经典四阶龙格-库塔（RK4）方法：** 这是一种标准的、通用的、非辛的求解常微分方程的方法。对于系统 $\\dot{\\mathbf{z}} = \\mathbf{f}(\\mathbf{z})$，从 $\\mathbf{z}_n$ 到 $\\mathbf{z}_{n+1}$ 的单步计算如下：\n    $$\\mathbf{k}_1 = \\mathbf{f}(\\mathbf{z}_n)$$\n    $$\\mathbf{k}_2 = \\mathbf{f}(\\mathbf{z}_n + \\tfrac{h}{2}\\mathbf{k}_1)$$\n    $$\\mathbf{k}_3 = \\mathbf{f}(\\mathbf{z}_n + \\tfrac{h}{2}\\mathbf{k}_2)$$\n    $$\\mathbf{k}_4 = \\mathbf{f}(\\mathbf{z}_n + h\\mathbf{k}_3)$$\n    $$\\mathbf{z}_{n+1} = \\mathbf{z}_n + \\tfrac{h}{6}(\\mathbf{k}_1 + 2\\mathbf{k}_2 + 2\\mathbf{k}_3 + \\mathbf{k}_4)$$\n    尽管RK4对于单步计算非常精确（局部误差为$O(h^5)$），但它不保持辛形式。这会导致像哈密顿量这样的守恒量出现长期漂移，使其不适用于此类系统的长期积分。\n\n通过为每个测试案例设置初始条件来继续模拟。地球-太阳系统的质量参数为 $\\mu=3.003489614915\\times 10^{-6}$。积分时间对应于 $N_p=30$ 个主天体公转周期，即 $T=2\\pi N_p$。步数为 $N=\\lfloor T/h \\rfloor$。对于每个案例，轨道都以旋转参考系中的零速度进行初始化，这对应于初始正则动量 $p_x(0) = -y_0$ 和 $p_y(0) = x_0$。对于每个测试案例，分别使用两种积分器运行两次独立的模拟。在每次模拟期间，每一步的状态向量都会被存储。积分完成后，计算两个诊断指标：哈密顿量与其初始值的最大绝对偏差 $\\max_{0\\le n\\le N}|H_n-H_0|$，以及与平衡点的最大位移 $\\max_{0\\le n\\le N}\\sqrt{(x_n-x_{\\mathrm{eq}})^2+(y_n-y_{\\mathrm{eq}})^2}$。然后汇总所有测试案例的结果。预期辛积分器将显示有界的哈密顿量误差，而RK4方法将表现出漂移，这种能量守恒上的差异将反映在轨道稳定性上。", "answer": "```python\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Solves the CRTBP problem by comparing a symplectic Euler integrator\n    with a standard RK4 integrator for trajectories near L4 and L5.\n    \"\"\"\n\n    # Common parameters\n    MU = 3.003489614915e-6\n    NUM_REVOLUTIONS = 30\n    T_FINAL = 2.0 * np.pi * NUM_REVOLUTIONS\n\n    # Lagrange point coordinates\n    L4_POS = np.array([0.5 - MU, np.sqrt(3.0) / 2.0])\n    L5_POS = np.array([0.5 - MU, -np.sqrt(3.0) / 2.0])\n\n    # Test cases from the problem statement\n    test_cases = [\n        {'name': 'A', 'eq_point_pos': L4_POS, 'epsilon': 1e-6, 'h': 0.01},\n        {'name': 'B', 'eq_point_pos': L5_POS, 'epsilon': 1e-6, 'h': 0.01},\n        {'name': 'C', 'eq_point_pos': L4_POS, 'epsilon': 1e-6, 'h': 0.05},\n        {'name': 'D', 'eq_point_pos': L4_POS, 'epsilon': 0.0, 'h': 0.05},\n    ]\n\n    def get_hamiltonian(state):\n        x, y, px, py = state\n        r1 = np.sqrt((x + MU)**2 + y**2)\n        r2 = np.sqrt((x - 1.0 + MU)**2 + y**2)\n        \n        if r1 == 0 or r2 == 0:\n            return np.inf\n\n        H = 0.5 * (px**2 + py**2) + y * px - x * py - (1.0 - MU) / r1 - MU / r2\n        return H\n\n    def get_derivatives(state):\n        x, y, px, py = state\n        \n        r1_sq = (x + MU)**2 + y**2\n        r2_sq = (x - 1.0 + MU)**2 + y**2\n        \n        # Avoid division by zero, although not expected for these ICs\n        if r1_sq == 0 or r2_sq == 0:\n            return np.array([0.0, 0.0, 0.0, 0.0])\n\n        r1_cubed = r1_sq * np.sqrt(r1_sq)\n        r2_cubed = r2_sq * np.sqrt(r2_sq)\n\n        Gx_term1 = (1.0 - MU) * (x + MU) / r1_cubed\n        Gx_term2 = MU * (x - 1.0 + MU) / r2_cubed\n        Gy_factor = (1.0 - MU) / r1_cubed + MU / r2_cubed\n\n        dot_x = px + y\n        dot_y = py - x\n        dot_px = py - (Gx_term1 + Gx_term2)\n        dot_py = -px - y * Gy_factor\n        \n        return np.array([dot_x, dot_y, dot_px, dot_py])\n\n    def step_symplectic_euler(state, h):\n        x, y, px, py = state\n        \n        # Get derivatives for momentum update\n        _, _, dot_px, dot_py = get_derivatives(state)\n        \n        # Update momenta\n        px_new = px + h * dot_px\n        py_new = py + h * dot_py\n        \n        # Update positions using new momenta\n        x_new = x + h * (px_new + y)\n        y_new = y + h * (py_new - x)\n        \n        return np.array([x_new, y_new, px_new, py_new])\n\n    def step_rk4(state, h):\n        k1 = get_derivatives(state)\n        k2 = get_derivatives(state + 0.5 * h * k1)\n        k3 = get_derivatives(state + 0.5 * h * k2)\n        k4 = get_derivatives(state + h * k3)\n        return state + (h / 6.0) * (k1 + 2 * k2 + 2 * k3 + k4)\n\n    results = []\n    for case in test_cases:\n        h = case['h']\n        eq_point_pos = case['eq_point_pos']\n        \n        # Initial conditions\n        x0 = eq_point_pos[0] + case['epsilon']\n        y0 = eq_point_pos[1]\n        px0 = -y0\n        py0 = x0\n        initial_state = np.array([x0, y0, px0, py0])\n\n        num_steps = int(np.floor(T_FINAL / h))\n        H0 = get_hamiltonian(initial_state)\n\n        # Run for both integrators\n        for integrator_name, step_func in [('sym', step_symplectic_euler), ('rk4', step_rk4)]:\n            state = initial_state.copy()\n            max_hamiltonian_dev = 0.0\n            max_displacement = 0.0\n\n            for _ in range(num_steps):\n                state = step_func(state, h)\n\n                # Calculate diagnostics\n                H_current = get_hamiltonian(state)\n                hamiltonian_dev = np.abs(H_current - H0)\n                if hamiltonian_dev > max_hamiltonian_dev:\n                    max_hamiltonian_dev = hamiltonian_dev\n                \n                displacement = np.sqrt((state[0] - eq_point_pos[0])**2 + (state[1] - eq_point_pos[1])**2)\n                if displacement > max_displacement:\n                    max_displacement = displacement\n            \n            # Store results for this integrator\n            results.append(max_hamiltonian_dev)\n            results.append(max_displacement)\n    \n    # Reorder results list. Currently [E_sym, D_sym, E_rk4, D_rk4, ...].\n    # Need [E_sym, E_rk4, D_sym, D_rk4, ...].\n    final_results = []\n    for i in range(0, len(results), 4):\n        final_results.append(results[i])     # E_sym\n        final_results.append(results[i+2])   # E_rk4\n        final_results.append(results[i+1])   # D_sym\n        final_results.append(results[i+3])   # D_rk4\n    \n    print(f\"[{','.join(map(str, final_results))}]\")\n\nsolve()\n```", "id": "2444608"}]}