{"hands_on_practices": [{"introduction": "在相信任何模拟结果之前，我们必须首先回答一个基本问题：“我的代码是否正确地给出了正确的结果？” 本次实践介绍了收敛性分析，这是评估数值方法准确性的基石。通过系统地加密离散网格并观察解如何逼近真实值，我们可以验证我们实现的收敛阶。[@problem_id:2438894] 这个练习将指导您使用一个简化的势流模型来实践理查森外推法（Richardson extrapolation），这是一种强大的工具，可以从一系列模拟中估计算法的实际收敛速度。", "problem": "您需要为一个模拟无粘、不可压缩流绕过圆柱的收敛性测试和 Richardson 外推研究进行设计。该模拟使用一个势流代理模型，以可控、可验证的方式来分离空间和时间离散化误差。\n\n基本原理：\n- 对于无粘、不可压缩、无旋的流动，速度是标量势 $\\phi$ 的梯度，满足拉普拉斯方程 $\\nabla^2 \\phi = 0$。非定常伯努利方程指出，压力场满足 $p = -\\rho\\left(\\frac{\\partial \\phi}{\\partial t} + \\frac{1}{2}\\lvert \\nabla \\phi \\rvert^2\\right) + C(t)$，其中 $\\rho$ 是密度， $C(t)$ 是一个随时间变化的常数。\n- 速度为 $U(t)$ 的均匀势流绕过一个以原点为中心、半径为 $a$ 的圆柱的精确解，其表面势为 $\\phi(a,\\theta,t) = 2 a U(t) \\cos\\theta$，表面切向速度为 $v_t(a,\\theta,t) = -2 U(t) \\sin\\theta$，其中 $\\theta$ 是从 x 轴正方向测量的极角。\n- 均匀加速的远场流需要一个背景压力梯度来加速流体，其主导阶为 $p_\\infty(x,t) = p_{\\mathrm{ref}} - \\rho\\left(x\\,\\frac{dU}{dt} + \\frac{1}{2} U(t)^2\\right)$，从而满足未受扰动的欧拉方程 $\\rho \\frac{dU}{dt} = -\\frac{\\partial p_\\infty}{\\partial x}$。由圆柱存在所引起的流体动力，是通过仅对扰动压力 $p' = p - p_\\infty$ 沿表面和外法线方向进行积分得到的。\n- 对于此势流问题，在时间 $t$ 时 x 方向上的精确扰动力为 $F_x^{\\mathrm{true}}(t) = \\rho \\pi a^2 \\frac{dU}{dt}$。\n\n模拟模型与数值近似：\n- 将圆柱边界离散为一个正 M 边形，其顶点位于极角 $\\theta_j = \\frac{2\\pi j}{M}$（$j = 0,1,\\dots,M-1$）处，映射到点 $(x_j,y_j) = \\left(a\\cos\\theta_j, a\\sin\\theta_j\\right)$。连续顶点之间的每个直线段都是一个面元。对于面元 $j$，定义其中心点 $\\mathbf{c}_j$、弦长 $L_j$、沿弦的单位切向量 $\\hat{\\mathbf{t}}_j$，以及指向外部的弦的法向量作为单位外法向量 $\\hat{\\mathbf{n}}_j$（您可以通过与 $\\mathbf{c}_j$ 的点积来确定向外的方向）。\n- 使用中点角 $\\theta_j^{\\mathrm{mid}} = \\arctan2(c_{j,y}, c_{j,x})$ 来计算几何中点处的解析表面量。使用复合中点法则对面元进行面积分近似，每个面元的权重为 $L_j$。\n- 在每个面元中点和时间 $t$，使用 $\\mathcal{O}(\\Delta t)$ 阶的后向有限差分来近似非定常势的时间导数：\n$$\\left.\\frac{\\partial \\phi}{\\partial t}\\right|_{j,t} \\approx \\frac{\\phi(a,\\theta_j^{\\mathrm{mid}},t) - \\phi(a,\\theta_j^{\\mathrm{mid}},t-\\Delta t)}{\\Delta t},$$\n其中 $\\phi(a,\\theta,t) = 2 a U(t)\\cos\\theta$。使用 $v_t(a,\\theta,t) = -2 U(t)\\sin\\theta$ 来计算表面上的 $\\lvert \\nabla \\phi \\rvert^2$ 为 $v_t^2$。\n- 面元中点处的未受扰动背景压力为\n$$p_\\infty(\\mathbf{c}_j,t) \\approx -\\rho\\left( x_j^{\\mathrm{mid}} \\frac{U(t) - U(t-\\Delta t)}{\\Delta t} + \\frac{1}{2}U(t)^2 \\right),$$\n其中 $x_j^{\\mathrm{mid}}$ 是 $\\mathbf{c}_j$ 的 x 坐标。总压力的近似值为\n$$p_j(t) \\approx -\\rho\\left( \\frac{\\phi(a,\\theta_j^{\\mathrm{mid}},t) - \\phi(a,\\theta_j^{\\mathrm{mid}},t-\\Delta t)}{\\Delta t} + \\frac{1}{2} v_t(a,\\theta_j^{\\mathrm{mid}},t)^2 \\right),$$\n扰动压力为 $p'_j(t) = p_j(t) - p_\\infty(\\mathbf{c}_j,t)$。然后，近似力为\n$$F_x^{\\mathrm{num}}(M,\\Delta t; t) \\approx -\\sum_{j=0}^{M-1} p'_j(t)\\, \\hat{n}_{j,x}\\, L_j.$$\n\n收敛性研究和 Richardson 外推：\n- 对于一个具有加密比 $r$ 的三个离散化序列（即，对于一个合适的分辨率度量 $h$，有 $h_1/h_2 = h_2/h_3 = r$），如果主导截断误差的行为类似于 $C h^p$，那么观测阶 $p$ 可以通过广义 Richardson 公式来估计\n$$p \\approx \\frac{\\ln\\left|\\frac{Q_{h_1} - Q_{h_2}}{Q_{h_2} - Q_{h_3}}\\right|}{\\ln r},$$\n其中 $Q_{h_k}$ 是在分辨率 $h_k$ 下的数值近似值。外推到 $h \\to 0$ 的估计值为\n$$Q_{\\mathrm{ext}} \\approx Q_{h_3} + \\frac{Q_{h_3} - Q_{h_2}}{r^p - 1}.$$\n\n物理参数和单位：\n- 使用 $\\rho = 1\\,\\mathrm{kg/m^3}$，$a = 0.5\\,\\mathrm{m}$，以及随时间变化的自由来流速度 $U(t) = U_0 + U_1 \\sin(\\omega t)$，其中 $U_0 = 1\\,\\mathrm{m/s}$，$U_1 = 0.2\\,\\mathrm{m/s}$，$\\omega = 2\\pi\\,\\mathrm{rad/s}$。在 $t^\\star = 0.30\\,\\mathrm{s}$ 时计算所有的力。力以牛顿（$\\mathrm{N}$）为单位表示。\n- 在 $t^\\star$ 时的精确扰动力是 $F_x^{\\mathrm{true}}(t^\\star) = \\rho \\pi a^2 \\frac{dU}{dt}\\big\\rvert_{t^\\star}$，其中 $\\frac{dU}{dt} = U_1 \\omega \\cos(\\omega t)$。\n\n任务：\n- 实现上述离散化，以计算给定 $M$ 和 $\\Delta t$ 下的 $F_x^{\\mathrm{num}}(M,\\Delta t; t^\\star)$。\n- 对于以下三个收敛性研究中的每一个，使用 Richardson 估计器计算三重网格的观测阶 $p$。对所有三元组使用加密比 $r = 2$。\n  1. 在有效固定的时间离散化误差下进行空间加密：$\\Delta t = 10^{-6}\\,\\mathrm{s}$ 且 $M \\in \\{24,48,96\\}$。\n  2. 在有效可忽略的空间误差下进行时间加密：$M = 4096$ 且 $\\Delta t \\in \\{5\\times 10^{-3}\\,\\mathrm{s}, 2.5\\times 10^{-3}\\,\\mathrm{s}, 1.25\\times 10^{-3}\\,\\mathrm{s}\\}$。\n  3. 耦合加密，设计使空间和时间主导误差具有相同的阶：选择 $M \\in \\{32,64,128\\}$ 和 $\\Delta t = c/M^2$，其中 $c = 2.0\\times 10^{-2}\\,\\mathrm{sm^2}$（即，当 $M$ 无单位时，$\\Delta t$ 的单位为 $\\mathrm{s}$）。对这三个层级使用这些配对的 $(M,\\Delta t)$ 值。\n\n要求：\n- 您的程序必须实现上述内容，并为每个研究根据 $t^\\star$ 时的三个 $F_x^{\\mathrm{num}}$ 值，使用 Richardson 估计器计算观测阶 $p$。\n- 全程使用国际单位制，并将最终结果表示为无量纲的观测阶。\n- 测试套件：上面指定的三个研究构成了测试套件。它们涵盖了一个理想路径的空间案例、一个时间案例以及一个误差贡献在阶上匹配的耦合加密案例。\n- 最终输出格式：您的程序应生成单行输出，其中包含三个观测阶，格式为方括号括起来的逗号分隔列表，四舍五入到三位小数，顺序为 [空间_p, 时间_p, 耦合_p]。例如，一个有效的输出格式是“[2.000,1.000,2.000]”。", "solution": "问题已提交以供分析。它涉及对非定常势流中圆柱所受流体动力的数值近似的收敛性研究。在尝试任何求解之前，必须根据科学和逻辑的基本原理对问题陈述进行严格验证。\n\n**第 1 步：提取已知条件**\n\n以下是逐字从问题陈述中提取的已知条件：\n- **控制方程**：速度势 $\\phi$ 满足拉普拉斯方程 $\\nabla^2 \\phi = 0$。非定常伯努利方程：$p = -\\rho\\left(\\frac{\\partial \\phi}{\\partial t} + \\frac{1}{2}\\lvert \\nabla \\phi \\rvert^2\\right) + C(t)$。\n- **精确解析解**：对于半径为 $a$ 的圆柱在均匀流 $U(t)$ 中，表面势为 $\\phi(a,\\theta,t) = 2 a U(t) \\cos\\theta$，表面切向速度为 $v_t(a,\\theta,t) = -2 U(t) \\sin\\theta$。\n- **背景和扰动场**：背景压力为 $p_\\infty(x,t) = p_{\\mathrm{ref}} - \\rho\\left(x\\,\\frac{dU}{dt} + \\frac{1}{2} U(t)^2\\right)$。扰动压力为 $p' = p - p_\\infty$。精确扰动力为 $F_x^{\\mathrm{true}}(t) = \\rho \\pi a^2 \\frac{dU}{dt}$。\n- **数值离散化**：\n    - 圆柱边界是一个正 M 边形，顶点为 $(x_j,y_j) = \\left(a\\cos\\theta_j, a\\sin\\theta_j\\right)$，其中 $\\theta_j = 2\\pi j/M$，$j = 0, \\dots, M-1$。\n    - 面元 $j$ 的属性：中点 $\\mathbf{c}_j$、长度 $L_j$、外法线 $\\hat{\\mathbf{n}}_j$。\n    - 使用中点角 $\\theta_j^{\\mathrm{mid}} = \\arctan2(c_{j,y}, c_{j,x})$ 计算表面量。\n    - 通过权重为 $L_j$ 的复合中点法则进行积分。\n- **数值近似**：\n    - 时间导数：后向有限差分，$\\left.\\frac{\\partial \\phi}{\\partial t}\\right|_{j,t} \\approx \\frac{\\phi(a,\\theta_j^{\\mathrm{mid}},t) - \\phi(a,\\theta_j^{\\mathrm{mid}},t-\\Delta t)}{\\Delta t}$，其中 $\\phi(a,\\theta,t) = 2 a U(t)\\cos\\theta$。\n    - 表面动能：$\\lvert \\nabla \\phi \\rvert^2 = v_t^2$，其中 $v_t(a,\\theta,t) = -2 U(t)\\sin\\theta$。\n    - 背景压力：$p_\\infty(\\mathbf{c}_j,t) \\approx -\\rho\\left( x_j^{\\mathrm{mid}} \\frac{U(t) - U(t-\\Delta t)}{\\Delta t} + \\frac{1}{2}U(t)^2 \\right)$。\n    - 总压力：$p_j(t) \\approx -\\rho\\left( \\frac{\\phi(a,\\theta_j^{\\mathrm{mid}},t) - \\phi(a,\\theta_j^{\\mathrm{mid}},t-\\Delta t)}{\\Delta t} + \\frac{1}{2} v_t(a,\\theta_j^{\\mathrm{mid}},t)^2 \\right)$。\n    - 扰动压力：$p'_j(t) = p_j(t) - p_\\infty(\\mathbf{c}_j,t)$。\n    - 数值力：$F_x^{\\mathrm{num}}(M,\\Delta t; t) \\approx -\\sum_{j=0}^{M-1} p'_j(t)\\, \\hat{n}_{j,x}\\, L_j$。\n- **收敛性分析**：\n    - 加密比 $r$。\n    - 观测阶：$p \\approx \\frac{\\ln\\left|\\frac{Q_{h_1} - Q_{h_2}}{Q_{h_2} - Q_{h_3}}\\right|}{\\ln r}$。\n- **物理参数**：$\\rho = 1\\,\\mathrm{kg/m^3}$，$a = 0.5\\,\\mathrm{m}$，$U(t) = U_0 + U_1 \\sin(\\omega t)$，其中 $U_0 = 1\\,\\mathrm{m/s}$，$U_1 = 0.2\\,\\mathrm{m/s}$，$\\omega = 2\\pi\\,\\mathrm{rad/s}$。计算时间 $t^\\star = 0.30\\,\\mathrm{s}$。\n- **任务**：对三个加密比 $r=2$ 的收敛性研究计算观测阶 $p$：\n    1. 空间：$\\Delta t = 10^{-6}\\,\\mathrm{s}$，$M \\in \\{24, 48, 96\\}$。\n    2. 时间：$M = 4096$，$\\Delta t \\in \\{5\\times 10^{-3}, 2.5\\times 10^{-3}, 1.25\\times 10^{-3}\\}\\,\\mathrm{s}$。\n    3. 耦合：$M \\in \\{32, 64, 128\\}$，其中 $\\Delta t = c/M^2$ 且 $c = 2.0\\times 10^{-2}\\,\\mathrm{s}$。\n\n**第 2 步：问题陈述的验证**\n\n对问题的合理性进行评估。\n- **科学依据**：该问题基于势流的经典理论，这是流体动力学中用于无粘、不可压缩和无旋条件的有效基础模型。势、压力和力的方程都是规范的。数值近似（面元法几何、有限差分、中点法则）是计算物理学中的标准技术。该问题在科学上是合理的。\n- **适定性和一致性**：问题提供了一套完整的方程、参数和数值程序。目标定义明确：为三个不同的加密研究计算观测到的收敛阶。定义是明确的；例如，确定外法向量的方法已被指定。常数 $c$ 的单位中的一个微小歧义也立即得到澄清。该问题是自洽、一致且适定的。\n- **客观性**：问题以精确、客观和技术性的语言陈述。它不含主观论断或意见。\n\n**第 3 步：结论与行动**\n\n问题陈述是**有效的**。它代表了一个形式良好的、应用于物理系统的数值分析练习。现在将根据问题中概述的第一性原理来开发解决方案。\n\n---\n\n**解决方案开发**\n\n解决方案需要实现一个函数来计算数值力 $F_x^{\\mathrm{num}}(M, \\Delta t; t^\\star)$，以及一个辅助函数来使用 Richardson's 方法计算观测到的收敛阶。\n\n**1. 几何离散化**\n圆柱表面被离散为 $M$ 个直面元。对于一个内接于半径为 $a$ 的圆的正 M 边形：\n- 顶点为 $\\mathbf{v}_j = (a \\cos(2\\pi j / M), a \\sin(2\\pi j / M))$，其中 $j = 0, \\dots, M-1$。\n- 第 $j$ 个面元连接 $\\mathbf{v}_j$ 和 $\\mathbf{v}_{j+1}$（索引 $(j+1)$ 按模 $M$ 计算）。\n- 面元中点为 $\\mathbf{c}_j = (\\mathbf{v}_j + \\mathbf{v}_{j+1}) / 2$。其坐标为：\n  $$x_j^{\\mathrm{mid}} = a \\cos(\\pi/M)\\cos(2\\pi j/M + \\pi/M)$$\n  $$y_j^{\\mathrm{mid}} = a \\cos(\\pi/M)\\sin(2\\pi j/M + \\pi/M)$$\n- 中点向量的角度为 $\\theta_j^{\\mathrm{mid}} = \\arctan2(y_j^{\\mathrm{mid}}, x_j^{\\mathrm{mid}}) = (2\\pi j + \\pi)/M$。\n- 每个面元的长度是恒定的：$L_j = L = \\lvert \\mathbf{v}_{j+1} - \\mathbf{v}_j \\rvert = 2a \\sin(\\pi/M)$。\n- 面元的单位外法线 $\\hat{\\mathbf{n}}_j$ 垂直于面元的弦。对于这种几何形状，它与通过面元所对弧段中点的圆半径对齐。因此，$\\hat{\\mathbf{n}}_j = (\\cos\\theta_j^{\\mathrm{mid}}, \\sin\\theta_j^{\\mathrm{mid}})$，其 x 分量为 $\\hat{n}_{j,x} = \\cos\\theta_j^{\\mathrm{mid}}$。\n\n**2. 压力和力的计算**\n数值力是所有面元的总和：$F_x^{\\mathrm{num}} = -\\sum_{j=0}^{M-1} p'_j(t^\\star)\\, \\hat{n}_{j,x}\\, L$。扰动压力 $p'_j(t^\\star)$ 是配置点处的总压力与该点背景压力之差：$p'_j = p_j - p_{\\infty,j}$。\n\n令 $t = t^\\star$ 且 $t_p = t - \\Delta t$。自由来流速度时间导数的数值近似为 $\\frac{\\Delta U}{\\Delta t} = \\frac{U(t) - U(t_p)}{\\Delta t}$。压力的表达式为：\n- 总压力：$p_j(t) = -\\rho\\left( \\frac{\\phi(t) - \\phi(t_p)}{\\Delta t} + \\frac{1}{2} v_t(t)^2 \\right)$。使用 $\\phi(a,\\theta,t) = 2aU(t)\\cos\\theta$：\n   $$p_j(t) = -\\rho\\left( 2a\\cos\\theta_j^{\\mathrm{mid}} \\frac{\\Delta U}{\\Delta t} + \\frac{1}{2} \\left(-2U(t)\\sin\\theta_j^{\\mathrm{mid}}\\right)^2 \\right)$$\n- 背景压力：$p_{\\infty,j}(t) = -\\rho\\left( x_j^{\\mathrm{mid}} \\frac{\\Delta U}{\\Delta t} + \\frac{1}{2}U(t)^2 \\right)$。\n\n将这些结合起来，得到面元 $j$ 上的扰动压力：\n$$p'_j(t) = p_j(t) - p_{\\infty,j}(t) = \\rho\\left[ \\left(x_j^{\\mathrm{mid}} - 2a\\cos\\theta_j^{\\mathrm{mid}}\\right)\\frac{\\Delta U}{\\Delta t} + \\frac{1}{2}U(t)^2 - 2U(t)^2\\sin^2\\theta_j^{\\mathrm{mid}} \\right]$$\n\n然后通过对每个面元的贡献求和来计算总力：\n$$F_x^{\\mathrm{num}}(M,\\Delta t; t) = -L \\sum_{j=0}^{M-1} p'_j(t) \\cos(\\theta_j^{\\mathrm{mid}})$$\n\n**3. 收敛性分析**\n理论误差源是空间离散化（主导误差项为 $\\mathcal{O}(M^{-2})$）和时间离散化（主导误差项为 $\\mathcal{O}(\\Delta t)$）。\n- **研究 1 (空间)**：当 $\\Delta t = 10^{-6}\\,\\mathrm{s}$ 时，时间误差可以忽略不计。收敛性应由空间误差主导，因此我们预期 $p \\approx 2$。加密参数为 $h \\sim 1/M$。\n- **研究 2 (时间)**：当 $M = 4096$ 时，空间误差可以忽略不计。收敛性应由后向差分的时间误差主导，因此我们预期 $p \\approx 1$。加密参数为 $h \\sim \\Delta t$。\n- **研究 3 (耦合)**：当 $\\Delta t = c/M^2$ 时，总误差为 $E \\approx C_s M^{-2} + C_t \\Delta t = C_s M^{-2} + C_t c M^{-2} = (C_s+C_t c)M^{-2}$。误差按 $M^{-2}$ 的比例缩放，因此我们预期 $p \\approx 2$。\n\n观测到的收敛阶 $p$ 是根据在分辨率 $h_1, h_2, h_3$（满足 $h_1/h_2 = h_2/h_3 = r$）下得到的三个数值结果 $Q_1, Q_2, Q_3$ 计算的。公式为：\n$$p = \\frac{\\ln\\left|\\frac{Q_1 - Q_2}{Q_2 - Q_3}\\right|}{\\ln r}$$\n对于所有研究，加密比均为 $r=2$。量 $Q_k$ 是每个离散化水平下计算出的力 $F_x^{\\mathrm{num}}$。\n\n实现将遵循此逻辑。一个主函数将为给定的 $(M, \\Delta t)$ 计算力。该函数将对三个研究中的每个离散化水平进行调用。然后，得到的力值将用于计算观测到的收敛阶。", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Main function to run the convergence studies and print the results.\n    \"\"\"\n    # Physical parameters\n    rho = 1.0  # kg/m^3\n    a = 0.5   # m\n    U0 = 1.0  # m/s\n    U1 = 0.2  # m/s\n    omega = 2.0 * np.pi  # rad/s\n    t_star = 0.30  # s\n\n    # Freestream velocity function\n    def U(t):\n        return U0 + U1 * np.sin(omega * t)\n\n    def compute_force(M, dt):\n        \"\"\"\n        Computes the numerical force F_x^num for given M and dt at t_star.\n        \"\"\"\n        t = t_star\n        t_prev = t - dt\n\n        U_t = U(t)\n        U_t_prev = U(t_prev)\n        dUdt_num = (U_t - U_t_prev) / dt\n\n        # --- Geometric Discretization (Vectorized) ---\n        j = np.arange(M)\n        \n        # Midpoint angles of the panels\n        theta_mid = (2 * np.pi * j + np.pi) / M\n        \n        # Panel length (constant for all panels)\n        L = 2 * a * np.sin(np.pi / M)\n        \n        # x-component of panel midpoint coordinates\n        x_mid = a * np.cos(np.pi / M) * np.cos(theta_mid)\n        \n        # x-component of outward unit normal vectors\n        n_x = np.cos(theta_mid)\n\n        # --- Pressure and Force Calculation (Vectorized) ---\n        \n        # Disturbance pressure term from acceleration potential\n        # (x_j^mid - 2*a*cos(theta_j^mid)) * (dU/dt)\n        term1 = (x_mid - 2 * a * np.cos(theta_mid)) * dUdt_num\n        \n        # Disturbance pressure term from velocity squared\n        # 1/2*U(t)^2 - 2*U(t)^2*sin^2(theta_j^mid)\n        term2 = 0.5 * U_t**2 - 2 * U_t**2 * np.sin(theta_mid)**2\n        \n        # Disturbance pressure on each panel\n        p_prime = rho * (term1 + term2)\n        \n        # Numerical force by summing contributions (composite midpoint rule)\n        # F_x = - sum( p'_j * n_{j,x} * L_j )\n        force = -np.sum(p_prime * n_x) * L\n        \n        return force\n\n    def richardson_p(Q1, Q2, Q3, r):\n        \"\"\"\n        Calculates the observed order of convergence p.\n        Q1, Q2, Q3 are results from coarse, medium, fine resolutions.\n        \"\"\"\n        # To avoid division by zero or log of non-positive if convergence is perfect\n        # or non-monotonic.\n        diff_ratio_arg = (Q1 - Q2) / (Q2 - Q3)\n        if diff_ratio_arg <= 0:\n            return np.nan # Indicates non-standard convergence\n            \n        return np.log(diff_ratio_arg) / np.log(r)\n\n    results = []\n    \n    # --- Study 1: Spatial Refinement ---\n    dt_spatial = 1e-6\n    M_spatial = [24, 48, 96]\n    r_spatial = 2.0\n    \n    forces_spatial = [compute_force(M, dt_spatial) for M in M_spatial]\n    p_spatial = richardson_p(forces_spatial[0], forces_spatial[1], forces_spatial[2], r_spatial)\n    results.append(p_spatial)\n\n    # --- Study 2: Temporal Refinement ---\n    M_temporal = 4096\n    dt_temporal = [5.0e-3, 2.5e-3, 1.25e-3]\n    r_temporal = 2.0\n\n    forces_temporal = [compute_force(M_temporal, dt) for dt in dt_temporal]\n    p_temporal = richardson_p(forces_temporal[0], forces_temporal[1], forces_temporal[2], r_temporal)\n    results.append(p_temporal)\n\n    # --- Study 3: Coupled Refinement ---\n    c_coupled = 2.0e-2\n    M_coupled = [32, 64, 128]\n    dt_coupled = [c_coupled / (M**2) for M in M_coupled]\n    r_coupled = 2.0\n\n    forces_coupled = [compute_force(M, dt) for M, dt in zip(M_coupled, dt_coupled)]\n    p_coupled = richardson_p(forces_coupled[0], forces_coupled[1], forces_coupled[2], r_coupled)\n    results.append(p_coupled)\n\n    # Format the final output string\n    formatted_results = [f\"{res:.3f}\" for res in results]\n    print(f\"[{','.join(formatted_results)}]\")\n\n\nsolve()\n```", "id": "2438894"}, {"introduction": "计算区域是有限的，因此我们必须用边界条件来定义其“边缘”的行为。边界条件的选择至关重要，因为不当的选择可能会将非物理的波反射回计算域，从而污染您的结果。[@problem_id:2438935] 本练习将通过一个圆柱尾迹的一维简化模型，让您亲身体验这个问题，比较简单的固定值边界条件和更复杂的对流（或无反射）边界条件对上游解的影响。您将量化这种影响，并体会到为什么谨慎选择边界条件对于获得可靠的模拟至关重要。", "problem": "您将通过研究一个代表中心线尾流信号（例如，随时间变化的涡量强度）的标量的对流和扩散，来探究在二维不可压缩层流绕圆柱流动的简化模型中，不同的出口边界条件如何影响上游解。该模型在流向坐标上是一维的，并已进行无量纲化处理。标量场用 $u(x,t)$ 表示，其中空间坐标 $x \\in [0,L]$，时间 $t \\ge 0$。该标量遵循对流-扩散方程，并带有一个局部振荡源，该源模拟了位于 $x=x_c$ 的圆柱所产生的周期性涡脱落：\n$$\n\\frac{\\partial u}{\\partial t} + U \\frac{\\partial u}{\\partial x} \\;=\\; \\nu \\frac{\\partial^2 u}{\\partial x^2} \\;+\\; s(x,t),\n$$\n其中 $U \\gt 0$ 是给定的平均流向对流速度，$\\nu \\ge 0$ 是运动扩散系数（无量纲），$s(x,t)$ 是一个代表圆柱尾流脱落的紧支强迫项。位于 $x=0$ 的入口边界指定\n$$\nu(0,t) \\;=\\; 0,\n$$\n这对应于没有入射的尾流信号。必须比较位于 $x=L$ 的两种不同出口边界条件：\n\n- 压力出口模拟（狄利克雷条件）：\n$$\nu(L,t) \\;=\\; 0.\n$$\n\n- 对流出口（出射扰动的无反射近似）：\n$$\n\\frac{\\partial u}{\\partial t}(L,t) \\;+\\; U_c \\frac{\\partial u}{\\partial x}(L,t) \\;=\\; 0,\n$$\n其中 $U_c \\gt 0$ 是一个指定的对流速度。\n\n初始条件为\n$$\nu(x,0) \\;=\\; 0.\n$$\n\n尾流脱落被建模为一个中心位于 $x=x_c$ 的时空可分离源：\n$$\ns(x,t) \\;=\\; A \\,\\sin(2\\pi\\,\\mathrm{St}\\, t)\\,\\exp\\!\\left(-\\frac{(x-x_c)^2}{2\\sigma^2}\\right),\n$$\n其中 $A \\gt 0$ 是振幅，$\\mathrm{St} \\gt 0$ 是控制脱落频率的斯特劳哈尔数（Strouhal number），$\\sigma \\gt 0$ 是源的空间宽度。\n\n您必须从带有对流和扩散的标量守恒以及上述边界条件出发，设计并实现一个稳定的显式数值方法，在间距为 $\\Delta x$、时间步长为 $\\Delta t$ 的均匀网格上将 $u(x,t)$ 演化至时间 $T$。对流项使用一阶迎风离散，扩散项使用二阶中心离散，时间积分使用显式前向欧拉法。选择的 $\\Delta t$ 必须满足一个同时考虑对流和扩散的稳定性约束。对于对流边界条件，您必须在 $x=L$ 处以与速度为 $U_c$ 的单向出射波相一致的方式对其进行直接离散。\n\n为了量化出口边界条件对上游解的影响，将两个解 $u_{\\mathrm{Dir}}(x,t)$（压力出口模拟）和 $u_{\\mathrm{conv}}(x,t)$（对流出口）在上游子域 $x \\in [0,x_u]$ 和最终时间窗口 $t \\in [T-\\Delta,T]$ 内的时空平均上游差异 $\\mathcal{D}$ 定义为\n$$\n\\mathcal{D} \\;=\\; \\left(\\frac{1}{\\Delta\\,x_u} \\int_{T-\\Delta}^{T} \\int_{0}^{x_u} \\left(u_{\\mathrm{conv}}(x,t) - u_{\\mathrm{Dir}}(x,t)\\right)^2 \\,\\mathrm{d}x\\,\\mathrm{d}t\\right)^{1/2}.\n$$\n报告下面每个测试案例的 $\\mathcal{D}$ 值，在每个案例中，对两种出口边界条件使用相同的空间网格、时间步长和强迫项。该模型是无量纲的，因此不需要物理单位。\n\n实现您的程序以运行以下测试套件。对于每个案例，使用均匀网格间距 $\\Delta x = 0.05$，并自动选择一个稳定的 $\\Delta t$。对于上游平均，使用指定的 $x_u$：\n\n- 案例 1（对流主导，长域）：$U=1.0$, $\\nu=0.01$, $L=10.0$, $U_c=1.0$, $T=12.0$, $x_c=3.0$, $\\sigma=0.15$, $A=1.0$, $\\mathrm{St}=0.2$, $x_u=2.0$, 时间平均窗口大小 $\\Delta = 0.2\\,T$。\n\n- 案例 2（扩散增强，中等域）：$U=0.5$, $\\nu=0.1$, $L=6.0$, $U_c=0.5$, $T=12.0$, $x_c=2.0$, $\\sigma=0.15$, $A=1.0$, $\\mathrm{St}=0.2$, $x_u=1.5$, 时间平均窗口大小 $\\Delta = 0.2\\,T$。\n\n- 案例 3（短域，出口靠近源）：$U=1.0$, $\\nu=0.05$, $L=4.0$, $U_c=1.0$, $T=8.0$, $x_c=2.5$, $\\sigma=0.12$, $A=1.0$, $\\mathrm{St}=0.2$, $x_u=1.2$, 时间平均窗口大小 $\\Delta = 0.2\\,T$。\n\n- 案例 4（出口处对流速度不匹配）：$U=1.0$, $\\nu=0.02$, $L=8.0$, $U_c=0.6$, $T=10.0$, $x_c=3.0$, $\\sigma=0.15$, $A=1.0$, $\\mathrm{St}=0.2$, $x_u=2.0$, 时间平均窗口大小 $\\Delta = 0.2\\,T$。\n\n您的程序应产生单行输出，其中包含四个案例的 $\\mathcal{D}$ 值，格式为由逗号分隔并用方括号括起来的列表（例如，$\\left[\\mathrm{d}_1,\\mathrm{d}_2,\\mathrm{d}_3,\\mathrm{d}_4\\right]$）。输出必须是浮点数。数值方法、边界条件离散化和稳定性选择必须由您遵循上述原则来实现，并且结果必须由程序针对指定案例直接计算得出。", "solution": "该问题要求对一维对流-扩散方程中不同出口边界条件的上游影响进行数值研究，该方程是圆柱中心线尾流的一个简化模型。将基于有限差分法开发并实现一个求解方案。\n\n域 $x \\in [0,L]$ 上标量场 $u(x,t)$ 的控制偏微分方程 (PDE) 是：\n$$\n\\frac{\\partial u}{\\partial t} + U \\frac{\\partial u}{\\partial x} = \\nu \\frac{\\partial^2 u}{\\partial x^2} + s(x,t)\n$$\n这是一个线性二阶抛物型偏微分方程。我们将使用显式时间步进格式对其进行数值求解。\n\n首先，将空间域 $x \\in [0,L]$ 离散为一个包含 $N_x+1$ 个点的均匀网格，其中 $N_x = L/\\Delta x$。网格点表示为 $x_i = i\\Delta x$，其中 $i = 0, 1, \\dots, N_x$。时间域被离散为大小为 $\\Delta t$ 的步长，即 $t_n = n\\Delta t$。在网格点 $(x_i, t_n)$ 处解的数值近似值用 $u_i^n$ 表示。\n\n该偏微分方程使用前向欧拉格式离散时间导数，使用一阶迎风格式离散对流项（因为 $U>0$），使用二阶中心差分离散扩散项。\n在 $(x_i, t_n)$ 处的时间导数近似为：\n$$\n\\frac{\\partial u}{\\partial t} \\approx \\frac{u_i^{n+1} - u_i^n}{\\Delta t}\n$$\n对流项使用来自上游方向 ($x_{i-1}$) 的信息进行近似：\n$$\nU \\frac{\\partial u}{\\partial x} \\approx U \\frac{u_i^n - u_{i-1}^n}{\\Delta x}\n$$\n扩散项使用标准的中心差分模板进行近似：\n$$\n\\nu \\frac{\\partial^2 u}{\\partial x^2} \\approx \\nu \\frac{u_{i+1}^n - 2u_i^n + u_{i-1}^n}{(\\Delta x)^2}\n$$\n将这些近似式代入控制方程，并分离出新时间步长的项 $u_i^{n+1}$，即可得到内部网格点（$i=1, 2, \\dots, N_x-1$）的显式更新规则：\n$$\nu_i^{n+1} = u_i^n + \\Delta t \\left[ -U \\frac{u_i^n - u_{i-1}^n}{\\Delta x} + \\nu \\frac{u_{i+1}^n - 2u_i^n + u_{i-1}^n}{(\\Delta x)^2} + s(x_i, t_n) \\right]\n$$\n通过定义库朗数（Courant number）$C = U\\Delta t/\\Delta x$ 和扩散数 $D = \\nu\\Delta t/(\\Delta x)^2$，上式可以重写为：\n$$\nu_i^{n+1} = (1 - C - 2D)u_i^n + (C+D)u_{i-1}^n + D u_{i+1}^n + \\Delta t \\, s_i^n\n$$\n其中 $s_i^n = s(x_i, t_n)$。\n\n这个显式格式的稳定性是附带条件的。通过冯·诺依曼（von Neumann）稳定性分析，或简单地确保模板系数为非负，可以得到关于时间步长 $\\Delta t$ 的以下约束条件：\n$$\n1 - C - 2D \\ge 0 \\implies \\frac{U\\Delta t}{\\Delta x} + \\frac{2\\nu\\Delta t}{(\\Delta x)^2} \\le 1\n$$\n这给出了 $\\Delta t$ 的一个上限：\n$$\n\\Delta t \\le \\frac{(\\Delta x)^2}{U\\Delta x + 2\\nu}\n$$\n如下所示，对流出口边界条件的实现会引入进一步的稳定性约束。$\\Delta t$ 的最终选择必须满足所有这些约束。我们将选择一个为最严格稳定性极限 $90\\%$ 的 $\\Delta t$ 值。\n\n边界条件的实现如下：\n1.  **入口条件** 位于 $x=0$ ($i=0$)：问题指定 $u(0,t)=0$。这是一个狄利克雷（Dirichlet）条件，在每个时间步直接强制实施：\n    $$\n    u_0^n = 0 \\quad \\text{for all } n\n    $$\n2.  **出口条件** 位于 $x=L$ ($i=N_x$)：\n    -   **狄利克雷（压力出口模拟）**：$u(L,t)=0$。该条件直接强制实施：\n        $$\n        u_{N_x}^n = 0 \\quad \\text{for all } n\n        $$\n    -   **对流（无反射）**：$\\frac{\\partial u}{\\partial t} + U_c \\frac{\\partial u}{\\partial x} = 0$。我们在 $x_L = x_{N_x}$ 处离散该方程，时间上使用前向欧拉法，空间上使用一阶向后差分（与出射波一致）：\n        $$\n        \\frac{u_{N_x}^{n+1} - u_{N_x}^n}{\\Delta t} + U_c \\frac{u_{N_x}^n - u_{N_x-1}^n}{\\Delta x} = 0\n        $$\n        求解 $u_{N_x}^{n+1}$，我们得到出口点的更新规则：\n        $$\n        u_{N_x}^{n+1} = u_{N_x}^n - \\frac{U_c \\Delta t}{\\Delta x}(u_{N_x}^n - u_{N_x-1}^n) = \\left(1 - \\frac{U_c \\Delta t}{\\Delta x}\\right)u_{N_x}^n + \\frac{U_c \\Delta t}{\\Delta x}u_{N_x-1}^n\n        $$\n        为使这个两点格式稳定，系数必须为非负，这要求 $\\frac{U_c \\Delta t}{\\Delta x} \\le 1$，即 $\\Delta t \\le \\frac{\\Delta x}{U_c}$。\n\n因此，时间步长的最终稳定性约束是两个推导条件的最小值：\n$$\n\\Delta t \\le \\min\\left( \\frac{(\\Delta x)^2}{U\\Delta x + 2\\nu}, \\frac{\\Delta x}{U_c} \\right)\n$$\n我们选择 $\\Delta t = 0.9 \\times \\min\\left( \\frac{(\\Delta x)^2}{U\\Delta x + 2\\nu}, \\frac{\\Delta x}{U_c} \\right)$。\n\n初始条件 $u(x,0)=0$ 通过将所有 $i$ 的解向量初始化为 $u_i^0=0$ 来设定。\n\n为了量化上游差异 $\\mathcal{D}$，我们必须计算两个解 $u_{\\mathrm{conv}}(x,t)$ 和 $u_{\\mathrm{Dir}}(x,t)$ 之间的均方根差，并在域 $x \\in [0, x_u]$ 和 $t \\in [T-\\Delta, T]$ 上进行平均。该积分通过对相应网格点和时间步的离散求和来近似：\n$$\n\\mathcal{D}^2 = \\frac{1}{\\Delta \\cdot x_u} \\int_{T-\\Delta}^{T} \\int_{0}^{x_u} (u_{\\mathrm{conv}} - u_{\\mathrm{Dir}})^2 \\,dx\\,dt \\approx \\frac{\\Delta x \\Delta t}{\\Delta \\cdot x_u} \\sum_{n=N_{\\text{start}}}^{N_{\\text{end}}} \\sum_{i=0}^{N_{xu}} (u_{\\mathrm{conv},i}^n - u_{\\mathrm{Dir},i}^n)^2\n$$\n其中 $N_{xu} = \\text{int}(x_u/\\Delta x)$，$N_{\\text{start}} = \\text{int}((T-\\Delta)/\\Delta t)$，以及 $N_{\\text{end}} = \\text{int}(T/\\Delta t)$。\n\n每个测试案例的算法流程如下：\n1.  初始化参数和网格：$L, U, \\nu, A, \\mathrm{St}, x_c, \\sigma, U_c, T, x_u, \\Delta$。\n2.  设置 $\\Delta x$ 并计算稳定的 $\\Delta t$。确定网格点数 $N_x$ 和时间步数 $N_T$。\n3.  将两个解向量 $u_{\\mathrm{Dir}}$ 和 $u_{\\mathrm{conv}}$ 初始化为零。\n4.  从 $n=0$ 迭代至 $N_T-1$：\n    a.  计算所有网格点的源项 $s(x, t_n)$。\n    b.  使用内部点的显式更新规则和各自的边界条件实现来计算下一时间步的解 $u_{\\mathrm{Dir}}^{n+1}$ 和 $u_{\\mathrm{conv}}^{n+1}$。\n    c.  如果当前时间 $t_n$ 位于平均窗口 $[T-\\Delta, T]$ 内，则计算 $i=0, \\dots, N_{xu}$ 的平方差之和 $(u_{\\mathrm{conv},i}^n - u_{\\mathrm{Dir},i}^n)^2$ 并将其加到累计总和中。\n5.  时间循环结束后，使用累计总和与归一化因子计算最终差异 $\\mathcal{D}$。\n6.  计算出的 $\\mathcal{D}$ 值即为该测试案例的结果。\n7.  对四个指定的案例中的每一个重复此过程。", "answer": "```python\nimport numpy as np\n\ndef compute_discrepancy_for_case(case_params):\n    \"\"\"\n    Solves the 1D advection-diffusion equation for two different outlet\n    boundary conditions and computes the upstream discrepancy.\n    \"\"\"\n    # Extract parameters from the dictionary\n    U = case_params['U']\n    nu = case_params['nu']\n    L = case_params['L']\n    Uc = case_params['Uc']\n    T = case_params['T']\n    xc = case_params['xc']\n    sigma = case_params['sigma']\n    A = case_params['A']\n    St = case_params['St']\n    xu = case_params['xu']\n    delta_T_factor = case_params['delta_T_factor']\n    dx = case_params['dx']\n\n    delta = delta_T_factor * T\n\n    # Grid setup\n    Nx = int(L / dx)\n    x = np.linspace(0, L, Nx + 1)\n\n    # Stability analysis to determine the time step dt\n    # First condition from interior point scheme (advection-diffusion)\n    dt_bound1 = (dx**2) / (U * dx + 2 * nu)\n    # Second condition from convective outlet boundary condition scheme\n    dt_bound2 = dx / Uc\n    \n    # Choose dt with a safety factor\n    safety_factor = 0.9\n    dt = safety_factor * min(dt_bound1, dt_bound2)\n    Nt = int(T / dt)\n\n    # Initialize solution arrays for both boundary conditions\n    u_dir = np.zeros(Nx + 1)\n    u_conv = np.zeros(Nx + 1)\n\n    # Prepare for discrepancy calculation\n    sum_sq_diff = 0.0\n    t_start_avg = T - delta\n    n_start_avg = int(t_start_avg / dt)\n    Nxu = int(xu / dx)\n    count_samples = 0\n\n    # Time-marching loop\n    for n in range(Nt):\n        t = n * dt\n        \n        # Source term\n        s = A * np.sin(2 * np.pi * St * t) * np.exp(-((x - xc)**2) / (2 * sigma**2))\n\n        # --- Update solution for Dirichlet BC ---\n        u_dir_new = np.zeros(Nx + 1)\n        # Interior points (vectorized)\n        adv_dir = U * (u_dir[1:Nx] - u_dir[0:Nx-1]) / dx\n        diff_dir = nu * (u_dir[2:Nx+1] - 2 * u_dir[1:Nx] + u_dir[0:Nx-1]) / (dx**2)\n        u_dir_new[1:Nx] = u_dir[1:Nx] + dt * (-adv_dir + diff_dir + s[1:Nx])\n        # BCs are u_dir(0) = 0 and u_dir(L) = 0, which are already set by initialization\n        \n        # --- Update solution for Convective BC ---\n        u_conv_new = np.zeros(Nx + 1)\n        # Interior points (vectorized)\n        adv_conv = U * (u_conv[1:Nx] - u_conv[0:Nx-1]) / dx\n        diff_conv = nu * (u_conv[2:Nx+1] - 2 * u_conv[1:Nx] + u_conv[0:Nx-1]) / (dx**2)\n        u_conv_new[1:Nx] = u_conv[1:Nx] + dt * (-adv_conv + diff_conv + s[1:Nx])\n        # Inlet BC u_conv(0) = 0 is set by initialization\n        # Convective outlet BC at x=L\n        u_conv_new[Nx] = u_conv[Nx] - (Uc * dt / dx) * (u_conv[Nx] - u_conv[Nx-1])\n\n        # Update solutions for the next time step\n        u_dir = u_dir_new\n        u_conv = u_conv_new\n\n        # Accumulate squared difference if in the averaging time window\n        if n >= n_start_avg:\n            diff_vec = u_conv[0:Nxu+1] - u_dir[0:Nxu+1]\n            sum_sq_diff += np.sum(diff_vec**2)\n            count_samples += 1\n\n    # Calculate final discrepancy D\n    # The normalization in the integral is 1/(Delta * x_u)\n    # The numerical integral approx is sum(...) * dx * dt\n    # So D^2 = (sum_sq_diff * dx * dt) / (delta * xu)\n    if count_samples > 0:\n        # A more direct numerical averaging: average over grid points and time steps\n        avg_sq_diff = sum_sq_diff / (count_samples * (Nxu + 1))\n        discrepancy = np.sqrt(avg_sq_diff)\n    else:\n        discrepancy = 0.0\n    \n    # The problem asks for the RMS value as defined by the integral.\n    # The number of time steps in the averaging window is (Nt - n_start_avg)\n    # The time duration of averaging is (Nt - n_start_avg) * dt, which is approximately delta.\n    # The number of spatial points is Nxu+1, covering a length of Nxu*dx = xu.\n    # The formula is sqrt( (integral) / (delta * xu) )\n    # integral_approx = sum_sq_diff * dx * dt\n    # So D = sqrt( (sum_sq_diff * dx * dt) / (delta * xu) )\n    # This might be sensitive to the exact number of steps.\n    # Let's use the provided formula directly\n    \n    total_time_in_avg = count_samples * dt\n    if total_time_in_avg > 0 and xu > 0:\n         discrepancy = np.sqrt((sum_sq_diff * dx * dt) / (total_time_in_avg * xu))\n    else:\n         discrepancy = 0.0\n\n    return discrepancy\n\ndef solve():\n    \"\"\"\n    Main function to run the test suite and print results.\n    \"\"\"\n    test_cases = [\n        # Case 1: advection-dominated, long domain\n        {'U': 1.0, 'nu': 0.01, 'L': 10.0, 'Uc': 1.0, 'T': 12.0, 'xc': 3.0, 'sigma': 0.15, 'A': 1.0, 'St': 0.2, 'xu': 2.0, 'delta_T_factor': 0.2, 'dx': 0.05},\n        # Case 2: diffusion-elevated, moderate domain\n        {'U': 0.5, 'nu': 0.1, 'L': 6.0, 'Uc': 0.5, 'T': 12.0, 'xc': 2.0, 'sigma': 0.15, 'A': 1.0, 'St': 0.2, 'xu': 1.5, 'delta_T_factor': 0.2, 'dx': 0.05},\n        # Case 3: short domain, outflow near source\n        {'U': 1.0, 'nu': 0.05, 'L': 4.0, 'Uc': 1.0, 'T': 8.0, 'xc': 2.5, 'sigma': 0.12, 'A': 1.0, 'St': 0.2, 'xu': 1.2, 'delta_T_factor': 0.2, 'dx': 0.05},\n        # Case 4: convective speed mismatch at outlet\n        {'U': 1.0, 'nu': 0.02, 'L': 8.0, 'Uc': 0.6, 'T': 10.0, 'xc': 3.0, 'sigma': 0.15, 'A': 1.0, 'St': 0.2, 'xu': 2.0, 'delta_T_factor': 0.2, 'dx': 0.05},\n    ]\n\n    results = []\n    for case in test_cases:\n        discrepancy = compute_discrepancy_for_case(case)\n        results.append(discrepancy)\n\n    # Print results in the specified format\n    print(f\"[{','.join(map(str, results))}]\")\n\nsolve()\n```", "id": "2438935"}, {"introduction": "对复杂流体现象进行全尺寸模拟的计算成本可能极其高昂。在本次实践中，我们探索一种强大的技术——降阶建模（reduced-order modeling），它将一个复杂的系统提炼成能捕捉其核心动力学的更简单的方程组。[@problem_id:2438941] 我们不直接求解完整的纳维-斯托克斯方程，而是将两个并排圆柱后方的相互作用尾迹视为耦合的振子。这个练习将指导您使用这个耦合振子模型，通过计算来寻找能够产生同步、反相“二元涡街”的特定几何构型。", "problem": "您的任务是构建并分析一个最小化的、自洽的降阶模型，用于描述均匀来流中两个并排圆柱体周围的非定常、不可压缩流动，以便通过算法确定是否存在能够产生“二元涡街”（反相涡脱落）的构型。物理设置为两个无限长圆柱体，直径分别为 $D_1$ 和 $D_2$，其中心之间的横向中心距为 $T$，置于速度为 $U$ 的均匀来流中。圆柱体的轴线平行对齐，来流方向垂直于连接其中心的直线。请使用以下原理和建模假设来推导一个可计算的判据，并实现一个对间距的数值搜索。\n\n基本原理与建模：\n- 从不可压缩的Navier–Stokes方程出发，并观察到当雷诺数（Reynolds number (Re)）超过一个阈值时，单个圆柱体的尾流会经历一个超临界Hopf分岔，形成一个饱和的周期性极限环。用一个Stuart–Landau振子来表示每个尾流的主导复振幅，然后对两个振子进行弱耦合、弱非线性的相位约化。这将得到一个关于相位差 $\\theta(t) \\equiv \\phi_2(t) - \\phi_1(t)$ 的单一常微分方程（ODE），形式如下\n$$\n\\frac{d\\theta}{dt} \\;=\\; \\Delta \\omega \\;-\\; 2\\,K(T/D_{\\mathrm{ref}}, \\overline{\\mathrm{Re}})\\,\\sin\\theta,\n$$\n其中 $\\Delta \\omega \\equiv \\omega_2 - \\omega_1$ 是脱落的固有角频率之差，$K$ 是具有角频率量纲的水动力耦合系数，$D_{\\mathrm{ref}}$ 是一个参考直径，$\\overline{\\mathrm{Re}}$ 是这对圆柱体的一个代表性雷诺数。在这个简化方程中，稳定不动点满足\n$$\n\\sin\\theta^\\star \\;=\\; \\frac{\\Delta \\omega}{2\\,K},\n$$\n前提是满足锁相条件\n$$\n\\left|\\Delta \\omega\\right| \\;\\le\\; 2\\,\\left|K\\right|\n$$\n。当 $K < 0$ 且上述不等式成立时，在 $\\theta^\\star = \\pi$ 附近存在一个稳定平衡。我们将二元涡街定义为反相锁定状态 $\\theta^\\star \\approx \\pi$。\n\n- 使用标准的无量纲Strouhal数 $\\mathrm{St} \\equiv f D / U$，并采用有经验支持的关联式\n$$\n\\mathrm{St}(\\mathrm{Re}) \\;=\\; \\max\\!\\left(0,\\; 0.212 \\;-\\; \\frac{4.5}{\\mathrm{Re}}\\right)\n$$\n，适用于 $\\mathrm{Re} \\ge 50$ 的情况；而对于 $\\mathrm{Re} < 50$ 则没有周期性脱落。圆柱体 $j \\in \\{1,2\\}$ 的角频率为\n$$\n\\omega_j \\;=\\; 2\\pi\\,\\mathrm{St}(\\mathrm{Re}_j)\\,\\frac{U}{D_j},\n$$\n其中 $\\mathrm{Re}_j \\equiv \\dfrac{U D_j}{\\nu}$，$\\nu$ 是运动粘度。\n\n- 使用一种唯象的水动力耦合形式\n$$\nK\\!\\left(\\frac{T}{D_{\\mathrm{ref}}}, \\overline{\\mathrm{Re}}\\right) \\;=\\; \\kappa\\,\\overline{\\omega}\\,\\exp\\!\\Big(-\\alpha\\big(\\tfrac{T}{D_{\\mathrm{ref}}}-1\\big)\\Big)\\,\\Bigg(\\frac{\\tfrac{T}{D_{\\mathrm{ref}}}}{T_c(\\overline{\\mathrm{Re}})} - 1\\Bigg),\n$$\n其中 $\\overline{\\omega} \\equiv (\\omega_1 + \\omega_2)/2$，$D_{\\mathrm{ref}} \\equiv (D_1 + D_2)/2$，$\\overline{\\mathrm{Re}} \\equiv (\\mathrm{Re}_1 + \\mathrm{Re}_2)/2$，以及\n$$\nT_c(\\overline{\\mathrm{Re}}) \\;=\\; 1.2 \\;+\\; 0.3\\,\\tanh\\!\\left(\\frac{\\overline{\\mathrm{Re}} - 100}{300}\\right).\n$$\n该模型包含了耦合随间距增大而指数衰减，以及在临界间距 $T_c$ 处发生符号变化的特性。选择无量纲常数 $\\kappa = 0.2$ 和 $\\alpha = 1.5$。角度应以弧度处理。\n\n二元涡街检测规则：\n- 对于给定的 $(U,\\nu,D_1,D_2)$ 和一个尝试的间距比 $\\tau \\equiv T/D_{\\mathrm{ref}}$，当且仅当以下所有条件都成立时，存在一个二元涡街：\n    1. $\\mathrm{Re}_1 \\ge 50$ 并且 $\\mathrm{Re}_2 \\ge 50$，\n    2. $K(\\tau,\\overline{\\mathrm{Re}}) < 0$，\n    3. $\\left|\\Delta \\omega\\right| \\le 2\\,\\left|K(\\tau,\\overline{\\mathrm{Re}})\\right|$。\n- 如果以上条件都满足，则反相平衡存在且稳定，其平衡相位差 $\\theta^\\star$ 位于反相分支上。\n\n计算任务：\n- 实现一个程序，对于每个测试用例，在间距比的均匀网格上进行搜索\n$$\n\\tau \\in [1.05,\\,3.00]\n$$\n，增量为\n$$\n\\Delta \\tau \\;=\\; 0.01,\n$$\n并根据上述规则返回产生二元涡街的最小 $\\tau$ 值。如果在搜索范围内不存在这样的 $\\tau$，则返回哨兵值 $-1.000$。\n\n- 使用以下测试套件。所有物理量必须在国际单位制（International System of Units）下解释：速度 $U$ 单位为 m/s，直径 $D_1,D_2$ 单位为 m，运动粘度 $\\nu$ 单位为 m$^2$/s。角度以弧度计量。\n    1. 用例A（基准相同圆柱体）：$U = 1.0$ m/s，$\\nu = 1.5\\times 10^{-5}$ m$^2$/s，$D_1 = 0.010$ m，$D_2 = 0.010$ m。\n    2. 用例B（直径不匹配）：$U = 1.0$ m/s，$\\nu = 1.5\\times 10^{-5}$ m$^2$/s，$D_1 = 0.010$ m，$D_2 = 0.013$ m。\n    3. 用例C（速度降低，相同圆柱体）：$U = 0.5$ m/s，$\\nu = 1.5\\times 10^{-5}$ m$^2$/s，$D_1 = 0.010$ m，$D_2 = 0.010$ m。\n    4. 用例D（低于脱落阈值）：$U = 0.05$ m/s，$\\nu = 1.5\\times 10^{-5}$ m$^2$/s，$D_1 = 0.004$ m，$D_2 = 0.004$ m。\n\n要求的最终输出格式：\n- 您的程序应生成单行输出，其中包含四个测试用例的结果，形式为方括号内包含的逗号分隔列表，每个数字四舍五入到三位小数，例如\n$$\n[\\tau_A,\\tau_B,\\tau_C,\\tau_D],\n$$\n其中每个 $\\tau$ 是该用例产生二元涡街的最小间距比 $\\tau$（四舍五入到三位小数），或者如果在搜索区间内未找到，则为哨兵值 $-1.000$。间距比是无量纲的，因此没有单位。", "solution": "问题陈述已经过分析并被认为是有效的。它提出了一个计算物理学中自洽的、有科学依据的建模练习，问题定义明确且目标客观。任务是基于一个给定的绕双圆柱体流动的降阶模型，实现一个数值搜索，以找到支持反相涡脱落状态的最小间距。以下是对所需计算算法的系统推导。\n\n问题的核心在于满足一系列关于“二元涡街”存在的三个特定条件，这对应于耦合振子模型中一个稳定的反相锁定状态。对于一组给定的物理参数 $(U, \\nu, D_1, D_2)$，我们的目标是在区间 $[1.05, 3.00]$ 内找到满足这些条件的最小无量纲间距比 $\\tau \\equiv T/D_{\\mathrm{ref}}$。\n\n单个测试用例的算法流程如下：\n\n**第1步：初始参数计算和预计算**\n\n首先，我们计算不依赖于间距比 $\\tau$ 的物理参数。给定来流速度 $U$、运动粘度 $\\nu$ 和圆柱体直径 $D_1$ 和 $D_2$：\n\n每个圆柱体 $j \\in \\{1,2\\}$ 的雷诺数计算如下：\n$$\n\\mathrm{Re}_j = \\frac{U D_j}{\\nu}\n$$\n二元涡街存在的第一个条件是两个圆柱体都必须处于周期性脱落区。这由以下判据给出：\n$$\n\\mathrm{Re}_1 \\ge 50 \\quad \\text{和} \\quad \\mathrm{Re}_2 \\ge 50\n$$\n如果不满足此条件，则至少有一个圆柱体不会发生稳定的涡脱落，这使得耦合分析变得没有意义。在这种情况下，搜索终止，并返回哨兵值 $-1.000$。\n\n**第2步：固有频率计算**\n\n如果雷诺数满足要求，我们接下来计算固有脱落频率。每个圆柱体的Strouhal数 $\\mathrm{St}$ 由给定的经验关联式确定：\n$$\n\\mathrm{St}(\\mathrm{Re}_j) = \\max\\left(0, 0.212 - \\frac{4.5}{\\mathrm{Re}_j}\\right)\n$$\n然后，每个圆柱体的固有脱落角频率 $\\omega_j$ 为：\n$$\n\\omega_j = 2\\pi \\cdot \\mathrm{St}(\\mathrm{Re}_j) \\cdot \\frac{U}{D_j}\n$$\n根据这些，我们计算固有频率之差 $\\Delta\\omega$，这是锁相条件的一个关键参数：\n$$\n\\Delta\\omega = \\omega_2 - \\omega_1\n$$\n\n**第3步：模型参考参数计算**\n\n耦合振子模型使用了几个参考量和平均量，接下来计算它们：\n- 参考直径：$D_{\\mathrm{ref}} = (D_1 + D_2) / 2$\n- 平均雷诺数：$\\overline{\\mathrm{Re}} = (\\mathrm{Re}_1 + \\mathrm{Re}_2) / 2$\n- 平均角频率：$\\overline{\\omega} = (\\omega_1 + \\omega_2) / 2$\n\n水动力耦合系数 $K$ 的模型依赖于一个临界间距比 $T_c$，而 $T_c$ 本身是平均雷诺数的函数：\n$$\nT_c(\\overline{\\mathrm{Re}}) = 1.2 + 0.3 \\cdot \\tanh\\left(\\frac{\\overline{\\mathrm{Re}} - 100}{300}\\right)\n$$\n这些量在每个测试用例中只需计算一次，因为它们与搜索变量 $\\tau$ 无关。\n\n**第4步：在间距比网格上进行数值搜索**\n\n任务的核心是在一个离散的间距比 $\\tau$ 网格上进行数值搜索。搜索域指定为 $\\tau \\in [1.05, 3.00]$，增量为 $\\Delta\\tau = 0.01$。这定义了一个点网格 $\\tau_i = 1.05 + i \\cdot 0.01$，其中 $i=0, 1, \\dots, 195$。我们按升序遍历这些 $\\tau$ 值。对于每个 $\\tau$，我们检查二元涡街存在的剩下两个条件。\n\n**第5步：对每个尝试的间距评估条件**\n\n对于每个尝试的 $\\tau$ 值，我们必须评估耦合系数 $K$ 并检查最后两个条件。耦合系数由以下公式给出：\n$$\nK(\\tau, \\overline{\\mathrm{Re}}) = \\kappa \\cdot \\overline{\\omega} \\cdot \\exp\\left(-\\alpha(\\tau-1)\\right) \\cdot \\left(\\frac{\\tau}{T_c(\\overline{\\mathrm{Re}})} - 1\\right)\n$$\n其中模型常数给定为 $\\kappa = 0.2$ 和 $\\alpha = 1.5$。\n\n计算出 $K$ 后，我们检查第二个和第三个条件：\n1.  **条件2（负耦合）：** 反相状态要求负耦合。\n    $$\n    K(\\tau, \\overline{\\mathrm{Re}}) < 0\n    $$\n2.  **条件3（锁相）：** 频率差必须足够小，以便能被耦合强度克服。\n    $$\n    |\\Delta\\omega| \\le 2 |K(\\tau, \\overline{\\mathrm{Re}})|\n    $$\n\n如果对于给定的 $\\tau$，这两个条件以及初始的雷诺数检查都得到满足，那么我们就找到了一个产生二元涡街的间距。因为搜索是从网格中最小的 $\\tau$ 开始的，所以第一个满足所有条件的 $\\tau$ 值就是问题陈述所要求的最小值。算法随后返回此值并终止当前测试用例的搜索。\n\n如果遍历整个 $\\tau$ 值网格的循环完成而没有找到满足所有三个条件的任何值，则意味着在指定的搜索范围内不存在这样的构型。在这种情况下，算法返回哨兵值 $-1.000$。\n\n这个完整的、分步的过程提供了一个确定性算法，用于为每个测试用例找到所需的间距比，并将在最终程序中实现。", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Solves the binary vortex street problem for a suite of test cases.\n    \"\"\"\n\n    test_cases = [\n        # Case A: U, nu, D1, D2\n        (1.0, 1.5e-5, 0.010, 0.010),\n        # Case B\n        (1.0, 1.5e-5, 0.010, 0.013),\n        # Case C\n        (0.5, 1.5e-5, 0.010, 0.010),\n        # Case D\n        (0.05, 1.5e-5, 0.004, 0.004)\n    ]\n\n    results = []\n    for case in test_cases:\n        result = find_minimal_spacing(*case)\n        results.append(f\"{result:.3f}\")\n\n    print(f\"[{','.join(results)}]\")\n\ndef find_minimal_spacing(U, nu, D1, D2):\n    \"\"\"\n    For a given set of physical parameters, finds the smallest spacing ratio tau\n    that produces a binary vortex street.\n    \n    Args:\n        U (float): Free-stream speed in m/s.\n        nu (float): Kinematic viscosity in m^2/s.\n        D1 (float): Diameter of cylinder 1 in m.\n        D2 (float): Diameter of cylinder 2 in m.\n\n    Returns:\n        float: The smallest spacing ratio tau, or -1.0 if none is found.\n    \"\"\"\n    # Model constants\n    KAPPA = 0.2\n    ALPHA = 1.5\n\n    # --- Step 1: Initial Parameter Calculation ---\n    Re1 = U * D1 / nu\n    Re2 = U * D2 / nu\n\n    # Check shedding condition (Condition 1)\n    if Re1 < 50 or Re2 < 50:\n        return -1.0\n\n    # --- Step 2: Calculation of Natural Frequencies ---\n    def strouhal(Re):\n        return max(0.0, 0.212 - 4.5 / Re)\n\n    St1 = strouhal(Re1)\n    St2 = strouhal(Re2)\n    \n    # Handle the case where diameter could be zero, though not in test cases\n    omega1 = 2 * np.pi * St1 * U / D1 if D1 > 0 else 0\n    omega2 = 2 * np.pi * St2 * U / D2 if D2 > 0 else 0\n    \n    delta_omega = omega2 - omega1\n\n    # --- Step 3: Calculation of Model Reference Parameters ---\n    D_ref = (D1 + D2) / 2.0\n    Re_bar = (Re1 + Re2) / 2.0\n    omega_bar = (omega1 + omega2) / 2.0\n\n    def critical_spacing_ratio(Re_bar_val):\n        return 1.2 + 0.3 * np.tanh((Re_bar_val - 100.0) / 300.0)\n\n    Tc = critical_spacing_ratio(Re_bar)\n\n    # --- Step 4: Numerical Search over the Spacing Ratio Grid ---\n    # Search grid for tau from 1.05 to 3.00 with step 0.01\n    num_points = round((3.00 - 1.05) / 0.01) + 1\n    tau_grid = np.linspace(1.05, 3.00, num_points)\n\n    for tau in tau_grid:\n        # --- Step 5: Evaluation of Conditions for each Trial Spacing ---\n        \n        # Calculate coupling coefficient K\n        K = (KAPPA * omega_bar * np.exp(-ALPHA * (tau - 1.0)) * \n             ((tau / Tc) - 1.0))\n\n        # Check Condition 2 (Negative Coupling)\n        if K >= 0:\n            continue\n\n        # Check Condition 3 (Phase-Locking)\n        if np.abs(delta_omega) <= 2 * np.abs(K):\n            # All conditions met, this is the minimal tau\n            return tau\n\n    # If loop completes, no suitable tau was found\n    return -1.0\n\nsolve()\n\n```", "id": "2438941"}]}