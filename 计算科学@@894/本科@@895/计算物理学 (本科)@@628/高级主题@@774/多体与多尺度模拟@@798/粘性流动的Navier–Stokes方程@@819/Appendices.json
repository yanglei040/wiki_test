{"hands_on_practices": [{"introduction": "在投入复杂的数值模拟之前，理解流动的基本性质至关重要。本练习运用纳维-斯托克斯方程的标度分析来计算雷诺数 $Re$，这是一个关键的无量纲参数，它揭示了流动是由惯性主导还是由黏性主导。通过将这一原理应用于一个真实的生物系统，你将获得无需完整数值解就能表征流动状态的实践经验。[@problem_id:2654181]", "problem": "在斑马鱼（Danio rerio）胚胎中，被称为库普弗氏囊泡（Kupffer's vesicle, KV）的左右组织者是一个充满液体的腔体，其内部流动由活动纤毛驱动，并被认为有助于左右模式的形成。从第一性原理出发，可以通过比较不可压缩纳维-斯托克斯方程中惯性项和粘性项的特征量级来评估这种流动的状态。利用这种比较，请确定量化惯性效应与粘性效应之比的无量纲群，并根据以下符合物理实际的参数计算其在KV流动中的值：特征长度尺度 $L = 50\\,\\mu\\mathrm{m}$，特征流速 $U = 50\\,\\mu\\mathrm{m/s}$，流体质量密度 $\\rho = 10^3\\,\\mathrm{kg/m^3}$，以及动力粘度 $\\mu = 10^{-3}\\,\\mathrm{Pa\\cdot s}$。所有量都应在适当转换后，在国际单位制（SI）中进行解释。根据所计算出的无量纲群相对于 $1$ 的大小，在您的推理中解释KV流动是由惯性主导还是由粘性主导，以及预期的定性状态（例如，层流蠕动流）是什么。\n\n最终答案仅提供无量纲群的数值。以无量纲小数形式表示，无需四舍五入。", "solution": "首先对问题进行验证。\n\n从问题陈述中逐字提取的已知条件如下：\n- 系统：斑马鱼（*Danio rerio*）胚胎中的库普弗氏囊泡（KV）。\n- 任务：从第一性原理出发，确定代表惯性效应与粘性效应之比的无量纲群，并计算其值。\n- 特征长度尺度：$L = 50\\,\\mu\\mathrm{m}$。\n- 特征流速：$U = 50\\,\\mu\\mathrm{m/s}$。\n- 流体质量密度：$\\rho = 10^3\\,\\mathrm{kg/m^3}$。\n- 动力粘度：$\\mu = 10^{-3}\\,\\mathrm{Pa\\cdot s}$。\n- 指示：在国际单位制（SI）中解释所有量。\n- 指示：将结果与 $1$ 进行比较，以确定主导状态（惯性 vs. 粘性）和预期的流动类型。\n\n该问题被认定为有效。这是一个基于纳维-斯托克斯方程基本原理的、适定的生物物理流体动力学问题。其生物学背景科学准确，所提供的物理参数对于细胞尺度的流体动力学是符合实际的。该问题没有歧义、矛盾和事实错误。\n\n我们开始求解。粘性、不可压缩的牛顿流体的运动由纳维-斯托克斯方程描述。对于密度 $\\rho$ 和动力粘度 $\\mu$ 恒定的流体，动量守恒方程为：\n$$ \\rho \\left( \\frac{\\partial \\mathbf{v}}{\\partial t} + (\\mathbf{v} \\cdot \\nabla) \\mathbf{v} \\right) = -\\nabla p + \\mu \\nabla^2 \\mathbf{v} $$\n此处，$\\mathbf{v}$ 是流体速度矢量，$p$ 是压力，$t$ 是时间。我们忽略了体力，因为在这个微观尺度上，与粘性力和压力相比，体力通常可以忽略不计。\n\n左边的项，具体来说是对流加速度项 $\\rho (\\mathbf{v} \\cdot \\nabla) \\mathbf{v}$，代表惯性效应。右边的项 $\\mu \\nabla^2 \\mathbf{v}$，代表流体内部摩擦产生的粘性效应。为了确定流动的特性，我们比较这两个项的特征量级。这通过尺度分析来完成。\n\n我们引入问题中提供的特征尺度：速度尺度 $U$ 和长度尺度 $L$。微分算子 $\\nabla$ 可以被尺度化为 $\\nabla \\sim 1/L$。\n惯性项的量级估计为：\n$$ |\\rho (\\mathbf{v} \\cdot \\nabla) \\mathbf{v}| \\sim \\rho \\frac{U^2}{L} $$\n粘性项的量级估计为：\n$$ |\\mu \\nabla^2 \\mathbf{v}| \\sim \\mu \\frac{U}{L^2} $$\n量化惯性效应与粘性效应之比的无量纲群是这两个量级之比。这个数群被称为雷诺数，记为 $Re$。\n$$ Re = \\frac{\\text{惯性项量级}}{\\text{粘性项量级}} \\sim \\frac{\\rho U^2 / L}{\\mu U / L^2} = \\frac{\\rho U L}{\\mu} $$\n现在我们必须计算 $Re$ 的数值。首先，我们将所有给定参数转换为国际单位制基本单位。\n- 特征长度尺度：$L = 50\\,\\mu\\mathrm{m} = 50 \\times 10^{-6}\\,\\mathrm{m}$。\n- 特征流速：$U = 50\\,\\mu\\mathrm{m/s} = 50 \\times 10^{-6}\\,\\mathrm{m/s}$。\n- 质量密度：$\\rho = 10^3\\,\\mathrm{kg/m^3}$（已是国际单位制）。\n- 动力粘度：$\\mu = 10^{-3}\\,\\mathrm{Pa\\cdot s}$。单位帕斯卡·秒是一个国际单位制单位，等同于 $\\mathrm{kg} \\cdot \\mathrm{m}^{-1} \\cdot \\mathrm{s}^{-1}$。\n\n我们将这些值代入雷诺数的表达式中：\n$$ Re = \\frac{(10^{3}\\,\\mathrm{kg/m^{3}}) \\times (50 \\times 10^{-6}\\,\\mathrm{m/s}) \\times (50 \\times 10^{-6}\\,\\mathrm{m})}{10^{-3}\\,\\mathrm{Pa\\cdot s}} $$\n计算过程如下：\n$$ \n\\begin{align*}\nRe &= \\frac{10^{3} \\times (50 \\times 50) \\times 10^{-12}}{10^{-3}} \\\\\n&= \\frac{10^{3} \\times 2500 \\times 10^{-12}}{10^{-3}} \\\\\n&= \\frac{2.5 \\times 10^{6} \\times 10^{-12}}{10^{-3}} \\\\\n&= \\frac{2.5 \\times 10^{-6}}{10^{-3}} \\\\\n&= 2.5 \\times 10^{-3}\n\\end{align*}\n$$\n数值为 $Re = 0.0025$。\n\n按照要求，我们对这个结果进行解释。计算出的雷诺数 $Re = 2.5 \\times 10^{-3}$ 远小于 $1$ ($Re \\ll 1$)。由于雷诺数代表惯性力与粘性力之比，这个结果表明粘性力远超惯性力，占绝对主导地位。因此，库普弗氏囊泡中的流动是粘性主导的。这种流动状态被称为斯托克斯流（Stokes flow）或蠕动流（creeping flow）。此类流动的特点是层流、有序且时间可逆（在没有扩散的情况下），其动量平流可以忽略不计。这是大多数细胞和亚细胞层面生物过程所预期的物理状态。", "answer": "$$\\boxed{2.5 \\times 10^{-3}}$$", "id": "2654181"}, {"introduction": "在许多流体动力学问题中，压力扮演着一个确保流动保持不可压缩性的“隐形”角色。本实践将带你解决一个经典的“逆问题”：给定一个目标速度场，需要什么样的压力场来维持它？你将推导并数值求解压力泊松方程——这是许多计算流体动力学（CFD）求解器的基石，并掌握使用高效的谱方法来精确处理此类任务的技巧。[@problem_id:2416637]", "problem": "给定一个二维、定常、不可压缩的粘性流动，该流动由无彻体力情况下的纳维-斯托克斯方程控制。其基本依据是牛顿第二定律（按单位体积）和牛顿流体的质量守恒：即定常不可压缩流动的动量方程，\n$$\n(\\mathbf{u}\\cdot\\nabla)\\mathbf{u} \\;=\\; -\\frac{1}{\\rho}\\nabla p \\;+\\; \\nu \\nabla^2 \\mathbf{u},\n$$\n以及不可压缩性约束，\n$$\n\\nabla\\cdot \\mathbf{u} \\;=\\; 0,\n$$\n其中 $\\mathbf{u} = (u_x,u_y)$ 是速度， $p$ 是压力， $\\rho$ 是恒定密度， $\\nu$ 是恒定的运动粘度。在一个边长为 $L$ 米的周期性方形区域上，目标速度场是一个空间周期性的涡旋阵列，由一个速度标度 $U$ 和两个整数 $(m_x,m_y)$ 参数化，这两个整数指定了在 $x$ 和 $y$ 方向上的周期数。定义波数 $k_x = 2\\pi m_x/L$ 和 $k_y = 2\\pi m_y/L$。考虑不可压缩的目标场\n$$\nu_x(x,y) \\;=\\; U \\,\\sin(k_x x)\\,\\cos(k_y y), \\qquad\nu_y(x,y) \\;=\\; -\\,U \\,\\frac{k_x}{k_y}\\,\\cos(k_x x)\\,\\sin(k_y y),\n$$\n对于所有 $m_x \\ge 1$，$m_y \\ge 1$，此场都满足 $\\nabla\\cdot \\mathbf{u} = 0$。\n\n您的任务是：\n- 从定常不可压缩动量方程和不可压缩性约束出发，推导出在方形区域上具有周期性边界条件的压力 $p(x,y)$ 的标量泊松方程。您的推导必须从这些基本定律开始，通过取动量方程的散度来消除压力梯度，并利用 $\\nabla\\cdot\\mathbf{u}=0$ 和 $\\nabla\\cdot(\\nabla^2 \\mathbf{u}) = \\nabla^2 (\\nabla\\cdot\\mathbf{u})$。\n- 在一个均匀的 $N\\times N$ 网格上，使用快速傅里叶变换实现一个谱方法求解器，通过在傅里叶空间中求解所推导的泊松方程，计算出 $p(x,y)$（可差一个任意的相加常数）。通过将 $p$ 的零波数傅里叶系数设为零来施加零均值规范。\n- 通过评估残余加速度场，量化目标场在没有彻体力的情况下仅由压力维持的程度\n$$\n\\mathbf{a}_{\\mathrm{res}}(x,y) \\;=\\; -\\frac{1}{\\rho}\\nabla p(x,y) \\;+\\; \\nu \\nabla^2 \\mathbf{u}(x,y) \\;-\\; (\\mathbf{u}\\cdot\\nabla)\\mathbf{u}(x,y).\n$$\n计算其均方根大小\n$$\na_{\\mathrm{rms}} \\;=\\; \\sqrt{\\langle \\|\\mathbf{a}_{\\mathrm{res}}(x,y)\\|^2 \\rangle},\n$$\n其中 $\\langle\\cdot\\rangle$ 表示在区域上的空间平均，$\\|\\cdot\\|$ 是欧几里得范数。量 $a_{\\mathrm{rms}}$ 的单位是米每平方秒，表示除了压力之外，为精确维持目标场所需要施加的单位质量的彻体力的大小。\n- 对于下面的每个测试用例，报告两个标量：\n  1. 网格上的最大绝对压力，$p_{\\max} = \\max_{x,y} |p(x,y)|$，以帕斯卡为单位。\n  2. 残余均方根加速度 $a_{\\mathrm{rms}}$，以米每平方秒为单位。\n  \n除非另有说明，所有用例均使用以下参数：区域边长 $L = 1$ 米，网格大小 $N = 128$，密度 $\\rho = 1$ 千克每立方米。三个测试用例如下：\n- 用例 1（理想情况）：$U = 1$ 米每秒，$\\nu = 0.05$ 平方米每秒，$(m_x,m_y) = (1,1)$。\n- 用例 2（欧拉极限）：$U = 1$ 米每秒，$\\nu = 0$ 平方米每秒，$(m_x,m_y) = (2,1)$。\n- 用例 3（更高波数与粘度）：$U = 0.5$ 米每秒，$\\nu = 0.1$ 平方米每秒，$(m_x,m_y) = (3,2)$。\n\n您的程序必须：\n- 根据指定的网格为每个用例构造 $\\mathbf{u}(x,y)$。\n- 使用谱方法通过压力泊松方程求解具有周期性边界条件的 $p(x,y)$。\n- 为每个用例计算 $p_{\\max}$（单位：帕斯卡）和 $a_{\\mathrm{rms}}$（单位：米每平方秒）。\n\n最终输出格式：\n- 您的程序应生成一行输出，其中包含一个逗号分隔的列表的列表形式的结果，每个内部列表对应一个测试用例，并按顺序包含 $[p_{\\max}, a_{\\mathrm{rms}}]$。例如：$[[p_{\\max}^{(1)},a_{\\mathrm{rms}}^{(1)}],[p_{\\max}^{(2)},a_{\\mathrm{rms}}^{(2)}],[p_{\\max}^{(3)},a_{\\mathrm{rms}}^{(3)}]]$。\n- 所有量必须使用国际单位制 (SI)：压力单位为帕斯卡，加速度单位为米每平方秒，长度单位为米，速度单位为米每秒，密度单位为千克每立方米，粘度单位为平方米每秒。", "solution": "所提出的问题是一个形式良好且科学严谨的计算流体力学练习。它要求从基本的纳维-斯托克斯方程推导出一个定常、不可压缩粘性流动的压力泊松方程，然后实现一个谱方法来求解压力场并评估残余加速度。问题是自洽的，没有矛盾。因此，我将着手提供一个完整的解决方案。\n\n第一个任务是推导压力 $p(x,y)$ 的泊松方程。我们从没有彻体力的定常、不可压缩动量方程开始：\n$$(\\mathbf{u}\\cdot\\nabla)\\mathbf{u} = -\\frac{1}{\\rho}\\nabla p + \\nu \\nabla^2 \\mathbf{u}$$\n其中 $\\mathbf{u}$ 是速度场，$p$ 是压力，$\\rho$ 是恒定密度，$\\nu$ 是恒定的运动粘度。为了分离出压力项，我们对这个方程取散度：\n$$\\nabla \\cdot ((\\mathbf{u}\\cdot\\nabla)\\mathbf{u}) = \\nabla \\cdot \\left(-\\frac{1}{\\rho}\\nabla p\\right) + \\nabla \\cdot (\\nu \\nabla^2 \\mathbf{u})$$\n鉴于 $\\rho$ 和 $\\nu$ 是常数，它们可以移到散度算子外面。梯度的散度是拉普拉斯算子，所以 $\\nabla \\cdot (\\nabla p) = \\nabla^2 p$。这得到：\n$$\\nabla \\cdot ((\\mathbf{u}\\cdot\\nabla)\\mathbf{u}) = -\\frac{1}{\\rho}\\nabla^2 p + \\nu \\nabla \\cdot (\\nabla^2 \\mathbf{u})$$\n问题陈述中要求使用恒等式 $\\nabla\\cdot(\\nabla^2 \\mathbf{u}) = \\nabla^2 (\\nabla\\cdot\\mathbf{u})$。流动是不可压缩的，这由约束 $\\nabla\\cdot\\mathbf{u} = 0$ 表示。应用这个约束，粘性项的散度消失了：\n$$\\nu \\nabla \\cdot (\\nabla^2 \\mathbf{u}) = \\nu \\nabla^2 (\\nabla\\cdot\\mathbf{u}) = \\nu \\nabla^2(0) = 0$$\n因此，方程简化为：\n$$\\nabla \\cdot ((\\mathbf{u}\\cdot\\nabla)\\mathbf{u}) = -\\frac{1}{\\rho}\\nabla^2 p$$\n整理压力拉普拉斯算子，得到所需的压力泊松方程：\n$$\\nabla^2 p = -\\rho \\nabla \\cdot ((\\mathbf{u}\\cdot\\nabla)\\mathbf{u})$$\n这个方程规定，压力场会进行调整以抵消平流加速度的散度，从而确保流动在任何时候都保持不可压缩。\n\n第二个任务是使用基于快速傅里叶变换 (FFT) 的谱方法，在边长为 $L$ 的周期性方形区域上对该方程进行数值求解。该区域被离散化为一个均匀的 $N \\times N$ 网格。谱方法的核心原理是，物理空间中的微分对应于傅里叶空间中的乘法。如果 $\\hat{g}(k_x, k_y)$ 是函数 $g(x,y)$ 的二维离散傅里叶变换，那么它关于 $x$ 的偏导数的傅里叶变换由 $i k_x \\hat{g}(k_x, k_y)$ 给出，其中 $k_x$ 是 $x$ 方向的波数。\n\n对压力泊松方程应用傅里叶变换，记为 $\\mathcal{F}$，得到：\n$$\\mathcal{F}\\{\\nabla^2 p\\} = \\mathcal{F}\\{-\\rho \\nabla \\cdot ((\\mathbf{u}\\cdot\\nabla)\\mathbf{u})\\}$$\n拉普拉斯算子 $\\nabla^2 = \\frac{\\partial^2}{\\partial x^2} + \\frac{\\partial^2}{\\partial y^2}$ 的傅里叶变换是乘以 $-(k_x^2 + k_y^2)$。设源项为 $S(x,y) = -\\rho \\nabla \\cdot ((\\mathbf{u}\\cdot\\nabla)\\mathbf{u})$。傅里叶空间中的方程变为：\n$$-(k_x^2 + k_y^2) \\hat{p}(k_x, k_y) = \\hat{S}(k_x, k_y)$$\n压力场的傅里叶系数 $\\hat{p}$ 可以通过代数除法求得：\n$$\\hat{p}(k_x, k_y) = -\\frac{\\hat{S}(k_x, k_y)}{k_x^2 + k_y^2}$$\n在零波数模式 $(k_x, k_y) = (0,0)$ 处存在一个奇点，此时分母为零。这反映了一个物理事实，即压力仅在相差一个任意相加常数的意义下是确定的。问题指定了“零均值规范”，这是通过将压力的零波数傅里叶系数设置为零来强制执行的：$\\hat{p}(0,0) = 0$。为了保持一致性，源项的零波数模式 $\\hat{S}(0,0)$ 也必须为零。这一点是得到保证的，因为 $S$ 是一个矢量场的散度，而一个散度在周期性区域上的积分必定为零。\n\n数值实现步骤如下：\n1.  使用 `numpy.fft.fftfreq` 定义 $N \\times N$ 空间网格 $(x_i, y_j)$ 和相应的波数网格 $(K_x, K_y)$。\n2.  在空间网格上构建速度场分量 $u_x$ 和 $u_y$。\n3.  计算平流项分量 $A_x = (\\mathbf{u}\\cdot\\nabla)u_x$ 和 $A_y = (\\mathbf{u}\\cdot\\nabla)u_y$。所需的空间导数（例如 $\\frac{\\partial u_x}{\\partial x}$）通过FFT、乘以 $i K_x$ 和逆FFT谱方法计算。\n4.  同样使用谱方法微分计算泊松源项 $S = -\\rho(\\frac{\\partial A_x}{\\partial x} + \\frac{\\partial A_y}{\\partial y})$。\n5.  通过二维FFT计算 $\\hat{S}$。\n6.  在傅里叶空间中求解 $\\hat{p}$，并按所述处理 $k=0$ 模式。\n7.  对 $\\hat{p}$ 应用二维逆FFT，计算压力场 $p(x,y)$。然后从此网格中找到最大绝对压力 $p_{\\max}$。\n\n最后，我们必须计算均方根残余加速度 $a_{\\mathrm{rms}}$。残余加速度场定义为：\n$$\\mathbf{a}_{\\mathrm{res}}(x,y) = -\\frac{1}{\\rho}\\nabla p(x,y) + \\nu \\nabla^2 \\mathbf{u}(x,y) - (\\mathbf{u}\\cdot\\nabla)\\mathbf{u}(x,y)$$\n这个残余代表了使给定速度场成为带有计算出的压力场的定常纳维-斯托克斯方程精确解所需的单位质量的强迫项。所有项都在网格上计算。为保持一致性，梯度 $\\nabla p$ 和拉普拉斯算子 $\\nabla^2 \\mathbf{u}$ 都用谱方法计算。平流项 $(\\mathbf{u}\\cdot\\nabla)\\mathbf{u}$ 已经计算过了。\n均方根大小由下式给出：\n$$a_{\\mathrm{rms}} = \\sqrt{\\frac{1}{N^2}\\sum_{i,j=0}^{N-1} \\| \\mathbf{a}_{\\mathrm{res}}(x_i, y_j) \\|^2}$$\n其中求和遍及所有网格点。计算出的压力场 $p$ 的作用是确保速度场满足不可压缩性约束。残余加速度 $\\mathbf{a}_{\\mathrm{res}}$ 代表了为精确维持目标场所需要施加的单位质量的体力。如果 $\\mathbf{a}_{\\mathrm{res}}$ 在数值上为零，则意味着给定的速度场 $\\mathbf{u}$ 是不含体力项的定常纳维-斯托克斯方程的一个精确解。数值实现将计算完整的残余表达式，以保持通用性和鲁棒性。", "answer": "```python\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Solves the pressure Poisson equation for a given 2D periodic flow\n    and computes the residual of the Navier-Stokes equations.\n    \"\"\"\n    # Global parameters\n    L = 1.0  # meters\n    N = 128  # grid size\n    rho = 1.0  # kg/m^3\n\n    # Test cases from the problem statement\n    test_cases = [\n        # (U, nu, (mx, my))\n        (1.0, 0.05, (1, 1)),  # Case 1\n        (1.0, 0.0, (2, 1)),   # Case 2\n        (0.5, 0.1, (3, 2)),   # Case 3\n    ]\n\n    results = []\n\n    # Discretization\n    delta = L / N\n    x = np.arange(N) * delta\n    y = np.arange(N) * delta\n    X, Y = np.meshgrid(x, y, indexing='ij')\n\n    # Wavenumbers\n    k_freq = np.fft.fftfreq(N, d=delta)\n    Kx_1d = 2 * np.pi * k_freq\n    Ky_1d = 2 * np.pi * k_freq\n    Kx, Ky = np.meshgrid(Kx_1d, Ky_1d, indexing='ij')\n\n    # Laplacian operator in Fourier space\n    lap_fourier = -(Kx**2 + Ky**2)\n\n    for U, nu, (mx, my) in test_cases:\n        # Case-specific parameters\n        kx = 2 * np.pi * mx / L\n        ky = 2 * np.pi * my / L\n\n        # 1. Construct velocity field u = (ux, uy)\n        ux = U * np.sin(kx * X) * np.cos(ky * Y)\n        uy = -U * (kx / ky) * np.cos(kx * X) * np.sin(ky * Y)\n\n        # Fourier transform of velocity components\n        ux_hat = np.fft.fft2(ux)\n        uy_hat = np.fft.fft2(uy)\n\n        # 2. Compute derivatives and advection term (u.grad)u\n        # Derivatives are computed in Fourier space\n        dux_dx = np.fft.ifft2(1j * Kx * ux_hat).real\n        dux_dy = np.fft.ifft2(1j * Ky * ux_hat).real\n        duy_dx = np.fft.ifft2(1j * Kx * uy_hat).real\n        duy_dy = np.fft.ifft2(1j * Ky * uy_hat).real\n        \n        # Advection term components\n        adv_x = ux * dux_dx + uy * dux_dy\n        adv_y = ux * duy_dx + uy * duy_dy\n\n        # 3. Solve pressure Poisson equation: lap(p) = -rho * div((u.grad)u)\n        # Source term for Poisson equation\n        adv_x_hat = np.fft.fft2(adv_x)\n        adv_y_hat = np.fft.fft2(adv_y)\n        \n        # Divergence in Fourier space\n        div_adv_hat = 1j * Kx * adv_x_hat + 1j * Ky * adv_y_hat\n        \n        source_hat = -rho * div_adv_hat\n\n        # Solve for pressure in Fourier space\n        p_hat = np.zeros_like(source_hat, dtype=complex)\n        \n        # Avoid division by zero at k=0 mode\n        non_zero_k = lap_fourier != 0\n        p_hat[non_zero_k] = source_hat[non_zero_k] / lap_fourier[non_zero_k]\n        \n        # Impose zero-mean gauge explicitly\n        p_hat[0, 0] = 0.0\n\n        # Transform pressure back to physical space\n        p = np.fft.ifft2(p_hat).real\n        \n        # 4. Calculate maximum absolute pressure\n        p_max = np.max(np.abs(p))\n\n        # 5. Compute residual acceleration: a_res = -1/rho*grad(p) + nu*lap(u) - (u.grad)u\n        \n        # Pressure gradient term\n        dp_dx = np.fft.ifft2(1j * Kx * p_hat).real\n        dp_dy = np.fft.ifft2(1j * Ky * p_hat).real\n        \n        grad_p_x = dp_dx\n        grad_p_y = dp_dy\n\n        # Viscous term\n        lap_ux = np.fft.ifft2(lap_fourier * ux_hat).real\n        lap_uy = np.fft.ifft2(lap_fourier * uy_hat).real\n\n        # Assemble residual components\n        a_res_x = - (1 / rho) * grad_p_x + nu * lap_ux - adv_x\n        a_res_y = - (1 / rho) * grad_p_y + nu * lap_uy - adv_y\n\n        # 6. Compute RMS of residual acceleration\n        a_res_sq_mag = a_res_x**2 + a_res_y**2\n        a_rms = np.sqrt(np.mean(a_res_sq_mag))\n\n        results.append([p_max, a_rms])\n\n    # Format the final output string as a list of lists\n    result_str = \",\".join([f\"[{res[0]},{res[1]}]\" for res in results])\n    print(f\"[{result_str}]\")\n\nsolve()\n```", "id": "2416637"}, {"introduction": "本实践将带你进入现代流体动力学的前沿，模拟一种由内部能量驱动并能展现复杂行为的“活性流体”。你将实现一个完整的伪谱模拟，观察对纳维-斯托克斯方程的修改（例如引入有效的“负黏度”）如何导致自发的模式形成。这个高级练习旨在构建你模拟非线性动力系统并分析其涌现特性的能力。[@problem_id:2416615]", "problem": "您需要编写一个完整的、可运行的程序，用于数值研究一个由修正的 Navier–Stokes 系统建模的二维不可压缩活性流体中的自发模式选择。该系统具有有效的大尺度负粘性和小尺度稳定项。物理和数学设置必须从不可压缩的 Navier–Stokes 方程开始，并发展到周期性域下的涡量公式。您的任务是实现一个伪谱时间积分器，以演化涡量场，并在模式存在时，为一小组预设的测试用例测量模式的主导涌现波长。\n\n起点是速度场 $\\mathbf{u}(\\mathbf{x},t)$ 和压力场 $p(\\mathbf{x},t)$ 的不可压缩 Navier–Stokes 方程，\n$$\n\\partial_t \\mathbf{u} + (\\mathbf{u}\\cdot \\nabla)\\mathbf{u} = -\\nabla p + \\nu \\nabla^2 \\mathbf{u} + \\mathbf{f},\n$$\n以及不可压缩性约束 $\\nabla \\cdot \\mathbf{u} = 0$。考虑一个边长为 $L$（单位：米）的二维周期性正方形域，并定义标量涡量 $\\omega = \\partial_x u_y - \\partial_y u_x$。本着活性流体建模的精神，用一个在大的尺度上注入能量并在小的尺度上进行耗散的有效线性算子来取代通常的粘性项。在涡量形式中，您将演化以下方程：\n$$\n\\partial_t \\omega + J(\\psi,\\omega) = -\\alpha \\nabla^2 \\omega - \\beta \\nabla^4 \\omega,\n$$\n其中 $J(\\psi,\\omega) = \\partial_x \\psi \\, \\partial_y \\omega - \\partial_y \\psi \\, \\partial_x \\omega$ 是雅可比非线性项，$\\psi$ 是流函数，通过 $-\\nabla^2 \\psi = \\omega$ 关联，$\\alpha &gt; 0$（单位：$\\mathrm{m^2/s}$）模拟了一个有效的负粘性 $-\\alpha \\nabla^2 \\omega$，它使长波长不稳定，而 $\\beta &gt; 0$（单位：$\\mathrm{m^4/s}$）通过 $-\\beta \\nabla^4 \\omega$ 提供小尺度稳定。所有量都应被视为物理空间中的实值场。\n\n您必须：\n- 使用基于快速傅里叶变换（FFT）的伪谱方法，通过流函数关系强制实现不可压缩性，并计算空间导数。在谱空间中使用标准的三分之二去混叠规则。\n- 对线性部分使用积分因子法，并结合对非线性部分的显式处理来进行时间推进。您可以使用一阶指数时间差分格式，其中线性算子在傅里右空间中被精确应用。\n- 将涡量 $\\omega(\\mathbf{x},0)$ 初始化为零均值、小振幅的随机场（无量纲涡量振幅），并以时间步长 $\\Delta t$（单位：秒）演化至指定的最终时间 $T$（单位：秒）。\n- 在每次模拟结束时，通过计算涡量场在傅里叶空间中的角度平均径向谱来估计主导波长。设基波数为 $k_0 = 2\\pi/L$。对于整数 $m \\ge 1$，定义离散波数 $k_m = m k_0$，并按 $k_m \\pm k_0/2$ 对谱能量进行分箱。选择具有最大分箱能量的 $m$（不包括 $m=0$），并报告主导波长 $\\lambda = 2\\pi / k_m$（单位：米）。\n- 如果流在所有解析的非零波数上都是线性稳定的，则没有模式可报告。在这种情况下，为避免不必要的模拟，首先确定当忽略非线性时，是否有任何解析的离散 $k_m$ 具有正的线性增长率。线性增长率可以通过将一个傅里叶模式代入线性化方程得到。如果没有 $k_m$（$m \\ge 1$）是线性不稳定的，则针对该情况返回 $\\lambda = 0.0$，而不执行时间积分。\n- 以米为单位表示每个测试用例的最终报告波长，四舍五入到三位小数。\n\n您的程序必须实现以上内容，然后运行以下测试套件。每个测试用例是一个元组 $\\left(L,\\alpha,\\beta,N,T,\\Delta t\\right)$，其中 $L$ 是域边长（单位：米），$\\alpha$ 的单位是 $\\mathrm{m^2/s}$，$\\beta$ 的单位是 $\\mathrm{m^4/s}$，$N$ 是每边的网格点数（无量纲），$T$ 是最终时间（单位：秒），$\\Delta t$ 是时间步长（单位：秒）：\n\n- 测试 1：$\\left(2\\pi,\\,1.0,\\,0.1,\\,64,\\,0.8,\\,0.01\\right)$。\n- 测试 2：$\\left(2\\pi,\\,0.05,\\,0.1,\\,64,\\,0.8,\\,0.01\\right)$。\n- 测试 3：$\\left(4\\pi,\\,1.0,\\,0.1,\\,64,\\,0.8,\\,0.01\\right)$。\n- 测试 4：$\\left(2\\pi,\\,1.0,\\,0.5,\\,64,\\,3.0,\\,0.01\\right)$。\n\n您的程序应生成单行输出，其中包含四个波长的结果，以逗号分隔，四舍五入到三位小数，并用方括号括起来，例如 $\\left[\\lambda_1,\\lambda_2,\\lambda_3,\\lambda_4\\right]$。\n\n所有答案必须以米为单位。如有角度，必须以弧度为单位。如有百分比，必须表示为小数。\n\n最终输出必须是单行。不应打印其他任何文本。", "solution": "该问题陈述提出了一个在计算物理学中有效且定义明确的任务。它要求以涡量形式对一个二维广义Navier-Stokes方程进行数值求解，这是一个常用于研究活性流体中模式形成的​​模型。该问题具有科学依据，数学上明确，并且所有用于模拟和分析的参数都已提供。不存在矛盾、歧义或不合理的假设。因此，我们将着手提供一个完整的解决方案。\n\n在边长为 $L$ 的二维周期域上，标量涡量场 $\\omega(\\mathbf{x},t)$ 的控制方程是\n$$\n\\partial_t \\omega + J(\\psi,\\omega) = -\\alpha \\nabla^2 \\omega - \\beta \\nabla^4 \\omega,\n$$\n其中，$\\psi$ 是由泊松方程 $-\\nabla^2 \\psi = \\omega$ 定义的流函数。参数 $\\alpha &gt; 0$ 对应于一个有效的负粘性，在长波长处注入能量，而 $\\beta &gt; 0$ 提供了一个超粘性阻尼，用以稳定短波长。项 $J(\\psi,\\omega) = \\partial_x \\psi \\, \\partial_y \\omega - \\partial_y \\psi \\, \\partial_x \\omega$ 代表涡量的非线性平流。\n\n我们使用伪谱方法在 $N \\times N$ 个点的均匀网格上求解此方程。该方法特别适用于具有周期性边界条件的问题，因为它允许使用快速傅里叶变换（FFT）高精度地计算空间导数。在傅里叶空间中，空间导数变成了简单的乘法。一个场 $f(\\mathbf{x})$ 及其傅里叶变换 $\\hat{f}(\\mathbf{k})$ 通过 $\\hat{f}(\\mathbf{k}) = \\mathcal{F}\\{f(\\mathbf{x})\\}$ 相关联。偏导数的变换是 $\\mathcal{F}\\{\\partial_x f\\} = i k_x \\hat{f}(\\mathbf{k})$，而拉普拉斯算子变为 $\\mathcal{F}\\{\\nabla^2 f\\} = -(k_x^2+k_y^2)\\hat{f}(\\mathbf{k}) = -k^2 \\hat{f}(\\mathbf{k})$，其中 $\\mathbf{k}=(k_x, k_y)$ 是波矢量。\n\n因此，傅里叶空间中的控制方程被转换为一个关于每个傅里叶模式 $\\hat{\\omega}(\\mathbf{k}, t)$ 的常微分方程组（ODEs）：\n$$\n\\frac{d\\hat{\\omega}_{\\mathbf{k}}}{dt} = (\\alpha k^2 - \\beta k^4)\\hat{\\omega}_{\\mathbf{k}} - \\widehat{J(\\psi,\\omega)}_{\\mathbf{k}}.\n$$\n该方程的形式为 $\\frac{d\\hat{\\omega}}{dt} = \\mathcal{L}\\hat{\\omega} + \\mathcal{N}(\\hat{\\omega})$，其中 $\\mathcal{L}_{\\mathbf{k}} = \\alpha k^2 - \\beta k^4$ 是线性部分，$\\mathcal{N}_{\\mathbf{k}} = -\\widehat{J(\\psi,\\omega)}_{\\mathbf{k}}$ 是非线性部分。\n\n模拟前，需要进行线性稳定性分析。具有波数 $k=|\\mathbf{k}|$ 的模式的增长率由线性算子给出，$\\sigma(k) = \\alpha k^2 - \\beta k^4$。只有当存在至少一个不稳定模式时，即对于某个 $k \\neq 0$ 有 $\\sigma(k) &gt; 0$，模式才能涌现。这个条件在 $\\alpha k^2 &gt; \\beta k^4$ 时满足，可简化为 $k^2 &lt; \\alpha/\\beta$。离散网格上最小的非零波数大小是 $k_{\\min} = 2\\pi/L$。因此，不稳定的一个必要条件是 $k_{\\min}^2 &lt; \\alpha/\\beta$。如果不满足此条件，所有可解析的模式都将是线性稳定的，不会从小的初始噪声中形成模式。在这种情况下，不进行模拟，直接报告主导波长 $\\lambda$ 为 $0.0$。\n\n对于时间积分，我们采用一阶指数时间差分（ETD1）格式。线性部分被精确处理，而非线性部分在单个时间步长 $\\Delta t$ 内被近似为常数。傅里叶模式 $\\hat{\\omega}_n = \\hat{\\omega}(t_n)$ 到 $\\hat{\\omega}_{n+1} = \\hat{\\omega}(t_{n+1})$ 的更新规则是\n$$\n\\hat{\\omega}_{n+1} = e^{\\mathcal{L} \\Delta t} \\hat{\\omega}_n + \\left(\\frac{e^{\\mathcal{L} \\Delta t} - 1}{\\mathcal{L}}\\right) \\mathcal{N}(\\hat{\\omega}_n),\n$$\n其中，当 $\\mathcal{L} \\to 0$ 时，括号中的项趋近于 $\\Delta t$，这对应于 $k=0$ 模式的情况。\n\n非线性项 $\\mathcal{N}(\\hat{\\omega})$ 是通过伪谱方法计算的。在每个时间步：\n1.  流函数 $\\hat{\\psi}$ 通过傅里叶空间关系 $k^2 \\hat{\\psi} = \\hat{\\omega}$ 从 $\\hat{\\omega}$ 求得，即对于 $\\mathbf{k} \\neq 0$ 有 $\\hat{\\psi}_{\\mathbf{k}} = \\hat{\\omega}_{\\mathbf{k}} / k^2$，而 $\\hat{\\psi}_{\\mathbf{k}=0} = 0$。\n2.  为防止雅可比项中的二次非线性引起的混叠误差，应用标准的三分之二去混叠规则。这涉及对 $\\hat{\\omega}$ 和 $\\hat{\\psi}$ 的傅里叶空间表示进行滤波，将任一方向上整数波指数超过 $N/3$ 的所有模式置零。\n3.  在傅里叶空间中计算必要的空间导数 ($\\partial_x\\psi, \\partial_y\\psi, \\partial_x\\omega, \\partial_y\\omega$)（例如，$i k_x \\hat{\\psi}$）。\n4.  使用逆FFT将这些导数场变换回物理空间。\n5.  在物理空间中通过逐点相乘计算雅可比项 $J(\\psi,\\omega)$。\n6.  将结果变换回傅里叶空间，得到 $\\widehat{J(\\psi,\\omega)}$，从而给出 $\\mathcal{N}(\\hat{\\omega})$。\n\n模拟从一个小的、零均值的随机涡量场开始，并演化至最终时间 $T$。\n\n最后，为确定主导波长，计算最终涡量场的角度平均功率谱。傅里叶网格上每个点的波矢量大小计算为 $k = \\sqrt{k_x^2 + k_y^2}$。能量 $|\\hat{\\omega}(\\mathbf{k},T)|^2$ 根据整数 $m = \\text{round}(k/k_0)$ 进行分箱，其中 $k_0 = 2\\pi/L$ 是基波数。识别出对应于最大能量的箱（对于 $m \\ge 1$）的索引 $m^*$。主导波长则为 $\\lambda = 2\\pi/k_{m^*} = 2\\pi/(m^* k_0) = L/m^*$。\n\n该实现首先定义一个函数，为给定的一组参数 $(L, \\alpha, \\beta, N, T, \\Delta t)$ 执行单次模拟运行，然后将此函数应用于每个指定的测试用例。所得波长经四舍五入至三位小数后，被收集并以要求的格式呈现。", "answer": "```python\nimport numpy as np\n\ndef run_simulation(L, alpha, beta, N, T, dt, seed=42):\n    \"\"\"\n    Runs a single simulation for the 2D active fluid model.\n\n    Args:\n        L (float): Domain side length in meters.\n        alpha (float): Negative viscosity coefficient in m^2/s.\n        beta (float): Hyperviscosity coefficient in m^4/s.\n        N (int): Number of grid points per side.\n        T (float): Total simulation time in seconds.\n        dt (float): Time step in seconds.\n        seed (int): Seed for the random number generator for reproducibility.\n\n    Returns:\n        float: The dominant wavelength in meters, or 0.0 if stable.\n    \"\"\"\n    # Step 1: Linear stability pre-check.\n    # The system is unstable if there is any k > 0 such that sigma(k) > 0.\n    # sigma(k) = alpha*k^2 - beta*k^4. This is positive for 0  k^2  alpha/beta.\n    # The smallest non-zero wavenumber squared on the grid is k_min^2 = (2*pi/L)^2.\n    # If k_min^2 >= alpha/beta, all k > 0 are stable.\n    k_min_sq = (2 * np.pi / L)**2\n    if k_min_sq >= alpha / beta:\n        return 0.0\n\n    # Step 2: Grid and wavenumber setup\n    k_vec = 2 * np.pi * np.fft.fftfreq(N, d=L/N)\n    kx, ky = np.meshgrid(k_vec, k_vec, indexing='ij')\n    k_squared = kx**2 + ky**2\n\n    # Inverse Laplacian operator in Fourier space (for finding psi from omega)\n    # psi_hat = omega_hat / k_squared, from -nabla^2 psi = omega\n    inv_k_squared = np.zeros_like(k_squared)\n    non_zero_k = k_squared != 0\n    inv_k_squared[non_zero_k] = 1.0 / k_squared[non_zero_k]\n\n    # Step 3: ETD1 coefficients\n    L_op = alpha * k_squared - beta * k_squared**2\n    exp_L_dt = np.exp(L_op * dt)\n    \n    # The integrating factor for the nonlinear term\n    integrating_factor = np.zeros_like(L_op, dtype=float)\n    non_zero_L = np.abs(L_op) > 1e-15\n    integrating_factor[non_zero_L] = (exp_L_dt[non_zero_L] - 1.0) / L_op[non_zero_L]\n    integrating_factor[~non_zero_L] = dt  # Taylor expansion for L_op -> 0\n\n    # Step 4: De-aliasing mask (2/3 rule)\n    k_indices = np.fft.fftfreq(N) * N\n    kx_indices, ky_indices = np.meshgrid(k_indices, k_indices, indexing='ij')\n    dealias_mask = (np.abs(kx_indices)  N/3)  (np.abs(ky_indices)  N/3)\n\n    # Step 5: Initialization\n    rng = np.random.default_rng(seed)\n    omega = 1e-4 * (rng.random((N, N)) - 0.5)\n    omega -= np.mean(omega)  # Enforce zero mean\n    omega_hat = np.fft.fft2(omega)\n\n    # Step 6: Time integration loop\n    num_steps = int(round(T / dt))\n    for _ in range(num_steps):\n        # Compute nonlinear term N_hat using pseudo-spectral method with de-aliasing\n        omega_hat_dealiased = omega_hat * dealias_mask\n        psi_hat_dealiased = omega_hat_dealiased * inv_k_squared\n\n        # Derivatives in Fourier space\n        d_omega_dx_hat = 1j * kx * omega_hat_dealiased\n        d_omega_dy_hat = 1j * ky * omega_hat_dealiased\n        d_psi_dx_hat = 1j * kx * psi_hat_dealiased\n        d_psi_dy_hat = 1j * ky * psi_hat_dealiased\n\n        # Transform derivatives to real space\n        d_omega_dx = np.fft.ifft2(d_omega_dx_hat).real\n        d_omega_dy = np.fft.ifft2(d_omega_dy_hat).real\n        d_psi_dx = np.fft.ifft2(d_psi_dx_hat).real\n        d_psi_dy = np.fft.ifft2(d_psi_dy_hat).real\n\n        # Compute Jacobian J(psi, omega) in real space\n        jacobian = d_psi_dx * d_omega_dy - d_psi_dy * d_omega_dx\n\n        # Transform Jacobian to Fourier space to get N_hat = -J_hat\n        N_hat = -np.fft.fft2(jacobian)\n\n        # Update vorticity in Fourier space using ETD1 scheme\n        omega_hat = exp_L_dt * omega_hat + integrating_factor * N_hat\n\n    # Step 7: Dominant wavelength analysis\n    power_spectrum = np.abs(omega_hat)**2\n    k_magnitudes = np.sqrt(k_squared)\n    k0 = 2 * np.pi / L\n    \n    if k0 == 0: return 0.0\n\n    m_indices = np.round(k_magnitudes / k0).astype(int)\n    max_m = N // 2\n    \n    # Use bincount for efficient radial averaging of the spectrum\n    binned_energy = np.bincount(m_indices.flatten(), weights=power_spectrum.flatten(), minlength=max_m + 1)\n    \n    # Exclude m=0 mode (mean) and find the mode with maximum energy\n    relevant_bins = binned_energy[1:max_m + 1]\n    \n    if len(relevant_bins) == 0 or np.sum(relevant_bins)  1e-12: # Check if pattern emerged\n        return 0.0\n        \n    m_star = np.argmax(relevant_bins) + 1  # Add 1 because we sliced from index 1\n    lambda_dominant = L / m_star  # lambda = 2*pi/k = 2*pi/(m*k0) = L/m\n    \n    return lambda_dominant\n\ndef solve():\n    \"\"\"\n    Main function to run the test suite and print results.\n    \"\"\"\n    # Test cases: (L, alpha, beta, N, T, dt)\n    test_cases = [\n        (2 * np.pi, 1.0, 0.1, 64, 0.8, 0.01),  # Test 1\n        (2 * np.pi, 0.05, 0.1, 64, 0.8, 0.01), # Test 2\n        (4 * np.pi, 1.0, 0.1, 64, 0.8, 0.01),  # Test 3\n        (2 * np.pi, 1.0, 0.5, 64, 3.0, 0.01),  # Test 4\n    ]\n\n    results = []\n    for case in test_cases:\n        L, alpha, beta, N, T, dt = case\n        wavelength = run_simulation(L, alpha, beta, N, T, dt)\n        results.append(f\"{wavelength:.3f}\")\n    \n    print(f\"[{','.join(results)}]\")\n\nsolve()\n```", "id": "2416615"}]}