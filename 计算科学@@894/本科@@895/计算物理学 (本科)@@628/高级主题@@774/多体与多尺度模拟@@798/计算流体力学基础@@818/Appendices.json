{"hands_on_practices": [{"introduction": "理论知识通过动手实践才能真正内化。本章提供了一系列精心设计的计算练习，旨在帮助您巩固计算流体力学（CFD）的基本原理。第一个练习 [@problem_id:2381376] 将带您直面数值稳定性这一核心概念。您将通过亲自实现一个求解一维波动方程的程序，直观地观察当 Courant–Friedrichs–Lewy (CFL) 条件满足、达到临界以及被违反时，数值解的截然不同的行为，从而深刻理解为何 CFL 条件是显式时间推进格式的“交通规则”。", "problem": "您将研究一维线性平流方程的显式有限体积求解器的数值稳定性，并使用 Courant-Friedrichs-Lewy (CFL) 条件作为组织原则。从线性平流的守恒律形式开始：\n$$\n\\frac{\\partial q}{\\partial t} + \\frac{\\partial f}{\\partial x} = 0,\\quad f = a\\,q,\n$$\n其中 $q(x,t)$ 是一个标量场，$a$ 是一个恒定的平流速度。使用以下物理上一致的设置：空间域是周期性的，长度为 $L$ 米，平流速度 $a$ 的单位是米/秒，时间 $t$ 的单位是秒。对于平滑的初始数据，其精确解是匀速平移：\n$$\nq(x,t) = q_0(x - a\\,t) \\quad \\text{在周期性域上}.\n$$\n您的任务是：\n- 从守恒形式和显式时间推进出发，推导一个适用于 $a > 0$ 且在均匀网格上的一阶迎风有限体积方法。不要使用任何预先推导出的离散更新表达式；从数值通量的定义和单元平均值的有限体积更新开始。\n- 对推导出的格式使用离散傅里叶（冯·诺依曼）分析，得到关于无量纲 Courant 数 $C$ 的稳定性限制，其中\n$C = \\frac{|a|\\,\\Delta t}{\\Delta x}.$\n- 实现推导出的方法，并应用周期性边界条件，将一个初始条件推进到指定的最终时间。使用一个包含 $N$ 个单元的均匀网格，其中 $\\Delta x = L/N$，以及一个从目标 Courant 数 $C$ 通过 $\\Delta t = C\\,\\Delta x/a$ 选择的恒定时间步长 $\\Delta t$。对于每次运行，使用整数个时间步 $n_{\\text{steps}}$，因此最终时间为 $T = n_{\\text{steps}}\\,\\Delta t$。\n- 使用平滑的、周期性的高斯初始条件，其单位振幅，中心位于 $x_0$，宽度为 $\\sigma$：\n$$\nq_0(x) = \\exp\\!\\left(-\\frac{d(x,x_0)^2}{2\\,\\sigma^2}\\right),\n$$\n其中 $d(x,x_0)$ 是在区间 $[0,L)$ 上的最短周期距离。\n- 为了数值上评估稳定性，如果在任何时间步，任何单元平均值的绝对值超过了一个等于初始最大振幅 $M$ 倍的阈值，则宣布该次运行不稳定。否则，宣布运行稳定。通过相对于网格上精确解的相对离散 $\\ell^2$ 误差来量化最终时间的精度：\n$$\n\\varepsilon = \\frac{\\left\\| q^{n_{\\text{steps}}} - q_{\\text{exact}}(\\cdot,T)\\right\\|_2}{\\left\\| q_{\\text{exact}}(\\cdot,T) \\right\\|_2},\n$$\n其中 $\\|\\cdot\\|_2$ 是网格点值上的欧几里得范数。对于不稳定的运行，报告一个大的哨兵误差值 $E_{\\text{sentinel}}$。\n\n实现一个程序，精确执行以下测试套件，为每个案例返回一个列表，其中包含一个布尔稳定性标志和误差 $\\varepsilon$（如果不稳定，则为哨兵值）：\n\n- 案例 A（低于稳定性极限）：$L = 1.0$ 米, $a = 1.0$ 米/秒, $N = 100$, $x_0 = 0.25$ 米, $\\sigma = 0.05$ 米, $C = 0.5$, $n_{\\text{steps}} = 200$, $M = 10$, $E_{\\text{sentinel}} = 10^{9}$。\n- 案例 B（处于稳定性极限）：$L = 1.0$ 米, $a = 1.0$ 米/秒, $N = 100$, $x_0 = 0.25$ 米, $\\sigma = 0.05$ 米, $C = 1.0$, $n_{\\text{steps}} = 100$, $M = 10$, $E_{\\text{sentinel}} = 10^{9}$。\n- 案例 C（高于稳定性极限）：$L = 1.0$ 米, $a = 1.0$ 米/秒, $N = 100$, $x_0 = 0.25$ 米, $\\sigma = 0.05$ 米, $C = 1.1$, $n_{\\text{steps}} = 50$, $M = 10$, $E_{\\text{sentinel}} = 10^{9}$。\n\n此问题不使用角度单位。确保程序对所有上述有量纲的输入始终使用米和秒。最终输出必须是单行，包含一个包含三个结果的列表，每个结果本身都是 $[\\text{stable}, \\varepsilon]$ 形式的列表，并严格按照 A、B、C 的顺序排列。例如，格式必须是：\n$$\n\\big[\\,[\\text{True},\\,0.0123],[\\text{True},\\,0.0],[\\text{False},\\,1000000000.0]\\,\\big],\n$$\n其中稳定性为布尔值，误差为浮点值。您的程序应生成单行输出，其中包含一个用方括号括起来的、以逗号分隔的结果列表。", "solution": "所述问题需经过验证。\n\n### 步骤 1：提取已知条件\n\n控制偏微分方程是一维线性平流方程的守恒形式：\n$$\n\\frac{\\partial q}{\\partial t} + \\frac{\\partial f}{\\partial x} = 0\n$$\n通量为 $f = a\\,q$，其中 $a$ 是一个恒定的平流速度。\n\n区域是周期性的，长度为 $L$。\n初始条件是一个平滑的高斯分布：\n$$\nq_0(x) = \\exp\\!\\left(-\\frac{d(x,x_0)^2}{2\\,\\sigma^2}\\right)\n$$\n其中 $d(x,x_0)$ 是在 $[0,L)$ 上的最短周期距离。\n对于平滑初始数据，精确解为 $q(x,t) = q_0(x - a\\,t)$。\n\n数值参数定义如下：\n- 均匀网格单元数：$N$\n- 单元宽度：$\\Delta x = L/N$\n- Courant 数：$C = \\frac{|a|\\,\\Delta t}{\\Delta x}$\n- 时间步长：$\\Delta t = C\\,\\Delta x/a$ (对于 $a>0$)\n- 时间步数：$n_{\\text{steps}}$\n- 最终时间：$T = n_{\\text{steps}}\\,\\Delta t$\n\n稳定性和精度度量标准为：\n- 稳定性阈值因子：$M$\n- 如果在任何时刻 $\\max(|q|) > M \\times \\max(|q_0|)$，则宣布运行不稳定。\n- 不稳定运行的哨兵误差值：$E_{\\text{sentinel}}$\n- 相对离散 $\\ell^2$ 误差：$\\varepsilon = \\frac{\\left\\| q^{n_{\\text{steps}}} - q_{\\text{exact}}(\\cdot,T)\\right\\|_2}{\\left\\| q_{\\text{exact}}(\\cdot,T) \\right\\|_2}$\n\n测试案例：\n- 案例 A：$L = 1.0$, $a = 1.0$, $N = 100$, $x_0 = 0.25$, $\\sigma = 0.05$, $C = 0.5$, $n_{\\text{steps}} = 200$, $M = 10$, $E_{\\text{sentinel}} = 10^{9}$。\n- 案例 B：$L = 1.0$, $a = 1.0$, $N = 100$, $x_0 = 0.25$, $\\sigma = 0.05$, $C = 1.0$, $n_{\\text{steps}} = 100$, $M = 10$, $E_{\\text{sentinel}} = 10^{9}$。\n- 案例 C：$L = 1.0$, $a = 1.0$, $N = 100$, $x_0 = 0.25$, $\\sigma = 0.05$, $C = 1.1$, $n_{\\text{steps}} = 50$, $M = 10$, $E_{\\text{sentinel}} = 10^{9}$。\n\n### 步骤 2：使用提取的已知条件进行验证\n\n- **科学上合理：** 该问题基于线性平流方程、有限体积法和冯·诺依曼稳定性分析。这些是计算物理和应用数学中基本且成熟的概念。该问题在科学上是合理的。\n- **适定性：** 问题陈述清晰，为每个案例提供了所有必要的参数和条件。任务——推导、分析和实现——都得到了明确定义，从而可以得到唯一且有意义的结果。\n- **客观性：** 问题以精确、客观的语言表述。没有主观或基于意见的陈述。\n- **完整性和一致性：** 问题是自洽的。所有变量和常数都已定义，测试案例也已完全指定。物理单位（米、秒）在全文中保持一致。\n\n### 步骤 3：结论与行动\n\n该问题有效。这是一个关于偏微分方程数值方法的标准、适定的练习。将提供完整解答。\n\n### 一阶迎风有限体积法的推导\n\n我们从守恒律在控制体或单元 $I_i = [x_{i-1/2}, x_{i+1/2}]$ 上的积分形式开始，其中单元中心为 $x_i$，单元宽度为 $\\Delta x = x_{i+1/2} - x_{i-1/2}$。将偏微分方程在该单元上积分可得：\n$$\n\\int_{x_{i-1/2}}^{x_{i+1/2}} \\frac{\\partial q}{\\partial t} dx + \\int_{x_{i-1/2}}^{x_{i+1/2}} \\frac{\\partial f}{\\partial x} dx = 0\n$$\n应用莱布尼茨积分法则和微积分基本定理，我们得到：\n$$\n\\frac{d}{dt} \\int_{x_{i-1/2}}^{x_{i+1/2}} q(x,t) dx + \\left[ f(q(x_{i+1/2},t)) - f(q(x_{i-1/2},t)) \\right] = 0\n$$\n我们将单元 $i$ 在时间 $t$ 上的 $q$ 的单元平均值定义为：\n$$\n\\bar{q}_i(t) = \\frac{1}{\\Delta x} \\int_{x_{i-1/2}}^{x_{i+1/2}} q(x,t) dx\n$$\n将此定义代入积分后的方程，得到一个关于单元平均值 $\\bar{q}_i(t)$ 的精确常微分方程：\n$$\n\\frac{d\\bar{q}_i}{dt} = -\\frac{1}{\\Delta x} \\left[ f(q(x_{i+1/2},t)) - f(q(x_{i-1/2},t)) \\right]\n$$\n为了获得数值格式，我们使用前向欧拉法进行时间离散，并近似单元交界面处的通量 $f$ 的点值。设 $\\bar{q}_i^n \\approx \\bar{q}_i(t^n)$，其中 $t^n = n\\Delta t$。时间导数近似为 $\\frac{d\\bar{q}_i}{dt} \\approx \\frac{\\bar{q}_i^{n+1} - \\bar{q}_i^n}{\\Delta t}$。\n交界面通量由一个数值通量函数 $F$ 近似，该函数依赖于相邻单元在时间 $t^n$ 的状态。方程变为：\n$$\n\\frac{\\bar{q}_i^{n+1} - \\bar{q}_i^n}{\\Delta t} = -\\frac{1}{\\Delta x} \\left[ F_{i+1/2} - F_{i-1/2} \\right]\n$$\n其中 $F_{i+1/2}$ 是在交界面 $x_{i+1/2}$ 处的数值通量。这可以重写为有限体积更新公式：\n$$\n\\bar{q}_i^{n+1} = \\bar{q}_i^n - \\frac{\\Delta t}{\\Delta x} \\left[ F_{i+1/2} - F_{i-1/2} \\right]\n$$\n对于一阶迎风格式，数值通量由信息传播的方向决定，该方向由平流速度 $a$ 的符号给出。问题指定 $a > 0$，因此信息从左向右传播。交界面处的通量应由“迎风”单元的状态决定，即左侧的单元。\n因此，单元 $i$ 右侧交界面 $x_{i+1/2}$ 处的通量由单元 $i$ 的状态决定：\n$$\nF_{i+1/2} = f(\\bar{q}_i^n) = a \\bar{q}_i^n\n$$\n同样，单元 $i$ 左侧交界面 $x_{i-1/2}$ 处的通量由单元 $i-1$ 的状态决定：\n$$\nF_{i-1/2} = f(\\bar{q}_{i-1}^n) = a \\bar{q}_{i-1}^n\n$$\n将这些数值通量代入更新公式，我们得到 $a > 0$ 时的一阶迎风格式：\n$$\n\\bar{q}_i^{n+1} = \\bar{q}_i^n - \\frac{\\Delta t}{\\Delta x} (a \\bar{q}_i^n - a \\bar{q}_{i-1}^n)\n$$\n根据问题定义，我们引入无量纲 Courant 数 $C = \\frac{a \\Delta t}{\\Delta x}$（因为 $a>0$，所以 $|a|=a$）。最终的格式是：\n$$\n\\bar{q}_i^{n+1} = \\bar{q}_i^n - C (\\bar{q}_i^n - \\bar{q}_{i-1}^n)\n$$\n\n### 冯·诺依曼稳定性分析\n\n为了分析推导出的格式的稳定性，我们采用离散傅里叶（冯·诺依曼）分析。我们考虑网格上解的单个傅里叶模式：\n$$\n\\bar{q}_j^n = \\hat{q}^n e^{i k x_j} = \\hat{q}^n e^{i k j \\Delta x}\n$$\n其中 $\\hat{q}^n$ 是在时间步 $n$ 的模式的复振幅，$k$ 是波数，$i = \\sqrt{-1}$。将此拟设代入数值格式：\n$$\n\\hat{q}^{n+1} e^{i k j \\Delta x} = \\hat{q}^n e^{i k j \\Delta x} - C \\left( \\hat{q}^n e^{i k j \\Delta x} - \\hat{q}^n e^{i k (j-1) \\Delta x} \\right)\n$$\n我们定义放大因子 $G(k) = \\frac{\\hat{q}^{n+1}}{\\hat{q}^n}$。将方程两边除以 $\\hat{q}^n e^{i k j \\Delta x}$ 可得：\n$$\nG(k) = 1 - C \\left( 1 - e^{-i k \\Delta x} \\right)\n$$\n令 $\\theta = k \\Delta x$ 为无量纲波数。放大因子是 $\\theta$ 的函数：\n$$\nG(\\theta) = 1 - C (1 - e^{-i\\theta}) = 1 - C (1 - (\\cos\\theta - i\\sin\\theta)) = (1 - C + C\\cos\\theta) + i(C\\sin\\theta)\n$$\n为使格式稳定，对于所有可能的 $\\theta$ 值，放大因子的幅值必须不超过 1，即 $|G(\\theta)| \\le 1$。我们分析其幅值平方：\n$$\n|G(\\theta)|^2 = (1 - C + C\\cos\\theta)^2 + (C\\sin\\theta)^2\n$$\n$$\n|G(\\theta)|^2 = (1-C)^2 + 2C(1-C)\\cos\\theta + C^2\\cos^2\\theta + C^2\\sin^2\\theta\n$$\n$$\n|G(\\theta)|^2 = 1 - 2C + C^2 + 2C(1-C)\\cos\\theta + C^2 = 1 - 2C + 2C^2 + (2C-2C^2)\\cos\\theta\n$$\n$$\n|G(\\theta)|^2 = 1 - 2C(1-C) + 2C(1-C)\\cos\\theta = 1 - 2C(1-C)(1-\\cos\\theta)\n$$\n稳定性条件 $|G(\\theta)|^2 \\le 1$ 意味着：\n$$\n1 - 2C(1-C)(1-\\cos\\theta) \\le 1 \\implies -2C(1-C)(1-\\cos\\theta) \\le 0\n$$\n由于 $\\theta$ 是实数，项 $(1-\\cos\\theta)$ 总是非负的，范围从 $0$ 到 $2$。因此，稳定性要求：\n$$\nC(1-C) \\ge 0\n$$\n鉴于 Courant 数 $C = \\frac{a \\Delta t}{\\Delta x}$ 是非负的（因为 $a>0, \\Delta t>0, \\Delta x>0$），此不等式在以下条件下满足：\n$$\n0 \\le C \\le 1\n$$\n这是一阶迎风格式的 Courant-Friedrichs-Lewy (CFL) 稳定性条件。\n\n### 数值实现策略\n\n推导的格式在均匀周期性网格上实现。\n1.  **网格和参数**：对于长度为 $L$、有 $N$ 个单元的域，单元宽度为 $\\Delta x = L/N$。表示单元中心的网格点为 $x_j = j \\Delta x$，其中 $j=0, 1, \\dots, N-1$。\n2.  **初始条件**：初始状态向量 $q^0$ 的值填充为 $q_j^0 = q_0(x_j)$。长度为 $L$ 的域上的周期距离函数 $d(x_1, x_2)$ 计算为 $d(x_1, x_2) = \\min(|x_1-x_2|, L - |x_1-x_2|)$。根据构造，初始最大振幅为 $\\max(|q_0|) = 1$。\n3.  **时间步进**：时间步长 $\\Delta t$ 从指定的 Courant 数 $C$ 计算得出，$\\Delta t = C \\Delta x / a$。模拟运行固定的步数 $n_{\\text{steps}}$。\n4.  **更新步骤**：更新方程 $\\bar{q}_i^{n+1} = \\bar{q}_i^n - C (\\bar{q}_i^n - \\bar{q}_{i-1}^n)$ 应用于所有单元 $i=0, \\dots, N-1$。由于周期性边界条件，对于单元 $i=0$，$\\bar{q}_{i-1}^n$ 项是 $\\bar{q}_{N-1}^n$。这可以通过循环移位（`numpy.roll`）来高效实现。\n5.  **稳定性检查**：在每个时间步 $n$，更新之前，检查条件 $\\max(|\\bar{q}^n|) \\le M \\times 1.0$。如果违反，则该次运行被标记为不稳定，并且该案例的模拟终止。\n6.  **误差计算**：如果模拟完成所有 $n_{\\text{steps}}$ 步而没有违反稳定性准则，则被标记为稳定。最终的数值解是 $q^{n_{\\text{steps}}}$。在最终时间 $T=n_{\\text{steps}}\\Delta t$ 的精确解是 $q_{exact}(x,T) = q_0(x-aT)$。这通过在由 $-aT$ 移位的网格点上评估初始分布来计算。高斯分布的最终中心是 $x_{0,final} = (x_0 + aT) \\pmod L$。然后，网格上的精确解为 $q_{exact,j} = \\exp(-d(x_j, x_{0,final})^2 / (2\\sigma^2))$。之后计算相对 $\\ell^2$ 误差 $\\varepsilon$。对于不稳定的运行，$\\varepsilon$ 被设置为 $E_{\\text{sentinel}}$。", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Solves the 1D linear advection problem for three test cases\n    to investigate numerical stability of the first-order upwind scheme.\n    \"\"\"\n    \n    test_cases = [\n        # Case A: C = 0.5 (stable)\n        {'L': 1.0, 'a': 1.0, 'N': 100, 'x0': 0.25, 'sigma': 0.05, \n         'C': 0.5, 'n_steps': 200, 'M': 10, 'E_sentinel': 1e9},\n        # Case B: C = 1.0 (marginally stable, exact shift)\n        {'L': 1.0, 'a': 1.0, 'N': 100, 'x0': 0.25, 'sigma': 0.05, \n         'C': 1.0, 'n_steps': 100, 'M': 10, 'E_sentinel': 1e9},\n        # Case C: C = 1.1 (unstable)\n        {'L': 1.0, 'a': 1.0, 'N': 100, 'x0': 0.25, 'sigma': 0.05, \n         'C': 1.1, 'n_steps': 50, 'M': 10, 'E_sentinel': 1e9},\n    ]\n\n    results = []\n    \n    for case in test_cases:\n        # Unpack parameters\n        L = case['L']\n        a = case['a']\n        N = case['N']\n        x0 = case['x0']\n        sigma = case['sigma']\n        C = case['C']\n        n_steps = case['n_steps']\n        M = case['M']\n        E_sentinel = case['E_sentinel']\n\n        # Grid setup\n        dx = L / N\n        x = np.linspace(0, L, N, endpoint=False) # Grid points for cell centers\n\n        # Time step calculation\n        dt = C * dx / a\n        T_final = n_steps * dt\n\n        # Helper for periodic distance\n        def periodic_distance(x1, x2, domain_length):\n            diff = np.abs(x1 - x2)\n            return np.minimum(diff, domain_length - diff)\n\n        # Initial condition\n        q = np.exp(-periodic_distance(x, x0, L)**2 / (2 * sigma**2))\n        \n        # Initial maximum amplitude is 1.0 by definition of the Gaussian\n        initial_max_q = 1.0\n        stability_threshold = M * initial_max_q\n\n        is_stable = True\n        # Time-stepping loop\n        for _ in range(n_steps):\n            if np.max(np.abs(q)) > stability_threshold:\n                is_stable = False\n                break\n            \n            # Copy of current state for the update\n            q_n = q.copy()\n            \n            # First-order upwind scheme (for a > 0)\n            # q_i^{n+1} = q_i^n - C * (q_i^n - q_{i-1}^n)\n            # np.roll(q_n, 1) provides q_{i-1} with periodic boundaries\n            q = q_n - C * (q_n - np.roll(q_n, 1))\n\n        # Final error calculation\n        if not is_stable:\n             # Check one last time after the final step for cases that blow up on the last step\n            if np.max(np.abs(q)) > stability_threshold:\n                 error = E_sentinel\n            else: # Should not happen if loop broke, but as a safeguard\n                is_stable = True # If it did not actually exceed threshold\n\n        if is_stable:\n            # Exact solution at T_final\n            x_center_final = (x0 + a * T_final) % L\n            q_exact = np.exp(-periodic_distance(x, x_center_final, L)**2 / (2 * sigma**2))\n            \n            # Calculate relative L2 error\n            norm_diff = np.linalg.norm(q - q_exact)\n            norm_exact = np.linalg.norm(q_exact)\n            \n            if norm_exact > 0:\n                error = norm_diff / norm_exact\n            else:\n                error = norm_diff # Should not happen for a Gaussian\n        else:\n            error = E_sentinel\n\n        results.append([is_stable, error])\n\n    # Final print statement in the exact required format\n    # The default str representation of a list in Python is '[item1, item2, ...]'\n    # which matches the required format including the space after the comma.\n    print(f\"[{','.join(map(str, results))}]\")\n\nsolve()\n```", "id": "2381376"}, {"introduction": "在确保数值解稳定之后，我们必须关注其精度。本练习 [@problem_id:2381331] 聚焦于一种主要的数值误差来源——数值扩散（或称人工粘性）。您将运用 von Neumann 稳定性分析方法，为一阶迎风格式和二阶中心差分格式推导并计算等效的数值扩散系数 $D_{\\text{eff}}$。通过这个过程，您将定量地比较不同阶数格式的耗散特性，并理解格式选择对求解精度，特别是对高频波的解析能力，所产生的深远影响。", "problem": "您需要量化和比较两种显式有限差分格式对一维线性平流方程 $u_t + c u_x = 0$（其中平流速度 $c > 0$ 为正常数）所引入的数值耗散。在周期性域中进行分析，以便应用傅里叶（von Neumann）分析。使用以下两种格式，每种格式均由其全离散更新式和库朗数 $\\sigma = c \\Delta t / \\Delta x$ 定义：\n- 空间一阶迎风、时间前向欧拉格式（适用于 $c > 0$）：$u_j^{n+1} = u_j^n - \\sigma \\left(u_j^n - u_{j-1}^n\\right)$。\n- 空间二阶中心差分、时间蛙跳格式：$u_j^{n+1} = u_j^{n-1} - \\sigma \\left(u_{j+1}^n - u_{j-1}^n\\right)$。\n\n您的任务是：\n1) 从平面波试探解 $u_j^n = G(\\theta)^n \\exp(i j \\theta)$（其中 $\\theta = k \\Delta x$，单位为弧度）出发，使用 von Neumann 分析推导每种格式的放大因子 $G(\\theta)$，并由此得到每个时间步长的振幅比 $|G(\\theta)|$。\n2) 基于一个物理等效性，即平流-扩散方程 $u_t + c u_x = D u_{xx}$ 的一个傅里叶模式在一个时间步长内振幅衰减因子为 $\\exp\\left(- D k^2 \\Delta t\\right)$，通过匹配 $|G(\\theta)| = \\exp\\left(- D_{\\text{eff}}(\\theta) k^2 \\Delta t\\right)$ 来定义格式的等效数值耗散系数 $D_{\\text{eff}}(\\theta)$，并由此计算\n$$\nD_{\\text{eff}}(\\theta) = - \\frac{\\ln \\left(\\left|G(\\theta)\\right|\\right)}{k^2 \\Delta t}, \\quad k = \\frac{\\theta}{\\Delta x}.\n$$\n将 $D_{\\text{eff}}$ 以 $\\mathrm{m^2/s}$ 为单位表示。\n3) 对于下方的每个测试用例，计算在一组傅里叶相位角 $\\Theta = \\{\\pi/12,\\ \\pi/6,\\ \\pi/3,\\ \\pi/2\\}$（单位为弧度）上 $D_{\\text{eff}}(\\theta)$ 的值，并报告每种格式在 $\\Theta$ 上的 $D_{\\text{eff}}(\\theta)$ 的算术平均值。\n\n测试套件（每个三元组为 $(c,\\ \\Delta x,\\ \\Delta t)$，其中 $c$ 的单位为 $\\mathrm{m/s}$，$\\Delta x$ 的单位为 $\\mathrm{m}$，$\\Delta t$ 的单位为 $\\mathrm{s}$）：\n- 用例 A: $(1.0,\\ 0.01,\\ 0.005)$。\n- 用例 B: $(1.0,\\ 0.01,\\ 0.010)$。\n- 用例 C: $(2.0,\\ 0.02,\\ 0.004)$。\n- 用例 D: $(1.5,\\ 0.015,\\ 0.003)$。\n\n最终输出规范：\n- 对于每个测试用例，计算两个以 $\\mathrm{m^2/s}$ 为单位的浮点数：一阶迎风格式的平均 $D_{\\text{eff}}$ 和空间二阶中心差分与蛙跳格式的平均 $D_{\\text{eff}}$，每个值都四舍五入到六位小数。\n- 您的程序应生成单行输出，其中包含结果，格式为逗号分隔的数对列表，每个测试用例对应一个数对，并包含在方括号中。例如： \"[[a1,b1],[a2,b2],[a3,b3],[a4,b4]]\"，其中每个 $a_i$ 和 $b_i$ 都是格式化为小数点后恰好六位的浮点数。\n- 角度必须以弧度为单位处理。所有报告的耗散系数单位必须是 $\\mathrm{m^2/s}$。", "solution": "所述问题是有效的。它基于偏微分方程数值分析的基本原理，特别是关于一维线性平流方程的部分。该问题是适定的、客观的，并包含了推导唯一解所需的所有必要信息。我们将着手进行分析。\n\n任务是量化和比较两种有限差分格式对平流方程 $u_t + c u_x = 0$（其中 $c > 0$ 为恒定速度）的数值耗散。我们使用平面波试探解 $u_j^n = G(\\theta)^n \\exp(i j \\theta)$ 进行 von Neumann 稳定性分析，其中 $\\theta = k \\Delta x$ 是无量纲波数，$k$ 是波数，$\\Delta x$ 是网格间距，$j$ 是空间索引，$n$ 是时间索引。$G(\\theta)$ 是复放大因子。\n\n等效数值耗散系数 $D_{\\text{eff}}$ 的定义，是通过将每个时间步长的数值振幅衰减 $|G(\\theta)|$ 与平流-扩散方程 $u_t + c u_x = D u_{xx}$ 的解析衰减等同起来。该方程的一个傅里叶模式以 $\\exp(-D k^2 \\Delta t)$ 的形式衰减。因此，我们有：\n$$\n|G(\\theta)| = \\exp\\left(- D_{\\text{eff}}(\\theta) k^2 \\Delta t\\right)\n$$\n解出 $D_{\\text{eff}}(\\theta)$ 可得：\n$$\nD_{\\text{eff}}(\\theta) = - \\frac{\\ln \\left(|G(\\theta)|\\right)}{k^2 \\Delta t} = - \\frac{\\Delta x^2}{\\theta^2 \\Delta t} \\ln \\left(|G(\\theta)|\\right)\n$$\n我们依次分析每种格式。\n\n**格式 1：空间一阶迎风、时间前向欧拉**\n\n离散格式为：\n$$\nu_j^{n+1} = u_j^n - \\sigma \\left(u_j^n - u_{j-1}^n\\right)\n$$\n其中 $\\sigma = c \\Delta t / \\Delta x$ 是库朗数。代入试探解 $u_j^n = G^n e^{ij\\theta}$：\n$$\nG^{n+1} e^{ij\\theta} = G^n e^{ij\\theta} - \\sigma \\left(G^n e^{ij\\theta} - G^n e^{i(j-1)\\theta}\\right)\n$$\n假设 $G^n e^{ij\\theta}$ 非零，两边同除以它，我们得到放大因子 $G(\\theta)$：\n$$\nG(\\theta) = 1 - \\sigma \\left(1 - e^{-i\\theta}\\right) = 1 - \\sigma(1 - \\cos\\theta + i\\sin\\theta)\n$$\n$$\nG(\\theta) = (1 - \\sigma + \\sigma\\cos\\theta) - i\\sigma\\sin\\theta\n$$\n放大因子的模的平方 $|G(\\theta)|^2$ 为：\n$$\n|G(\\theta)|^2 = (1 - \\sigma + \\sigma\\cos\\theta)^2 + (- \\sigma\\sin\\theta)^2\n$$\n$$\n|G(\\theta)|^2 = (1-\\sigma)^2 + 2\\sigma(1-\\sigma)\\cos\\theta + \\sigma^2\\cos^2\\theta + \\sigma^2\\sin^2\\theta\n$$\n$$\n|G(\\theta)|^2 = 1 - 2\\sigma + \\sigma^2 + 2\\sigma\\cos\\theta - 2\\sigma^2\\cos\\theta + \\sigma^2\n$$\n$$\n|G(\\theta)|^2 = 1 - 2\\sigma(1-\\sigma) + 2\\sigma(1-\\sigma)\\cos\\theta = 1 - 2\\sigma(1-\\sigma)(1-\\cos\\theta)\n$$\n使用半角公式 $1 - \\cos\\theta = 2\\sin^2(\\theta/2)$，我们发现：\n$$\n|G(\\theta)|^2 = 1 - 4\\sigma(1-\\sigma)\\sin^2(\\theta/2)\n$$\n当 $0 \\le \\sigma \\le 1$ 时，该格式是稳定的，因为在此范围内 $|G(\\theta)| \\le 1$。当 $0  \\sigma  1$ 时，该格式是耗散的，即 $|G(\\theta)|  1$。\n\n迎风格式的等效数值耗散系数为：\n$$\nD_{\\text{eff, upwind}}(\\theta) = - \\frac{\\Delta x^2}{\\theta^2 \\Delta t} \\ln \\left( |G(\\theta)| \\right) = - \\frac{\\Delta x^2}{2 \\theta^2 \\Delta t} \\ln \\left( |G(\\theta)|^2 \\right)\n$$\n$$\nD_{\\text{eff, upwind}}(\\theta) = - \\frac{\\Delta x^2}{2 \\theta^2 \\Delta t} \\ln\\left(1 - 4\\sigma(1-\\sigma)\\sin^2(\\theta/2)\\right)\n$$\n此表达式表明，数值耗散是离散化的一种寄生效应，依赖于库朗数 $\\sigma$ 和可解波数 $\\theta$。对于 $\\sigma=1$ 的特殊情况，我们发现 $|G(\\theta)|^2=1$，这意味着 $D_{\\text{eff, upwind}}(\\theta) = 0$。这是正确的，因为当 $\\sigma=1$ 时，该格式是精确的。\n\n**格式 2：空间二阶中心差分、时间蛙跳**\n\n离散格式为：\n$$\nu_j^{n+1} = u_j^{n-1} - \\sigma \\left(u_{j+1}^n - u_{j-1}^n\\right)\n$$\n这是一个三层格式。代入试探解 $u_j^n = G^n e^{ij\\theta}$：\n$$\nG^{n+1} e^{ij\\theta} = G^{n-1} e^{ij\\theta} - \\sigma \\left(G^n e^{i(j+1)\\theta} - G^n e^{i(j-1)\\theta}\\right)\n$$\n两边同除以 $G^{n-1} e^{ij\\theta}$：\n$$\nG^2 = 1 - \\sigma G \\left(e^{i\\theta} - e^{-i\\theta}\\right) = 1 - 2i\\sigma G \\sin\\theta\n$$\n这产生了一个关于放大因子 $G(\\theta)$ 的二次方程：\n$$\nG^2 + (2i\\sigma\\sin\\theta)G - 1 = 0\n$$\n其根为：\n$$\nG(\\theta) = \\frac{-2i\\sigma\\sin\\theta \\pm \\sqrt{(2i\\sigma\\sin\\theta)^2 - 4(1)(-1)}}{2} = -i\\sigma\\sin\\theta \\pm \\sqrt{1 - \\sigma^2\\sin^2\\theta}\n$$\n为使格式稳定，平方根下的项必须为非负，这要求 $1 - \\sigma^2\\sin^2\\theta \\ge 0$。如果 $|\\sigma| \\le 1$，则对所有 $\\theta$ 该条件都满足，这就是该格式的 CFL 稳定性条件。所有提供的测试用例都满足此条件。\n\n当格式稳定时，我们计算 $G(\\theta)$ 的模：\n$$\n|G(\\theta)|^2 = \\left(\\pm\\sqrt{1-\\sigma^2\\sin^2\\theta}\\right)^2 + \\left(-\\sigma\\sin\\theta\\right)^2\n$$\n$$\n|G(\\theta)|^2 = (1-\\sigma^2\\sin^2\\theta) + \\sigma^2\\sin^2\\theta = 1\n$$\n$G(\\theta)$ 的两个根的模都恰好为 1。这意味着该格式是非耗散的；它不会衰减任何傅里叶模式的振幅。因此，其等效数值耗散为：\n$$\nD_{\\text{eff, leapfrog}}(\\theta) = - \\frac{\\Delta x^2}{\\theta^2 \\Delta t} \\ln(1) = 0\n$$\n蛙跳格式表现出零数值耗散。其主要误差是色散误差，而非耗散误差。\n\n**计算步骤**\n\n对于每个测试用例 $(c, \\Delta x, \\Delta t)$，我们执行以下步骤：\n1.  计算库朗数 $\\sigma = c \\Delta t / \\Delta x$。\n2.  对于迎风格式，使用推导出的公式计算集合 $\\Theta = \\{\\pi/12, \\pi/6, \\pi/3, \\pi/2\\}$ 中每个 $\\theta$ 的 $D_{\\text{eff, upwind}}(\\theta)$。如果 $\\sigma=1$, 则 $D_{\\text{eff, upwind}}$ 为 $0$。\n3.  计算这四个值的算术平均值。\n4.  对于蛙跳格式，$D_{\\text{eff, leapfrog}}(\\theta)$ 对所有 $\\theta$ 均为 $0$。因此，其算术平均值为 $0$。\n5.  报告这对平均等效耗散系数。\n\n最终结果按规定以编程方式计算。", "answer": "```python\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Computes the average effective numerical diffusion for two finite difference schemes\n    applied to the 1D linear advection equation.\n    \"\"\"\n    \n    # Test cases: (c, delta_x, delta_t)\n    # c in m/s, delta_x in m, delta_t in s\n    test_cases = [\n        (1.0, 0.01, 0.005),  # Case A\n        (1.0, 0.01, 0.010),  # Case B\n        (2.0, 0.02, 0.004),  # Case C\n        (1.5, 0.015, 0.003), # Case D\n    ]\n\n    # Fourier phase angles in radians\n    thetas = np.array([np.pi/12, np.pi/6, np.pi/3, np.pi/2])\n    \n    final_results = []\n\n    for c, dx, dt in test_cases:\n        sigma = c * dt / dx\n        \n        # --- Scheme 1: First-Order Upwind with Forward Euler ---\n        d_eff_upwind_values = []\n        if np.isclose(sigma, 1.0) or np.isclose(sigma, 0.0):\n            # For sigma=0 or sigma=1, the scheme is non-dissipative.\n            avg_d_eff_upwind = 0.0\n        else:\n            for theta in thetas:\n                # Use |G|^2 to avoid intermediate sqrt\n                # |G|^2 = 1 - 4*sigma*(1-sigma)*sin^2(theta/2)\n                g_mag_sq = 1 - 4 * sigma * (1 - sigma) * (np.sin(theta / 2))**2\n                \n                # Formula for D_eff uses ln(|G|) = 0.5 * ln(|G|^2)\n                # D_eff = - (dx^2 / (theta^2 * dt)) * 0.5 * ln(|G|^2)\n                log_g_mag_sq = np.log(g_mag_sq)\n                d_eff = -dx**2 / (2 * theta**2 * dt) * log_g_mag_sq\n                d_eff_upwind_values.append(d_eff)\n            \n            avg_d_eff_upwind = np.mean(d_eff_upwind_values)\n\n        # --- Scheme 2: Second-Order Central with Leapfrog ---\n        # This scheme is non-dissipative, so D_eff is always 0.\n        avg_d_eff_leapfrog = 0.0\n\n        final_results.append((avg_d_eff_upwind, avg_d_eff_leapfrog))\n\n    # Format the final output string as specified\n    result_pairs = [f\"[{upwind:.6f},{leapfrog:.6f}]\" for upwind, leapfrog in final_results]\n    output_string = f\"[{','.join(result_pairs)}]\"\n    \n    print(output_string)\n\nsolve()\n```", "id": "2381331"}, {"introduction": "最后的练习 [@problem_id:2381332] 将前面稳定性与精度的概念融会贯通，应用于求解一个经典的非线性偏微分方程——粘性伯格斯方程 $u_t + u u_x = \\nu u_{xx}$。这个方程是模拟冲击波形成与耗散的简化模型，在流体力学中具有重要的教学价值。通过构建一个能够同时处理非线性对流项和物理粘性项的求解器，您将实践如何根据局部流动情况选择合适的离散格式（如迎风格式），并亲眼见证物理粘性 $\\nu$ 如何平滑由非线性效应产生的陡峭梯度。", "problem": "考虑粘性一维伯格斯方程 (Burgers' equation)，这是计算物理学中计算流体动力学基础里的一个典型的对流-扩散动力学模型：\n$$\nu_t + u u_x = \\nu u_{xx},\n$$\n该方程定义在一个具有固定边界状态的有限一维区域上。从一个平衡了非线性对流通量和菲克 (Fickian) 扩散的守恒律观点出发，并基于第一性原理推导一个稳定的半离散方法：场的变率等于其对流通量的负散度加上扩散项。利用这一原理设计一个全离散算法，该算法近似计算一个激波状初始剖面的时间演化，并展示粘度 $\\nu$ 如何平滑陡峭的梯度。\n\n您的任务是编写一个完整、可运行的程序，该程序：\n- 在区域 $x \\in [-L/2, L/2]$（其中 $L = 2$）上使用 $N_x$ 个间距为 $\\Delta x$ 的网格点进行均匀空间离散化。\n- 对于所有 $t$，施加固定的狄利克雷 (Dirichlet) 边界条件 $u(-L/2,t)=+1$ 和 $u(+L/2,t)=-1$。\n- 使用光滑的激波状初始条件\n$$\nu(x,0) = -\\tanh\\left(\\frac{x}{\\delta}\\right),\n$$\n其中 $\\delta > 0$ 控制初始厚度。\n- 使用显式方法推进到指定的最终时间 $T$。在每一步选择一个时间步长 $\\Delta t$ 以满足同时考虑对流和扩散的稳定性限制。具体来说，强制执行\n$$\n\\Delta t \\le C \\min\\left(\\frac{\\Delta x}{\\max_x |u|},\\frac{\\Delta x^2}{2\\nu}\\right),\n$$\n其中 $C \\in (0,1)$ 是一个 Courant–Friedrichs–Lewy (CFL) 安全因子。\n- 使用基于 $u$ 局部符号的单调一阶迎风差分来近似对流导数 $u u_x$，并使用中心二阶差分来近似扩散项 $u_{xx}$，两者均应用于内部点。在每个时间层级，保持边界值固定。\n\n对于每个测试用例，在演化到时间 $T$ 后，计算单个标量诊断值\n$$\nG(T) = \\max_{x \\text{ on grid interior}} \\left| \\frac{\\partial u}{\\partial x}(x,T) \\right|,\n$$\n使用中心差分近似内部点的空间导数。将 $G(T)$ 报告为一个四舍五入到 $6$ 位小数的浮点数。较大的 $G(T)$ 表示剖面更陡峭；较小的 $G(T)$ 表示平滑效果更强。\n\n所有量均为无量纲，因此不需要物理单位。\n\n实现您的求解器以处理以下参数测试套件，每个测试用例指定为一个元组 $(\\nu, T, N_x, \\delta, C)$：\n- 案例 $1$：$(0.01, 0.2, 401, 0.05, 0.4)$\n- 案例 $2$：$(0.001, 0.2, 401, 0.05, 0.4)$\n- 案例 $3$：$(0.05, 0.2, 401, 0.05, 0.4)$\n- 案例 $4$ (边缘案例, 无演化)：$(0.01, 0.0, 401, 0.05, 0.4)$\n\n您的程序应生成单行输出，其中包含一个方括号括起来的逗号分隔列表（例如，$[r_1,r_2,r_3,r_4]$），其中 $r_k = G(T)$ 是案例 $k$ 的结果，每个结果都四舍五入到 $6$ 位小数。", "solution": "问题陈述在科学上是合理的且是适定的。它提出了计算流体动力学中的一个标准问题：一维粘性伯格斯方程的数值解。所有参数、条件和数值方案都得到了清晰的定义，从而可以得到唯一且可验证的解。我们继续进行指定算法的推导和实现。\n\n该问题要求求解在区域 $x \\in [-L/2, L/2]$（其中 $L=2$）上的粘性伯格斯方程，\n$$\n\\frac{\\partial u}{\\partial t} + u \\frac{\\partial u}{\\partial x} = \\nu \\frac{\\partial^2 u}{\\partial x^2}\n$$\n这个方程是同时存在非线性对流和粘性扩散现象的基本模型。\n\n根据要求，可以从第一性原理来解释该控制方程。在一维情况下，对于量 $u$ 和通量 $J$，其守恒律为 $\\frac{\\partial u}{\\partial t} + \\frac{\\partial J}{\\partial x} = 0$。总通量 $J$ 由对流部分和扩散部分组成。对流通量由该量自身的流动给出，由通量函数 $F(u) = \\frac{1}{2}u^2$ 描述。扩散通量由菲克定律 (Fick's law) 建模，$q = -\\nu \\frac{\\partial u}{\\partial x}$。因此，总通量为 $J = F(u) + q = \\frac{1}{2}u^2 - \\nu \\frac{\\partial u}{\\partial x}$。将此代入守恒律可得\n$$\n\\frac{\\partial u}{\\partial t} + \\frac{\\partial}{\\partial x} \\left( \\frac{1}{2}u^2 - \\nu \\frac{\\partial u}{\\partial x} \\right) = 0\n$$\n应用链式法则 $\\frac{\\partial}{\\partial x}(\\frac{1}{2}u^2) = u \\frac{\\partial u}{\\partial x}$，并假设粘度 $\\nu$ 为常数，我们便恢复了方程的原始形式：$\\frac{\\partial u}{\\partial t} + u \\frac{\\partial u}{\\partial x} = \\nu \\frac{\\partial^2 u}{\\partial x^2}$。这证实了问题陈述是基于守恒原理的。项 $u_t$ 是变化率，$-u u_x$ 是对流通量的负散度，$\\nu u_{xx}$ 是扩散项。\n\n我们使用有限差分法来开发数值解。区域被离散化为 $N_x$ 个等距点 $x_j = -L/2 + j \\cdot \\Delta x$（其中 $j=0, 1, \\dots, N_x-1$），网格间距为 $\\Delta x = L/(N_x-1)$。令 $u_j^n$ 表示 $u(x_j, t_n)$ 的数值近似。\n\n对于内部网格点 $j$，方程的半离散形式为\n$$\n\\frac{d u_j}{d t} = - \\left(u \\frac{\\partial u}{\\partial x}\\right)_j + \\nu \\left(\\frac{\\partial^2 u}{\\partial x^2}\\right)_j\n$$\n\n空间导数按规定进行近似：\n1.  **对流项**：对于项 $u \\frac{\\partial u}{\\partial x}$，使用一阶迎风格式。差分模板的选择取决于局部速度 $u_j$ 的符号。如果 $u_j > 0$，信息从左向右传播，因此使用后向差分。如果 $u_j  0$，信息从右向左传播，需要使用前向差分。\n    $$\n    \\left(u \\frac{\\partial u}{\\partial x}\\right)_j \\approx\n    \\begin{cases}\n    u_j \\frac{u_j - u_{j-1}}{\\Delta x}  \\text{if } u_j > 0 \\\\\n    u_j \\frac{u_{j+1} - u_j}{\\Delta x}  \\text{if } u_j \\le 0\n    \\end{cases}\n    $$\n    该格式引入了数值扩散，这有助于在存在陡峭梯度（激波）时稳定解，使其成为一种单调格式。\n\n2.  **扩散项**：对于粘性项 $\\frac{\\partial^2 u}{\\partial x^2}$，使用二阶中心差分。\n    $$\n    \\left(\\frac{\\partial^2 u}{\\partial x^2}\\right)_j \\approx \\frac{u_{j+1} - 2u_j + u_{j-1}}{\\Delta x^2}\n    $$\n\n结合这些，内部点（$j=1, \\dots, N_x-2$）的半离散方程变为：\n$$\n\\frac{d u_j}{d t} = -\\left( \\begin{cases} u_j \\frac{u_j - u_{j-1}}{\\Delta x}  \\text{if } u_j > 0 \\\\ u_j \\frac{u_{j+1} - u_j}{\\Delta x}  \\text{if } u_j \\le 0 \\end{cases} \\right) + \\nu \\frac{u_{j+1} - 2u_j + u_{j-1}}{\\Delta x^2}\n$$\n\n对于时间积分，采用显式前向欧拉法。时间步 $n+1$ 的解由时间步 $n$ 的解计算得出：\n$$\nu_j^{n+1} = u_j^n + \\Delta t_n \\cdot \\left(\\frac{du_j}{dt}\\right)^n\n$$\n其中 $\\Delta t_n$ 是在步骤 $n$ 的时间步长。这种显式格式的稳定性取决于时间步长是否满足 Courant–Friedrichs–Lewy (CFL) 条件。对于一个对流-扩散方程，该条件结合了来自这两种现象的约束：\n$$\n\\Delta t_n \\le C \\cdot \\min\\left(\\frac{\\Delta x}{\\max_j |u_j^n|}, \\frac{\\Delta x^2}{2\\nu}\\right)\n$$\n其中 $C$ 是一个安全因子 $(0  C  1)$。最小值中的第一项是对流约束，第二项是扩散约束。在每次迭代中计算自适应时间步长以确保稳定性。\n\n初始条件是一个光滑的激波状剖面：\n$$\nu(x,0) = -\\tanh(x/\\delta)\n$$\n将其应用于网格，使得 $u_j^0 = -\\tanh(x_j/\\delta)$。边界条件在所有时间内都是固定的（狄利克雷条件）：$u(x_0, t) = u(-1, t) = +1$ 和 $u(x_{N_x-1}, t) = u(1, t) = -1$。在离散算法中，通过在每个时间层级设置 $u_0^{n+1}=+1$ 和 $u_{N_x-1}^{n+1}=-1$ 来强制执行这些条件。\n\n整个算法流程如下：\n1.  根据初始条件初始化解向量 $u^0$。施加边界值。\n2.  设置当前时间 $t=0$。\n3.  当 $t  T$ 时循环：\n    a. 计算最大绝对速度 $\\max|u^n|$。\n    b. 使用 CFL 条件计算稳定时间步长 $\\Delta t_n$。确保 $t + \\Delta t_n$ 不超过 $T$。\n    c. 对所有内部点 $j=1, \\dots, N_x-2$，计算半离散方程的右侧项。\n    d. 使用前向欧拉步更新内部点：$u_j^{n+1} = u_j^n + \\Delta t_n \\cdot (\\text{RHS})_j^n$。\n    e. 边界值 $u_0^{n+1}$ 和 $u_{N_x-1}^{n+1}$ 保持不变。\n    f. 推进时间：$t \\leftarrow t + \\Delta t_n$。\n4.  一旦 $t=T$，模拟完成。\n\n最后，计算诊断度量 $G(T)$。它定义为在最终时间 $T$ 时网格内部空间梯度的最大绝对值：\n$$\nG(T) = \\max_{j \\in \\{1, \\dots, N_x-2\\}} \\left| \\left(\\frac{\\partial u}{\\partial x}\\right)_j \\right|\n$$\n梯度使用二阶中心差分进行近似：\n$$\n\\left(\\frac{\\partial u}{\\partial x}\\right)_j \\approx \\frac{u_{j+1} - u_{j-1}}{2\\Delta x}\n$$\n该度量量化了剖面的陡峭程度，值越大表示“激波”越尖锐。", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef solve_burgers(nu, T, Nx, delta, C_cfl):\n    \"\"\"\n    Solves the 1D viscous Burgers' equation using a finite difference method.\n\n    Args:\n        nu (float): Viscosity coefficient.\n        T (float): Final time.\n        Nx (int): Number of grid points.\n        delta (float): Initial shock profile thickness parameter.\n        C_cfl (float): CFL safety factor.\n\n    Returns:\n        float: The diagnostic G(T) rounded to 6 decimal places.\n    \"\"\"\n    # 1. Setup the spatial grid and initial condition\n    L = 2.0\n    x = np.linspace(-L / 2.0, L / 2.0, Nx)\n    dx = L / (Nx - 1)\n\n    # Initial condition: u(x, 0) = -tanh(x / delta)\n    u = -np.tanh(x / delta)\n\n    # 2. Time evolution loop\n    t = 0.0\n    # The loop condition handles the T=0 case naturally.\n    while t  T:\n        # Enforce fixed Dirichlet boundary conditions at each step.\n        u[0] = 1.0\n        u[-1] = -1.0\n\n        # Calculate the adaptive time step based on the CFL condition.\n        umax = np.max(np.abs(u))\n        \n        # Convective time step constraint. Handle umax=0 to avoid division by zero.\n        if umax > 1e-12:\n            dt_conv = dx / umax\n        else:\n            dt_conv = float('inf')\n\n        # Diffusive time step constraint.\n        dt_diff = dx**2 / (2.0 * nu)\n        \n        # Determine the time step, ensuring not to step over the final time T.\n        dt = C_cfl * min(dt_conv, dt_diff)\n        if t + dt > T:\n            dt = T - t\n\n        # Store the current state to compute the RHS of the PDE.\n        u_old = u.copy()\n        \n        # Isolate interior points for vectorization.\n        u_interior = u_old[1:-1]\n\n        # Calculate convective term using first-order upwind scheme.\n        # This is vectorized for efficiency.\n        grad_fwd = (u_old[2:] - u_old[1:-1]) / dx\n        grad_bwd = (u_old[1:-1] - u_old[0:-2]) / dx\n        \n        # np.where selects the appropriate difference based on the sign of u.\n        convection_term = np.where(u_interior > 0, u_interior * grad_bwd, u_interior * grad_fwd)\n\n        # Calculate diffusive term using second-order central difference.\n        diffusion_term = nu * (u_old[2:] - 2 * u_old[1:-1] + u_old[0:-2]) / (dx**2)\n        \n        # Update the solution for interior points using forward Euler.\n        u[1:-1] = u_interior + dt * (-convection_term + diffusion_term)\n\n        # Advance time.\n        t += dt\n\n    # 3. Post-processing: Compute the diagnostic G(T).\n    # The gradient is computed on interior points using a centered difference.\n    du_dx_interior = (u[2:] - u[0:-2]) / (2.0 * dx)\n    \n    # G(T) is the max absolute value of this gradient.\n    G_T = np.max(np.abs(du_dx_interior))\n\n    return round(G_T, 6)\n\ndef solve():\n    # Define the test cases from the problem statement.\n    test_cases = [\n        (0.01, 0.2, 401, 0.05, 0.4),   # Case 1\n        (0.001, 0.2, 401, 0.05, 0.4),  # Case 2\n        (0.05, 0.2, 401, 0.05, 0.4),   # Case 3\n        (0.01, 0.0, 401, 0.05, 0.4),   # Case 4 (edge case)\n    ]\n\n    results = []\n    for case in test_cases:\n        nu, T, Nx, delta, C_cfl = case\n        result = solve_burgers(nu, T, Nx, delta, C_cfl)\n        results.append(result)\n\n    # Final print statement in the exact required format.\n    print(f\"[{','.join(map(str, results))}]\")\n\nsolve()\n```", "id": "2381332"}]}