{"hands_on_practices": [{"introduction": "为了真正掌握标记网格法(Marker-and-Cell, MAC)，我们必须从其核心的投影步骤开始。这个练习 [@problem_id:1127137] 将引导你在一个简化的 $3 \\times 3$ 网格上，手动计算压力泊松方程。通过这个基础计算，你将亲身体验交错网格上的速度分量如何直接影响中心单元的压力更新，从而揭示该方法的基本工作机制。", "problem": "考虑一个密度为常数 $\\rho$ 的流体的二维不可压欧拉方程。求解这些方程的一种常用数值方法是投影法。该方法首先在平流步骤中计算一个中间速度场 $\\mathbf{u}^*$，然后将其投影到无散度场空间，以求得下一个时间步的速度 $\\mathbf{u}^{n+1}$ 和压力 $p^{n+1}$。投影步骤求解以下方程组：\n$$\n\\frac{\\mathbf{u}^{n+1} - \\mathbf{u}^*}{\\Delta t} = -\\frac{1}{\\rho}\\nabla p^{n+1} \\quad \\text{其中} \\quad \\nabla \\cdot \\mathbf{u}^{n+1} = 0\n$$\n对第一个方程取散度，并应用不可压缩性约束，得到关于压力的泊松方程：\n$$\n\\nabla^2 p^{n+1} = \\frac{\\rho}{\\Delta t} \\nabla \\cdot \\mathbf{u}^*\n$$\n\n我们将在一个二维标记-单元（Marker-and-Cell，MAC）网格上分析此投影步骤。该区域被离散化为一个 $3 \\times 3$ 的方形单元网格，单元索引为 $(i,j)$，其中 $i,j \\in \\{0, 1, 2\\}$，每个单元的边长为 $h$。压力 $p_{i,j}$ 位于单元 $(i,j)$ 的中心，其坐标为 $(x_i, y_j) = ((i-1)h, (j-1)h)$。水平速度分量 $u$ 位于垂直单元面的中心，其位置为 $(x_{i+1/2}, y_j) = ((i-1/2)h, (j-1)h)$。垂直速度分量 $v$ 位于水平单元面的中心，其位置为 $(x_i, y_{j+1/2}) = ((i-1)h, (j-1/2)h)$。\n\n经过平流步骤后，得到的中间速度场 $\\mathbf{u}^* = (u^*, v^*)$ 为：\n$$\nu^*(x,y) = -ay + ab\\Delta t x\n$$\n$$\nv^*(x,y) = bx + ab\\Delta t y\n$$\n其中 $a$ 和 $b$ 是单位为逆时间的常数，$\\Delta t$ 是时间步长。\n\n该问题使用标准的二阶中心有限差分进行离散化。假设边界单元上的压力为零，即对于任何满足 $i \\in \\{0, 2\\}$ 或 $j \\in \\{0, 2\\}$ 的单元 $(i,j)$，都有 $p^{n+1}_{i,j} = 0$。\n\n推导新时间步中心单元 $(i=1, j=1)$ 处的压力 $p_{1,1}^{n+1}$ 的表达式。", "solution": "1. 投影步骤导出了泊松方程\n$$\n\\nabla^2 p^{n+1} \\;=\\;\\frac{\\rho}{\\Delta t}\\,\\nabla\\!\\cdot\\mathbf{u}^*.\n$$\n在 MAC 网格上，单元 $(i,j)$ 处的五点拉普拉斯算子形式为\n$$\n\\frac{p_{i+1,j}+p_{i-1,j}+p_{i,j+1}+p_{i,j-1}-4p_{i,j}}{h^2}\n\\;=\\;\\frac{\\rho}{\\Delta t}\\,\n\\frac{u^*_{i+1/2,j}-u^*_{i-1/2,j}+v^*_{i,j+1/2}-v^*_{i,j-1/2}}{h}\\,.\n$$\n\n2. 对于中心单元 $(1,1)$，相邻的压力值为零（边界上 $p=0$），所以\n$$\n\\frac{-4\\,p_{1,1}}{h^2}\n=\\frac{\\rho}{\\Delta t}\\,\n\\frac{u^*_{3/2,1}-u^*_{1/2,1}+v^*_{1,3/2}-v^*_{1,1/2}}{h}\\,,\n$$\n因此\n$$\np_{1,1}\n=-\\frac{h^2}{4}\\,\\frac{\\rho}{\\Delta t}\\,\n\\frac{u^*_{3/2,1}-u^*_{1/2,1}+v^*_{1,3/2}-v^*_{1,1/2}}{h}\\,.\n$$\n\n3. 中间速度场为\n$$\nu^*(x,y)=-a\\,y+ab\\Delta t\\,x,\\quad\nv^*(x,y)=b\\,x+ab\\Delta t\\,y.\n$$\n在垂直面 $x=\\pm h/2,\\;y=0$ 处\n$$\nu^*_{3/2,1}-u^*_{1/2,1}\n=ab\\Delta t\\bigl(\\tfrac h2-(-\\tfrac h2)\\bigr)\n=ab\\Delta t\\,h.\n$$\n在水平面 $x=0,\\;y=\\pm h/2$ 处\n$$\nv^*_{1,3/2}-v^*_{1,1/2}\n=ab\\Delta t\\bigl(\\tfrac h2-(-\\tfrac h2)\\bigr)\n=ab\\Delta t\\,h.\n$$\n\n4. 代入可得\n$$\np_{1,1}\n=-\\frac{h^2}{4}\\,\\frac{\\rho}{\\Delta t}\\,\n\\frac{2\\,ab\\Delta t\\,h}{h}\n=-\\frac{\\rho\\,ab\\,h^2}{2}\\,.\n$$", "answer": "$$\\boxed{-\\frac{\\rho\\,a\\,b\\,h^2}{2}}$$", "id": "1127137"}, {"introduction": "任何数值模拟的准确性都严重依赖于边界条件的正确实施，在交错网格上尤其如此。这个练习 [@problem_id:2438328] 聚焦于在MAC网格上施加边界条件的精妙之处，此时不同的物理量并不位于同一位置。通过推导“虚拟单元”(ghost cells)的值，你将更深刻地理解交错布局如何与固体壁等物理约束相互作用。", "problem": "考虑一个矩形域 $\\Omega = [0, L_x] \\times [0, L_y]$ 中的二维不可压缩流，该区域使用均匀的 Marker-And-Cell (MAC) 交错网格进行离散。设网格间距为 $\\Delta x$ 和 $\\Delta y$。压力 $p_{i,j}$ 存储在单元中心，其位置为 $(x_i, y_j)$，其中 $x_i = (i - \\tfrac{1}{2})\\Delta x$（$i = 1, \\dots, N_x$）且 $y_j = (j - \\tfrac{1}{2})\\Delta y$（$j = 1, \\dots, N_y$）。水平速度分量 $u_{i+1/2,j}$ 存储在垂直单元面上，其位置为 $(x = i \\Delta x,\\, y = (j - \\tfrac{1}{2})\\Delta y)$，其中 $i = 0, \\dots, N_x$ 且 $j = 1, \\dots, N_y$。垂直速度分量 $v_{i, j+1/2}$ 存储在水平单元面上，其位置为 $(x = (i - \\tfrac{1}{2})\\Delta x,\\, y = j \\Delta y)$，其中 $i = 1, \\dots, N_x$ 且 $j = 0, \\dots, N_y$。在区域外引入一层虚拟值（ghost values）：$p_{0,j}$ 用于第一个内部压力列左侧的压力，以及 $v_{0, j+1/2}$ 用于第一个内部 $v$ 列左侧的垂直速度。在左边界 $x = 0$ 处，对速度施加无滑移 Dirichlet 边界条件，$u(0, y) = 0$ 和 $v(0, y) = 0$，对压力施加齐次 Neumann 边界条件，$\\partial p/\\partial x (0, y) = 0$。\n\n假设为以二阶精度施加边界条件，您使用中心有限差分计算边界法向导数，并使用关于边界的中心平均值计算边界值。具体来说，将 $v$ 在壁面 $x=0$ 处的位置解释为在 $x$ 方向上位于 $v_{0, j+1/2}$ 和 $v_{1, j+1/2}$ 的中心，并使用 $p_{0,j}$ 和 $p_{1,j}$ 通过中心差分来近似壁面处的 $\\partial p/\\partial x$。\n\n下列哪种关于左边界虚拟值的设定与这些边界条件和二阶中心差分格式相符？\n\nA. $u_{1/2, j} = 0$, $v_{0, j+1/2} = v_{1, j+1/2}$, $p_{0, j} = p_{1, j}$\n\nB. $u_{1/2, j} = 0$, $v_{0, j+1/2} = -\\,v_{1, j+1/2}$, $p_{0, j} = p_{1, j}$\n\nC. $u_{1/2, j} = 0$, $v_{0, j+1/2} = 0$, $p_{0, j} = p_{1, j}$\n\nD. $u_{1/2, j} = 0$, $v_{0, j+1/2} = -\\,v_{1, j+1/2}$, $p_{0, j} = -\\,p_{1, j}$\n\n选择在 $x = 0$ 处的 MAC 网格上正确施加所述条件的选项。", "solution": "对问题陈述进行验证。\n\n**第1步：提取已知条件**\n- **区域**：二维矩形，$\\Omega = [0, L_x] \\times [0, L_y]$。\n- **流体**：不可压缩。\n- **网格**：均匀的 Marker-And-Cell (MAC) 交错网格，间距为 $\\Delta x$ 和 $\\Delta y$。\n- **变量位置**：\n    - 压力 $p_{i,j}$ 位于单元中心：$(x_i, y_j) = ((i - \\tfrac{1}{2})\\Delta x, (j - \\tfrac{1}{2})\\Delta y)$。\n    - 水平速度 $u_{i+1/2,j}$ 位于垂直面：$(i \\Delta x, (j - \\tfrac{1}{2})\\Delta y)$。\n    - 垂直速度 $v_{i, j+1/2}$ 位于水平面：$((i - \\tfrac{1}{2})\\Delta x, j \\Delta y)$。\n- **边界**：左边界位于 $x = 0$。\n- **$x=0$ 处的边界条件**：\n    1.  $u(0, y) = 0$（无滑移法向速度）。\n    2.  $v(0, y) = 0$（无滑移切向速度）。\n    3.  $\\partial p/\\partial x (0, y) = 0$（压力的齐次 Neumann 条件）。\n- **虚拟值**：在区域左侧引入一层虚拟值，包括 $p_{0,j}$ 和 $v_{0, j+1/2}$。\n- **数值格式**：要求二阶精度。\n    - 边界法向导数使用中心有限差分近似。\n    - 边界值使用中心平均值近似。\n- **具体说明**：\n    - $v$ 在壁面 $x=0$ 处的值被近似为 $v_{0, j+1/2}$ 和 $v_{1, j+1/2}$ 之间的中心值。\n    - 在壁面 $x=0$ 处的导数 $\\partial p/\\partial x$ 使用 $p_{0,j}$ 和 $p_{1,j}$ 通过中心差分近似。\n\n**第2步：使用提取的已知条件进行验证**\n- **科学依据**：该问题描述了使用 MAC 方法进行不可压缩粘性流数值模拟的标准配置，MAC 方法是计算流体动力学的基石。边界条件对于固体壁面在物理上和数学上都是合适的。该问题具有科学合理性。\n- **适定性**：该问题是适定的。它要求基于明确陈述的规则（网格结构、变量位置和有限差分格式）推导离散边界条件的实现。这些说明足够具体，可以得出一个唯一的结果。\n- **客观性**：语言精确，没有任何主观或模棱两可的术语。\n\n**第3步：结论与行动**\n问题陈述被认为是有效的、自洽的且一致的。我将继续推导解答。\n\n分别分析在左侧壁面 ($x=0$) 处三个边界条件的施加。\n\n**1. 法向速度分量：$u(0, y) = 0$**\n水平速度分量 $u_{i+1/2,j}$ 位于 x 坐标 $x = i \\Delta x$ 处。对于索引 $i=0$，速度节点 $u_{1/2,j}$ 位于 $x = 0 \\cdot \\Delta x = 0$。这意味着法向分量的离散速度点正好位于边界上。因此，Dirichlet 边界条件 $u(0, y) = 0$ 直接应用于这些节点。\n$$ u_{1/2, j} = 0 $$\n这是一种直接施加，不需要对 $u$ 进行近似或使用虚拟点。\n\n**2. 切向速度分量：$v(0, y) = 0$**\n垂直速度分量 $v_{i, j+1/2}$ 位于 x 坐标 $x = (i - \\tfrac{1}{2}) \\Delta x$ 处。第一列内部节点对应于 $i=1$，位于 $x = (1 - \\tfrac{1}{2}) \\Delta x = \\tfrac{\\Delta x}{2}$。这些值是 $v_{1, j+1/2}$。虚拟节点 $v_{0, j+1/2}$ 位于 $x = (0 - \\tfrac{1}{2}) \\Delta x = -\\tfrac{\\Delta x}{2}$。边界位于 $x=0$，正好在这两组节点的正中间。\n\n问题指定使用中心平均值来施加边界上的值。因此，壁面 $x=0$ 处的速度 $v$ 的值被近似为两个包围节点值的算术平均值：\n$$ v(0, y_{j+1/2}) \\approx \\frac{v_{0, j+1/2} + v_{1, j+1/2}}{2} $$\n这个近似是二阶精度的。将其设为等于边界条件 $v(0, y) = 0$：\n$$ \\frac{v_{0, j+1/2} + v_{1, j+1/2}}{2} = 0 $$\n求解虚拟值 $v_{0, j+1/2}$ 可得：\n$$ v_{0, j+1/2} = -v_{1, j+1/2} $$\n\n**3. 压力边界条件：$\\partial p/\\partial x (0, y) = 0$**\n压力值 $p_{i,j}$ 位于 x 坐标 $x = (i - \\tfrac{1}{2}) \\Delta x$ 处。与垂直速度类似，第一个内部压力节点 $p_{1,j}$ 位于 $x = \\tfrac{\\Delta x}{2}$，而虚拟压力节点 $p_{0,j}$ 位于 $x = -\\tfrac{\\Delta x}{2}$。边界位于 $x=0$。\n\n问题陈述，壁面处的导数 $\\partial p/\\partial x$ 应使用 $p_{0,j}$ 和 $p_{1,j}$ 通过二阶中心有限差分来近似。在 $x=0$ 处导数的差分格式为：\n$$ \\frac{\\partial p}{\\partial x} \\bigg|_{x=0, y=y_j} \\approx \\frac{p_{1,j} - p_{0,j}}{(\\tfrac{\\Delta x}{2}) - (-\\tfrac{\\Delta x}{2})} = \\frac{p_{1,j} - p_{0,j}}{\\Delta x} $$\n应用齐次 Neumann 条件 $\\partial p/\\partial x = 0$：\n$$ \\frac{p_{1,j} - p_{0,j}}{\\Delta x} = 0 $$\n这意味着：\n$$ p_{0,j} = p_{1,j} $$\n\n**推导出的设定总结：**\n1.  $u_{1/2, j} = 0$\n2.  $v_{0, j+1/2} = -v_{1, j+1/2}$\n3.  $p_{0,j} = p_{1,j}$\n\n现在，我将评估所提供的选项。\n\n**逐项分析选项**\n\n*   **A. $u_{1/2, j} = 0$, $v_{0, j+1/2} = v_{1, j+1/2}$, $p_{0, j} = p_{1, j}$**\n    - 对 $u$ 的设定是**正确的**。\n    - 对 $v$ 的设定 $v_{0, j+1/2} = v_{1, j+1/2}$ 意味着零梯度条件 $(\\partial v / \\partial x) |_{x=0} = 0$，这对应于自由滑移或对称条件，而非无滑移条件。这是**不正确的**。\n    - 对 $p$ 的设定是**正确的**。\n    因此，选项 A 是**不正确的**。\n\n*   **B. $u_{1/2, j} = 0$, $v_{0, j+1/2} = -\\,v_{1, j+1/2}$, $p_{0, j} = p_{1, j}$**\n    - 对 $u$ 的设定 $u_{1/2, j} = 0$ 是**正确的**。\n    - 对 $v$ 的设定 $v_{0, j+1/2} = -v_{1, j+1/2}$ 是**正确的**，这是通过中心平均为无滑移条件 $v(0,y)=0$ 推导出来的。\n    - 对 $p$ 的设定 $p_{0, j} = p_{1, j}$ 是**正确的**，这是通过中心差分为齐次 Neumann 条件 $\\partial p/\\partial x = 0$ 推导出来的。\n    所有三个设定都是正确的。因此，选项 B 是**正确的**。\n\n*   **C. $u_{1/2, j} = 0$, $v_{0, j+1/2} = 0$, $p_{0, j} = p_{1, j}$**\n    - 对 $u$ 的设定是**正确的**。\n    - 对 $v$ 的设定 $v_{0, j+1/2} = 0$ 是**不正确的**。这是一种一阶实现，它迫使壁面处的平均值为 $v_{1, j+1/2}/2$，除非壁面附近的流动停滞，否则该值不为零。这在一般意义上没有以二阶精度正确施加无滑移条件。\n    - 对 $p$ 的设定是**正确的**。\n    因此，选项 C 是**不正确的**。\n\n*   **D. $u_{1/2, j} = 0$, $v_{0, j+1/2} = -\\,v_{1, j+1/2}$, $p_{0, j} = -\\,p_{1, j}$**\n    - 对 $u$ 的设定是**正确的**。\n    - 对 $v$ 的设定是**正确的**。\n    - 对 $p$ 的设定 $p_{0, j} = -p_{1, j}$ 意味着齐次 Dirichlet 条件 $p(0,y)=0$，用中心平均实现。这与给定的 Neumann 条件 $\\partial p/\\partial x = 0$ 相矛盾。这是**不正确的**。\n    因此，选项 D 是**不正确的**。", "answer": "$$\\boxed{B}$$", "id": "2438328"}, {"introduction": "现实世界中的流体问题很少涉及与网格完美对齐的简单边界。这个高级实践 [@problem_id:2438357] 将指导你实现一种“切割单元”(cut-cell)方法，这是一种在简单笛卡尔网格上处理复杂曲线几何的强大技术。这个编程练习将压力泊松方程、边界条件和模板修改等概念融为一体，最终构建出一个实用的求解器，让你有能力解决更具挑战性的问题。", "problem": "您需要为一个标量椭圆问题，在 Marker-And-Cell (MAC) 网格上实现一种二维嵌入边界、切割单元离散化方法，其中未知压力存储在单元中心。计算域为单位正方形 $(x,y) \\in [0,1] \\times [0,1]$，其上覆盖一个尺寸为 $N \\times N$、网格间距为 $h = 1/N$ 的均匀笛卡尔网格。在流体子域 $\\Omega_f \\subset [0,1]^2$ 中，压力 $p$ 满足带有恒定扩散系数和人造源项的稳态泊松方程：\n$$ -\\nabla^2 p = f \\quad \\text{in } \\Omega_f, $$\n在外部边界 $\\partial [0,1]^2$ 和一个将流体与固体区域分开的内部嵌入边界 $\\Gamma \\subset [0,1]^2$上，均施加狄利克雷边界条件。嵌入边界由一个符号距离水平集函数 $\\phi(x,y)$ 表示，使得在流体中 $\\phi(x,y) \\ge 0$，在固体中 $\\phi(x,y) < 0$，而边界 $\\Gamma = \\{(x,y): \\phi(x,y)=0\\}$。MAC 网格的布局方式是，压力存储在单元中心，而速度则存储在单元面上（本问题中您不需要速度，但应遵循 MAC 对压力的布局方式）。\n\n您的实现必须从基本原理出发：\n- 在二维情况下，对面积为 $h^2$ 的单元中心控制体进行有限体积控制，对散度形式进行积分，并使用散度定理来表示穿过四个单元面的通量。\n- 对于四个坐标对齐方向中的每一个，使用单元中心与相邻流体单元中心，或与狄利克雷边界（当边界切割面法向线时）的交点之间的两点通量来近似面法向梯度，其距离需经过恰当计算。\n\n请使用以下经过充分测试的基础设定：\n- 人造解 $p^\\star(x,y) = \\sin(\\pi x)\\sin(\\pi y)$。\n- 源项 $f(x,y) = 2\\pi^2 \\sin(\\pi x)\\sin(\\pi y)$，因为 $\\Delta p^\\star = -2\\pi^2 p^\\star$，因此 $-\\nabla^2 p^\\star = 2\\pi^2 p^\\star$。\n- 外部边界和嵌入边界上的狄利克雷数据均等于人造解：$p = p^\\star$。\n\n交错网格背景及嵌入边界附近的模板修正：\n- 压力未知数存储在单元中心 $(x_i,y_j)$ 处，其中 $x_i = (i+1/2)h$, $y_j = (j+1/2)h$，且 $i,j \\in \\{0,1,\\dots,N-1\\}$。只有满足 $\\phi(x_i,y_j) \\ge 0$ 的单元是流体未知数。\n- 对于每个流体单元，在四个方向上邻居都是流体单元的标准内部情况下，使用从有限体积通量平衡推导出的拉普拉斯五点模板：\n$$ \\frac{4p_{i,j} - p_{i+1,j} - p_{i-1,j} - p_{i,j+1} - p_{i,j-1}}{h^2} = f(x_i,y_j). $$\n- 对于方向 $d \\in \\{\\text{东、西、北、南}\\}$ 上的邻居，如果它位于计算域之外（即外部狄利克雷边界，沿 d 方向距离单元中心为 $\\delta = h/2$），则用一个切割面贡献项替换缺失的邻居通量，该项会加到对角线元素和右端项上：\n$$ a_{P} \\leftarrow a_{P} + \\frac{1}{h\\,\\delta}, \\quad b \\leftarrow b + \\frac{p_B}{h\\,\\delta}, $$\n其中 $p_B = p^\\star$ 是在沿方向 d 距离单元中心 $\\delta$ 的边界点上计算的值。\n- 对于方向 $d$ 上的邻居是固体单元（即 $\\phi$ 在穿过该邻居中心时改变符号）的情况，设流体单元中心处的值为 $\\phi_P = \\phi(x_i,y_j)$，相邻中心处的值为 $\\phi_N = \\phi$。沿中心连线计算分数形式的界面位置为：\n$$ \\lambda = \\frac{\\phi_P}{\\phi_P - \\phi_N}, \\quad \\delta = \\lambda\\,h, $$\n其中 $\\lambda \\in (0,1)$，因此界面沿方向 d 距离流体单元中心为 $\\delta$。用单元中心和界面点上狄利克雷边界之间的两点通量来近似切割面通量，使用这个 $\\delta$ 添加与上述情况相同的贡献项：\n$$ a_{P} \\leftarrow a_{P} + \\frac{1}{h\\,\\delta}, \\quad b \\leftarrow b + \\frac{p_B}{h\\,\\delta}, $$\n其中 $p_B = p^\\star$ 是在距离 $(x_i,y_j)$ 沿方向 d 位移 $\\delta$ 的界面点上计算的值。\n- 对于方向 $d$ 上的邻居是流体单元的情况，使用标准的邻居耦合：\n$$ a_{P} \\leftarrow a_{P} + \\frac{1}{h^2}, \\quad a_{N} \\leftarrow a_{N} - \\frac{1}{h^2}. $$\n\n这就得出了一个在切割单元附近的修正五点模板，它通过用依赖于到界面距离的边界贡献项替换邻居耦合，来在嵌入边界上强制施加狄利克雷条件。在所有流体单元上组装线性系统 $A \\mathbf{p} = \\mathbf{b}$ 并求解 $\\mathbf{p}$。然后，计算所有流体单元中心上相对于 $p^\\star$ 的均方根（RMS）误差：\n$$ \\varepsilon_{\\mathrm{RMS}} = \\sqrt{\\frac{1}{M}\\sum_{(i,j)\\in \\Omega_f} \\left(p_{i,j} - p^\\star(x_i,y_j)\\right)^2}, $$\n其中 $M$ 是流体单元的数量。\n\n角度单位不适用。所有量均为无量纲；以纯数形式报告误差。\n\n测试套件。您的程序必须运行以下三个测试用例，并按下述顺序将三个 RMS 误差作为一个列表返回：\n- 测试 $1$（曲线边界，典型情况）：$N=64$，嵌入边界是一个圆心为 $(x_c,y_c)=(0.5,0.5)$、半径为 $r=0.25$ 的圆，其 $\\phi(x,y) = \\sqrt{(x-x_c)^2+(y-y_c)^2} - r$。流体位于圆的外部，即 $\\phi \\ge 0$。\n- 测试 $2$（网格对齐边界，简化为标准模板）：$N=64$，嵌入边界是位于 $x=0.5$ 的垂直线，其 $\\phi(x,y)=0.5-x$。流体是区域 $x \\le 0.5$（即 $\\phi \\ge 0$）。\n- 测试 $3$（靠近外部边界的小切割单元）：$N=64$，嵌入边界是一个圆心为 $(x_c,y_c)=(0.75,0.5)$、半径为 $r=0.24$ 的圆（因此到右侧壁面的最近距离为 $0.01$），流体使用相同的符号约定 $\\phi \\ge 0$。", "solution": "问题陈述需经过严格验证。\n\n步骤 1：提取已知条件。\n- 控制方程：在流体域 $\\Omega_f$ 中为 $-\\nabla^2 p = f$。\n- 计算域：$[0,1] \\times [0,1]$。\n- 网格：均匀的 $N \\times N$ 笛卡尔网格，间距 $h = 1/N$。\n- 网格类型：Marker-And-Cell (MAC) 网格，压力 $p$ 位于单元中心 $(x_i,y_j) = ((i+1/2)h, (j+1/2)h)$，其中 $i,j \\in \\{0, \\dots, N-1\\}$。\n- 流体/固体定义：一个水平集函数 $\\phi(x,y)$ 定义了区域。$\\Omega_f = \\{(x,y) | \\phi(x,y) \\ge 0\\}$ 是流体区域。$\\phi(x,y) < 0$ 是固体区域。界面是 $\\Gamma = \\{(x,y) | \\phi(x,y) = 0\\}$。\n- 人造解：$p^\\star(x,y) = \\sin(\\pi x)\\sin(\\pi y)$。\n- 源项：$f(x,y) = 2\\pi^2 \\sin(\\pi x)\\sin(\\pi y)$。\n- 边界条件：在外部边界 $\\partial [0,1]^2$ 和嵌入边界 $\\Gamma$ 上施加狄利克雷条件 $p = p^\\star(x,y)$。\n- 内部单元的离散化：拉普拉斯算子的五点模板：$\\frac{4p_{i,j} - p_{i+1,j} - p_{i-1,j} - p_{i,j+1} - p_{i,j-1}}{h^2} = f(x_i,y_j)$。\n- 外部边界的离散化：对于距离单元中心 $\\delta = h/2$ 的一个面，矩阵对角元 $a_P$ 和右端项 $b$ 被修正为：$a_{P} \\leftarrow a_{P} + \\frac{1}{h\\,\\delta}$ 和 $b \\leftarrow b + \\frac{p_B}{h\\,\\delta}$，其中 $p_B$ 是边界点上的 $p^\\star$ 值。\n- 嵌入边界（切割单元）的离散化：对于一个中心值为 $\\phi_P$ 的流体单元和一个中心值为 $\\phi_N$ 的固体邻居，到界面的距离是 $\\delta = \\lambda h$，其中 $\\lambda = \\frac{\\phi_P}{\\phi_P - \\phi_N}$。模板的修正形式上与外部边界情况相同，使用这个新的 $\\delta$ 和界面点上对应的边界值 $p_B = p^\\star$。\n- 误差度量：均方根（RMS）误差 $\\varepsilon_{\\mathrm{RMS}} = \\sqrt{\\frac{1}{M}\\sum_{(i,j)\\in \\Omega_f} \\left(p_{i,j} - p^\\star(x_i,y_j)\\right)^2}$，其中 $M$ 是流体单元的数量。\n- 测试用例：由 $N$ 和函数 $\\phi(x,y)$ 定义的三个具体用例。\n\n步骤 2：使用提取的已知条件进行验证。\n- 科学依据：该问题描述了一种用于典型椭圆偏微分方程（泊松方程）的标准数值方法（带有切割单元嵌入边界的有限体积法）。人造解方法是一种严格的代码验证技术。整个问题牢固地植根于数值分析和计算工程的原理之中。\n- 适定性：其底层的物理问题（带有狄利克雷条件的泊松方程）是适定的。所描述的离散化方法导出一个线性系统 $A \\mathbf{p} = \\mathbf{b}$，其中矩阵 $A$ 是稀疏、对称正定的（或可构造成如此），并且通常是​​对角占优的，这确保了唯一且稳定的数值解的存在。\n- 客观性：该问题用精确的数学方程、边界条件和数值参数进行了规定。它没有任何主观或模棱两可的语言。\n\n步骤 3：结论与行动。\n该问题被认定为科学上合理、适定、客观且自洽。它是计算工程领域中的一个有效问题。我将继续提供完整解法。\n\n该问题要求为标量泊松方程 $-\\nabla^2 p = f$ 构建一个有限体积求解器。我们从方程在一个控制体 $V_{i,j}$（一个以 $(x_i, y_j)$ 为中心、面积为 $h^2$ 的方形单元）上的积分形式开始。对拉普拉斯项应用散度定理可得：\n$$ -\\int_{V_{i,j}} \\nabla \\cdot (\\nabla p) \\, dV = \\int_{V_{i,j}} f \\, dV $$\n$$ -\\oint_{\\partial V_{i,j}} \\nabla p \\cdot \\mathbf{n} \\, dS = \\int_{V_{i,j}} f \\, dV $$\n在二维情况下，控制体是一个面积，边界积分是沿单元四个面（东、西、南、北）的线积分。设单元的边长为 $h$。方程变为：\n$$ -\\left[ \\int_{\\text{east}} \\frac{\\partial p}{\\partial x} dy - \\int_{\\text{west}} \\frac{\\partial p}{\\partial x} dy + \\int_{\\text{north}} \\frac{\\partial p}{\\partial y} dx - \\int_{\\text{south}} \\frac{\\partial p}{\\partial y} dx \\right] \\approx f(x_i, y_j) h^2 $$\n通过近似积分和梯度，流出单元的总通量是穿过四个面的通量之和。例如，穿过东面的通量是 $-h (\\frac{\\partial p}{\\partial x})_e$。单元 $(i,j)$ 的离散方程是这些通量的平衡：\n$$ -h \\left[ (\\nabla p \\cdot \\mathbf{n})_e + (\\nabla p \\cdot \\mathbf{n})_w + (\\nabla p \\cdot \\mathbf{n})_n + (\\nabla p \\cdot \\mathbf{n})_s \\right] = f_{i,j} h^2 $$\n$$ (\\nabla p \\cdot \\mathbf{n})_e + (\\nabla p \\cdot \\mathbf{n})_w + (\\nabla p \\cdot \\mathbf{n})_n + (\\nabla p \\cdot \\mathbf{n})_s = -f_{i,j} h $$\n我们使用两点有限差分来近似每个面上的法向梯度。具体的近似方法取决于相邻单元是流体、固体还是在域外。将所有贡献相加，得到关于 $p_{i,j}$ 的一个线性方程。\n\n对于一个单元 $(i,j)$，若其所有四个邻居——$(i\\pm1, j)$ 和 $(i, j\\pm1)$——也都是流体单元，则使用中心差分来近似梯度。对于东面，梯度为 $(\\frac{\\partial p}{\\partial x})_e \\approx \\frac{p_{i+1,j} - p_{i,j}}{h}$。将所有四个通量近似值相加，可得到乘以 $h^2$ 的负拉普拉斯算子的标准五点模板：\n$$ \\frac{4p_{i,j} - p_{i+1,j} - p_{i-1,j} - p_{i,j+1} - p_{i,j-1}}{h^2} = f(x_i,y_j) $$\n这个方程可以重新排列，以显示对线性系统的贡献。对于每个流体邻居，例如 $(i+1,j)$，其项为 $\\frac{1}{h^2}p_{i,j} - \\frac{1}{h^2}p_{i+1,j}$。这对应于将 $\\frac{1}{h^2}$ 加到 $p_{i,j}$ 的对角矩阵元素上，并将 $-\\frac{1}{h^2}$ 加到对应邻居 $p_{i+1,j}$ 的非对角元素上。\n\n当一个单元面位于外部计算边界上时（例如 $x=1$），施加狄利克雷条件 $p=p_B$。该面距离单元中心为 $\\delta = h/2$。法向梯度通过单边差分近似：$(\\frac{\\partial p}{\\partial x})_e \\approx \\frac{p_B - p_{i,j}}{\\delta}$。该面对通量平衡的贡献是 $\\frac{p_{i,j} - p_B}{h\\delta}$。这通过将 $\\frac{1}{h\\delta}$ 加到对角系数上，并将已知项 $\\frac{p_B}{h\\delta}$ 加到右端项向量中，来修正 $p_{i,j}$ 的线性方程。\n\n当一个流体单元 $(i,j)$ 与一个固体单元相邻时，嵌入边界 $\\Gamma$ 会切割网格。我们使用水平集函数 $\\phi$ 来定位界面。设流体单元中心的值为 $\\phi_P = \\phi(x_i, y_j) \\ge 0$，固体邻居中心的值为 $\\phi_N < 0$。假设 $\\phi$ 是一个符号距离函数，线性插值给出到界面的分数距离为 $\\lambda = \\frac{\\phi_P}{\\phi_P - \\phi_N}$。实际距离是 $\\delta = \\lambda h$。狄利克雷条件 $p=p_B$ 在边界上的这个插值点施加。梯度近似变为 $\\frac{p_B - p_{i,j}}{\\delta}$，通量贡献为 $\\frac{p_{i,j} - p_B}{h\\delta}$。这导致了与外部边界情况形式上完全相同的模板修正：对角元素增加 $\\frac{1}{h\\delta}$，右端项增加 $\\frac{p_B}{h\\delta}$。\n\n如果一个流体单元的中心正好位于边界上，即 $\\phi(x_i, y_j)=0$，就会出现一个关键的特殊情况。这将导致 $\\lambda=0$ 和 $\\delta=0$，在通量项 $\\frac{1}{h\\delta}$ 中产生奇异点。物理上正确且数值稳定的方法是认识到该单元中心的压力已由狄利克雷条件给出。因此，对于这样的单元，我们舍弃通量平衡方程，直接强制实施 $p_{i,j} = p^\\star(x_i, y_j)$。在线性系统 $A\\mathbf{p}=\\mathbf{b}$ 中，这通过将 $A$ 的对应行设置为单位行（对角线上为 1，其他位置为 0），并将 $\\mathbf{b}$ 的对应元素设置为已知的边界值来实现。\n\n总体算法如下：\n1. 识别所有满足 $\\phi(x_i, y_j) \\ge 0$ 的流体单元。创建一个从这些 $M$ 个单元的二维索引 $(i,j)$ 到一维索引 $k \\in [0, M-1]$ 的映射。\n2. 构建 $M \\times M$ 的稀疏矩阵 $A$ 和 $M \\times 1$ 的向量 $\\mathbf{b}$。\n3. 对每个流体单元 $(i,j)$，遍历其四个邻居。\n4. 对每个邻居，应用相应的规则：对于流体邻居，使用标准的五点耦合；对于外部边界或固体（切割单元）邻居，使用边界通量修正。相应地更新 $A$ 的系数和 $\\mathbf{b}$ 的条目。通过直接设置狄利克雷条件来处理 $\\delta=0$ 的情况。\n5. 求解得到的稀疏线性系统 $A\\mathbf{p} = \\mathbf{b}$，以获得未知压力向量 $\\mathbf{p}$。\n6. 通过在所有流体单元上比较数值解 $p_{i,j}$ 与精确的人造解 $p^\\star(x_i, y_j)$ 来计算 RMS 误差。\n\n对问题陈述中指定的三个测试用例，均执行此程序。", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\nfrom scipy.sparse import lil_matrix, csc_matrix\nfrom scipy.sparse.linalg import spsolve\n\ndef p_star(x: np.ndarray, y: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Computes the manufactured solution for pressure.\n    All mathematical entities are in LaTeX as required by the role, but not in code comments.\n    p_star(x,y) = sin(pi * x) * sin(pi * y)\n    \"\"\"\n    return np.sin(np.pi * x) * np.sin(np.pi * y)\n\ndef f_source(x: np.ndarray, y: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Computes the source term f(x,y) corresponding to the manufactured solution.\n    -nabla^2 p_star = 2 * pi^2 * sin(pi * x) * sin(pi * y)\n    \"\"\"\n    return 2.0 * np.pi**2 * np.sin(np.pi * x) * np.sin(np.pi * y)\n\ndef run_case(N: int, phi_func) -> float:\n    \"\"\"\n    Sets up and solves the Poisson problem for a given test case configuration.\n\n    Args:\n        N: The number of grid cells in each dimension.\n        phi_func: A callable function phi(x,y) that defines the level set.\n\n    Returns:\n        The root-mean-square error of the numerical solution.\n    \"\"\"\n    h = 1.0 / N\n    h2 = h * h\n\n    # Create grid for cell centers\n    i_coords = np.arange(N)\n    j_coords = np.arange(N)\n    x_centers = (i_coords + 0.5) * h\n    y_centers = (j_coords + 0.5) * h\n    xx, yy = np.meshgrid(x_centers, y_centers, indexing='ij')\n\n    # Evaluate level set and identify fluid cells\n    phi_grid = phi_func(xx, yy)\n    is_fluid = phi_grid >= 0\n\n    # Map 2D fluid cell indices to a 1D linear system index\n    fluid_indices = np.where(is_fluid)\n    num_fluid_cells = len(fluid_indices[0])\n    \n    map_ij_to_k = -np.ones((N, N), dtype=int)\n    map_ij_to_k[fluid_indices] = np.arange(num_fluid_cells)\n\n    # Initialize sparse matrix A and vector b\n    A = lil_matrix((num_fluid_cells, num_fluid_cells))\n    b = np.zeros(num_fluid_cells)\n\n    # Iterate over all grid cells to build the linear system\n    for i in range(N):\n        for j in range(N):\n            if not is_fluid[i, j]:\n                continue\n\n            k = map_ij_to_k[i, j]\n            xi, yj = xx[i, j], yy[i, j]\n            \n            # Start with source term on RHS: ... = f_ij\n            b[k] = f_source(xi, yj)\n\n            p_center_phi = phi_grid[i, j]\n\n            # Special case: cell center lies on the boundary (phi_P = 0).\n            # This would lead to delta = 0, causing a singularity.\n            # We enforce the Dirichlet condition directly on this node.\n            if np.isclose(p_center_phi, 0.0):\n                A[k, :] = 0.0\n                A[k, k] = 1.0\n                b[k] = p_star(xi, yj)\n                continue  # Equation for this cell is now fixed.\n\n            # Process 4 neighbors (East, West, North, South)\n            # Tuple format: (di, dj) for index offset\n            neighbors = [(1, 0), (-1, 0), (0, 1), (0, -1)]\n            \n            for di, dj in neighbors:\n                ni, nj = i + di, j + dj\n\n                # Case 1: Outer boundary of the [0,1]x[0,1] domain\n                if not (0 <= ni < N and 0 <= nj < N):\n                    delta = h / 2.0\n                    xb = xi + di * delta\n                    yb = yj + dj * delta\n                    pb = p_star(xb, yb)\n                    \n                    A[k, k] += 1.0 / (h * delta)\n                    b[k] += pb / (h * delta)\n\n                # Case 2 & 3: Internal neighbor (either fluid or solid)\n                else:\n                    # Case 2: Neighbor is a fluid cell\n                    if is_fluid[ni, nj]:\n                        nk = map_ij_to_k[ni, nj]\n                        A[k, k] += 1.0 / h2\n                        A[k, nk] -= 1.0 / h2\n                    \n                    # Case 3: Neighbor is a solid cell (cut-cell)\n                    else:\n                        p_neighbor_phi = phi_grid[ni, nj]\n                        phi_diff = p_center_phi - p_neighbor_phi\n                        \n                        # Since phi_P > 0 and phi_N < 0, phi_diff is safely non-zero.\n                        lambda_frac = p_center_phi / phi_diff\n                        delta = lambda_frac * h\n                        \n                        # Interface point coordinates\n                        xb = xi + di * delta\n                        yb = yj + dj * delta\n                        pb = p_star(xb, yb)\n                        \n                        A[k, k] += 1.0 / (h * delta)\n                        b[k] += pb / (h * delta)\n\n    # Solve the linear system\n    A_csc = csc_matrix(A)\n    p_vec = spsolve(A_csc, b)\n\n    # Calculate RMS error\n    p_solution_grid = np.full((N, N), np.nan)\n    p_solution_grid[fluid_indices] = p_vec\n\n    p_exact_grid = p_star(xx, yy)\n    \n    squared_errors = (p_solution_grid[is_fluid] - p_exact_grid[is_fluid])**2\n    rms_error = np.sqrt(np.mean(squared_errors))\n    \n    return rms_error\n\n\ndef solve():\n    # Define the test cases from the problem statement.\n    test_cases = [\n        {\n            \"N\": 64,\n            \"phi_func\": lambda x, y: np.sqrt((x - 0.5)**2 + (y - 0.5)**2) - 0.25\n        },\n        {\n            \"N\": 64,\n            \"phi_func\": lambda x, y: 0.5 - x\n        },\n        {\n            \"N\": 64,\n            \"phi_func\": lambda x, y: np.sqrt((x - 0.75)**2 + (y - 0.5)**2) - 0.24\n        }\n    ]\n\n    results = []\n    for case in test_cases:\n        rms_error = run_case(case[\"N\"], case[\"phi_func\"])\n        results.append(rms_error)\n\n    # Final print statement in the exact required format.\n    print(f\"[{','.join(map(str, results))}]\")\n\nsolve()\n\n```", "id": "2438357"}]}