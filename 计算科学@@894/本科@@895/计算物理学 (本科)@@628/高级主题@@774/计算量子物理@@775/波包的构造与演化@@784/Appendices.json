{"hands_on_practices": [{"introduction": "我们从一个自由粒子波包的特殊案例开始，这个案例拥有精确的解析解。通过给初始高斯波包赋予一个二次相位（也称为“啁啾”），我们可以观察到一种有趣的行为：波包在自由演化过程中会先“自聚焦”然后再散开。这个练习 [@problem_id:2450147] 旨在通过实现其解析解来探索这一现象，让你深入理解波包宽度随时间的演化，并为后续更复杂的数值模拟奠定基础。", "problem": "考虑一个一维、自由、非相对论性的量子粒子，其所处的单位制中，约化普朗克常数和质量均设为1（即 $\\hbar=1$ 且 $m=1$）。状态 $\\psi(x,t)$ 遵循自由粒子的含时薛定谔方程 $i \\,\\partial \\psi / \\partial t = -\\tfrac{1}{2}\\,\\partial^2 \\psi / \\partial x^2$。在 $t=0$ 时，归一化波函数是一个带有二次相位的高斯函数（啁啾高斯函数），由 $\\psi(x,0) = A\\,\\exp\\!\\left(-a x^2\\right)\\exp\\!\\left(i b x^2\\right)$ 给出，其中 $a>0$ 和 $b$ 为实数参数，$A$ 是归一化常数，其选择需满足 $\\int_{-\\infty}^{\\infty} |\\psi(x,0)|^2\\,dx = 1$。将空间标准差 $\\sigma_x(t)$ 定义为 $\\sigma_x(t) = \\sqrt{\\langle x^2 \\rangle_t - \\langle x \\rangle_t^2}$，其中 $\\langle \\cdot \\rangle_t$ 表示在时间 $t$ 的量子期望值。对于此平均位置和平均动量均为零的初始条件，所有时间 $t$ 都有 $\\langle x \\rangle_t = 0$，因此 $\\sigma_x(t) = \\sqrt{\\langle x^2 \\rangle_t}$。仅考虑正向时间演化，即 $t \\ge 0$ 的情况，确定 $\\sigma_x(t)$ 达到其最小值的时间 $t_\\mathrm{focus}$、对应的最小宽度 $\\sigma_x(t_\\mathrm{focus})$，以及是否在正向时间内发生真正的自聚焦。自聚焦定义为存在某个 $t>0$ 使得 $\\sigma_x(t) < \\sigma_x(0)$。使用以下参数对 $(a,b)$ 的测试集，每对参数均满足 $a>0$ 且 $b$ 为实数：$(a,b)=(1,-1)$、$(a,b)=(1,0)$、$(a,b)=(\\frac{1}{2},-2)$、$(a,b)=(2,3)$、$(a,b)=(\\frac{1}{4},-\\frac{1}{2})$。对每个测试用例，计算三个输出：聚焦时间 $t_\\mathrm{focus}$、聚焦宽度 $\\sigma_x(t_\\mathrm{focus})$，以及一个聚焦标志（若在正向时间内发生自聚焦，则为 $1$，否则为 $0$）。所有报告的量均为无单位量。报告的 $t_\\mathrm{focus}$ 和 $\\sigma_x(t_\\mathrm{focus})$ 四舍五入到六位小数，聚焦标志报告为整数 $0$ 或 $1$。您的程序应生成单行输出，其中包含一个以逗号分隔的列表的列表，其顺序与测试集相同，每个内部列表的格式为 $[t_\\mathrm{focus},\\sigma_x(t_\\mathrm{focus}),\\mathrm{flag}]$，例如 $[[t_1,\\sigma_1,f_1],[t_2,\\sigma_2,f_2],\\dots]$。", "solution": "问题陈述经核实具有科学依据、问题适定、客观且自洽。它描述了量子力学中的一个标准问题——高斯波包的时间演化——并且没有任何逻辑或事实上的不一致。所有必要的参数和定义均已提供。因此，我将继续进行完整的解析求解。\n\n该系统描述了一个质量为 $m=1$ 的一维自由粒子，其运动由含时薛定谔方程（TDSE）决定，且 $\\hbar=1$：\n$$ i \\frac{\\partial \\psi(x,t)}{\\partial t} = -\\frac{1}{2} \\frac{\\partial^2 \\psi(x,t)}{\\partial x^2} $$\n在 $t=0$ 时的初始状态是一个啁啾高斯波包：\n$$ \\psi(x,0) = A \\exp(-ax^2) \\exp(ibx^2) = A \\exp(-(a-ib)x^2) $$\n其中 $a>0$ 和 $b$ 是实数参数，$A$ 是归一化常数。这个初始状态是一个高斯函数，其复数参数为 $\\gamma_0 = a-ib$。条件 $a=\\Re(\\gamma_0)>0$ 确保了波函数是可归一化的。\n\n自由粒子 TDSE 的一个关键性质是，初始的高斯波包在任何时候都保持为高斯形式。因此，我们可以为随时间演化的波函数提出以下形式的拟设：\n$$ \\psi(x,t) = A(t) \\exp(-\\gamma(t) x^2) $$\n其中 $\\gamma(t)$ 是一个含时的复数参数，$A(t)$ 是一个含时的归一化因子。将此拟设代入 TDSE，通过令 $x^2$ 各次幂的系数相等，可以得到两个常微分方程，一个关于 $\\gamma(t)$，一个关于 $A(t)$：\n$$ i \\frac{d\\gamma}{dt} = 2\\gamma(t)^2 $$\n这是一个关于 $\\gamma(t)$ 的可分离一阶微分方程。我们在初始条件 $\\gamma(0) = \\gamma_0 = a-ib$ 下求解该方程：\n$$ \\int_{\\gamma_0}^{\\gamma(t)} \\frac{d\\gamma'}{\\gamma'^2} = \\int_0^t -2i dt' \\implies \\left[-\\frac{1}{\\gamma'}\\right]_{\\gamma_0}^{\\gamma(t)} = -2it $$\n$$ -\\frac{1}{\\gamma(t)} + \\frac{1}{\\gamma_0} = -2it \\implies \\frac{1}{\\gamma(t)} = \\frac{1}{\\gamma_0} + 2it $$\n求解 $\\gamma(t)$：\n$$ \\gamma(t) = \\frac{1}{1/\\gamma_0 + 2it} = \\frac{\\gamma_0}{1 + 2it\\gamma_0} $$\n代入 $\\gamma_0=a-ib$：\n$$ \\gamma(t) = \\frac{a-ib}{1 + 2it(a-ib)} = \\frac{a-ib}{(1+2bt) + i(2at)} $$\n概率密度由 $|\\psi(x,t)|^2 = |A(t)|^2 \\exp(-2\\Re(\\gamma(t))x^2)$ 给出。这是一个关于 $x$ 的高斯分布。空间标准差 $\\sigma_x(t)$ 与 $\\gamma(t)$ 的实部相关。对于一个与 $\\exp(-C x^2)$ 成正比的概率密度，其方差为 $\\sigma_x^2 = 1/(2C)$。在我们的情况中，$C = 2\\Re(\\gamma(t))$，所以 $\\sigma_x(t)^2 = 1/(4\\Re(\\gamma(t)))$。\n\n我们计算 $\\gamma(t)$ 的实部：\n$$ \\Re(\\gamma(t)) = \\Re\\left(\\frac{a-ib}{(1+2bt) + i(2at)}\\right) = \\Re\\left(\\frac{(a-ib)((1+2bt) - i(2at))}{(1+2bt)^2 + (2at)^2}\\right) $$\n$$ \\Re(\\gamma(t)) = \\frac{a(1+2bt) - b(2at)}{(1+2bt)^2 + 4a^2t^2} = \\frac{a}{(1+2bt)^2 + 4a^2t^2} $$\n因此，宽度的平方 $\\sigma_x(t)^2$ 为：\n$$ \\sigma_x(t)^2 = \\frac{1}{4\\Re(\\gamma(t))} = \\frac{(1+2bt)^2 + 4a^2t^2}{4a} $$\n为了找到在 $t \\ge 0$ 内使 $\\sigma_x(t)$ 最小化的时间 $t_\\mathrm{focus}$，我们最小化 $\\sigma_x(t)^2$。令 $F(t) = \\sigma_x(t)^2$。我们展开 $F(t)$ 的表达式：\n$$ F(t) = \\frac{1+4bt+4b^2t^2+4a^2t^2}{4a} = \\frac{1}{a}\\left(\\frac{1}{4} + bt + (a^2+b^2)t^2\\right) $$\n这是一个关于 $t$ 的二次函数，代表一个抛物线。其最小值出现在导数为零处：\n$$ \\frac{dF}{dt} = \\frac{1}{a}(b + 2(a^2+b^2)t) = 0 $$\n$$ t = -\\frac{b}{2(a^2+b^2)} $$\n我们称这个时间为 $t_\\mathrm{min}$。由于我们被限制在正向时间演化（$t \\ge 0$），我们必须考虑 $t_\\mathrm{min}$ 的符号：\n\n情况 1：$b > 0$。\n$t_\\mathrm{min} < 0$。抛物线的最小值出现在负时间。对于 $t \\ge 0$，函数 $F(t)$ 是严格递增的。因此，$t \\ge 0$ 范围内的最小值在 $t=0$ 处取得。\n$t_\\mathrm{focus} = 0$。\n最小宽度是初始宽度，$\\sigma_x(0) = \\sqrt{F(0)} = \\sqrt{\\frac{1}{4a}} = \\frac{1}{2\\sqrt{a}}$。\n\n情况 2：$b = 0$。\n$t_\\mathrm{min} = 0$。最小值出现在 $t=0$。\n$t_\\mathrm{focus} = 0$。\n最小宽度是 $\\sigma_x(0) = \\frac{1}{2\\sqrt{a}}$。\n\n情况 3：$b < 0$。\n$t_\\mathrm{min} > 0$。最小值出现在正时间，因此是物理上可及的。\n$t_\\mathrm{focus} = -\\frac{b}{2(a^2+b^2)}$。\n为了求出最小宽度 $\\sigma_x(t_\\mathrm{focus})$，我们将 $t_\\mathrm{focus}$ 代回 $F(t)$：\n$$ \\sigma_x(t_\\mathrm{focus})^2 = \\frac{1}{4a}\\left[1 - \\frac{2b^2}{a^2+b^2} + \\frac{4(a^2+b^2)b^2}{4(a^2+b^2)^2}\\right] = \\frac{1}{4a}\\left[1 - \\frac{b^2}{a^2+b^2}\\right] = \\frac{1}{4a}\\left[\\frac{a^2}{a^2+b^2}\\right] = \\frac{a}{4(a^2+b^2)} $$\n$$ \\sigma_x(t_\\mathrm{focus}) = \\sqrt{\\frac{a}{4(a^2+b^2)}} = \\frac{1}{2}\\sqrt{\\frac{a}{a^2+b^2}} $$\n\n最后，我们确定聚焦标志。如果存在某个 $t > 0$ 使得 $\\sigma_x(t) < \\sigma_x(0)$，则发生真正的自聚焦。这等价于宽度在初始时刻减小，即 $\\frac{dF}{dt}|_{t=0} < 0$。\n$$ \\frac{dF}{dt}|_{t=0} = \\frac{b}{a} $$\n由于 $a>0$，符号由 $b$ 决定。\n- 如果 $b < 0$，则 $\\frac{dF}{dt}|_{t=0} < 0$，所以宽度在初始时减小。发生聚焦。标志 = $1$。\n- 如果 $b \\ge 0$，则 $\\frac{dF}{dt}|_{t=0} \\ge 0$，所以宽度在 $t=0$ 时是静止或增加的。对于 $t>0$，宽度总是大于或等于初始宽度。不发生聚焦。标志 = $0$。\n\n现在将这些推导出的公式应用于所提供的测试用例。", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Solves the quantum wave packet focusing problem for a given set of test cases.\n    \"\"\"\n    # Define the test cases from the problem statement.\n    test_cases = [\n        (1.0, -1.0),\n        (1.0, 0.0),\n        (0.5, -2.0),\n        (2.0, 3.0),\n        (0.25, -0.5)\n    ]\n\n    results = []\n    for a, b in test_cases:\n        # According to the derived analytical solution:\n        # The time evolution of the squared width is a parabola in t:\n        # sigma_x(t)^2 = (1/a) * (1/4 + b*t + (a^2+b^2)*t^2)\n        # The minimum of this parabola occurs at t_min = -b / (2*(a^2+b^2)).\n        # We need to find the minimum for t >= 0.\n\n        if b < 0:\n            # The global minimum occurs at a positive time t_focus > 0.\n            # This corresponds to self-focusing.\n            t_focus = -b / (2 * (a**2 + b**2))\n            # The minimum width is sigma_x(t_focus) = 0.5 * sqrt(a / (a^2+b^2)).\n            sigma_focus = 0.5 * np.sqrt(a / (a**2 + b**2))\n            focusing_flag = 1\n        else:  # b >= 0\n            # The global minimum is at t_min <= 0. For t >= 0, the width is\n            # monotonically increasing (or constant at t=0 if b=0).\n            # The minimum in the domain t >= 0 is at t_focus = 0.\n            t_focus = 0.0\n            # The width is the initial width, sigma_x(0) = 1 / (2*sqrt(a)).\n            sigma_focus = 0.5 / np.sqrt(a)\n            focusing_flag = 0\n\n        # Format the results as required.\n        # Round floats to six decimal places.\n        # The flag is already an integer.\n        results.append(\n            f\"[{t_focus:.6f},{sigma_focus:.6f},{focusing_flag}]\"\n        )\n\n    # Final print statement in the exact required format.\n    print(f\"[{','.join(results)}]\")\n\nsolve()\n```", "id": "2450147"}, {"introduction": "在掌握了自由波包的行为后，我们现在引入一个相互作用势，并使用一种强大的数值方法来模拟其演化。本练习 [@problem_id:2450186] 将指导你使用分步傅里叶方法来模拟一个高斯波包与狄拉克 $\\delta$ 势垒的散射过程。通过将你的数值计算结果与解析理论预测进行比较，你将不仅能掌握一项核心的计算物理技能，还能更深刻地体会波包与理想化平面波在散射问题中的区别。", "problem": "考虑一个质量为 $m$ 的粒子在标量势 $V(x)$ 中运动，其一维含时薛定谔方程为：\n$$\ni \\hbar \\,\\frac{\\partial \\psi(x,t)}{\\partial t} \\;=\\; \\left[-\\frac{\\hbar^2}{2m}\\frac{\\partial^2}{\\partial x^2} \\;+\\; V(x)\\right]\\psi(x,t),\n$$\n在自然单位制（其中 $\\hbar = 1$ 且 $m = 1$）的约定下，该方程可化简为\n$$\ni \\,\\frac{\\partial \\psi(x,t)}{\\partial t} \\;=\\; \\left[-\\frac{1}{2}\\frac{\\partial^2}{\\partial x^2} \\;+\\; V(x)\\right]\\psi(x,t).\n$$\n设势为一个位于 $x_0$ 处的狄拉克 $\\delta$ 势垒，由 $V(x) = \\alpha \\,\\delta(x - x_0)$ 给出。在 $t=0$ 时刻的初始态是一个归一化高斯波包：\n$$\n\\psi(x,0) \\;=\\; \\mathcal{N}\\,\\exp\\!\\left[-\\frac{(x-x_c)^2}{2\\sigma_x^2}\\right]\\exp\\!\\left[i\\,k_0\\,(x-x_c)\\right],\n$$\n其中心位置为 $x_c$，空间宽度为 $\\sigma_x$，平均波数值为 $k_0$。其中 $\\mathcal{N}$ 是归一化常数，确保 $\\int_{-\\infty}^{\\infty} |\\psi(x,0)|^2\\,dx = 1$。对于波数为 $k$ 的平面波入射到此单位制下的狄拉克 $\\delta$ 势上，其解析透射系数为：\n$$\nT_{\\text{analytic}}(k,\\alpha) \\;=\\; \\frac{k^2}{k^2 + \\alpha^2}.\n$$\n\n你的任务是编写一个完整、可运行的程序，对 $\\psi(x,t)$ 进行有限时间的数值演化，并估算波包从势垒散射后的透射概率，然后将其与几个测试用例的 $T_{\\text{analytic}}(k_0,\\alpha)$ 进行比较。\n\n为确保评估的无歧义性，请遵循以下模拟要求与约定：\n- 使用长度为 $L=200$ 的空间域，覆盖区间 $[-L/2, L/2)$，包含 $N=1024$ 个均匀间隔的格点，因此网格间距为 $\\Delta x = L/N$。在此区间上使用周期性边界条件。\n- 将势垒置于 $x_0 = 0$。通过网格上的离散势 $V_j$ 来数值表示狄拉克 $\\delta$ 函数，该离散势满足积分约束 $\\sum_{j=0}^{N-1} V_j\\,\\Delta x = \\alpha$，且其支撑集局域在最接近 $x_0$ 的格点上。这确保了在离散化模型中势垒的积分强度是正确的。\n- 使用恒定时间步长 $\\Delta t = 0.01$ 将波函数演化至最终时刻 $t_f = 30$。\n- 使用初始波包参数 $x_c = -30$ 和 $\\sigma_x = 2.0$（无量纲单位）。\n- 演化到时刻 $t_f$ 后，按下式估算透射概率\n$$\nT_{\\text{num}} \\;=\\; \\int_{x>x_{\\text{cut}}} |\\psi(x,t_f)|^2\\,dx,\n$$\n其中截断位置为 $x_{\\text{cut}} = 10$。在离散模型中，将该积分解释为间距为 $\\Delta x$ 的黎曼和。\n\n测试套件：\n- 情况 1：$(\\alpha, k_0) = (0.5, 3.0)$。\n- 情况 2：$(\\alpha, k_0) = (5.0, 2.0)$。\n- 情况 3：$(\\alpha, k_0) = (0.0, 2.5)$。\n- 情况 4：$(\\alpha, k_0) = (2.0, 1.5)$。\n\n对于每个情况，计算绝对误差\n$$\n\\varepsilon \\;=\\; \\left|T_{\\text{num}} - T_{\\text{analytic}}(k_0,\\alpha)\\right|.\n$$\n\n最终输出格式：\n- 你的程序应生成单行输出，其中包含所有四个情况的结果。结果为一个由方括号括起来的、逗号分隔的浮点数绝对误差列表，例如 $[e_1,e_2,e_3,e_4]$，其中每个 $e_j$ 是上述定义的相应情况的 $\\varepsilon$ 值。在上述定义的自然单位制约定下，所有量均为无量纲。", "solution": "问题陈述已经过严格验证，并被认定为有效。它提出了一个在计算量子力学领域中适定的、有科学依据的问题，没有任何矛盾或歧义。数值模拟所需的所有必要参数和条件均已提供。因此，我们可以着手进行求解。\n\n任务是模拟受薛定谔方程支配的一维高斯波包与狄拉克 $\\delta$ 势垒相互作用的时间演化。我们将数值计算透射概率，并将其与解析近似值进行比较。由于分步傅里叶方法适用于给定的哈密顿量结构和边界条件，因此选择该算法进行时间演化。\n\n该求解方法通过以下结构化步骤实现：\n\n1.  **无界域的离散化**。该问题设置在无限域上，但为了计算，必须将其限制在有限范围内。我们在区间 $x \\in [-L/2, L/2)$ 上建立一个足够大的一维空间网格，其长度 $L=200.0$，包含 $N=1024$ 个均匀间隔的点。这样的区域选择可确保在模拟时间 $t_f=30.0$ 内，波包不会与边界发生相互作用。我们施加周期性边界条件，这对于基于傅里叶的方法是很自然的。网格间距为 $\\Delta x = L/N$。格点的坐标为 $x_j = -L/2 + j\\Delta x$，其中 $j = 0, 1, \\ldots, N-1$。傅里叶空间中动能算符所需的相应波数网格由一组离散波数 $k_n$ 给出，可以使用 `numpy.fft.fftfreq` 高效计算。其关系为 $k = 2\\pi F$，其中 $F$ 是该函数返回的频率。\n\n2.  **初始态构建**。$t=0$ 时刻的初始波函数是一个高斯波包，由以下复值函数描述：\n    $$\n    \\psi(x,0) \\;=\\; \\mathcal{N}\\,\\exp\\!\\left[-\\frac{(x-x_c)^2}{2\\sigma_x^2}\\right]\\exp\\!\\left[i\\,k_0\\,(x-x_c)\\right]\n    $$\n    问题指定了初始中心位置 $x_c=-30.0$、空间宽度 $\\sigma_x=2.0$，并为每个测试用例提供了平均波数 $k_0$。归一化常数 $\\mathcal{N}$ 确保总概率为一，即 $\\int_{-\\infty}^{\\infty} |\\psi(x,0)|^2\\,dx = 1$。其解析值为 $\\mathcal{N} = (\\pi\\sigma_x^2)^{-1/4}$。我们使用这些参数在空间网格上构建一个表示 $\\psi(x_j, 0)$ 的复值数组。\n\n3.  **势的表示**。势是一个位于 $x_0=0$ 处的狄拉克 $\\delta$ 势垒，$V(x) = \\alpha \\,\\delta(x - x_0)$。在我们的离散模型中，这个理想化的势被一个仅在最接近 $x_0=0$ 的单个格点 $x_{j_0}$ 处非零的势所近似。对于我们的对称网格，这个点是 $x_{N/2} = 0$。为了保持 $\\delta$ 函数的积分强度，我们强制执行条件 $\\sum_{j=0}^{N-1} V_j\\,\\Delta x = \\alpha$。这意味着势数组 $V_j$ 在除了索引 $j_0=N/2$ 之外的所有地方都为零，而在该索引处其值为 $V_{j_0} = \\alpha / \\Delta x$。\n\n4.  **时间演化算法：分步傅里叶方法**。我们求解的是含时薛定谔方程 $i \\frac{\\partial \\psi}{\\partial t} = \\hat{H}\\psi$，其中哈密顿量为 $\\hat{H} = \\hat{T} + \\hat{V}$。动能算符是 $\\hat{T} = -\\frac{1}{2}\\frac{\\partial^2}{\\partial x^2}$，势能算符是 $\\hat{V} = V(x)$。由于 $\\hat{T}$ 和 $\\hat{V}$ 不对易，形式解 $\\psi(t+\\Delta t) = e^{-i\\hat{H}\\Delta t}\\psi(t)$ 需要对矩阵指数进行近似。我们使用二阶精度的 Strang 分裂格式（一种对称 Trotter-Suzuki 分解）：\n    $$\n    e^{-i(\\hat{T}+\\hat{V})\\Delta t} \\approx e^{-i\\hat{V}\\Delta t/2} e^{-i\\hat{T}\\Delta t} e^{-i\\hat{V}\\Delta t/2}\n    $$\n    在单个时间步长 $\\Delta t$ 内演化波函数的算法如下：\n    a. 在势能算符下演化半个时间步长 $\\Delta t/2$。在位置空间中，这是一个简单的乘法：$\\psi'(x) = e^{-iV(x)\\Delta t/2}\\psi(x)$。\n    b. 在动能算符下演化一个完整的时间步长 $\\Delta t$。这在动量空间中最高效，因为在动量空间中 $\\hat{T}$ 是一个简单的乘法算符。动量空间中的算符是 $\\hat{T}_k = k^2/2$。过程如下：\n        i. 使用快速傅里叶变换 (FFT) 将波函数变换到动量空间：$\\tilde{\\psi}'(k) = \\mathcal{F}\\{\\psi'(x)\\}$。\n        ii. 乘以动能演化因子：$\\tilde{\\psi}''(k) = e^{-i(k^2/2)\\Delta t}\\tilde{\\psi}'(k)$。\n        iii. 使用逆快速傅里叶变换 (iFFT) 将其变换回位置空间：$\\psi''(x) = \\mathcal{F}^{-1}\\{\\tilde{\\psi}''(k)\\}$。\n    c. 再次在势能算符下演化第二个半时间步长 $\\Delta t/2$：$\\psi(x,t+\\Delta t) = e^{-iV(x)\\Delta t/2}\\psi''(x)$。\n    这整个序列保持波函数的范数（幺正性），并且是无条件稳定的。我们重复此过程 $N_t = t_f/\\Delta t = 30.0 / 0.01 = 3000$ 步，以达到最终时间 $t_f=30.0$。\n\n5.  **透射概率的计算**。演化到 $t=t_f$ 后，系统的最终状态由波函数 $\\psi(x, t_f)$ 给出。透射概率 $T_{\\text{num}}$ 定义为在截断点 $x_{\\text{cut}}=10.0$ 右侧区域找到粒子的概率。这是通过在该区域上对概率密度 $|\\psi(x, t_f)|^2$ 进行积分来计算的。该积分在离散网格上通过黎曼和来近似：\n    $$\n    T_{\\text{num}} \\;=\\; \\sum_{j \\text{ s.t. } x_j > x_{\\text{cut}}} |\\psi(x_j, t_f)|^2 \\Delta x\n    $$\n\n6.  **误差计算**。对于由一对参数 $(\\alpha, k_0)$ 定义的每个测试用例，将数值计算的透射率 $T_{\\text{num}}$与波数为 $k_0$ 的平面波入射到相同 $\\delta$ 势上的解析透射系数进行比较：\n    $$\n    T_{\\text{analytic}}(k_0,\\alpha) \\;=\\; \\frac{k_0^2}{k_0^2 + \\alpha^2}\n    $$\n    计算绝对误差 $\\varepsilon = |T_{\\text{num}} - T_{\\text{analytic}}(k_0,\\alpha)|$。这个误差量化了波包行为与理想化平面波模型的偏差，以及任何数值上的不精确性。最终输出是针对四个指定测试用例的这些误差的列表。", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Solves the time-dependent Schrödinger equation for a Gaussian wave packet\n    colliding with a Dirac delta potential. It computes the numerical transmission\n    probability and compares it to the analytical formula for several test cases.\n    \"\"\"\n    \n    # Simulation parameters\n    L = 200.0\n    N = 1024\n    dx = L / N\n    x = np.linspace(-L / 2, L / 2, N, endpoint=False)\n    k = 2 * np.pi * np.fft.fftfreq(N, d=dx)\n\n    tf = 30.0\n    dt = 0.01\n    n_steps = int(tf / dt)\n\n    # Initial wave packet parameters\n    xc = -30.0\n    sigma_x = 2.0\n\n    # Cutoff position for transmission calculation\n    x_cut = 10.0\n\n    # Test cases: (alpha, k0)\n    test_cases = [\n        (0.5, 3.0),\n        (5.0, 2.0),\n        (0.0, 2.5),\n        (2.0, 1.5)\n    ]\n\n    results = []\n\n    for alpha, k0 in test_cases:\n        # Step 1: Construct the initial wave function at t=0\n        # Normalization constant for the Gaussian packet\n        norm_const = (1 / (np.pi * sigma_x**2))**0.25\n        # The wave packet in position space\n        psi = norm_const * np.exp(-(x - xc)**2 / (2 * sigma_x**2)) * np.exp(1j * k0 * (x - xc))\n        \n        # In a discrete simulation, it's robust to re-normalize numerically.\n        initial_norm = np.sqrt(np.sum(np.abs(psi)**2) * dx)\n        psi = psi / initial_norm\n\n        # Step 2: Define the potential V(x)\n        V = np.zeros(N)\n        # Approximate the Dirac delta function at x=0\n        # The grid point x=0 is at index N/2 for our setup\n        if alpha != 0.0:\n            x0_idx = N // 2\n            V[x0_idx] = alpha / dx\n\n        # Step 3: Define the evolution operators for the split-step method\n        # Evolution under potential V for a half time step\n        exp_V_half = np.exp(-1j * V * dt / 2.0)\n        # Evolution under kinetic energy T for a full time step\n        exp_T = np.exp(-1j * (k**2 / 2.0) * dt)\n        \n        # Step 4: Time evolution loop using the split-step Fourier method\n        for _ in range(n_steps):\n            # First half-step in potential space\n            psi = exp_V_half * psi\n            \n            # Full step in momentum space\n            psi_k = np.fft.fft(psi)\n            psi_k = exp_T * psi_k\n            psi = np.fft.ifft(psi_k)\n            \n            # Second half-step in potential space\n            psi = exp_V_half * psi\n\n        # Step 5: Calculate numerical transmission probability\n        # Probability density at final time tf\n        prob_density = np.abs(psi)**2\n        # Create a boolean mask for the region x > x_cut\n        transmission_mask = x > x_cut\n        # Compute the transmitted probability via Riemann sum\n        T_num = np.sum(prob_density[transmission_mask]) * dx\n        \n        # Step 6: Calculate analytical transmission coefficient\n        T_analytic = k0**2 / (k0**2 + alpha**2)\n        \n        # Step 7: Compute the absolute error\n        error = np.abs(T_num - T_analytic)\n        results.append(error)\n\n    # Final print statement in the exact required format.\n    print(f\"[{','.join(map(str, results))}]\")\n\nsolve()\n```", "id": "2450186"}, {"introduction": "最后，我们将把前面学到的数值技术扩展到二维空间，探索一个处于现代物理研究前沿的课题：量子混沌。在这个练习 [@problem_id:2450154] 中，你将在一个体育场形状的“量子弹球台”内模拟波包的演化，这是一个经典的混沌系统。通过计算诸如逆参与率（IPR）和保真度等观测量，你将亲眼见证系统参数的微小变化如何导致波函数演化的巨大差异，这是量子混沌的典型特征。", "problem": "考虑一个质量为 $m$ 的非相对论量子粒子在二维空间中运动。该粒子被限制在一个具有狄利克雷边界条件的体育场形状的台球内，也就是说，波函数在边界及其外部为零。该区域是一个体育场，定义如下：固定一个非负的半矩形长度 $a \\ge 0$ 和一个半径 $R > 0$。该体育场是一个以原点为中心、宽为 $2a$、高为 $2R$ 的矩形，与附加在矩形左右两侧的两个半径为 $R$ 的半圆的并集。在笛卡尔坐标系 $(x,y)$ 中，区域 $\\Omega(a,R)$ 是满足 $\\lvert x \\rvert \\le a$ 且 $\\lvert y \\rvert \\le R$，或 $(x-a)^2 + y^2 \\le R^2$，或 $(x+a)^2 + y^2 \\le R^2$ 的点集。在 $\\Omega(a,R)$ 内部，势能为零；在 $\\Omega(a,R)$ 外部，势能实际上是无限大的。您将使用无量纲单位进行计算，其中约化普朗克常数 $\\hbar=1$ 且质量 $m=1$。\n\n波函数 $\\psi(x,y,t)$ 的含时薛定谔方程是基本出发点：\n$$\ni \\hbar \\,\\partial_t \\psi(x,y,t) = -\\frac{\\hbar^2}{2m} \\nabla^2 \\psi(x,y,t) + V(x,y)\\,\\psi(x,y,t),\n$$\n其中 $V(x,y)$ 在 $\\Omega(a,R)$ 上为零，在外部为无限大。您必须使用 $\\Omega(a,R)$ 外部一个陡峭但有限的势垒来近似硬壁边界，其方式应仅基于薛定谔方程和傅里叶变换的定义，并且对于小的时间步长，在内部保持数值稳定和近似范数守恒。\n\n您将构造一个归一化的高斯波包，其初始位置良好地局限在台球内部，并具有指定的平均波矢。具体来说，在时间 $t=0$ 时，波函数为\n$$\n\\psi_0(x,y) = \\mathcal{N}\\,\\exp\\left(-\\frac{(x-x_0)^2+(y-y_0)^2}{4\\sigma^2}\\right)\\,\\exp\\left(i\\,(k_{0x}(x-x_0)+k_{0y}(y-y_0))\\right),\n$$\n其中归一化因子 $\\mathcal{N}$ 的选择应使得在整个数值计算区域上 $\\int |\\psi_0|^2 \\, dx\\,dy = 1$。参数固定为 $x_0=-0.2$，$y_0=0$，$\\sigma$ 在下面的测试套件中指定，$k_{0y}=0$ 且 $k_{0x}$ 在下面指定。\n\n您的任务是：\n- 从薛定谔方程和傅里叶变换的定义出发，推导并实现一个在自由空间中范数守恒的算法，该算法通过其傅里叶表示来施加动能，并通过在 $\\Omega(a,R)$ 外部使用一个巨大但有限的排斥势来强制实现硬壁限制。对于下面使用的时间步长，该算法必须是自洽且稳定的。您必须确保对于演化的自由空间部分，在每一步都将数值波函数重新归一化到单位范数，精度在机器精度范围内。\n- 在未受扰动的体育场几何参数 $(a,R)$ 下，将初始波包演化到指定的最终时间 $T$。\n- 在略微扰动的体育场几何 $(a+\\delta a,R)$ 下，将同初始波包的第二个副本演化到相同的最终时间 $T$，其中 $\\delta a$ 很小并在下面指定。\n- 在时间 $T$ 计算以下可观测量：\n  1. 实空间逆参与率，\n  $$\n  \\mathrm{IPR}(T) = \\int_{\\mathbb{R}^2} |\\psi(x,y,T)|^4\\,dx\\,dy,\n  $$\n  对于未受扰动的演化。\n  2. 存活概率，\n  $$\n  S(T) = \\left|\\int_{\\mathbb{R}^2} \\psi_0^*(x,y)\\,\\psi(x,y,T)\\,dx\\,dy\\right|^2,\n  $$\n  对于未受扰动的演化。\n  3. 参数保真度，\n  $$\n  F(T) = \\left|\\int_{\\mathbb{R}^2} \\psi_{\\mathrm{pert}}^*(x,y,T)\\,\\psi(x,y,T)\\,dx\\,dy\\right|^2,\n  $$\n  其中 $\\psi_{\\mathrm{pert}}(x,y,T)$ 是从相同的初始状态开始，在扰动的体育场 $(a+\\delta a,R)$ 中演化到时间 $T$ 的状态。\n\n在这些单位中，所有量都是无量纲的。\n\n离散化和数值区域要求：\n- 对动能部分使用具有周期性谱表示的 $N\\times N$ 点的均匀方形网格。选择区域大小 $L$ 以使 $x,y\\in[-L/2,L/2)$，其中 $L=2.0$。在每个方向上使用 $N=96$ 个网格点，因此间距为 $\\Delta x=\\Delta y=L/N$。\n- 使用时间步长 $\\Delta t = 0.002$ 并演化 $n=\\lfloor T/\\Delta t \\rfloor$ 步。\n- 通过在体育场外部使用一个大的恒定势垒值 $V_0$ 并在内部使用零来近似硬壁；取 $V_0=5000.0$。您的算法在此选择下必须保持稳定。\n\n测试套件：\n- 共有三个测试用例。对于每个测试用例，构造并演化波包，然后按此顺序报告三个可观测量 $(\\mathrm{IPR}(T), S(T), F(T))$。\n  1. 用例 A（一般混沌体育场）：$a=0.30$, $R=0.35$, $\\delta a=0.02$, $\\sigma=0.07$, $k_{0x}=20.0$, $T=0.80$。\n  2. 用例 B（近圆形，更规则）：$a=0.00$, $R=0.35$, $\\delta a=0.02$, $\\sigma=0.07$, $k_{0x}=20.0$, $T=0.80$。\n  3. 用例 C（更长演化，改变纵横比）：$a=0.40$, $R=0.30$, $\\delta a=0.01$, $\\sigma=0.07$, $k_{0x}=20.0$, $T=1.20$。\n  \n最终输出格式：\n- 您的程序应生成单行输出，其中包含用方括号括起来的逗号分隔列表形式的结果。该列表必须是扁平的，并按以下顺序排列\n$$\n[\\mathrm{IPR}_A, S_A, F_A, \\mathrm{IPR}_B, S_B, F_B, \\mathrm{IPR}_C, S_C, F_C],\n$$\n其中下标表示相应的测试用例。所有值都必须打印为十进制浮点数。", "solution": "所述问题具有科学依据，是适定且客观的。它描述了计算量子力学中的一个标准初值问题：高斯波包在体育场台球内的含时演化。物理模型基于薛定谔方程，而所提出的数值方法——用有限势垒近似硬壁势，并结合算符分裂傅里叶方法——是该领域中一种有效且广泛使用的技术。所有参数都已指定，所需的计算也有明确定义。因此，该问题是有效的，并将提供一个解。\n\n波函数 $\\psi(x,y,t)$ 的演化由含时薛定谔方程决定，在所选的无量纲单位（$\\hbar=1$, $m=1$）下，该方程为：\n$$\ni \\frac{\\partial \\psi}{\\partial t} = H\\psi = \\left( -\\frac{1}{2}\\nabla^2 + V(x,y) \\right) \\psi\n$$\n哈密顿量 $H$ 是动能算符 $T = -\\frac{1}{2}\\nabla^2$ 和势能算符 $V$ 的和。势能 $V(x,y)$ 在体育场区域 $\\Omega(a,R)$ 内定义为零，在区域外定义为一个大的常数 $V_0$，用以近似无限势垒。\n\n对于一个微小的时间步长 $\\Delta t$，其形式解由时间演化算符的作用给出：\n$$\n\\psi(t+\\Delta t) = e^{-iH\\Delta t} \\psi(t) = e^{-i(T+V)\\Delta t} \\psi(t)\n$$\n由于动能和势能算符不对易，即 $[T,V] \\neq 0$，所以和的指数不能简单地分解为指数的乘积。为了数值上实现演化算符，我们采用二阶 Trotter-Suzuki 分解，也称为 Strang 分裂或分步傅里叶方法。该方法将演化算符近似为一个可以高效计算的算符的对称乘积：\n$$\ne^{-i(T+V)\\Delta t} = e^{-iV\\Delta t/2} e^{-iT\\Delta t} e^{-iV\\Delta t/2} + O(\\Delta t^3)\n$$\n这种分解是幺正的，因此在截断误差的阶次内，它保持波函数的范数守恒。将波函数从时间 $t$ 推进到 $t+\\Delta t$ 的算法包括三个顺序步骤：\n\n1.  **半步 $\\Delta t/2$ 的势能“踢”**：在位置空间中，将波函数乘以势能相位因子。\n    $$\n    \\psi'(x,y) = e^{-iV(x,y)\\Delta t/2} \\psi(x,y,t)\n    $$\n    此操作在位置空间是局域的。体育场 $\\Omega(a,R)$ 的势函数 $V(x,y)$ 的构造方法是：对于满足 $(\\lvert x \\rvert \\le a \\text{ 且 } \\lvert y \\rvert \\le R)$，或 $((x-a)^2 + y^2 \\le R^2)$，或 $((x+a)^2 + y^2 \\le R^2)$ 的点 $(x,y)$，设置 $V=0$，否则设置 $V=V_0$。\n\n2.  **整步 $\\Delta t$ 的动能“漂移”**：动能算符 $T = (p_x^2+p_y^2)/2$ 在动量空间中是对角的，而不是在位置空间。因此，这一步在傅里叶域中执行效率最高。步骤如下：\n    a. 使用二维快速傅里叶变换 (FFT) 将波函数变换到动量空间：$\\tilde{\\psi}'(k_x,k_y) = \\mathcal{F}\\{\\psi'(x,y)\\}$。\n    b. 乘以动能相位因子。在动量空间中，动能算符的作用是乘以 $\\frac{1}{2}(k_x^2+k_y^2)$。\n    $$\n    \\tilde{\\psi}''(k_x,k_y) = e^{-i\\frac{1}{2}(k_x^2+k_y^2)\\Delta t} \\tilde{\\psi}'(k_x,k_y)\n    $$\n    c. 使用逆 FFT 将结果变换回位置空间：$\\psi''(x,y) = \\mathcal{F}^{-1}\\{\\tilde{\\psi}''(k_x,k_y)\\}$。\n    这个由三部分组成的序列正确地应用了自由空间传播子 $e^{-iT\\Delta t}$，并且是内禀范数守恒的，因为 FFT 和乘以模为1的纯相位因子都是幺正操作。\n\n3.  **第二个半步 $\\Delta t/2$ 的势能“踢”**：最后乘以势能相位因子，完成对称的一步。\n    $$\n    \\psi(x,y,t+\\Delta t) = e^{-iV(x,y)\\Delta t/2} \\psi''(x,y)\n    $$\n重复整个过程 $n=\\lfloor T/\\Delta t \\rfloor$ 步，以达到最终时间 $T$。虽然该方法在形式上是范数守恒的，但为了抵消多步累积的浮点误差，可以在每个完整时间步后将波函数的范数重置为1。范数通过离散求和 $\\left(\\Delta x \\Delta y \\sum_{j,k} |\\psi_{jk}|^2\\right)^{1/2}$ 来计算。\n\n数值实现在一个离散的空间网格上进行。区域 $[-L/2, L/2) \\times [-L/2, L/2)$ 被离散化为一个间距为 $\\Delta x = \\Delta y = L/N$ 的 $N \\times N$ 网格。坐标为 $(x_j, y_k) = (-L/2+j\\Delta x, -L/2+k\\Delta y)$，其中 $j,k \\in \\{0, \\dots, N-1\\}$。相应的动量空间网格矢量由 $k_m = 2\\pi m / L$ 给出，其中 $m \\in \\{-N/2, \\dots, N/2-1\\}$，这些矢量由标准 FFT 库提供。\n\n初始状态是在此网格上定义的归一化高斯波包：\n$$\n\\psi_0(x_j,y_k) = \\mathcal{N} \\exp\\left(-\\frac{(x_j-x_0)^2+(y_k-y_0)^2}{4\\sigma^2}\\right) \\exp\\left(i(k_{0x}(x_j-x_0)+k_{0y}(y_k-y_0))\\right)\n$$\n归一化常数 $\\mathcal{N}$ 的选择应使得 $\\Delta x \\Delta y \\sum_{j,k} |\\psi_0(x_j,y_k)|^2 = 1$。\n\n在最终时间 $T$，所需的可观测量从最终波函数 $\\psi(x,y,T)$ 计算得出：\n-   **逆参与率 (IPR)**：这衡量了概率密度 $|\\psi|^2$ 的局域化程度。\n    $$\n    \\mathrm{IPR}(T) \\approx \\Delta x \\Delta y \\sum_{j,k} |\\psi(x_j,y_k,T)|^4\n    $$\n-   **存活概率 $S(T)$**：这衡量了演化后的状态在初始状态上的投影，表明波包在多大程度上“记住”了其初始形式。\n    $$\n    S(T) = \\left| \\Delta x \\Delta y \\sum_{j,k} \\psi_0^*(x_j,y_k) \\psi(x_j,y_k,T) \\right|^2\n    $$\n-   **参数保真度 $F(T)$**：这衡量了两个从相同状态开始，但在略微不同的哈密顿量（由于扰动 $\\delta a$）下演化的状态之间的重叠。它是探测混沌的灵敏探针。\n    $$\n    F(T) = \\left| \\Delta x \\Delta y \\sum_{j,k} \\psi_{\\mathrm{pert}}^*(x_j,y_k,T) \\psi(x_j,y_k,T) \\right|^2\n    $$\n需要进行两次独立的模拟：一次用于未受扰动的体育场 $(a,R)$ 以获得 $\\psi(T)$，另一次用于受扰动的体育场 $(a+\\delta a, R)$ 以获得 $\\psi_{\\mathrm{pert}}(T)$。两次模拟都从相同的初始状态 $\\psi_0$ 开始。对于每个测试用例，实现将遵循此推导出的过程。", "answer": "```python\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Solves the wave packet evolution problem in a stadium billiard for three test cases.\n    \"\"\"\n    \n    # Global numerical parameters\n    L = 2.0\n    N = 96\n    dt = 0.002\n    V0 = 5000.0\n    x0 = -0.2\n    y0 = 0.0\n    k0y = 0.0\n\n    # Test suite\n    test_cases = [\n        # Case A (chaotic)\n        {'a': 0.30, 'R': 0.35, 'da': 0.02, 'sigma': 0.07, 'k0x': 20.0, 'T': 0.80},\n        # Case B (circular/integrable)\n        {'a': 0.00, 'R': 0.35, 'da': 0.02, 'sigma': 0.07, 'k0x': 20.0, 'T': 0.80},\n        # Case C (chaotic, longer T)\n        {'a': 0.40, 'R': 0.30, 'da': 0.01, 'sigma': 0.07, 'k0x': 20.0, 'T': 1.20},\n    ]\n\n    # Grid setup\n    dx = L / N\n    dy = L / N\n    x = np.linspace(-L / 2, L / 2, N, endpoint=False)\n    y = np.linspace(-L / 2, L / 2, N, endpoint=False)\n    xx, yy = np.meshgrid(x, y, indexing='ij')\n\n    # Momentum space grid\n    kx = 2 * np.pi * np.fft.fftfreq(N, d=dx)\n    ky = 2 * np.pi * np.fft.fftfreq(N, d=dy)\n    kx_grid, ky_grid = np.meshgrid(kx, ky, indexing='ij')\n\n    # Kinetic energy operator in Fourier space\n    K_op = 0.5 * (kx_grid**2 + ky_grid**2)\n    kinetic_propagator = np.exp(-1j * K_op * dt)\n\n    final_results = []\n\n    for case in test_cases:\n        a, R, da, sigma, k0x, T = case.values()\n        \n        # --- Initial State Construction ---\n        gauss_part = np.exp(-((xx - x0)**2 + (yy - y0)**2) / (4 * sigma**2))\n        plane_wave_part = np.exp(1j * (k0x * (xx - x0) + k0y * (yy - y0)))\n        psi0_unnormalized = gauss_part * plane_wave_part\n        \n        # Normalization\n        norm_psi0 = np.sqrt(np.sum(np.abs(psi0_unnormalized)**2) * dx * dy)\n        psi0 = psi0_unnormalized / norm_psi0\n\n        # --- Potential Construction ---\n        def get_potential(a_val, R_val):\n            potential = np.full((N, N), V0)\n            \n            # Condition for being inside the stadium\n            inside_rect = (np.abs(xx) = a_val)  (np.abs(yy) = R_val)\n            inside_l_sc = (xx + a_val)**2 + yy**2 = R_val**2\n            inside_r_sc = (xx - a_val)**2 + yy**2 = R_val**2\n            \n            is_inside = inside_rect | inside_l_sc | inside_r_sc\n            potential[is_inside] = 0.0\n            return potential\n\n        # Potentials for unperturbed and perturbed systems\n        V_unpert = get_potential(a, R)\n        V_pert = get_potential(a + da, R)\n        \n        # Potential propagators\n        pot_propagator_unpert = np.exp(-1j * V_unpert * dt / 2.0)\n        pot_propagator_pert = np.exp(-1j * V_pert * dt / 2.0)\n        \n        # --- Time Evolution ---\n        psi_unpert = psi0.copy()\n        psi_pert = psi0.copy()\n        \n        num_steps = int(np.floor(T / dt))\n\n        for _ in range(num_steps):\n            # Unperturbed evolution\n            psi_unpert *= pot_propagator_unpert\n            psi_unpert = np.fft.ifft2(kinetic_propagator * np.fft.fft2(psi_unpert))\n            psi_unpert *= pot_propagator_unpert\n            # Renormalization to correct numerical drift\n            norm_unpert = np.sqrt(np.sum(np.abs(psi_unpert)**2) * dx * dy)\n            psi_unpert /= norm_unpert\n\n            # Perturbed evolution\n            psi_pert *= pot_propagator_pert\n            psi_pert = np.fft.ifft2(kinetic_propagator * np.fft.fft2(psi_pert))\n            psi_pert *= pot_propagator_pert\n            # Renormalization\n            norm_pert = np.sqrt(np.sum(np.abs(psi_pert)**2) * dx * dy)\n            psi_pert /= norm_pert\n\n        # --- Observables Calculation ---\n        # 1. Inverse Participation Ratio (IPR) for unperturbed\n        ipr = np.sum(np.abs(psi_unpert)**4) * dx * dy\n\n        # 2. Survival Probability (S) for unperturbed\n        survival_overlap = np.sum(np.conj(psi0) * psi_unpert) * dx * dy\n        survival_prob = np.abs(survival_overlap)**2\n\n        # 3. Parametric Fidelity (F)\n        fidelity_overlap = np.sum(np.conj(psi_pert) * psi_unpert) * dx * dy\n        fidelity = np.abs(fidelity_overlap)**2\n\n        final_results.extend([ipr, survival_prob, fidelity])\n\n    print(f\"[{','.join(map(str, final_results))}]\")\n\nsolve()\n```", "id": "2450154"}]}