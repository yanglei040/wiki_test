{"hands_on_practices": [{"introduction": "要真正掌握 Kohn-Sham 方法，第一步是能够精确地求解其核心的本征值问题。这个练习将指导你为一个在一维谐振子势中的单粒子体系建立并求解离散化的 Kohn-Sham 方程。由于该体系存在精确的解析解，它为我们提供了一个绝佳的基准，用以检验我们数值方法的准确性，并探索计算参数（如网格密度）如何影响结果的收敛性 [@problem_id:2405666]。", "problem": "您需要实现一个一维 Kohn–Sham (KS) 基态求解器，并用它对处于谐振子外势中的单个无自旋粒子进行网格收敛性研究。从原子单位制（Hartree 原子单位制：能量单位为 Hartree，长度单位为 Bohr，约化普朗克常数等于 $1$ 且电子质量等于 $1$）下的基本定态 Kohn–Sham 方程开始：\n$$\n\\left[-\\dfrac{1}{2}\\dfrac{d^2}{dx^2} + V_{\\mathrm{eff}}(x)\\right]\\varphi_i(x) = \\varepsilon_i \\varphi_i(x),\n$$\n其中电子密度由下式给出：\n$$\nn(x) = \\sum_i f_i \\left|\\varphi_i(x)\\right|^2,\n$$\n其中 $f_i$ 是轨道占据数。对于单电子体系，在精确的密度泛函理论 (DFT) 框架下，有效势简化为外势 $V_{\\mathrm{eff}}(x) = V_{\\mathrm{ext}}(x)$，因为当使用精确泛函时，经典的 Hartree 贡献和交换关联贡献对单电子体系而言会相互抵消。因此，在本问题中，您必须求解 $V_{\\mathrm{eff}}(x) = V_{\\mathrm{ext}}(x)$ 的 KS 方程，其中谐振子外势为：\n$$\nV_{\\mathrm{ext}}(x) = \\dfrac{1}{2} k x^2,\n$$\n劲度系数 $k > 0$。该谐振子的精确连续谱基态能量为：\n$$\nE_0^{\\mathrm{exact}} = \\dfrac{1}{2}\\sqrt{k}.\n$$\n\n您的任务如下（所有步骤都必须在您的程序中实现）：\n\n- 使用包含两个端点的 $N$ 个点的均匀网格，将空间域 $x \\in [-L, L]$ 离散化。施加齐次 Dirichlet 边界条件 $\\varphi(\\pm L) = 0$。\n- 推导并实现二阶导数的标准二阶中心有限差分近似。用它来构建离散的 KS 哈密顿矩阵：\n$$\n\\mathbf{H} = -\\dfrac{1}{2}\\mathbf{D}^{(2)} + \\mathrm{diag}\\left(V_{\\mathrm{ext}}(x_j)\\right),\n$$\n该矩阵作用在内部网格点上，其中 $\\mathbf{D}^{(2)}$ 是离散的二阶导数算符，$x_j$ 是内部网格点的位置。\n- 在每个自洽场 (SCF) 迭代步中，求解 $\\mathbf{H}$ 的最低本征值问题，以获得离散的基态本征对 $(\\varepsilon_0, \\varphi_0)$。尽管在此单电子设定中，$V_{\\mathrm{eff}}(x)$ 不依赖于密度，您仍须实现一个带有线性混合的 SCF 循环，以展示其算法结构：\n  - 初始化一个试验密度 $n^{(0)}(x)$，并将其归一化至 $\\int_{-L}^{L} n^{(0)}(x)\\,dx = 1$。\n  - 在迭代步 $t$，构建 $V_{\\mathrm{eff}}^{(t)}(x) = V_{\\mathrm{ext}}(x)$，求解基态本征函数 $\\varphi_0^{(t)}(x)$，构建归一化至 $1$ 的新密度 $n_{\\mathrm{new}}^{(t)}(x) = \\left|\\varphi_0^{(t)}(x)\\right|^2$，然后执行线性混合：\n    $$\n    n^{(t+1)}(x) = (1-\\alpha)\\, n^{(t)}(x) + \\alpha\\, n_{\\mathrm{new}}^{(t)}(x),\n    $$\n    混合参数 $\\alpha \\in (0,1]$。\n  - 当迭代间密度的最大逐点变化满足 $\\max_x \\left| n^{(t+1)}(x) - n^{(t)}(x) \\right| < \\mathrm{tol}$（对于给定的容差 $\\mathrm{tol} > 0$）时，或当达到最大迭代次数时，即为收敛。因为 $V_{\\mathrm{eff}}(x) = V_{\\mathrm{ext}}(x)$，对于任何 $\\alpha$，SCF 循环都将在单次迭代中收敛，但您仍必须实现此循环。\n- 使用梯形法则来归一化轨道和密度，即，在离散网格上强制执行 $\\int_{-L}^{L} |\\varphi_0(x)|^2\\,dx = 1$。\n- 将离散基态能量报告为最小本征值 $\\varepsilon_0$，单位为 Hartree。\n\n通过对以下参数集测试套件评估离散基态能量，来进行一次网格收敛性研究。这些参数集共同探究了典型情况、$N$ 的细化、对定义域大小 $L$ 的敏感性、不同的 $k$ 值以及一个粗网格的边界情况。对于每个测试，将参数列为 $(k, L, N, \\alpha)$：\n\n- 测试 A: $(1.0, 8.0, 81, 0.7)$\n- 测试 B: $(1.0, 8.0, 161, 0.7)$\n- 测试 C: $(1.0, 8.0, 321, 0.7)$\n- 测试 D: $(1.0, 4.0, 161, 0.7)$\n- 测试 E: $(4.0, 8.0, 161, 0.5)$\n- 测试 F: $(1.0, 8.0, 41, 0.5)$\n\n所有量均采用原子单位制，且基态能量必须以 Hartree 表示。您的程序必须计算上述六个测试的基态能量，并生成单行输出，其中包含用方括号括起来的、以逗号分隔的结果列表，顺序与测试顺序相同，且每个能量均以 Hartree 为单位四舍五入到 $8$ 位小数。例如，要求的格式为：\n$[\\varepsilon_A,\\varepsilon_B,\\varepsilon_C,\\varepsilon_D,\\varepsilon_E,\\varepsilon_F]$\n每个 $\\varepsilon$ 打印为小数，小数点后恰好有 $8$ 位数字。不应打印任何其他文本。\n\n您的程序必须是完全自包含的，不接受任何输入，并在提供 Python 和必要科学库的标准环境中运行。最终输出为浮点数，聚合输出是如上所述打印在单行上的浮点数列表。确保任何角度（如果出现）都以弧度为单位，但本问题不涉及角度。", "solution": "问题陈述需经过验证。\n\n**第一步：提取已知信息**\n- **控制方程**：一维定态 Kohn–Sham 方程为 $\\left[-\\dfrac{1}{2}\\dfrac{d^2}{dx^2} + V_{\\mathrm{eff}}(x)\\right]\\varphi_i(x) = \\varepsilon_i \\varphi_i(x)$。\n- **体系**：单个无自旋粒子，其有效势简化为外势 $V_{\\mathrm{eff}}(x) = V_{\\mathrm{ext}}(x)$。\n- **外势**：谐振子势 $V_{\\mathrm{ext}}(x) = \\dfrac{1}{2} k x^2$，其中 $k > 0$。\n- **精确基态能量**：连续谱极限下的基态能量已知为 $E_0^{\\mathrm{exact}} = \\dfrac{1}{2}\\sqrt{k}$。\n- **数值计算域**：空间域为 $x \\in [-L, L]$，用 $N$ 个点的均匀网格进行离散化。\n- **边界条件**：齐次 Dirichlet 边界条件 $\\varphi(\\pm L) = 0$。\n- **数值方法**：二阶导数采用二阶中心有限差分近似。在内部网格点上，哈密顿量构建为矩阵 $\\mathbf{H} = -\\dfrac{1}{2}\\mathbf{D}^{(2)} + \\mathrm{diag}\\left(V_{\\mathrm{ext}}(x_j)\\right)$。\n- **SCF 循环**：必须实现一个带有密度线性混合的迭代自洽场循环：$n^{(t+1)}(x) = (1-\\alpha)\\, n^{(t)}(x) + \\alpha\\, n_{\\mathrm{new}}^{(t)}(x)$。循环收敛条件为 $\\max_x \\left| n^{(t+1)}(x) - n^{(t)}(x) \\right| < \\mathrm{tol}$。\n- **归一化**：所有积分必须使用梯形法则，包括将波函数和密度归一化至 $\\int_{-L}^{L} f(x)\\,dx = 1$。\n- **输出**：报告的基态能量是离散哈密顿矩阵的最低本征值 $\\varepsilon_0$。\n- **研究参数**：由元组 $(k, L, N, \\alpha)$ 定义的一组六个测试用例：\n  - A: $(1.0, 8.0, 81, 0.7)$\n  - B: $(1.0, 8.0, 161, 0.7)$\n  - C: $(1.0, 8.0, 321, 0.7)$\n  - D: $(1.0, 4.0, 161, 0.7)$\n  - E: $(4.0, 8.0, 161, 0.5)$\n  - F: $(1.0, 8.0, 41, 0.5)$\n- **单位**：所有量均以 Hartree 原子单位制指定（$\\hbar=1$, $m_e=1$）。\n\n**第二步：使用已知信息进行验证**\n该问题具有科学依据，是计算量子物理学中的一个标准练习：谐振子的 Schrödinger 方程的数值解。它是一个适定的问题，提供了所有必要的参数和明确的目标。其语言客观而精确。尽管对于此特定势而言，实现 SCF 循环的指令是多余的，但它是一个有效的教学要求，旨在展示通用 Kohn-Sham 求解器的结构。该问题不包含科学错误、矛盾或歧义。\n\n**第三步：结论与行动**\n问题有效。将开发一个严谨的解决方案。\n\n我们通过离散化一维 Kohn–Sham 方程，来构建谐振子势中单个粒子基态能量的解。在这个特定的单电子情况下，问题简化为求解定态 Schrödinger 方程，因为 Hartree 势和交换关联势完全抵消。\n\n首先，我们将空间域 $x \\in [-L, L]$ 离散化为一个包含 $N$ 个点的均匀网格。网格点为 $x_j = -L + j\\Delta x$，其中 $j = 0, 1, \\dots, N-1$，网格间距为 $\\Delta x = \\frac{2L}{N-1}$。波函数 $\\varphi(x)$ 由其在这些网格点上的值 $\\varphi_j = \\varphi(x_j)$ 表示。齐次 Dirichlet 边界条件规定 $\\varphi_0 = 0$ 且 $\\varphi_{N-1} = 0$。\n\n动能算符的二阶导数 $\\dfrac{d^2}{dx^2}$ 在每个内部网格点 $x_j$（对于 $j=1, \\dots, N-2$）处，使用二阶中心有限差分公式近似为：\n$$\n\\left.\\frac{d^2\\varphi}{dx^2}\\right|_{x=x_j} \\approx \\frac{\\varphi_{j+1} - 2\\varphi_j + \\varphi_{j-1}}{(\\Delta x)^2}\n$$\n将此代入控制方程，我们得到每个内部点的离散方程：\n$$\n-\\frac{1}{2} \\left( \\frac{\\varphi_{j+1} - 2\\varphi_j + \\varphi_{j-1}}{(\\Delta x)^2} \\right) + V_{\\mathrm{ext}}(x_j)\\varphi_j = \\varepsilon \\varphi_j\n$$\n重新整理各项，可以明确矩阵本征值问题 $\\mathbf{H}\\vec{\\varphi} = \\varepsilon\\vec{\\varphi}$ 的结构，其中 $\\vec{\\varphi}$ 是内部点上波函数值的向量 $[\\varphi_1, \\varphi_2, \\dots, \\varphi_{N-2}]^T$。第 $j$ 个分量的方程为：\n$$\n\\left(-\\frac{1}{2(\\Delta x)^2}\\right)\\varphi_{j-1} + \\left(\\frac{1}{(\\Delta x)^2} + V_{\\mathrm{ext}}(x_j)\\right)\\varphi_j + \\left(-\\frac{1}{2(\\Delta x)^2}\\right)\\varphi_{j+1} = \\varepsilon\\varphi_j\n$$\n这定义了一个 $(N-2) \\times (N-2)$ 的实对称三对角哈密顿矩阵 $\\mathbf{H}$。其元素为：\n- **对角元素**：$H_{ii} = \\dfrac{1}{(\\Delta x)^2} + V_{\\mathrm{ext}}(x_{i+1}) = \\dfrac{1}{(\\Delta x)^2} + \\dfrac{1}{2}k x_{i+1}^2$\n- **非对角元素**：$H_{i, i\\pm1} = -\\dfrac{1}{2(\\Delta x)^2}$\n\n该问题要求实现自洽场 (SCF) 循环。尽管有效势 $V_{\\mathrm{eff}}(x) = V_{\\mathrm{ext}}(x)$ 不依赖于电子密度 $n(x)$，使得哈密顿矩阵 $\\mathbf{H}$ 保持不变，我们仍必须遵循指定的算法。\n\nSCF 过程如下：\n1.  **初始化**：在网格上构建电子密度的初始猜测 $n^{(0)}(x)$，并通过梯形积分将其在 $[-L, L]$ 上的积分归一化为 1。对于谐振子势，高斯函数是一个合适的选择。\n2.  **SCF 迭代**：对于每次迭代 $t=0, 1, 2, \\dots$：\n    a. 构建哈密顿矩阵 $\\mathbf{H}$。如前所述，它在整个过程中是恒定的。\n    b. 求解矩阵本征值问题 $\\mathbf{H}\\vec{\\psi}_0 = \\varepsilon_0\\vec{\\psi}_0$，以找到最低本征值 $\\varepsilon_0$ 及其对应的本征向量 $\\vec{\\psi}_0$。该本征向量表示内部网格点上的基态波函数。\n    c. 通过在边界处用零填充 $\\vec{\\psi}_0$，来组装完整的波函数 $\\vec{\\varphi}_0$。\n    d. 必须根据连续谱归一化条件 $\\int_{-L}^{L} |\\varphi_0(x)|^2 dx = 1$，使用梯形积分规则对 $\\vec{\\varphi}_0$ 进行归一化。设本征求解器得到的本征向量为 $\\vec{\\psi}_0$。我们构建完整的网格向量 $\\vec{\\varphi}_{\\text{un-norm}}$（端点为零），并计算归一化常数 $C = \\left( \\int_{-L}^{L} |\\varphi_{\\text{un-norm}}(x)|^2 dx \\right)^{1/2}$。归一化后的波函数为 $\\vec{\\varphi}_0 = \\vec{\\varphi}_{\\text{un-norm}} / C$。\n    e. 根据归一化后的波函数计算新密度：$n_{\\mathrm{new}}^{(t)}(x_j) = |\\varphi_0(x_j)|^2$。\n    f. 通过线性混合得到下一次迭代的密度 $n^{(t+1)}$：$n^{(t+1)} = (1-\\alpha)n^{(t)} + \\alpha n_{\\mathrm{new}}^{(t)}$。\n    g. 通过计算连续密度迭代之间的最大绝对差 $\\delta = \\max_j |n^{(t+1)}(x_j) - n^{(t)}(x_j)|$ 来检查收敛性。如果 $\\delta < \\mathrm{tol}$，则循环终止。\n\n基态能量是通过对角化 $\\mathbf{H}$ 得到的最低本征值 $\\varepsilon_0$。由于 $\\mathbf{H}$ 是恒定的，计算出的能量在 SCF 迭代之间不会改变。最终程序将对每组指定的参数 $(k, L, N, \\alpha)$ 执行此过程，并报告所得的基态能量。", "answer": "```python\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Solves the 1D Kohn-Sham problem for a single particle in a harmonic potential\n    and performs a grid convergence study.\n    \"\"\"\n\n    def solve_ks_harmonic(k, L, N, alpha, tol=1e-10, max_iter=20):\n        \"\"\"\n        Calculates the ground-state energy for a single particle in a 1D harmonic potential\n        using a finite-difference grid and a mock SCF cycle.\n\n        Args:\n            k (float): Spring constant of the harmonic potential.\n            L (float): Half-width of the spatial domain [-L, L].\n            N (int): Number of grid points.\n            alpha (float): Linear mixing parameter for the SCF cycle.\n            tol (float): Convergence tolerance for the density.\n            max_iter (int): Maximum number of SCF iterations.\n\n        Returns:\n            float: The ground-state energy in Hartree.\n        \"\"\"\n        # 1. Discretize the domain\n        x = np.linspace(-L, L, N)\n        dx = x[1] - x[0]\n        \n        # We solve for the N-2 interior points\n        interior_x = x[1:-1]\n        num_interior = N - 2\n\n        # 2. Construct the Hamiltonian matrix H\n        # The matrix is constant as V_eff = V_ext\n        diag_T = 1.0 / (dx**2)\n        off_diag_T = -1.0 / (2.0 * dx**2)\n        \n        V_ext = 0.5 * k * interior_x**2\n        \n        main_diag = diag_T + V_ext\n        off_diag = off_diag_T * np.ones(num_interior - 1)\n        \n        H = np.diag(main_diag) + np.diag(off_diag, k=1) + np.diag(off_diag, k=-1)\n\n        # 3. SCF Cycle implementation\n        \n        # Initialize density n_in (n^(t))\n        # A Gaussian is a good initial guess, normalized via trapezoidal rule\n        n_in = np.exp(-x**2)\n        norm_const = np.trapz(n_in, x)\n        n_in /= norm_const\n\n        ground_state_energy = 0.0\n\n        for _ in range(max_iter):\n            # Solve the eigenvalue problem for the lowest eigenstate\n            # This part is constant for this problem but kept indie the loop per instruction\n            eigenvalues, eigenvectors = np.linalg.eigh(H)\n            \n            ground_state_energy = eigenvalues[0]\n            psi_interior = eigenvectors[:, 0]\n\n            # Form full wavefunction and normalize it to integral(|psi|^2) = 1\n            psi_full = np.zeros(N)\n            psi_full[1:-1] = psi_interior\n            \n            # Normalize wavefunction using trapezoidal integration\n            integral_psi_sq = np.trapz(psi_full**2, x)\n            psi_normalized = psi_full / np.sqrt(integral_psi_sq)\n            \n            # Compute new density n_out (n_new^(t))\n            n_out = psi_normalized**2\n            \n            # Linear mixing to get the next input density\n            n_in_next = (1 - alpha) * n_in + alpha * n_out\n            \n            # Check for convergence\n            density_change = np.max(np.abs(n_in_next - n_in))\n            if density_change < tol:\n                break\n            \n            # Update density for the next iteration\n            n_in = n_in_next\n\n        return ground_state_energy\n\n    # Define the test cases from the problem statement\n    test_cases = [\n        # (k, L, N, alpha)\n        (1.0, 8.0, 81, 0.7),   # Test A\n        (1.0, 8.0, 161, 0.7),  # Test B\n        (1.0, 8.0, 321, 0.7),  # Test C\n        (1.0, 4.0, 161, 0.7),  # Test D\n        (4.0, 8.0, 161, 0.5),  # Test E\n        (1.0, 8.0, 41, 0.5),   # Test F\n    ]\n\n    results = []\n    for case in test_cases:\n        k_val, L_val, N_val, alpha_val = case\n        energy = solve_ks_harmonic(k=k_val, L=L_val, N=N_val, alpha=alpha_val)\n        results.append(energy)\n\n    # Format the final output string as specified\n    formatted_results = [f\"{res:.8f}\" for res in results]\n    print(f\"[{','.join(formatted_results)}]\")\n\nsolve()\n```", "id": "2405666"}, {"introduction": "在掌握了如何求解静态的 Kohn-Sham 方程后，下一步是引入电子间的相互作用，并构建一个完整的自洽场（SCF）循环。在此练习中，你将为一个一维模型体系实现一个基于局域密度近似（LDA）的交换相关泛函。这里的核心挑战在于，有效势 $v_{\\mathrm{eff}}(x)$ 依赖于电子密度 $\\rho(x)$，而密度又反过来由方程的解（即轨道）决定，你需要通过迭代过程找到能够“自我满足”的解 [@problem_id:2405708]。", "problem": "实现一个完整的程序，用于求解在交换关联的局域密度近似 (Local Density Approximation, LDA) 下的一维 Kohn–Sham 问题。该问题基于一个针对均匀一维电子气的玩具泛函，其交换关联能量泛函形式如下\n$$\nE_{xc}[\\rho] = -C \\int \\rho(x)^3 \\, dx,\n$$\n其中 $C$ 是一个给定的正常数，$\\rho(x)$ 是总电子密度。考虑自旋简并（简并因子 $g_s = 2$）的电子，被限制在角频率为 $\\omega$ 的标量外势\n$$\nv_{ext}(x) = \\tfrac{1}{2}\\,\\omega^2 x^2,\n$$\n中，作用域为有限区间 $x \\in [-L, L]$。使用原子单位制，其中 $\\hbar = 1$ 且电子质量 $m_e = 1$。一维 Kohn–Sham 方程为\n$$\n\\left(-\\tfrac{1}{2}\\frac{d^2}{dx^2} + v_{ext}(x) + v_{xc}[\\rho](x)\\right)\\,\\varphi_i(x) = \\varepsilon_i\\,\\varphi_i(x),\n$$\n边界条件为 Dirichlet 边界条件 $\\varphi_i(-L) = \\varphi_i(L) = 0$，从占据轨道 $\\varphi_i(x)$ 得到的自旋非极化密度为\n$$\n\\rho(x) = \\sum_{i} f_i \\, |\\varphi_i(x)|^2,\n$$\n其中 $f_i \\in \\{0,1,2\\}$ 是占据数，需与总电子数 $N$ 和自旋简并度 $g_s = 2$ 保持一致。交换关联势是如下的泛函导数\n$$\nv_{xc}[\\rho](x) = \\frac{\\delta E_{xc}}{\\delta \\rho(x)} = -3C\\,\\rho(x)^2.\n$$\n总基态能量（不含 Hartree 项）定义为\n$$\nE_{tot} = \\sum_i f_i\\,\\varepsilon_i \\;-\\; \\int v_{xc}[\\rho](x)\\,\\rho(x)\\,dx \\;+\\; E_{xc}[\\rho].\n$$\n所有物理量必须以原子单位表示，所有能量必须以 Hartree (Ha) 为单位报告。\n\n你的程序必须：\n- 对每个指定的测试用例，在零温下找到关于 $\\rho(x)$、占据的 Kohn–Sham 轨道 $\\varphi_i(x)$ 及其本征值 $\\varepsilon_i$ 的自洽解。\n- 在 $[-L,L]$ 上使用一个包含 $M$ 个点的均匀实空间网格，在端点处施加 Dirichlet 边界条件，并使用动能算符 $-\\tfrac{1}{2}\\frac{d^2}{dx^2}$ 的标准二阶中心有限差分表示。\n- 在每次迭代中，确保密度积分得到的总电子数 $N$ 守恒。\n- 在自洽循环的不动点迭代中，使用一个简单的密度混合参数 $\\alpha \\in (0,1]$。当连续两次迭代之间 $\\rho(x)$ 的最大逐点绝对变化量小于容差 $\\mathrm{tol}$，或达到最大迭代次数 $\\mathrm{max\\_iter}$ 时，停止迭代。\n- 对每个测试用例，输出收敛的总能量 $E_{tot}$，格式为浮点数，精确到小数点后 $6$ 位。\n\n测试套件：\n- 案例 1：$N = 2$, $\\omega = 0.5$, $L = 10.0$, $M = 300$, $\\alpha = 0.5$, $\\mathrm{tol} = 10^{-6}$, $\\mathrm{max\\_iter} = 200$, $C = 0.05$。\n- 案例 2：$N = 1$, $\\omega = 0.2$, $L = 12.0$, $M = 320$, $\\alpha = 0.5$, $\\mathrm{tol} = 10^{-6}$, $\\mathrm{max\\_iter} = 200$, $C = 0.05$。\n- 案例 3：$N = 3$, $\\omega = 1.0$, $L = 8.0$, $M = 280$, $\\alpha = 0.5$, $\\mathrm{tol} = 10^{-6}$, $\\mathrm{max\\_iter} = 200$, $C = 0.05$。\n\n最终输出格式：\n- 你的程序应生成单行输出，其中包含用方括号括起来的、以逗号分隔的结果列表，顺序与测试套件中的案例顺序相同，例如\n$[E_1,E_2,E_3]$,\n其中每个 $E_k$ 是案例 $k$ 的总能量，四舍五-入到小数点后恰好 $6$ 位。打印的能量单位必须是 Hartree (Ha)，但不应打印单位符号。\n\n角度单位不适用于此问题。百分比不适用于此问题。所有数值答案必须以 Hartree (Ha) 为单位，以小数点后有且仅有 $6$ 位的浮点数形式提供。", "solution": "该问题提法恰当且有科学依据。它代表了计算物理学中的一个标准练习：实现一个自洽场 (SCF) 循环，以求解局域密度近似 (LDA) 下模型系统的一维 Kohn–Sham 方程。所有参数、方程和数值步骤都已明确定义。\n\n解法是通过迭代求解 Kohn–Sham 方程，直至获得自洽的电子密度。该方法论包含以下几个阶段：问题离散化、自洽场 (SCF) 算法的实现，以及收敛后总能量的计算。\n\n**1. 离散化与哈密顿量构建**\n\n问题定义在连续域 $x \\in [-L, L]$ 上。为了进行数值求解，我们将此域离散化为一个包含 $M$ 个点 $x_j$（其中 $j=0, 1, \\dots, M-1$）的均匀网格，网格间距为 $dx = 2L/(M-1)$。Dirichlet 边界条件 $\\varphi_i(-L) = \\varphi_i(L) = 0$ 意味着波函数仅在网格的 $M_{int} = M-2$ 个内部点上非零。\n\nKohn–Sham 方程是关于有效哈密顿算符 $H_{KS}$ 的本征值问题：\n$$\nH_{KS}\\,\\varphi_i(x) = \\left(-\\tfrac{1}{2}\\frac{d^2}{dx^2} + v_{eff}(x)\\right)\\,\\varphi_i(x) = \\varepsilon_i\\,\\varphi_i(x)\n$$\n动能算符 $T = -\\tfrac{1}{2}\\frac{d^2}{dx^2}$ 使用二阶中心有限差分格式进行近似。这会产生一个大小为 $M_{int} \\times M_{int}$ 的对称三对角矩阵表示。其对角元素为 $T_{jj} = \\frac{1}{dx^2}$，次对角元素为 $T_{j, j\\pm 1} = -\\frac{1}{2dx^2}$。\n\n有效势 $v_{eff}(x) = v_{ext}(x) + v_{xc}(x)$ 是一个局域势，仅依赖于点 $x$ 处的密度 $\\rho$ 的值。在网格上，其矩阵表示为一个对角矩阵 $V$，元素为 $V_{jj} = v_{eff}(x_j)$。具体的势为：\n$$\nv_{ext}(x_j) = \\tfrac{1}{2}\\omega^2 x_j^2\n$$\n$$\nv_{xc}(x_j) = -3C \\rho(x_j)^2\n$$\n完整的 Kohn–Sham 哈密顿矩阵为 $H = T + V$。由于 $T$ 和 $V$ 都是对称矩阵，其中 $T$ 是三对角的而 $V$ 是对角的，因此得到的矩阵 $H$ 也是一个实对称三对角矩阵。\n\n**2. 自洽场 (SCF) 算法**\n\n解法的核心是迭代的 SCF 过程，该过程旨在找到一个密度 $\\rho(x)$，由该密度生成的有效势 $v_{eff}(x)$ 所对应的基态，又能反过来再现出这一密度 $\\rho(x)$。\n\n**步骤 0：初始化**\n需要一个电子密度的初始猜测值 $\\rho_{in}^{(0)}(x)$。一个具有物理动机的选择是无相互作用系统的基态密度，该密度可通过将交换关联项设为零（$C=0$）并求解一次 Kohn–Sham 方程来获得。\n\n**步骤 $k$：迭代优化**\n对于每次迭代 $k=1, 2, \\dots, \\mathrm{max\\_iter}$：\n1.  **构建哈密顿量**：使用上一步的输入密度 $\\rho_{in}^{(k-1)}(x)$ 计算交换关联势 $v_{xc}^{(k-1)}(x) = -3C(\\rho_{in}^{(k-1)}(x))^2$，并据此构建 Kohn–Sham 矩阵 $H^{(k)}$。\n2.  **求解本征问题**：求解矩阵本征值问题 $H^{(k)}\\vec{\\varphi}_i^{(k)} = \\varepsilon_i^{(k)}\\vec{\\varphi}_i^{(k)}$。由于 $H^{(k)}$ 是一个实对称三对角矩阵，这个过程可以高效完成。求解后得到一组本征值 $\\varepsilon_i^{(k)}$ 及其对应的本征向量 $\\vec{\\varphi}_i^{(k)}$。本征向量必须被归一化以表示连续波函数，使得积分 $\\int |\\varphi_i(x)|^2 dx = 1$ 能由求和 $\\sum_j |\\varphi_{i,j}|^2 dx = 1$ 近似。这需要将从数值求解器得到的本征向量按 $1/\\sqrt{dx}$ 因子进行缩放。\n3.  **计算新密度**：根据总电子数 $N$ 和自旋简并度 $g_s=2$ 确定占据数 $f_i$。在零温下，轨道从最低能量开始向上填充。占据轨道的数量是 $N_{occ} = \\lceil N/g_s \\rceil = \\lceil N/2 \\rceil$。前 $N_{pairs} = \\lfloor N/g_s \\rfloor = \\lfloor N/2 \\rfloor$ 个轨道被双重占据 ($f_i=2$)，如果 $N$ 是奇数，下一个轨道被单一占据 ($f_i=1$)。然后按如下方式计算新密度：\n    $$\n    \\rho_{out}^{(k)}(x) = \\sum_{i=0}^{N_{occ}-1} f_i |\\varphi_i^{(k)}(x)|^2\n    $$\n    按照要求，在每一步中都对该密度进行显式归一化，以保证总电子数守恒：$\\int \\rho_{out}^{(k)}(x) dx = N$。\n4.  **检查收敛性**：如果新旧密度之间的最大逐点绝对差值小于容差 $\\mathrm{tol}$，则认为过程收敛：\n    $$\n    \\max_j |\\rho_{out}^{(k)}(x_j) - \\rho_{in}^{(k-1)}(x_j)| < \\mathrm{tol}\n    $$\n5.  **密度混合**：如果未达到收敛，则通过简单混合形成下一次迭代的新输入密度：\n    $$\n    \\rho_{in}^{(k)}(x) = (1-\\alpha)\\rho_{in}^{(k-1)}(x) + \\alpha\\rho_{out}^{(k)}(x)\n    $$\n    其中 $\\alpha$ 是混合参数。\n\n**3. 总能量计算**\n\n收敛后，使用最终的自洽密度 $\\rho(x)$、轨道 $\\varphi_i(x)$ 和本征值 $\\varepsilon_i$ 来计算总基态能量。所提供的公式如下：\n$$\nE_{tot} = \\sum_i f_i \\varepsilon_i - \\int v_{xc}[\\rho](x) \\rho(x) dx + E_{xc}[\\rho]\n$$\n将 $v_{xc}[\\rho](x) = -3C\\rho(x)^2$ 和 $E_{xc}[\\rho] = -C\\int\\rho(x)^3 dx$ 代入，表达式简化为：\n$$\nE_{tot} = \\sum_i f_i \\varepsilon_i - \\int (-3C \\rho(x)^3) dx + \\left(-C \\int \\rho(x)^3 dx\\right) = \\sum_i f_i \\varepsilon_i + 2C \\int \\rho(x)^3 dx\n$$\n上式中的求和遍及所有占据轨道，积分则使用收敛后的密度 $\\rho(x)$ 在网格上进行数值计算。这个最终值 $E_{tot}$ 以 Hartree 原子单位报告。", "answer": "```python\nimport numpy as np\nfrom scipy.linalg import eigh_tridiagonal\n\ndef solve_case(N, omega, L, M, alpha, tol, max_iter, C):\n    \"\"\"\n    Solves the 1D Kohn-Sham problem for a single test case.\n    \"\"\"\n    # 1. Grid setup\n    x = np.linspace(-L, L, M)\n    dx = x[1] - x[0]\n    x_int = x[1:-1]\n    M_int = M - 2\n\n    # 2. Kinetic energy operator (off-diagonal part is constant)\n    # The factor of -0.5 is for the kinetic energy operator (-1/2) * d^2/dx^2\n    off_diag_T = -0.5 / dx**2 * np.ones(M_int - 1)\n\n    # 3. External potential (constant)\n    v_ext = 0.5 * omega**2 * x_int**2\n    \n    # 4. Initial guess for density from non-interacting system (C=0)\n    # The diagonal of the non-interacting Hamiltonian H_0 = T + v_ext\n    diag_H0 = 1.0 / dx**2 + v_ext\n    eps0, eigvecs0 = eigh_tridiagonal(diag_H0, off_diag_T)\n    \n    # Occupation numbers\n    num_pairs = N // 2\n    num_single = N % 2\n    \n    # Normalize eigenvectors to represent continuous wavefunctions\n    psis_norm_0 = eigvecs0 / np.sqrt(dx)\n    \n    # Construct initial density rho_in\n    rho_in = np.zeros(M_int)\n    for i in range(num_pairs):\n        rho_in += 2.0 * np.abs(psis_norm_0[:, i])**2\n    if num_single == 1:\n        rho_in += np.abs(psis_norm_0[:, num_pairs])**2\n        \n    # Conserve electron number N in initial density\n    current_N = np.sum(rho_in) * dx\n    if current_N > 1e-9: # Avoid division by zero\n        rho_in *= N / current_N\n\n    # 5. Self-Consistent Field (SCF) loop\n    converged = False\n    for iteration in range(max_iter):\n        # Calculate exchange-correlation potential from rho_in\n        v_xc = -3.0 * C * rho_in**2\n        \n        # Effective potential\n        v_eff = v_ext + v_xc\n        \n        # Build and solve KS Hamiltonian\n        diag_H = 1.0 / dx**2 + v_eff\n        eps, eigvecs = eigh_tridiagonal(diag_H, off_diag_T)\n        \n        # Normalize eigenvectors\n        psis_norm = eigvecs / np.sqrt(dx)\n        \n        # Calculate output density rho_out\n        rho_out = np.zeros(M_int)\n        for i in range(num_pairs):\n            rho_out += 2.0 * np.abs(psis_norm[:, i])**2\n        if num_single == 1:\n            rho_out += np.abs(psis_norm[:, num_pairs])**2\n            \n        # Conserve electron number N in output density\n        current_N = np.sum(rho_out) * dx\n        if current_N > 1e-9:\n            rho_out *= N / current_N\n\n        # Check for convergence\n        diff = np.max(np.abs(rho_out - rho_in))\n        if diff < tol:\n            rho_in = rho_out # Use the latest density for energy calculation\n            converged = True\n            break\n            \n        # Mix densities for the next iteration\n        rho_in = (1 - alpha) * rho_in + alpha * rho_out\n    \n    # 6. Post-convergence calculation of total energy\n    # The converged density is rho_in\n    \n    # Sum of occupied eigenvalues (Kohn-Sham kinetic energy)\n    num_orbitals = num_pairs + num_single\n    occupied_eps = eps[:num_orbitals]\n    occupations = np.full(num_pairs, 2.0)\n    if num_single == 1:\n        occupations = np.append(occupations, 1.0)\n    sum_fi_epsi = np.sum(occupations * occupied_eps)\n    \n    # Use the simplified energy formula: E_tot = sum(f_i*eps_i) + 2*C*integral(rho^3 dx)\n    # The integral is computed as a sum over the grid points\n    integral_rho3 = np.sum(rho_in**3) * dx\n    E_tot = sum_fi_epsi + 2.0 * C * integral_rho3\n\n    return E_tot\n\ndef solve():\n    \"\"\"\n    Main function to run the test suite and print the results.\n    \"\"\"\n    test_cases = [\n        # (N, omega, L, M, alpha, tol, max_iter, C)\n        (2, 0.5, 10.0, 300, 0.5, 1e-6, 200, 0.05),\n        (1, 0.2, 12.0, 320, 0.5, 1e-6, 200, 0.05),\n        (3, 1.0, 8.0, 280, 0.5, 1e-6, 200, 0.05),\n    ]\n\n    results = []\n    for case in test_cases:\n        N, omega, L, M, alpha, tol, max_iter, C = case\n        total_energy = solve_case(N, omega, L, M, alpha, tol, max_iter, C)\n        results.append(f\"{total_energy:.6f}\")\n    \n    # Final print statement in the exact required format.\n    print(f\"[{','.join(results)}]\")\n\nsolve()\n```", "id": "2405708"}, {"introduction": "在实际的量子化学计算中，简单的密度混合方案有时会导致自洽迭代过程振荡或发散，特别是在处理具有复杂电子结构的体系时。这个高级练习将引导你实现一种强大的收敛增强技术——能级移动（level shifting）。通过在一个模拟困难收敛情景的紧束缚模型上应用该方法，你将深入理解自洽循环的稳定性问题，并学会如何通过调整哈密顿量的能谱来确保计算收敛 [@problem_id:2405696]。", "problem": "实现一个带有能级移动的自洽 Kohn–Sham 循环，用于一个模拟困难收敛情况的最小格点模型。该实现必须是一个完整、可运行的程序，它能在正交归一基中构建一个离散的 Kohn–Sham 有效哈密顿量，并使用线性密度混合和对未占据子空间的能级移动进行迭代以达到自洽。\n\n从以下基础开始：\n- Kohn–Sham 方程将单粒子轨道定义为一个有效哈密顿量的本征矢量，该哈密顿量由一个核心单电子部分加上一个电子密度的势泛函构成。在有限正交归一基中，将核心哈密顿量写为实对称矩阵 $H_{\\text{core}} \\in \\mathbb{R}^{N \\times N}$，密度矩阵写为 $P \\in \\mathbb{R}^{N \\times N}$，有效哈密顿量写为 $F[n] = H_{\\text{core}} + V[n]$，其中 $V[n]$ 在格点基中是对角的，其矩阵元取决于格点密度 $n_i = P_{ii}$。\n- 考虑一个具有 $N$ 个格点、最近邻跃迁振幅为 $t > 0$ 且在位能为零的一维紧束缚链。核心哈密顿量由 $(H_{\\text{core}})_{i,i} = 0$ 和 $(H_{\\text{core}})_{i,i+1} = (H_{\\text{core}})_{i+1,i} = -t$（对于 $i = 1,\\dots,N-1$）给出，所有其他元素为零。所有量均采用原子单位。\n- 使用一个自旋限制的闭壳层模型，其中有偶数个电子 $N_e$，因此占据的空间轨道数为 $M = N_e/2$。初始密度可以从假设均匀密度 $n_i^{(0)} = N_e/N$ 得到的初始有效哈密顿量构建。\n- 通过耦合强度为 $U > 0$ 的在位 Hartree 项来近似电子相互作用。对于给定的自旋求和密度矢量 $n \\in \\mathbb{R}^N$（其分量为 $n_i = P_{ii}$），定义一个对角势 $V[n]$，其矩阵元为 $V_{ii}[n] = U \\, n_i/2$。相应的总能量（已去除双重计算）为\n$$\nE_{\\text{tot}}[P] = \\operatorname{Tr}\\!\\big(P H_{\\text{core}}\\big) + \\operatorname{Tr}\\!\\big(P V[n]\\big) - \\frac{U}{4}\\sum_{i=1}^N n_i^2,\n$$\n其中 $n_i = P_{ii}$ 且 $P = 2 \\sum_{k=1}^M \\vert \\phi_k \\rangle \\langle \\phi_k \\vert$，$\\phi_k$ 是该次迭代中所使用的有效哈密顿量的 $M$ 个能量最低的本征矢量。\n- 实现线性密度混合：给定试验密度矩阵 $P^{(k)}$ 和由当前迭代中 $M$ 个最低本征矢量构造的密度矩阵 $P^{\\text{KS}}$，更新 $P^{(k+1)} = (1-\\alpha) P^{(k)} + \\alpha P^{\\text{KS}}$，其中混合参数为 $\\alpha \\in (0,1]$。\n- 使用前一次迭代的虚（未占据）子空间上的投影算符，实现能级移动，移动值为 $\\Delta \\ge 0$。如果 $C_{\\text{occ}}^{(k-1)} \\in \\mathbb{R}^{N \\times M}$ 包含第 $k-1$ 次迭代的占据本征矢量（作为列向量），定义虚空间投影算符为\n$$\nQ_{\\text{virt}}^{(k-1)} = I - C_{\\text{occ}}^{(k-1)} \\left(C_{\\text{occ}}^{(k-1)}\\right)^{\\mathsf{T}},\n$$\n并对角化移动后的哈密顿量\n$$\nF_{\\text{shift}}^{(k)} = F\\!\\left[n^{(k)}\\right] + \\Delta \\, Q_{\\text{virt}}^{(k-1)}\n$$\n以获得当前的 $C^{(k)}$ 及其占据块 $C_{\\text{occ}}^{(k)}$。对于 $k=0$，通过对角化由均匀初始密度构建的、未移动的 $F[n^{(0)}]$ 来获得 $C_{\\text{occ}}^{(0)}$。\n- 使用 Frobenius 范数作为收敛判据：如果\n$$\n\\left\\| P^{(k+1)} - P^{(k)} \\right\\|_{\\mathrm{F}} < \\varepsilon,\n$$\n则宣布收敛，其中 $\\varepsilon > 0$ 为指定的容差。\n\n您的程序必须：\n1. 为具有下面指定的参数 $t$ 和 $U$ 的 $N$ 个格点的链构建 $H_{\\text{core}}$。\n2. 以均匀密度 $n_i^{(0)} = N_e/N$ 初始化，构建 $F[n^{(0)}]$，对角化以得到 $C^{(0)}$ 和 $P^{(0)}$，然后如上所述使用线性混合和能级移动进行自洽循环迭代，直到收敛或达到最大迭代次数。\n3. 收敛后，使用未移动的 $F[n]$ 的各分量计算 $E_{\\text{tot}}$，并按规定进行双重计算校正。所有能量必须以 Hartree（原子单位）表示。报告的能量四舍五入到八位小数。\n4. 如果迭代在最大迭代次数内未收敛，仍需返回最后计算出的能量（四舍五入到八位小数）和所用的迭代次数；该能量需根据循环达到的最终 $P$ 计算。\n\n对所有测试用例使用以下固定的模型参数：\n- 格点数：$N = 8$。\n- 电子数：$N_e = 8$（闭壳层，因此有 $M = 4$ 个占据的空间轨道）。\n- 跃迁振幅：$t = 1.0$。\n- 在位相互作用：$U = 4.0$。\n- 收敛容差：$\\varepsilon = 10^{-8}$。\n- 最大迭代次数：$200$。\n\n为以下测试套件实现并运行自洽循环，其中每个测试用例是一个参数对 $(\\Delta, \\alpha)$：\n- 测试 A（理想情况，无能级移动）：$(\\Delta, \\alpha) = (0.0, 0.5)$。\n- 测试 B（通过能级移动稳定的困难混合）：$(\\Delta, \\alpha) = (1.5, 1.0)$。\n- 测试 C（强能级移动）：$(\\Delta, \\alpha) = (3.0, 0.7)$。\n- 测试 D（边界混合，无能级移动）：$(\\Delta, \\alpha) = (0.0, 1.0)$。\n\n要求的最终输出格式：\n- 您的程序应生成单行输出，其中包含一个由方括号括起来的逗号分隔列表。对于每个测试，附加收敛后的总能量（以 Hartree 为单位，四舍五入到八位小数），后跟达到停止标准所用的整数迭代次数。顺序必须是测试 A、测试 B、测试 C、测试 D。例如，输出必须具有以下形式：\n\"[E_A,it_A,E_B,it_B,E_C,it_C,E_D,it_D]\"\n其中 $E_{\\text{X}}$ 是一个小数点后有八位的浮点数，$it_{\\text{X}}$ 是一个整数。", "solution": "该问题要求为一维紧束缚模型实现一个自洽的 Kohn-Sham 循环。该问题陈述的有效性已得到确认，因为它在计算物理学的既定原理上具有科学依据，问题本身是适定的（well-posed），定义了所有必要的参数和算法，并以客观、正式的语言表述。我们现在将构建解决方案。\n\n该系统是一个由 $N$ 个格点组成的链，用一个正交归一基来描述。电子结构通过迭代求解 Kohn-Sham 方程来确定。迭代的核心是构建和对角化一个有效的单粒子哈密顿量，或称 Kohn-Sham 矩阵 $F$。\n\n核心哈密顿量 $H_{\\text{core}}$ 描述了电子的动能（在相邻格点间跃迁）以及任何静态外势。对于一个具有 $N=8$ 个格点、最近邻跃迁振幅 $t=1.0$ 且在位能为零的链，$H_{\\text{core}}$ 是一个 $8 \\times 8$ 的实对称矩阵，其元素为：\n$$\n(H_{\\text{core}})_{ij} = \n\\begin{cases}\n-t & \\text{若 } |i-j| = 1 \\\\\n0 & \\text{其他情况}\n\\end{cases}\n$$\n其中索引 $i, j$ 的范围是从 $1$ 到 $N$。\n\n电子-电子相互作用通过在位 Hartree 势来近似。位于格点 $i$ 的电子所感受到的势与该格点的电子密度 $n_i$ 成正比。自旋求和的密度 $n_i$ 是密度矩阵 $P$ 的对角元 $P_{ii}$。势矩阵 $V[n]$ 是对角的，其矩阵元为：\n$$\nV_{ii}[n] = \\frac{U}{2} n_i\n$$\n其中 $U=4.0$ 是在位相互作用强度。因子 1/2 是 Hartree 势泛函导数的常规用法。\n\n对于给定的密度 $n$，总的 Kohn-Sham 矩阵为 $F[n] = H_{\\text{core}} + V[n]$。自洽循环按以下步骤进行。\n\n**第 0 步：初始化**\n迭代必须从一个初始的电子密度猜测开始。一个常见且简单的选择是均匀密度分布：\n$$\nn_i^{(0)} = \\frac{N_e}{N} = \\frac{8}{8} = 1.0 \\quad \\forall i=1, \\dots, N\n$$\n使用此密度，我们构建初始的 Kohn-Sham 矩阵 $F^{(0)} = F[n^{(0)}]$。对此矩阵进行对角化，以找到其本征值（轨道能量）和本征矢量（Kohn-Sham 轨道）。由于我们有一个自旋限制模型中的 $N_e=8$ 个电子，我们占据 $M = N_e/2 = 4$ 个能量最低的轨道。这 $M$ 个本征矢量构成了矩阵 $C_{\\text{occ}}^{(0)} \\in \\mathbb{R}^{N \\times M}$ 的列。这组轨道为迭代循环提供了起点。开始主循环的初始密度矩阵构建为 $P^{(0)} = 2 C_{\\text{occ}}^{(0)} (C_{\\text{occ}}^{(0)})^{\\mathsf{T}}$。因子 2 是为了计入自旋简并（每个空间轨道两个电子）。\n\n**第 $k$ 步：迭代求精 ($k \\ge 1$)**\n在第 $k$ 次迭代开始时，我们有来自上一步的输入密度矩阵 $P^{(k-1)}$ 和占据轨道 $C_{\\text{occ}}^{(k-1)}$。过程如下：\n1.  **构建哈密顿量**：提取格点密度 $n_i^{(k-1)} = (P^{(k-1)})_{ii}$ 并构建当前的 Kohn-Sham 矩阵 $F^{(k)} = F[n^{(k-1)}]$。\n2.  **应用能级移动**：为在困难情况下帮助收敛，通过添加一个能级移动项来修改哈密顿量。该项对占据轨道和虚（未占据）轨道的混合进行惩罚。它使用*前一次*迭代的虚子空间上的投影算符 $Q_{\\text{virt}}^{(k-1)} = I - C_{\\text{occ}}^{(k-1)} (C_{\\text{occ}}^{(k-1)})^{\\mathsf{T}}$ 来构建，其中 $I$ 是单位矩阵。移动后的哈密顿量为：\n    $$\n    F_{\\text{shift}}^{(k)} = F^{(k)} + \\Delta \\, Q_{\\text{virt}}^{(k-1)}\n    $$\n    移动值 $\\Delta \\ge 0$ 提高了虚轨道的能量，从而稳定了计算。对于 $\\Delta=0$，使用标准的、未移动的哈密顿量。\n3.  **对角化**：求解（可能被移动的）哈密顿量的本征值问题：$F_{\\text{shift}}^{(k)} C^{(k)} = C^{(k)} E^{(k)}$，其中 $C^{(k)}$ 是新本征矢量的矩阵，$E^{(k)}$ 是新本征值的对角矩阵。\n4.  **形成新密度**：选择与 $M$ 个最低本征值对应的 $M$ 个本征矢量，以形成新的占据轨道矩阵 $C_{\\text{occ}}^{(k)}$。据此，构建新的“输出”密度矩阵 $P_{\\text{KS}}^{(k)} = 2 C_{\\text{occ}}^{(k)} (C_{\\text{occ}}^{(k)})^{\\mathsf{T}}$。\n5.  **混合密度**：为防止迭代间出现大的振荡，下一个循环的新输入密度矩阵 $P^{(k)}$ 是通过将旧的输入矩阵和新的输出矩阵进行线性混合而形成的：\n    $$\n    P^{(k)} = (1-\\alpha) P^{(k-1)} + \\alpha P_{\\text{KS}}^{(k)}\n    $$\n    其中 $\\alpha \\in (0, 1]$ 是混合参数。\n6.  **检查收敛性**：重复循环，直到密度矩阵的变化可以忽略不计。当连续两次迭代的密度矩阵之差的 Frobenius 范数小于容差 $\\varepsilon = 10^{-8}$ 时，宣布收敛：\n    $$\n    \\left\\| P^{(k)} - P^{(k-1)} \\right\\|_{\\mathrm{F}} < \\varepsilon\n    $$\n如果达到最大迭代次数 200 次，循环也会终止。\n\n**最终能量计算**\n在第 $k_{final}$ 次迭代收敛后，最终的密度矩阵为 $P_{final} = P^{(k_{final})}$。总电子能量必须使用最终密度和*未移动的*哈密顿量各分量来计算，以避免包含人为的能级移动。总能量表达式如下，它校正了轨道能量总和中固有的电子-电子相互作用的双重计算问题：\n$$\nE_{\\text{tot}}[P_{final}] = \\operatorname{Tr}\\!\\big(P_{final} H_{\\text{core}}\\big) + \\operatorname{Tr}\\!\\big(P_{final} V[n_{final}]\\big) - \\frac{U}{4}\\sum_{i=1}^N (n_{final,i})^2\n$$\n其中 $n_{final,i} = (P_{final})_{ii}$。对该表达式进行求值，以获得每个测试用例的最终结果。", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\nfrom scipy import linalg\n\ndef solve():\n    \"\"\"\n    Main function to run the SCF calculations for all test cases and print the results.\n    \"\"\"\n    test_cases = [\n        # Test A (happy path, no level shift)\n        (0.0, 0.5),\n        # Test B (difficult mixing stabilized by level shift)\n        (1.5, 1.0),\n        # Test C (strong level shift)\n        (3.0, 0.7),\n        # Test D (boundary mixing, no level shift)\n        (0.0, 1.0),\n    ]\n\n    # Fixed model parameters\n    params = {\n        'N': 8,              # Number of sites\n        'Ne': 8,             # Number of electrons\n        't': 1.0,            # Hopping amplitude\n        'U': 4.0,            # On-site interaction\n        'eps': 1e-8,         # Convergence tolerance\n        'max_iter': 200,     # Maximum number of iterations\n    }\n\n    results = []\n    for delta, alpha in test_cases:\n        energy, iters = run_scf(delta, alpha, params)\n        results.extend([energy, iters])\n\n    # Final print statement in the exact required format.\n    formatted_results = [f\"{res:.8f}\" if isinstance(res, float) else str(res) for res in results]\n    print(f\"[{','.join(formatted_results)}]\")\n\ndef run_scf(delta, alpha, params):\n    \"\"\"\n    Performs a self-consistent Kohn-Sham calculation for a given set of parameters.\n\n    Args:\n        delta (float): Level shifting parameter.\n        alpha (float): Linear mixing parameter.\n        params (dict): Dictionary of fixed model parameters.\n\n    Returns:\n        tuple: A tuple containing:\n            - float: The converged total energy, rounded to 8 decimal places.\n            - int: The number of iterations performed.\n    \"\"\"\n    # Unpack parameters\n    N = params['N']\n    Ne = params['Ne']\n    t = params['t']\n    U = params['U']\n    eps = params['eps']\n    max_iter = params['max_iter']\n    \n    # Number of occupied spatial orbitals\n    M = Ne // 2\n\n    # Step 1: Construct the core Hamiltonian H_core\n    H_core = np.zeros((N, N))\n    for i in range(N - 1):\n        H_core[i, i + 1] = H_core[i + 1, i] = -t\n\n    # Step 2: Initialization (Step 0)\n    # Start with a uniform density guess\n    n_vec_0 = np.full(N, Ne / N)\n    \n    # Build initial potential and Kohn-Sham matrix\n    V_0 = np.diag(U * n_vec_0 / 2.0)\n    F_0 = H_core + V_0\n\n    # Diagonalize to get initial orbitals\n    _, C_0 = linalg.eigh(F_0)\n    C_occ_prev = C_0[:, :M]\n    \n    # Form initial density matrix for the SCF loop\n    P_prev = 2.0 * C_occ_prev @ C_occ_prev.T\n    \n    # Step 3: Start the SCF cycle\n    it = 0\n    for i in range(1, max_iter + 1):\n        it = i\n        \n        # Get density vector from previous density matrix\n        n_vec = np.diag(P_prev)\n        \n        # Build Kohn-Sham matrix F[n]\n        V_mat = np.diag(U * n_vec / 2.0)\n        F = H_core + V_mat\n        \n        # Build virtual space projector Q_virt\n        Q_virt = np.eye(N) - C_occ_prev @ C_occ_prev.T\n        \n        # Build shifted Hamiltonian\n        F_shift = F + delta * Q_virt\n        \n        # Diagonalize F_shift to get new orbitals\n        _, C_curr = linalg.eigh(F_shift)\n        C_occ_curr = C_curr[:, :M]\n        \n        # Form new \"output\" density matrix\n        P_out = 2.0 * C_occ_curr @ C_occ_curr.T\n        \n        # Linear mixing to get new \"input\" density matrix\n        P_new = (1.0 - alpha) * P_prev + alpha * P_out\n        \n        # Check for convergence\n        diff = np.linalg.norm(P_new - P_prev, 'fro')\n        \n        # Update for next iteration\n        P_prev = P_new\n        C_occ_prev = C_occ_curr\n        \n        if diff < eps:\n            break\n            \n    # Step 4: Calculate final total energy\n    P_final = P_prev\n    n_final = np.diag(P_final)\n    V_final = np.diag(U * n_final / 2.0)\n    \n    # E_tot = Tr(P H_core) + Tr(P V) - Double_counting_correction\n    E_core = np.trace(P_final @ H_core)\n    E_pot = np.trace(P_final @ V_final)\n    E_dc = (U / 4.0) * np.sum(n_final**2)\n    \n    E_total = E_core + E_pot - E_dc\n\n    return round(E_total, 8), it\n\nsolve()\n```", "id": "2405696"}]}