{"hands_on_practices": [{"introduction": "理论是基础，但真正的理解来自于实践。本节的第一个动手实践将指导你从头开始构建一个量子波包动力学模拟。你将通过求解含时薛定谔方程，直观地观察波包如何与势垒相互作用，并计算其隧穿概率。这个练习的核心是采用一种物理上非常直观的方法：通过积分计算穿过势垒后方的概率流密度，来确定总的透射概率 [@problem_id:2460912]。", "problem": "在原子单位制（其中 $\\hbar = 1$ 且 $m = 1$）下，一个一维量子粒子的演化遵循含时Schrödinger方程。一个初始位置在 $x_0$、空间宽度为 $\\sigma$、平均波矢为 $k_0$ 的归一化高斯波包，从左侧入射到一个中心位于 $x_B = 0$、高度为 $V_0$、宽度为 $a$ 的矩形势垒上。根据概率守恒，穿过势垒的隧穿（透射）概率可以定义为：在位于势垒右侧的固定探测位置 $x_\\text{probe}$ 处，对穿过该位置的总概率流进行全时间积分。实现一个数值求解器，用于传播波包，计算探测器处的瞬时概率流密度，并积分透射通量以获得每个测试案例的透射概率。\n\n使用的基本原理和定义：\n- 含时Schrödinger方程为\n$$\n\\mathrm{i}\\,\\frac{\\partial}{\\partial t}\\,\\psi(x,t) \\;=\\; \\left[-\\frac{1}{2}\\frac{\\partial^2}{\\partial x^2} + V(x)\\right]\\psi(x,t).\n$$\n- 概率密度为 $\\rho(x,t) = |\\psi(x,t)|^2$。连续性方程为\n$$\n\\frac{\\partial \\rho(x,t)}{\\partial t} + \\frac{\\partial J(x,t)}{\\partial x} = 0,\n$$\n其中概率流密度为\n$$\nJ(x,t) \\;=\\; \\Im\\!\\left(\\psi^*(x,t)\\,\\frac{\\partial \\psi(x,t)}{\\partial x}\\right).\n$$\n- 矩形势垒为\n$$\nV(x) \\;=\\; \\begin{cases}\nV_0, & |x - x_B| \\le \\dfrac{a}{2},\\\\\n0, & \\text{其他情况}.\n\\end{cases}\n$$\n- 初始高斯波包为\n$$\n\\psi(x,0) \\;=\\; \\left(\\frac{1}{2\\pi \\sigma^2}\\right)^{1/4}\\exp\\!\\left(-\\frac{(x-x_0)^2}{4\\sigma^2}\\right)\\exp(\\mathrm{i}k_0 x),\n$$\n其必须在选定的网格上进行数值归一化，以确保 $\\int |\\psi(x,0)|^2 \\,\\mathrm{d}x = 1$。\n\n数值要求：\n- 使用与含时Schrödinger方程一致的稳定算法，在有限空间域内传播 $\\psi(x,t)$；例如，基于快速傅里叶变换 (FFT) 的时间分裂谱方法是可接受的，但任何遵守上述方程并能达到相当精度的其他方法也是允许的。\n- 为防止来自模拟边界的非物理反射，请使用以复吸收层实现的吸收边界。一个方便的选择是在左右边缘附近向势能添加一个纯虚数项 $-\\,\\mathrm{i}\\,W(x)$，其中 $W(x) \\ge 0$ 是平滑函数，并在内部区域消失。\n- 在每个时间步长，计算固定探测位置 $x_\\text{probe}$ 处的瞬时概率流密度。为近似 $\\partial \\psi/\\partial x$，您可以使用空间步长为 $\\Delta x$ 的中心差分法。\n- 将探测器处的透射通量定义为正向贡献 $J_+(x_\\text{probe},t) = \\max(J(x_\\text{probe},t),0)$，并通过时间积分来近似透射概率：\n$$\nT \\;\\approx\\; \\int_{0}^{T_\\text{end}} J_+(x_\\text{probe},t)\\,\\mathrm{d}t,\n$$\n其中 $T_\\text{end}$ 需足够大，以确保透射波包已通过探测器，且残余贡献可忽略不计。\n\n所有测试案例的通用模拟参数：\n- 空间域 $[x_\\text{min},x_\\text{max}] = [-100,100]$。\n- 网格点数 $N = 2048$（均匀间距）。\n- 时间步长 $\\Delta t = 0.05$。\n- 总传播时间 $T_\\text{end} = 160$。\n- 吸收层宽度 $x_\\text{cap} = 20$（位于两个域边缘附近），强度参数 $\\eta = 0.02$，具有二次型分布 $W(x)$；即，在吸收区域内 $W(x) = \\eta\\,s(x)^2$，其中 $s(x)$ 在 $x_\\text{cap}$ 的宽度上从 $0$ 渐变到 $1$。\n- 势垒中心 $x_B = 0$，探测位置 $x_\\text{probe} = a/2 + 10$（相对于势垒宽度固定），初始波包中心 $x_0 = -60$，波包宽度 $\\sigma = 1.5$。\n\n测试套件：\n- 案例1：$k_0 = 1.5$, $V_0 = 2.0$, $a = 4.0$。\n- 案例2：$k_0 = 0.8$, $V_0 = 2.5$, $a = 6.0$。\n- 案例3：$k_0 = 2.5$, $V_0 = 1.0$, $a = 4.0$。\n\n答案规格：\n- 对每个案例，使用上述通量积分方法计算透射概率 $T$。每个 $T$ 均为无量纲，且在数值误差范围内必须位于 $[0,1]$ 区间内。报告每个结果，四舍五入至六位小数。\n- 您的程序必须生成单行输出，其中包含三个结果，格式为方括号内用逗号分隔的列表，例如 `[0.123456,0.000789,0.876543]`。\n- 无需外部输入，所有量均采用原子单位。确保报告的值按规定四舍五入至六位小数。", "solution": "问题陈述已经过验证，在科学上是合理的、适定的和完整的。它描述了一个基于量子力学基本原理的计算量子动力学标准练习。数值求解所需的所有参数均已提供，且定义一致。我们可以开始求解。\n\n问题的核心是求解给定初始态和势能下的一维含时Schrödinger方程 (TDSE)：\n$$ \\mathrm{i}\\,\\frac{\\partial}{\\partial t}\\,\\psi(x,t) \\;=\\; \\hat{H}\\psi(x,t) \\;=\\; \\left[-\\frac{1}{2}\\frac{\\partial^2}{\\partial x^2} + V_{\\text{eff}}(x)\\right]\\psi(x,t) $$\n$t=0$ 时的初始态是一个归一化高斯波包。有效势 $V_{\\text{eff}}(x)$ 包括实矩形势垒 $V(x)$ 和一个位于网格边界处的虚数复吸收势 (CAP) $- \\mathrm{i}W(x)$，以防止非物理反射。\n\n为了在时间上传播波函数 $\\psi(x,t)$，我们采用时间分裂谱方法。该方法非常适合此问题，因为它准确、稳定且计算效率高。在一个小时间步长 $\\Delta t$ 内，形式解涉及时间演化算符 $\\hat{U}(\\Delta t) = \\exp(-\\mathrm{i}\\hat{H}\\Delta t)$。由于动能算符 $\\hat{T} = -\\frac{1}{2}\\frac{\\partial^2}{\\partial x^2}$ 和势能算符 $\\hat{V}_{\\text{eff}} = V_{\\text{eff}}(x)$ 不对易，我们使用二阶Strang分裂分解来近似演化算符：\n$$ \\hat{U}(\\Delta t) \\approx e^{-\\mathrm{i}\\hat{V}_{\\text{eff}}\\Delta t/2} e^{-\\mathrm{i}\\hat{T}\\Delta t} e^{-\\mathrm{i}\\hat{V}_{\\text{eff}}\\Delta t/2} $$\n该近似的误差阶数为 $\\mathcal{O}(\\Delta t^3)$，为指定的参数提供了足够的精度。从时间 $t$ 到 $t+\\Delta t$ 的传播分三步执行：\n1. 在势能 $\\hat{V}_{\\text{eff}}$ 下演化半步。在位置表象中，这是一个简单的乘法：$\\psi'(x) = e^{-\\mathrm{i}V_{\\text{eff}}(x)\\Delta t/2} \\psi(x,t)$。\n2. 在动能算符 $\\hat{T}$ 下演化一整步。此操作在位置空间中计算复杂，但在动量空间中则很简单，在动量空间中 $\\hat{T}$ 是一个简单的乘法算符，$\\hat{T}_k = k^2/2$。我们使用快速傅里叶变换 (FFT) 在不同表象之间切换。波函数被变换到动量空间（$\\tilde{\\psi}'(k) = \\mathcal{F}[\\psi'(x)]$），乘以动能演化因子（$e^{-\\mathrm{i}k^2\\Delta t/2}$），然后变换回位置空间（$\\psi''(x) = \\mathcal{F}^{-1}[e^{-\\mathrm{i}k^2\\Delta t/2}\\tilde{\\psi}'(k)]$）。\n3. 第二次在势能下演化半步：$\\psi(x, t+\\Delta t) = e^{-\\mathrm{i}V_{\\text{eff}}(x)\\Delta t/2} \\psi''(x)$。\n\n这个三步循环从 $t=0$ 重复到 $t=T_{\\text{end}}$。\n\n模拟域被离散化为一个均匀空间网格，包含 $N=2048$ 个点，区间为 $[x_{\\text{min}}, x_{\\text{max}}] = [-100, 100]$，间距为 $\\Delta x = (x_{\\text{max}}-x_{\\text{min}})/N$。相应的动量空间（波数）网格 $k$ 使用 `fftfreq` 工具构建，与FFT算法一致。\n\n初始波包由下式给出：\n$$ \\psi(x,0) \\;=\\; C \\exp\\!\\left(-\\frac{(x-x_0)^2}{4\\sigma^2}\\right)\\exp(\\mathrm{i}k_0 x) $$\n其中 $C = (2\\pi \\sigma^2)^{-1/4}$。关键在于，对于离散网格上的数值计算，该函数必须重新归一化，以确保总概率 $\\int |\\psi(x,0)|^2 dx$（近似为和式 $\\sum_j |\\psi(x_j,0)|^2 \\Delta x$）精确等于 $1$。\n\n总有效势为 $V_{\\text{eff}}(x) = V(x) - \\mathrm{i}W(x)$。\n矩形势垒为：\n$$ V(x) \\;=\\; \\begin{cases} V_0, & |x| \\le a/2 \\\\ 0, & \\text{其他情况} \\end{cases} $$\n复吸收势 $W(x)$ 的构造使其仅在边界附近（宽度为 $x_{\\text{cap}}=20$ 的区域内）非零。如规定，$W(x) = \\eta s(x)^2$，其中 $\\eta=0.02$，$s(x)$ 是一个在吸收区域起始处从 $0$ 线性渐变到网格边界处为 $1$ 的函数。例如，在右边界 $x \\in [x_{\\text{max}}-x_{\\text{cap}}, x_{\\text{max}}]$ 上，$s(x) = \\frac{x-(x_{\\text{max}}-x_{\\text{cap}})}{x_{\\text{cap}}}$。这个虚势能平滑地吸收出射波函数，防止伪反射。\n\n透射概率 $T$ 是通过对经过探测器的概率流密度通量进行积分来确定的。概率流密度为：\n$$ J(x,t) \\;=\\; \\Im\\!\\left(\\psi^*(x,t)\\,\\frac{\\partial \\psi(x,t)}{\\partial x}\\right) $$\n数值上，探测位置 $x_{\\text{probe}}$ 处的空间导数使用网格上的中心差分来近似：\n$$ \\frac{\\partial \\psi(x_j,t)}{\\partial x} \\approx \\frac{\\psi(x_{j+1},t) - \\psi(x_{j-1},t)}{2\\Delta x} $$\n其中 $x_j$ 是离 $x_{\\text{probe}}$ 最近的网格点。透射概率 $T$ 是在探测位置 $x_{\\text{probe}} = a/2 + 10$ 处正向流的时间积分：\n$$ T \\;\\approx\\; \\sum_{n=0}^{N_t-1} \\max(J(x_{\\text{probe}}, t_n), 0) \\cdot \\Delta t $$\n其中 $t_n = n\\Delta t$ 且 $N_t = T_{\\text{end}}/\\Delta t$。该求和在整个模拟时间内执行。\n\n算法首先初始化网格、势能和归一化波包。然后，时间演化循环向前传播波函数。在每个步长，计算探测器处的流密度，并将其正向贡献累加到积分的透射概率中。对三个指定的测试案例中的每一个重复此过程。", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\nfrom numpy.fft import fft, ifft, fftfreq\n\ndef run_simulation(k0, V0, a):\n    \"\"\"\n    Runs a single quantum wave packet simulation for a given set of parameters.\n\n    Args:\n        k0 (float): Initial mean wavenumber of the wave packet.\n        V0 (float): Height of the potential barrier.\n        a (float): Width of the potential barrier.\n\n    Returns:\n        float: The computed transmission probability.\n    \"\"\"\n    # 1. Simulation parameters common to all cases\n    x_min, x_max = -100.0, 100.0\n    N = 2048\n    dt = 0.05\n    t_end = 160.0\n    num_steps = int(t_end / dt)\n    x_cap = 20.0\n    eta = 0.02\n    x0 = -60.0\n    sigma = 1.5\n    \n    # 2. Setup spatial and momentum grids\n    x = np.linspace(x_min, x_max, N, endpoint=False)\n    dx = x[1] - x[0]\n    \n    k_freq = fftfreq(N, d=dx)\n    k = 2 * np.pi * k_freq\n    \n    # 3. Initial wave packet\n    psi0_unnorm = (1 / (2 * np.pi * sigma**2))**(1/4) * \\\n                  np.exp(-(x - x0)**2 / (4 * sigma**2)) * \\\n                  np.exp(1j * k0 * x)\n    \n    # Numerical normalization on the discrete grid\n    norm_const = np.sqrt(np.sum(np.abs(psi0_unnorm)**2) * dx)\n    psi = psi0_unnorm / norm_const\n    \n    # 4. Define the potential\n    # Real part: Rectangular barrier\n    x_B = 0.0\n    V_real = np.zeros_like(x)\n    V_real[np.abs(x - x_B) <= a / 2] = V0\n    \n    # Imaginary part: Complex Absorbing Potential (CAP)\n    W = np.zeros_like(x)\n    \n    # Right boundary absorber\n    mask_right = x >= (x_max - x_cap)\n    if np.any(mask_right):\n        s_right = (x[mask_right] - (x_max - x_cap)) / x_cap\n        W[mask_right] = eta * s_right**2\n        \n    # Left boundary absorber\n    mask_left = x <= (x_min + x_cap)\n    if np.any(mask_left):\n        s_left = ((x_min + x_cap) - x[mask_left]) / x_cap\n        W[mask_left] = eta * s_left**2\n    \n    V_eff = V_real - 1j * W\n    \n    # 5. Define time-evolution operators for split-step method\n    exp_V = np.exp(-0.5j * V_eff * dt)\n    exp_T = np.exp(-0.5j * k**2 * dt)\n    \n    # 6. Setup probe for transmission calculation\n    x_probe = a / 2 + 10.0\n    probe_idx = np.argmin(np.abs(x - x_probe))\n    \n    total_transmission = 0.0\n    \n    # 7. Time-evolution loop\n    for _ in range(num_steps):\n        # Strang splitting propagation step\n        psi = exp_V * psi\n        psi_k = fft(psi)\n        psi_k = exp_T * psi_k\n        psi = ifft(psi_k)\n        psi = exp_V * psi\n        \n        # Calculate probability current density at the probe location\n        # Using a centered finite difference for the derivative\n        dpsi_dx_probe = (psi[probe_idx + 1] - psi[probe_idx - 1]) / (2 * dx)\n        current_density_probe = np.imag(np.conj(psi[probe_idx]) * dpsi_dx_probe)\n        \n        # Integrate the positive-directed flux over time\n        total_transmission += max(0, current_density_probe) * dt\n        \n    return total_transmission\n\ndef solve():\n    \"\"\"\n    Main solver function that orchestrates the simulation for all test cases.\n    \"\"\"\n    # Define the test cases from the problem statement.\n    test_cases = [\n        (1.5, 2.0, 4.0),  # Case 1\n        (0.8, 2.5, 6.0),  # Case 2\n        (2.5, 1.0, 4.0),  # Case 3\n    ]\n\n    results = []\n    for case in test_cases:\n        k0, V0, a = case\n        transmission = run_simulation(k0=k0, V0=V0, a=a)\n        results.append(f\"{transmission:.6f}\")\n\n    # Final print statement in the exact required format.\n    print(f\"[{','.join(results)}]\")\n\nsolve()\n```", "id": "2460912"}, {"introduction": "在计算物理中，同一个物理量往往有多种测量方法。这个练习介绍了另一种计算透射概率的巧妙技术。我们不再直接测量概率流，而是利用模拟边界处设置的复吸收势 (Complex Absorbing Potential, CAP) 作为“探测器” [@problem_id:2440902]。通过比较在势垒两侧的吸收区域分别吸收了多少概率，我们可以精确地推算出透射和反射的比例，这不仅加深了对模拟技术的理解，也展示了数值计算的灵活性。", "problem": "考虑采用哈特里原子单位制（其中约化普朗克常数设为$1$，电子质量设为$1$，基本电荷设为$1$，玻尔半径为长度单位）的一维含时薛定谔方程：\n$$\ni\\,\\partial_t \\psi(x,t) \\;=\\; \\left[-\\frac{1}{2}\\,\\partial_{xx} \\;+\\; V(x)\\right] \\psi(x,t).\n$$\n一个初始位于位置 $x_0$、平均波数为 $k_0$ 的高斯波包朝向一个以 $x=0$ 为中心的矩形势垒发射。初始状态为\n$$\n\\psi(x,0) \\;=\\; \\frac{1}{(\\pi \\sigma^2)^{1/4}} \\exp\\!\\left(-\\frac{(x-x_0)^2}{2\\sigma^2}\\right)\\, \\exp(i\\,k_0 x),\n$$\n其在连续极限下归一化为1。矩形势垒为\n$$\nV(x) \\;=\\; \\begin{cases}\nV_0, & |x| < a/2, \\\\\n0, & \\text{其它}.\n\\end{cases}\n$$\n为防止在周期性傅里叶离散化中出现来自计算边界的非物理反射，增加一个复吸收势 (CAP) $-i\\,W(x)$，其中 $W(x)\\ge 0$ 是一个平滑函数，仅在靠近左右域边缘的边界层中非零。控制方程相应变为\n$$\ni\\,\\partial_t \\psi(x,t) \\;=\\; \\left[-\\frac{1}{2}\\,\\partial_{xx} \\;+\\; V(x) \\;-\\; i\\,W(x)\\right] \\psi(x,t).\n$$\n\n您的任务是为此问题推导并实现一个分步傅里叶（斯特朗分裂）方案，然后用它来估计波包穿过势垒的量子透射概率。该估计必须基于存在CAP时的概率守恒。具体来说，当哈密顿量包含 $-i\\,W(x)$ 时，概率密度 $\\rho=\\lvert\\psi\\rvert^2$ 遵循\n$$\n\\frac{d}{dt} \\int \\rho(x,t)\\,dx \\;=\\; -2 \\int W(x)\\,\\rho(x,t)\\,dx,\n$$\n因此，直到时间 $T$ 的总吸收概率为\n$$\n\\mathcal{A}(T) \\;=\\; 2\\int_0^T \\!\\! dt \\int W(x)\\,\\lvert \\psi(x,t)\\rvert^2\\,dx.\n$$\n设 $W(x)$ 分解为左、右两个分量 $W(x)=W_\\text{L}(x)+W_\\text{R}(x)$，分别仅在左、右域边界附近有支撑。定义右吸收概率\n$$\n\\mathcal{A}_\\text{R}(T) \\;=\\; 2\\int_0^T \\!\\! dt \\int W_\\text{R}(x)\\,\\lvert \\psi(x,t)\\rvert^2\\,dx,\n$$\n类似地，通过将 $W_\\text{R}$ 替换为 $W_\\text{L}$ 来定义左吸收概率 $\\mathcal{A}_\\text{L}(T)$。对于足够大的最终时间 $T$ 和足够有效的吸收，透射概率可以估计为\n$$\n\\mathcal{T} \\;\\approx\\; \\frac{\\mathcal{A}_\\text{R}(T)}{\\mathcal{A}_\\text{L}(T)+\\mathcal{A}_\\text{R}(T)}.\n$$\n\n通过分裂由动能算符 $T = -\\frac{1}{2}\\partial_{xx}$（在傅里叶空间中应用）和复势 $U(x)=V(x)-iW(x)$（在实空间中应用）生成的演化算符，为一个时间步长 $\\Delta t$ 推导二阶精确的斯特朗分裂方案。使用离散傅里叶变换在谱空间上表示导数：如果 $\\widehat{\\psi}(k,t)$ 是 $\\psi(x,t)$ 在周期域上的傅里叶变换，那么 $\\partial_{xx}\\psi$ 对应于在 $k$ 空间中乘以 $-k^2$。解释为什么这会为每个时间步带来一个高效的算法。\n\n在哈特里原子单位制中实现以下数值设置：\n- 空间域长度 $L = 60$（玻尔半径），周期性，用 $N = 1024$ 个等距点离散化，因此 $\\Delta x = L/N$。\n- 时间步长 $\\Delta t = 0.02$（原子时间单位），总模拟时间 $T_\\text{final} = 60$（原子时间单位）。\n- 复吸收势由域两端宽度为 $w_\\text{cap} = 8$、强度参数为 $\\eta = 1.0$ 的二次斜坡定义：\n  - 对于右侧层，$W_\\text{R}(x) = \\eta\\, s^2$，其中 $s = \\max\\{0, (x - (L/2 - w_\\text{cap}))/w_\\text{cap}\\}$。\n  - 对于左侧层，$W_\\text{L}(x) = \\eta\\, s^2$，其中 $s = \\max\\{0, ((-L/2 + w_\\text{cap}) - x)/w_\\text{cap}\\}$。\n- 势垒中心位于 $x=0$，如上定义。\n- 初始波包参数：$x_0 = -15$，$\\sigma = 1.5$。\n\n在您的时间积分器中使用中间步状态，通过以下方式近似每个时间步的吸收概率\n$$\n\\Delta \\mathcal{A}_\\text{R} \\approx 2\\,\\Delta t \\int W_\\text{R}(x)\\,\\lvert \\psi(x,t+\\Delta t/2)\\rvert^2\\,dx,\\quad\n\\Delta \\mathcal{A}_\\text{L} \\approx 2\\,\\Delta t \\int W_\\text{L}(x)\\,\\lvert \\psi(x,t+\\Delta t/2)\\rvert^2\\,dx,\n$$\n并在所有步骤中累积这些值，以获得 $\\mathcal{A}_\\text{R}(T_\\text{final})$ 和 $\\mathcal{A}_\\text{L}(T_\\text{final})$。\n\n测试套件。为以下测试用例列表运行您的程序，每个用例由 $(V_0, a, k_0)$ 指定，其中 $V_0$ 的单位是哈特里，$a$ 的单位是玻尔半径，$k_0$ 的单位是反玻尔半径：\n- 用例1：$(V_0, a, k_0) = (1.0, 5.0, 1.0)$。\n- 用例2：$(V_0, a, k_0) = (0.5, 5.0, 1.0)$。\n- 用例3：$(V_0, a, k_0) = (0.0, 0.0, 1.0)$。\n- 用例4：$(V_0, a, k_0) = (0.2, 10.0, 1.5)$。\n\n所需最终输出。您的程序必须生成单行结果，其中包含四个用例的透射概率，形式为方括号内以逗号分隔的列表，每个值四舍五入到四位小数，并表示为无量纲的十进制数。例如，输出格式必须严格为 `[0.1234,0.5678,0.9012,0.3456]` 的形式。不应打印任何其他文本。如果存在角度，必须以弧度为单位进行解释。输出不需要额外的单位，因为概率是无量纲的。", "solution": "所给的问题陈述是计算量子力学中一个适定且科学上合理的任务。它要求使用含时薛定谔方程模拟波包从势垒散射的过程。所有参数和方法都已明确定义，物理模型是标准的。因此，该问题是有效的，我将着手解决它。\n\n控制方程为带有复势的一维含时薛定谔方程，在哈特里原子单位制下表示为：\n$$\ni\\,\\partial_t \\psi(x,t) \\;=\\; \\hat{H}\\psi(x,t) \\;=\\; \\left[-\\frac{1}{2}\\,\\partial_{xx} \\;+\\; V(x) \\;-\\; i\\,W(x)\\right] \\psi(x,t)\n$$\n在此，哈密顿算符 $\\hat{H}$ 被分解为动能算符 $\\hat{T} = -\\frac{1}{2}\\partial_{xx}$ 和一个复势算符 $\\hat{U}(x) = V(x) - iW(x)$，其中 $\\hat{U}$ 在位置基中是一个简单的乘法算符。引入复吸收势 (CAP) $-iW(x)$ 以在计算域的边界处吸收波函数，从而在周期性设置中防止非物理反射。\n\n该方程在一个时间步长 $\\Delta t$ 内演化的形式解是 $\\psi(t+\\Delta t) = e^{-i\\hat{H}\\Delta t}\\psi(t)$。由于动能算符和势算符不对易，即 $[\\hat{T}, \\hat{U}] \\neq 0$，指数算符必须进行近似。我们采用二阶斯特朗分裂方案（也称为对称特罗特-铃木分解），其形式如下：\n$$\ne^{-i(\\hat{T}+\\hat{U})\\Delta t} \\;=\\; e^{-i\\hat{U}\\frac{\\Delta t}{2}} e^{-i\\hat{T}\\Delta t} e^{-i\\hat{U}\\frac{\\Delta t}{2}} \\;+\\; \\mathcal{O}(\\Delta t^3)\n$$\n该分解提供了一个将波函数 $\\psi(x,t)$ 从时间 $t$ 演化到 $t+\\Delta t$ 的方法，每步误差为 $\\mathcal{O}(\\Delta t^3)$ 阶，导致全局误差为 $\\mathcal{O}(\\Delta t^2)$ 阶。单个时间步的演化通过以下三个更简单的操作序列来执行：\n\n1.  **势能半步：** 在势 $\\hat{U}$ 下演化 $\\Delta t/2$ 的时长。由于 $\\hat{U}$ 在位置空间中是一个乘法算符，此步骤实现为逐点相乘：\n    $$\n    \\psi'(x,t) \\;=\\; e^{-i\\hat{U}(x)\\frac{\\Delta t}{2}} \\psi(x,t)\n    $$\n\n2.  **动能全步：** 在动能算符 $\\hat{T}$ 下演化 $\\Delta t$ 的时长。算符 $\\hat{T} = -\\frac{1}{2}\\partial_{xx}$ 在位置空间中是一个微分算符，这使得其直接应用变得复杂。然而，在傅里叶（波数）空间中，算符 $\\partial_{xx}$ 对应于乘以 $(ik)^2 = -k^2$。因此，动能演化算符对应于乘以 $e^{-i(k^2/2)\\Delta t}$。此步骤可使用快速傅里叶变换 (FFT) 算法高效实现：\n    a. 将波函数变换到傅里叶空间：$\\hat{\\psi}'(k,t) = \\mathcal{F}\\{\\psi'(x,t)\\}$。\n    b. 应用动能演化算符：$\\hat{\\psi}''(k,t) = e^{-i\\frac{k^2}{2}\\Delta t} \\hat{\\psi}'(k,t)$。\n    c. 变换回位置空间：$\\psi''(x,t) = \\mathcal{F}^{-1}\\{\\hat{\\psi}''(k,t)\\}$。\n    这种分步傅里叶方法的效率源于快速傅里叶变换 (FFT)，它将此步骤的计算复杂度从 $\\mathcal{O}(N^2)$ 降低到大小为 $N$ 的网格的 $\\mathcal{O}(N \\log N)$。\n\n3.  **势能半步：** 再次在势 $\\hat{U}$ 下演化 $\\Delta t/2$ 的时长：\n    $$\n    \\psi(x,t+\\Delta t) \\;=\\; e^{-i\\hat{U}(x)\\frac{\\Delta t}{2}} \\psi''(x,t)\n    $$\n\n这个三步过程构成了一个时间步的算法。为了模拟到最终时间 $T_\\text{final}$，此过程需迭代 $N_t = T_\\text{final}/\\Delta t$ 次。\n\n透射概率 $\\mathcal{T}$ 是通过计算右侧CAP吸收的总概率 $\\mathcal{A}_\\text{R}(T)$ 和左侧CAP吸收的总概率 $\\mathcal{A}_\\text{L}(T)$ 来估计的。直到时间 $T$ 在右侧CAP中吸收的总概率由以下积分给出：\n$$\n\\mathcal{A}_\\text{R}(T) \\;=\\; 2\\int_0^T \\!\\! dt \\int W_\\text{R}(x)\\,\\lvert \\psi(x,t)\\rvert^2\\,dx\n$$\n我们对该积分进行数值近似。时间积分使用中点法则进行近似，这与斯特朗分裂的二阶精度相符。对于从 $t$ 到 $t+\\Delta t$ 的每个时间步，我们使用“中间步”波函数，即完成动能全步后的状态 $\\psi''(x,t)$。因此，在一个时间步内吸收概率的变化为：\n$$\n\\Delta \\mathcal{A}_\\text{R} \\approx 2\\,\\Delta t \\int W_\\text{R}(x)\\,\\lvert \\psi''(x,t)\\rvert^2\\,dx\n$$\n空间积分通过对间距为 $\\Delta x = L/N$ 的离散网格点 $x_j$ 求和来近似：\n$$\n\\int W_\\text{R}(x)\\,\\lvert \\psi''(x,t)\\rvert^2\\,dx \\;\\approx\\; \\Delta x \\sum_{j=0}^{N-1} W_\\text{R}(x_j)\\,\\lvert \\psi''(x_j,t)\\rvert^2\n$$\n通过在所有时间步上对这些贡献 $\\Delta \\mathcal{A}_\\text{R}$ 和 $\\Delta \\mathcal{A}_\\text{L}$ 求和，可以得到总吸收概率 $\\mathcal{A}_\\text{R}(T_\\text{final})$ 和 $\\mathcal{A}_\\text{L}(T_\\text{final})$。最后，透射概率计算为以下比率：\n$$\n\\mathcal{T} \\;\\approx\\; \\frac{\\mathcal{A}_\\text{R}(T_\\text{final})}{\\mathcal{A}_\\text{L}(T_\\text{final})+\\mathcal{A}_\\text{R}(T_\\text{final})}\n$$\n该比率衡量了散射波包向右传播的部分。\n\n实现过程将首先设置空间网格和相应的波数网格。然后，为每个测试用例定义初始状态和势函数（$V(x)$、$W_L(x)$、$W_R(x)$）。预先计算势能步和动能步的指数算符。然后，模拟进行时间循环，应用分步算法并在每个步骤累积吸收的概率。最后，计算并存储透射概率。", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Solves the 1D time-dependent Schrödinger equation for wave packet scattering\n    using a split-step Fourier method and calculates the transmission probability.\n    \"\"\"\n\n    # --- Numerical and Physical Parameters ---\n    # Spatial domain\n    L = 60.0  # Length of the domain (Bohr radii)\n    N = 1024  # Number of grid points\n    \n    # Time domain\n    dt = 0.02  # Time step (atomic time units)\n    T_final = 60.0  # Total simulation time (atomic time units)\n    \n    # Complex Absorbing Potential (CAP) parameters\n    w_cap = 8.0  # Width of the CAP layers (Bohr radii)\n    eta = 1.0  # Strength of the CAP\n\n    # Initial wave packet parameters\n    x0 = -15.0  # Initial position (Bohr radii)\n    sigma = 1.5  # Initial width (Bohr radii)\n\n    # --- Grid Setup ---\n    x = np.linspace(-L / 2, L / 2, N, endpoint=False)\n    dx = L / N\n    k = 2 * np.pi * np.fft.fftfreq(N, d=dx)\n\n    # --- Define Test Cases ---\n    test_cases = [\n        # (V0, a, k0)\n        (1.0, 5.0, 1.0),\n        (0.5, 5.0, 1.0),\n        (0.0, 0.0, 1.0),\n        (0.2, 10.0, 1.5),\n    ]\n\n    results = []\n\n    for case in test_cases:\n        V0, a, k0 = case\n\n        # --- Define Potentials and Initial State ---\n        # Rectangular potential barrier V(x)\n        V = np.zeros(N)\n        V[np.abs(x) < a / 2] = V0\n\n        # Complex absorbing potential W(x) = W_L(x) + W_R(x)\n        W_L = np.zeros(N)\n        W_R = np.zeros(N)\n\n        x_L_end = -L / 2 + w_cap\n        x_R_start = L / 2 - w_cap\n\n        s_L = np.maximum(0, (x_L_end - x) / w_cap)\n        W_L = eta * s_L**2\n\n        s_R = np.maximum(0, (x - x_R_start) / w_cap)\n        W_R = eta * s_R**2\n\n        W = W_L + W_R\n        \n        # Total complex potential U(x)\n        U = V - 1j * W\n\n        # Initial wave packet psi(x, 0)\n        norm_factor = (np.pi * sigma**2)**(-0.25)\n        psi = norm_factor * np.exp(-(x - x0)**2 / (2 * sigma**2)) * np.exp(1j * k0 * x)\n        \n        # --- Pre-calculate Evolution Operators ---\n        exp_U_half = np.exp(-1j * U * dt / 2)\n        exp_T_full = np.exp(-1j * (k**2 / 2) * dt)\n\n        # --- Time Evolution Loop ---\n        num_steps = int(T_final / dt)\n        A_L, A_R = 0.0, 0.0\n\n        for _ in range(num_steps):\n            # First half potential step\n            psi = exp_U_half * psi\n\n            # Full kinetic step in Fourier space\n            psi_k = np.fft.fft(psi)\n            psi_k_evolved = exp_T_full * psi_k\n            psi_mid = np.fft.ifft(psi_k_evolved)\n\n            # Accumulate absorbed probability from the mid-step state\n            rho_mid = np.abs(psi_mid)**2\n            \n            A_R_step = 2 * dt * np.sum(W_R * rho_mid) * dx\n            A_L_step = 2 * dt * np.sum(W_L * rho_mid) * dx\n            A_R += A_R_step\n            A_L += A_L_step\n\n            # Second half potential step\n            psi = exp_U_half * psi_mid\n\n        # --- Calculate Transmission Probability ---\n        total_absorbed = A_L + A_R\n        if total_absorbed > 1e-12: # Avoid division by zero\n            T_prob = A_R / total_absorbed\n        else:\n            T_prob = 0.0\n\n        results.append(f\"{T_prob:.4f}\")\n\n    # Final print statement in the exact required format.\n    print(f\"[{','.join(results)}]\")\n\nsolve()\n```", "id": "2440902"}]}