{"hands_on_practices": [{"introduction": "我们从一个经典场景开始动手实践之旅：一个布朗粒子在受到恒定外力作用下的运动。这是对基本朗之万方程最直接的扩展，通过解析求解，你可以清晰地看到确定性漂移和随机热涨落是如何共同作用的。通过解决这个基本问题 [@problem_id:2457171]，你将深入理解系统如何从初始状态演化，并最终达到一个由外力和摩擦力平衡决定的非平衡稳态，这为你理解更复杂的随机过程奠定了坚实的数学和物理基础。", "problem": "考虑一个一维欠阻尼朗之万模型，用于描述一个质量为 $m$ 的粒子。该粒子受到一个系数为 $\\gamma$ 的黏性摩擦，并浸在一个绝对温度为 $T$ 的热浴中。随机力具有非零均值，代表一个恒定的外部推力。将朗之万方程写作\n$$ m \\frac{d v(t)}{d t} = -\\gamma \\, v(t) + R(t), \\quad \\frac{d x(t)}{d t} = v(t), $$\n其中\n$$ R(t) = F_0 + \\eta(t), $$\n$F_0$ 是一个恒力，而 $\\eta(t)$ 是一个零均值高斯白噪声，其协方差为\n$$ \\langle \\eta(t) \\rangle = 0, \\quad \\langle \\eta(t) \\, \\eta(t') \\rangle = 2 \\gamma k_{\\mathrm{B}} T \\, \\delta(t-t'), $$\n且 $k_{\\mathrm{B}}$ 是玻尔兹曼常数。假设初始条件为 $x(0) = 0$（单位：米）和 $v(0) = 0$（单位：米/秒）。所有输入和输出均使用国际单位制 (SI)，其中 $k_{\\mathrm{B}} = 1.380649 \\times 10^{-23}$ J/K。\n\n对于下述测试套件中的每一组参数，计算在指定时间 $t$ 的以下物理量：\n- 期望速度 $\\langle v(t) \\rangle$，单位为米/秒，\n- 期望位置 $\\langle x(t) \\rangle$，单位为米，\n- 位置方差 $\\mathrm{Var}[x(t)]$，单位为平方米。\n\n为每个测试用例报告所有这三个量。所有输出均以SI单位表示，并将报告的每个数字四舍五入到六位有效数字。\n\n测试套件（每个用例是一个元组 $\\left(m,\\gamma,T,F_0,t\\right)$，单位为SI单位）：\n- 用例 $1$：$\\left(6.63 \\times 10^{-26}, \\; 2.00 \\times 10^{-11}, \\; 300, \\; 8.00 \\times 10^{-12}, \\; 1.00 \\times 10^{-9}\\right)$\n- 用例 $2$：$\\left(6.63 \\times 10^{-26}, \\; 2.00 \\times 10^{-11}, \\; 300, \\; 0, \\; 5.00 \\times 10^{-10}\\right)$\n- 用例 $3$：$\\left(6.63 \\times 10^{-26}, \\; 2.00 \\times 10^{-11}, \\; 300, \\; 1.00 \\times 10^{-13}, \\; 1.00 \\times 10^{-15}\\right)$\n\n您的程序应生成单行输出，其中包含一个用方括号括起来的逗号分隔列表形式的结果，顺序如下\n$[\\langle v(t) \\rangle_1, \\langle x(t) \\rangle_1, \\mathrm{Var}[x(t)]_1, \\langle v(t) \\rangle_2, \\langle x(t) \\rangle_2, \\mathrm{Var}[x(t)]_2, \\langle v(t) \\rangle_3, \\langle x(t) \\rangle_3, \\mathrm{Var}[x(t)]_3]$，\n其中下标表示相应的测试用例。不应包含任何额外的文本或空格。", "solution": "该问题是适定的，并具有科学依据。它描述了一个一维欠阻尼朗之万模型，这是统计物理学和计算化学中描述粒子在摩擦力、随机热力和恒定外力影响下进行布朗运动的一个基本和标准模型。所提供的方程和参数是自洽的，并具有物理意义。我们将采用解析解法。\n\n该系统由朗之万方程描述：\n$$ m \\frac{d v(t)}{d t} = -\\gamma v(t) + F_0 + \\eta(t) $$\n其中随机力 $\\eta(t)$ 是一个高斯白噪声，其性质为 $\\langle \\eta(t) \\rangle = 0$ 和 $\\langle \\eta(t) \\eta(t') \\rangle = 2 \\gamma k_{\\mathrm{B}} T \\delta(t-t')$。初始条件为 $v(0)=0$ 和 $x(0)=0$。\n\n首先，我们求解速度 $v(t)$。关于 $v(t)$ 的方程可以改写为一阶线性非齐次常微分方程：\n$$ \\frac{d v(t)}{d t} + \\frac{\\gamma}{m} v(t) = \\frac{F_0}{m} + \\frac{\\eta(t)}{m} $$\n定义速度弛豫时间 $\\tau_v = m/\\gamma$，方程变为：\n$$ \\frac{d v(t)}{d t} + \\frac{1}{\\tau_v} v(t) = \\frac{F_0}{m} + \\frac{\\eta(t)}{m} $$\n对于初始条件 $v(0)=0$，使用积分因子 $e^{t/\\tau_v}$ 可以找到该方程的形式解：\n$$ v(t) = v(0)e^{-t/\\tau_v} + \\int_0^t e^{-(t-t')/\\tau_v} \\left( \\frac{F_0}{m} + \\frac{\\eta(t')}{m} \\right) dt' $$\n代入 $v(0)=0$：\n$$ v(t) = \\frac{F_0}{m} \\int_0^t e^{-(t-t')/\\tau_v} dt' + \\frac{1}{m} \\int_0^t e^{-(t-t')/\\tau_v} \\eta(t') dt' $$\n对第一个积分进行计算，我们得到 $v(t)$ 的完整解：\n$$ v(t) = \\frac{F_0}{\\gamma} \\left( 1 - e^{-t/\\tau_v} \\right) + \\frac{1}{m} \\int_0^t e^{-(t-t')/\\tau_v} \\eta(t') dt' $$\n\n为了找到期望速度 $\\langle v(t) \\rangle$，我们对上述表达式取期望值。由于期望算符是线性的，且 $\\langle \\eta(t') \\rangle = 0$，积分项为零。\n$$ \\langle v(t) \\rangle = \\left\\langle \\frac{F_0}{\\gamma} \\left( 1 - e^{-t/\\tau_v} \\right) \\right\\rangle + \\frac{1}{m} \\int_0^t e^{-(t-t')/\\tau_v} \\langle \\eta(t') \\rangle dt' $$\n$$ \\langle v(t) \\rangle = \\frac{F_0}{\\gamma} \\left( 1 - e^{-\\gamma t/m} \\right) $$\n\n接下来，我们求解期望位置 $\\langle x(t) \\rangle$。位置是通过对速度积分得到的，$x(t) = x(0) + \\int_0^t v(t') dt'$。当 $x(0)=0$ 时，我们有 $\\langle x(t) \\rangle = \\int_0^t \\langle v(t') \\rangle dt'$。\n$$ \\langle x(t) \\rangle = \\int_0^t \\frac{F_0}{\\gamma} \\left( 1 - e^{-t'/\\tau_v} \\right) dt' $$\n$$ \\langle x(t) \\rangle = \\frac{F_0}{\\gamma} \\left[ t' + \\tau_v e^{-t'/\\tau_v} \\right]_0^t = \\frac{F_0}{\\gamma} \\left( (t + \\tau_v e^{-t/\\tau_v}) - (0 + \\tau_v) \\right) $$\n$$ \\langle x(t) \\rangle = \\frac{F_0}{\\gamma} \\left( t - \\tau_v (1 - e^{-t/\\tau_v}) \\right) = \\frac{F_0}{\\gamma} \\left( t - \\frac{m}{\\gamma} (1 - e^{-\\gamma t/m}) \\right) $$\n\n最后，我们计算位置的方差，$\\mathrm{Var}[x(t)] = \\langle (x(t) - \\langle x(t) \\rangle)^2 \\rangle$。位置的涨落部分 $\\delta x(t) = x(t) - \\langle x(t) \\rangle$ 由下式给出：\n$$ \\delta x(t) = \\int_0^t \\delta v(t') dt' = \\int_0^t \\left( \\frac{1}{m} \\int_0^{t'} e^{-(t'-t_1)/\\tau_v} \\eta(t_1) dt_1 \\right) dt' $$\n于是方差为 $\\mathrm{Var}[x(t)] = \\langle (\\delta x(t))^2 \\rangle = \\int_0^t dt' \\int_0^t dt'' \\langle \\delta v(t') \\delta v(t'') \\rangle$。这需要涨落分量的速度自相关函数 $\\langle \\delta v(t') \\delta v(t'') \\rangle$。\n利用白噪声 $\\eta(t)$ 的性质，可以计算出该相关函数为：\n$$ \\langle \\delta v(t') \\delta v(t'') \\rangle = \\frac{k_{\\mathrm{B}} T}{m} \\left( e^{-|t'-t''|/\\tau_v} - e^{-(t'+t'')/\\tau_v} \\right) $$\n将此表达式对时间从 $0$ 到 $t$ 积分两次，即可得到位置方差。此计算的标准结果是：\n$$ \\mathrm{Var}[x(t)] = \\frac{2 k_B T \\tau_v^2}{m} \\left( \\frac{t}{\\tau_v} - \\frac{3}{2} + 2e^{-t/\\tau_v} - \\frac{1}{2} e^{-2t/\\tau_v} \\right) $$\n代入 $\\tau_v=m/\\gamma$，可写为：\n$$ \\mathrm{Var}[x(t)] = \\frac{2 k_B T m}{\\gamma^2} \\left( \\frac{\\gamma t}{m} - \\frac{3}{2} + 2e^{-\\gamma t/m} - \\frac{1}{2} e^{-2\\gamma t/m} \\right) $$\n当时间自变量 $u = \\gamma t/m$ 很小时，该表达式可能会遭受灾难性抵消。使用 `expm1` 函数可以推导出一个数值上更稳定的形式，其中 $\\mathrm{expm1}(z) = e^z - 1$：\n$$ \\frac{\\gamma t}{m} - \\frac{3}{2} + 2e^{-\\gamma t/m} - \\frac{1}{2} e^{-2\\gamma t/m} = \\frac{\\gamma t}{m} + 2\\mathrm{expm1}(-\\gamma t/m) - \\frac{1}{2}\\mathrm{expm1}(-2\\gamma t/m) $$\n代码中将实现此形式，以确保在所有时间尺度上的数值精度。\n\n用于计算的公式摘要：\n1. $\\langle v(t) \\rangle = \\frac{F_0}{\\gamma} (1 - e^{-\\gamma t/m})$\n2. $\\langle x(t) \\rangle = \\frac{F_0}{\\gamma} (t - \\frac{m}{\\gamma} (1 - e^{-\\gamma t/m}))$\n3. $\\mathrm{Var}[x(t)] = \\frac{2k_B T m}{\\gamma^2} \\left( \\frac{\\gamma t}{m} + 2(e^{-\\gamma t/m}-1) - \\frac{1}{2}(e^{-2\\gamma t/m}-1) \\right)$\n\n这些公式将应用于每个测试用例。", "answer": "```python\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Solves the Langevin dynamics problem for the given test cases.\n    \"\"\"\n    \n    # Define physical constants\n    K_B = 1.380649e-23  # Boltzmann constant in J/K\n\n    # Test suite: (m, gamma, T, F0, t) in SI units\n    test_cases = [\n        (6.63e-26, 2.00e-11, 300, 8.00e-12, 1.00e-9),\n        (6.63e-26, 2.00e-11, 300, 0, 5.00e-10),\n        (6.63e-26, 2.00e-11, 300, 1.00e-13, 1.00e-15),\n    ]\n\n    def calculate_dynamics(m, gamma, T, F0, t):\n        \"\"\"\n        Calculates expected velocity, position, and position variance.\n        \n        Args:\n            m (float): Mass in kg\n            gamma (float): Friction coefficient in kg/s\n            T (float): Temperature in K\n            F0 (float): Constant force in N\n            t (float): Time in s\n            \n        Returns:\n            tuple: A tuple containing (<v(t)>, <x(t)>, Var[x(t)]).\n        \"\"\"\n        \n        # Dimensionless time argument for exponential functions\n        u = gamma * t / m\n        \n        # Use np.expm1 for better numerical stability for small u\n        # expm1(x) = exp(x) - 1, so 1 - exp(-u) = -expm1(-u)\n        one_minus_exp_neg_u = -np.expm1(-u)\n        \n        # Expected velocity <v(t)>\n        v_exp = (F0 / gamma) * one_minus_exp_neg_u\n        \n        # Expected position <x(t)>\n        x_exp = (F0 / gamma) * (t - (m / gamma) * one_minus_exp_neg_u)\n        \n        # Variance of position Var[x(t)]\n        # Numerically stable form: u + 2*expm1(-u) - 0.5*expm1(-2u)\n        var_term = u + 2 * np.expm1(-u) - 0.5 * np.expm1(-2 * u)\n        prefactor = (2 * K_B * T * m) / (gamma**2)\n        var_x = prefactor * var_term\n        \n        return v_exp, x_exp, var_x\n\n    results = []\n    for case in test_cases:\n        m, gamma, T, F0, t = case\n        v_exp, x_exp, var_x = calculate_dynamics(m, gamma, T, F0, t)\n        \n        # Format to six significant figures\n        results.append(f\"{v_exp:.6g}\")\n        results.append(f\"{x_exp:.6g}\")\n        results.append(f\"{var_x:.6g}\")\n    \n    # Final print statement in the exact required format\n    print(f\"[{','.join(results)}]\")\n\nsolve()\n```", "id": "2457171"}, {"introduction": "在掌握了线性系统的解析分析之后，我们转向一个更普遍的情形：粒子被限制在非谐势场中。对于这类系统，解析解通常难以获得，因此数值模拟成为不可或缺的研究工具。这个练习 [@problem_id:2406383] 将指导你使用欧拉-丸山（Euler-Maruyama）方法来模拟过阻尼朗之万动力学，并通过福克-普朗克方程推导出系统的稳态玻尔兹曼分布，让你有机会将模拟结果与理论预测进行直接比较。这项实践将为你提供实现随机积分器、收集和分析模拟数据，以及根据统计平衡基本原理验证数值结果的宝贵经验。", "problem": "考虑一个单粒子在一维空间中的过阻尼朗之万动力学，该粒子在一个由 $V(x)=a \\ln\\!\\big(1+(x/x_0)^2\\big)$ 给出的对数形式的限制性势场中运动。假设其动力学行为由粘性摩擦和处于绝对温度为 $T$ 的热浴中的热涨落之间的平衡所决定，其中玻尔兹曼常数 $k_{\\mathrm{B}}$ 设为 $1$，从而温度具有能量的单位。本问题中所有量均为无量纲量。\n\n您的任务如下，且仅能从基本原理和经过充分检验的事实出发：\n1) 从牛顿第二定律和涨落耗散关系（噪声均值为零，且其关联与狄拉克δ函数成正比）出发，推导在势 $V(x)$ 下 $x(t)$ 的过阻尼朗之万方程。您必须得到一个形式为 $dx = \\mu(x)\\,dt + \\sigma\\,dW_t$ 的方程，其中 $W_t$ 是维纳过程，并用 $a$、$x_0$、$T$ 和摩擦系数 $\\gamma$ 识别并表示出漂移项 $\\mu(x)$ 和扩散振幅 $\\sigma$。\n2) 使用 Fokker–Planck 方程，证明稳态分布（如果存在）是玻尔兹曼分布 $p_{\\mathrm{eq}}(x) \\propto \\exp\\!\\big(-\\beta V(x)\\big)$，其中 $\\beta=1/T$。确定参数 $\\nu=\\beta a$ 需满足何种条件，此稳态分布才能在整个实轴上可归一化，并将未归一化的密度表示为 $p_{\\mathrm{unnorm}}(x)=(1+(x/x_0)^2)^{-\\nu}$ 的形式。\n3) 对于 $\\nu>1/2$ 的情况，通过计算积分 $\\int_{-\\infty}^{\\infty} (1+(x/x_0)^2)^{-\\nu} \\, dx$，并使用 Gamma 函数的标准积分恒等式，推导稳态分布 $p_{\\mathrm{eq}}(x)$ 的归一化常数 $Z(\\nu,x_0)$。请用 Gamma 函数以显式的闭合形式给出 $Z(\\nu,x_0)$。\n4) 考虑过阻尼朗之万方程的 Euler–Maruyama 时间离散化，时间步长为 $\\Delta t$：\n$$\nx_{n+1} = x_n + \\mu(x_n)\\,\\Delta t + \\sigma \\sqrt{\\Delta t}\\,\\xi_n,\n$$\n其中 $\\xi_n$ 是独立同分布的标准正态随机变量，其均值为零，方差为一。设计一个模拟方案，通过并行地演化大量独立粒子，并在一个预烧（burn-in）阶段后收集样本，来近似稳态分布。为确保数值稳定性和对原点附近最快确定性弛豫过程有足够的时间分辨率，将时间步长设置为\n$$\n\\Delta t = 0.005\\,\\frac{\\gamma x_0^2}{a}。\n$$\n此处，$\\gamma$ 是摩擦系数。使用 $N_{\\mathrm{p}}$ 个从 $x=0$ 处开始的独立粒子，将它们演化 $N_{\\mathrm{steps}}$ 步，并丢弃前 $N_{\\mathrm{burn}}$ 步作为预烧阶段。为了可复现性，使用固定的伪随机数种子 $12345$。\n5) 设目标区间（bin）为 $[-w/2,w/2]$，宽度 $w = 0.5\\,x_0$。使用您在第3项中得到的归一化稳态分布，通过高精度的数值积分计算“精确”的稳态区间概率\n$$\nP_{\\mathrm{exact}} = \\frac{1}{Z(\\nu,x_0)} \\int_{-w/2}^{w/2} \\left(1+(x/x_0)^2\\right)^{-\\nu}\\,dx。\n$$\n使用您的 Euler–Maruyama 模拟，将经验区间概率 $P_{\\mathrm{emp}}$ 估计为落入区间 $[-w/2,w/2]$ 的样本（在预烧阶段后，综合所有粒子和所有时间步的样本）所占的比例。\n6) 对于下述测试套件中的每一组参数，报告其相对误差 $\\varepsilon = |P_{\\mathrm{emp}}-P_{\\mathrm{exact}}|/P_{\\mathrm{exact}}$。\n\n您的程序应使用的模拟参数和输出规范：\n- 使用 $N_{\\mathrm{p}}=5000$，$N_{\\mathrm{steps}}=3000$，$N_{\\mathrm{burn}}=500$。\n- 使用伪随机数种子 $12345$。\n- 对于每个测试案例，通过具有足够严格公差的数值积分计算 $P_{\\mathrm{exact}}$，以使其数值误差与采样误差相比可以忽略不计。\n- 您的程序必须输出单行，其中包含下述测试套件的三个相对误差，格式为一个由方括号括起来的逗号分隔列表，且每个数字都四舍五入到恰好 $6$ 位小数（例如，$[0.001234,0.056789,0.000010]$）。\n\n测试套件（所有量均为无量纲量）：\n- 案例A（强限制）：$a=2.0$，$x_0=1.0$，$\\gamma=1.0$，$T=2.0/3.0$，因此 $\\nu=\\beta a = 3.0$。\n- 案例B（中等限制，具有可归一化的重尾）：$a=2.0$，$x_0=1.0$，$\\gamma=1.0$，$T=2.0$，因此 $\\nu=\\beta a = 1.0$。\n- 案例C（接近可归一化阈值）：$a=2.0$，$x_0=1.0$，$\\gamma=1.0$，$T=10.0/3.0$，因此 $\\nu=\\beta a = 0.6$。\n\n最终输出格式：\n- 您的程序应生成单行输出，其中包含一个由方括号括起来的逗号分隔列表的结果，结果严格按照 [案例A结果, 案例B结果, 案例C结果] 的顺序排列，并且每个数字都四舍五入到 $6$ 位小数。", "solution": "如问题所述，该问题具有科学依据、提法恰当、客观，并包含了解决该问题所需的所有必要信息。它描述了统计物理学中的一个标准问题，即粒子在势场中的过阻尼朗之万动力学，可以用已有的理论和数值方法进行分析。所有参数和步骤均已明确无误地指定。因此，我们开始求解。\n\n解答按照问题陈述中指定的六项任务进行组织。\n\n1. 过阻尼朗之万方程的推导\n\n我们从质量为 $m$ 的粒子在一维空间 $x$ 中运动的牛顿第二定律开始，该粒子受到势场力 $F_{\\mathrm{pot}}(x)$、粘性阻力 $F_{\\mathrm{fric}}$ 和随机热力 $\\eta(t)$ 的作用：\n$$m\\frac{d^2x}{dt^2} = F_{\\mathrm{pot}}(x) + F_{\\mathrm{fric}} + \\eta(t)$$\n势场力是保守的，$F_{\\mathrm{pot}}(x) = -V'(x)$。粘性阻力与速度成正比，$F_{\\mathrm{fric}} = -\\gamma \\frac{dx}{dt}$，其中 $\\gamma$ 是摩擦系数。运动方程是完整的朗之万方程：\n$$m\\frac{d^2x}{dt^2} = -V'(x) - \\gamma \\frac{dx}{dt} + \\eta(t)$$\n过阻尼极限考虑的是摩擦力远大于惯性力的运动，这等效于取极限 $m \\to 0$。对于在高度粘稠的介质中的运动，或在远大于动量弛豫时间 $\\tau_p = m/\\gamma$ 的时间尺度上，这种近似在物理上是合理的。在此极限下，惯性项 $m\\ddot{x}$ 被忽略：\n$$0 \\approx -V'(x) - \\gamma \\frac{dx}{dt} + \\eta(t)$$\n整理后得到过阻尼朗之万方程：\n$$\\gamma \\frac{dx}{dt} = -V'(x) + \\eta(t)$$\n随机力 $\\eta(t)$ 代表了温度为 $T$ 的热浴所产生的热涨落。涨落耗散定理决定了其统计特性：它是一个高斯白噪声过程，其均值为零，关联函数由下式给出：\n$$\\langle \\eta(t) \\rangle = 0$$\n$$\\langle \\eta(t)\\eta(t') \\rangle = 2\\gamma k_B T \\delta(t-t')$$\n鉴于问题设定 $k_B=1$，该关联为 $\\langle \\eta(t)\\eta(t') \\rangle = 2\\gamma T \\delta(t-t')$。\n\n为了将方程写成标准的 Itô 形式 $dx = \\mu(x)\\,dt + \\sigma\\,dW_t$，我们两边同除以 $\\gamma$：\n$$\\frac{dx}{dt} = -\\frac{1}{\\gamma}V'(x) + \\frac{1}{\\gamma}\\eta(t)$$\n这对应于一个 Itô 随机微分方程，其中 $dW_t = \\frac{1}{\\sigma_{\\eta}}\\eta(t) dt$，且 $\\langle dW_t dW_{t'} \\rangle = \\delta(t-t') dt^2$？不，这个推理是错误的。我们定义维纳过程 $W_t$，使其形式上的时间导数 $\\frac{dW_t}{dt}$ 为高斯白噪声，满足 $\\langle \\frac{dW_t}{dt} \\rangle = 0$ 和 $\\langle \\frac{dW_t}{dt} \\frac{dW_{t'}}{dt'} \\rangle = \\delta(t-t')$。$\\frac{dx}{dt}$ 方程中的项 $\\frac{1}{\\gamma}\\eta(t)$ 必须等同于 $\\sigma \\frac{dW_t}{dt}$。这两项的方差必须匹配。\n噪声项 $\\frac{1}{\\gamma}\\eta(t)$ 的关联是：\n$$\\left\\langle \\left(\\frac{1}{\\gamma}\\eta(t)\\right) \\left(\\frac{1}{\\gamma}\\eta(t')\\right) \\right\\rangle = \\frac{1}{\\gamma^2}\\langle \\eta(t)\\eta(t') \\rangle = \\frac{1}{\\gamma^2} (2\\gamma T \\delta(t-t')) = \\frac{2T}{\\gamma}\\delta(t-t')$$\n将此与 Itô SDE 中随机项的关联 $\\langle (\\sigma \\frac{dW_t}{dt})(\\sigma \\frac{dW_{t'}}{dt'}) \\rangle = \\sigma^2 \\delta(t-t')$ 相比，我们确定：\n$$\\sigma^2 = \\frac{2T}{\\gamma} \\implies \\sigma = \\sqrt{\\frac{2T}{\\gamma}}$$\n方程的确定性部分给出了漂移项：\n$$\\mu(x) = -\\frac{1}{\\gamma}V'(x)$$\n对于给定的势 $V(x)=a \\ln(1+(x/x_0)^2)$，其导数为：\n$$V'(x) = a \\frac{1}{1+(x/x_0)^2} \\cdot \\frac{2x}{x_0^2} = \\frac{2ax}{x_0^2+x^2}$$\n因此，漂移系数和扩散振幅为：\n$$\\mu(x) = -\\frac{2ax}{\\gamma(x_0^2+x^2)}, \\quad \\sigma = \\sqrt{\\frac{2T}{\\gamma}}$$\n扩散振幅 $\\sigma$ 与位置 $x$ 无关。\n\n2. Fokker-Planck 方程和稳态分布\n\n对于由 $dx = \\mu(x)\\,dt + \\sigma(x)\\,dW_t$ 描述的过程，其概率密度函数 $p(x,t)$ 的时间演化由 Fokker-Planck 方程决定：\n$$\\frac{\\partial p}{\\partial t} = -\\frac{\\partial}{\\partial x} [\\mu(x)p(x,t)] + \\frac{1}{2}\\frac{\\partial^2}{\\partial x^2} [\\sigma^2(x)p(x,t)]$$\n代入我们得到的 $\\mu(x)$ 和常数 $\\sigma$ 的表达式：\n$$\\frac{\\partial p}{\\partial t} = -\\frac{\\partial}{\\partial x} \\left[-\\frac{1}{\\gamma}V'(x)p\\right] + \\frac{1}{2}\\frac{\\partial^2}{\\partial x^2} \\left[\\frac{2T}{\\gamma}p\\right] = \\frac{1}{\\gamma}\\frac{\\partial}{\\partial x} \\left[V'(x)p\\right] + \\frac{T}{\\gamma}\\frac{\\partial^2p}{\\partial x^2}$$\n稳态分布 $p_{\\mathrm{eq}}(x)$ 由条件 $\\frac{\\partial p_{\\mathrm{eq}}}{\\partial t}=0$ 定义。\n$$0 = \\frac{1}{\\gamma}\\frac{d}{dx} \\left[V'(x)p_{\\mathrm{eq}}\\right] + \\frac{T}{\\gamma}\\frac{d^2p_{\\mathrm{eq}}}{dx^2} \\implies \\frac{d}{dx} \\left[V'(x)p_{\\mathrm{eq}} + T\\frac{dp_{\\mathrm{eq}}}{dx}\\right] = 0$$\n括号中的项是概率流，对于限制势中的稳态，该流必须处处为零。\n$$V'(x)p_{\\mathrm{eq}} + T\\frac{dp_{\\mathrm{eq}}}{dx} = 0 \\implies \\frac{1}{p_{\\mathrm{eq}}}\\frac{dp_{\\mathrm{eq}}}{dx} = -\\frac{V'(x)}{T}$$\n对 $x$ 积分得到 $\\ln(p_{\\mathrm{eq}}) = -V(x)/T + C$，其中 $C$ 是一个积分常数。\n$$p_{\\mathrm{eq}}(x) = \\exp(C) \\exp\\left(-\\frac{V(x)}{T}\\right)$$\n当 $\\beta=1/T$ 时，这就是所要求的玻尔兹曼分布 $p_{\\mathrm{eq}}(x) \\propto \\exp(-\\beta V(x))$。\n代入势 $V(x)=a \\ln(1+(x/x_0)^2)$ 并定义 $\\nu = \\beta a$：\n$$p_{\\mathrm{eq}}(x) \\propto \\exp\\left(-\\beta a \\ln(1+(x/x_0)^2)\\right) = \\exp\\left(-\\nu \\ln(1+(x/x_0)^2)\\right) = \\left(1+(x/x_0)^2\\right)^{-\\nu}$$\n未归一化的密度为 $p_{\\mathrm{unnorm}}(x) = (1+(x/x_0)^2)^{-\\nu}$。\n为了使此分布可归一化，积分 $\\int_{-\\infty}^{\\infty} (1+(x/x_0)^2)^{-\\nu} dx$ 必须收敛。对于大的 $|x|$，被积函数的行为类似于 $( (x/x_0)^2 )^{-\\nu} \\propto |x|^{-2\\nu}$。积分 $\\int^{\\infty} |x|^{-p} dx$ 收敛当且仅当 $p>1$。在这里，$p=2\\nu$，因此可归一化的条件是 $2\\nu>1$，即 $\\nu > 1/2$。\n\n3. 归一化常数\n\n我们必须计算当 $\\nu > 1/2$ 时的归一化常数 $Z(\\nu, x_0) = \\int_{-\\infty}^{\\infty} (1+(x/x_0)^2)^{-\\nu} dx$。我们进行变量替换 $u=x/x_0$，则 $dx = x_0 du$:\n$$Z(\\nu, x_0) = \\int_{-\\infty}^{\\infty} (1+u^2)^{-\\nu} x_0 du = x_0 \\int_{-\\infty}^{\\infty} (1+u^2)^{-\\nu} du$$\n由于被积函数是 $u$ 的偶函数，我们可以写为：\n$$Z(\\nu, x_0) = 2x_0 \\int_{0}^{\\infty} (1+u^2)^{-\\nu} du$$\n这个积分是与 Beta 函数相关的标准形式。Beta 函数的一种表示为 $B(z_1, z_2) = 2\\int_0^{\\pi/2}(\\sin\\theta)^{2z_1-1}(\\cos\\theta)^{2z_2-1}d\\theta$。或者，一个更直接的关系使用表示式 $B(z_1, z_2) = \\int_0^{\\infty} \\frac{t^{z_1-1}}{(1+t)^{z_1+z_2}} dt$。\n设 $u^2=t$，则 $u=\\sqrt{t}$ 且 $du = \\frac{1}{2\\sqrt{t}}dt$。\n$$\\int_{0}^{\\infty} (1+u^2)^{-\\nu} du = \\int_{0}^{\\infty} (1+t)^{-\\nu} \\frac{1}{2\\sqrt{t}}dt = \\frac{1}{2}\\int_{0}^{\\infty} \\frac{t^{-1/2}}{(1+t)^{\\nu}} dt$$\n将此与 Beta 函数的积分表示比较，我们设 $z_1-1 = -1/2 \\implies z_1=1/2$，且 $z_1+z_2=\\nu \\implies 1/2+z_2=\\nu \\implies z_2=\\nu-1/2$。\n因此积分为 $\\frac{1}{2}B(1/2, \\nu-1/2)$。使用关系式 $B(z_1, z_2) = \\frac{\\Gamma(z_1)\\Gamma(z_2)}{\\Gamma(z_1+z_2)}$：\n$$\\int_{0}^{\\infty} (1+u^2)^{-\\nu} du = \\frac{1}{2} \\frac{\\Gamma(1/2)\\Gamma(\\nu-1/2)}{\\Gamma(1/2+\\nu-1/2)} = \\frac{1}{2} \\frac{\\Gamma(1/2)\\Gamma(\\nu-1/2)}{\\Gamma(\\nu)}$$\n由于 $\\Gamma(1/2)=\\sqrt{\\pi}$，归一化常数为：\n$$Z(\\nu, x_0) = 2x_0 \\left(\\frac{1}{2} \\frac{\\sqrt{\\pi}\\Gamma(\\nu-1/2)}{\\Gamma(\\nu)}\\right) = x_0\\sqrt{\\pi} \\frac{\\Gamma(\\nu-1/2)}{\\Gamma(\\nu)}$$\n\n4. 模拟方案\n\n使用时间步长为 $\\Delta t$ 的 Euler-Maruyama 格式对过阻尼朗之万方程进行离散化：\n$$x_{n+1} = x_n + \\mu(x_n)\\Delta t + \\sigma \\sqrt{\\Delta t}\\,\\xi_n$$\n其中 $\\xi_n$ 是从标准正态分布 $N(0,1)$ 中抽取的独立随机变量。参数指定如下：\n- 时间步长：$\\Delta t = 0.005\\,\\frac{\\gamma x_0^2}{a}$\n- 粒子数：$N_{\\mathrm{p}}=5000$\n- 步数：$N_{\\mathrm{steps}}=3000$\n- 预烧步数：$N_{\\mathrm{burn}}=500$\n- 初始条件：所有 $N_{\\mathrm{p}}$ 个粒子从 $x_i(0)=0$ 开始。\n模拟过程如下：首先将 $N_{\\mathrm{p}}$ 个粒子的位置向量初始化为零。然后，在 $N_{\\mathrm{steps}}$ 个时间步中的每一步，根据离散化的方程并行更新所有粒子的位置。对于所有满足 $n \\ge N_{\\mathrm{burn}}$ 的时间步 $n$，收集粒子位置 $x_i(t_n)$ 的样本。\n\n5. 概率计算\n\n粒子处于区间 $[-w/2, w/2]$（宽度 $w=0.5x_0$）内的精确概率由对归一化稳态分布 $p_{\\mathrm{eq}}(x) = \\frac{1}{Z(\\nu,x_0)}p_{\\mathrm{unnorm}}(x)$ 积分得到：\n$$P_{\\mathrm{exact}} = \\int_{-w/2}^{w/2} p_{\\mathrm{eq}}(x) dx = \\frac{1}{Z(\\nu,x_0)} \\int_{-w/2}^{w/2} \\left(1+\\left(\\frac{x}{x_0}\\right)^2\\right)^{-\\nu} dx$$\n该积分使用高精度数值积分方法计算。\n\n经验概率 $P_{\\mathrm{emp}}$ 从模拟中估算。在丢弃预烧阶段后，我们总共得到 $N_{\\mathrm{samples}} = N_{\\mathrm{p}} \\times (N_{\\mathrm{steps}}-N_{\\mathrm{burn}})$ 个位置样本。$P_{\\mathrm{emp}}$ 是这些样本中落入区间 $[-w/2, w/2]$ 的分数。\n$$P_{\\mathrm{emp}} = \\frac{\\text{落入区间 } [-w/2, w/2] \\text{ 的样本数}}{N_{\\mathrm{samples}}}$$\n\n6. 相对误差\n\n对于每个测试案例，经验概率和精确概率之间的相对误差 $\\varepsilon$ 按下式计算：\n$$\\varepsilon = \\frac{|P_{\\mathrm{emp}}-P_{\\mathrm{exact}}|}{P_{\\mathrm{exact}}}$$\n将对三个指定的参数集计算此量。最终的实现将对每个案例执行这些步骤并报告所得误差。", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\nfrom scipy import special, integrate\n\ndef solve():\n    \"\"\"\n    Solves the Langevin dynamics problem for the three specified test cases.\n    It calculates the theoretical bin probability, runs a numerical simulation\n    to find the empirical probability, and computes the relative error.\n    \"\"\"\n    # Global simulation parameters\n    N_p = 5000\n    N_steps = 3000\n    N_burn = 500\n    seed = 12345\n\n    # Test suite: (a, x0, gamma, T)\n    test_cases = [\n        # Case A: Strong confinement (nu = 3.0)\n        (2.0, 1.0, 1.0, 2.0 / 3.0),\n        # Case B: Moderate confinement (nu = 1.0)\n        (2.0, 1.0, 1.0, 2.0),\n        # Case C: Near normalizability threshold (nu = 0.6)\n        (2.0, 1.0, 1.0, 10.0 / 3.0),\n    ]\n\n    results = []\n    for a, x0, gamma, T in test_cases:\n        # --- Task 2, 3, 5: Theoretical Calculation ---\n        beta = 1.0 / T\n        nu = beta * a\n        w = 0.5 * x0\n\n        # Normalization constant Z(nu, x0)\n        # Z = x0 * sqrt(pi) * Gamma(nu - 0.5) / Gamma(nu)\n        if nu = 0.5:\n            raise ValueError(f\"nu must be > 0.5 for normalizability, but got nu={nu}\")\n        \n        Z = x0 * np.sqrt(np.pi) * special.gamma(nu - 0.5) / special.gamma(nu)\n\n        # Unnormalized stationary distribution p_unnorm(x)\n        def p_unnorm(x_val):\n            return (1.0 + (x_val / x0)**2)**(-nu)\n\n        # Exact probability P_exact\n        # Computed via numerical quadrature to high accuracy\n        integral_val, quad_err = integrate.quad(p_unnorm, -w / 2.0, w / 2.0)\n        P_exact = integral_val / Z\n\n        # --- Task 1, 4, 5: Numerical Simulation ---\n        # SDE parameters\n        dt = 0.005 * (gamma * x0**2) / a\n        sigma = np.sqrt(2.0 * T / gamma)\n        \n        def mu(x_vec):\n            # Drift term mu(x)\n            return -(2.0 * a * x_vec) / (gamma * (x0**2 + x_vec**2))\n\n        # Initialize simulation state\n        rng = np.random.default_rng(seed)\n        x_particles = np.zeros(N_p, dtype=np.float64)\n        \n        num_samples_to_collect = (N_steps - N_burn) * N_p\n        all_samples = np.zeros(num_samples_to_collect, dtype=np.float64)\n        sample_idx = 0\n        \n        # Run simulation\n        for step in range(N_steps):\n            # Generate standard normal random variables\n            xi = rng.normal(size=N_p)\n            \n            # Update particle positions using Euler-Maruyama\n            x_particles += mu(x_particles) * dt + sigma * np.sqrt(dt) * xi\n            \n            # Collect samples after burn-in period\n            if step >= N_burn:\n                start = sample_idx\n                end = sample_idx + N_p\n                all_samples[start:end] = x_particles\n                sample_idx = end\n\n        # Empirical probability P_emp\n        N_in_bin = np.sum((all_samples >= -w / 2.0)  (all_samples = w / 2.0))\n        N_total = len(all_samples)\n        P_emp = N_in_bin / N_total\n\n        # --- Task 6: Relative Error ---\n        relative_error = np.abs(P_emp - P_exact) / P_exact\n        results.append(relative_error)\n\n    # Final print statement in the exact required format.\n    print(f\"[{','.join([f'{r:.6f}' for r in results])}]\")\n\nsolve()\n```", "id": "2406383"}, {"introduction": "最后，我们将挑战一个更前沿且物理上更引人入胜的系统，其中粒子的惯性质量 $m(x)$ 依赖于其自身的位置。这种情况打破了标准朗之万动力学的许多常规假设，要求我们从第一性原理出发，采用更严谨的方法。这个高级练习 [@problem_id:2406409] 要求你从拉格朗日形式出发，为位置依赖质量推导出正确的运动方程，并实现一个能保持系统内在结构的精密数值积分方案（如 BAOAB 算法）。通过这项实践，你将检验能量均分定理等基本概念在这些非标准系统中的适用性，从而深化对朗之万动力学理论基础的理解，并掌握为复杂系统构建稳定可靠的数值模拟方案的关键技能。", "problem": "一个质点在与恒温热库接触的一维空间中运动。该质点的惯性质量依赖于其位置，这在物理上源于质点穿过介质时的吸积效应。请仅从牛顿第二定律、具有位置依赖质量的一维质点的拉格朗日表述、动量的定义以及热浴中线性阻力的涨落-耗散原理出发，为该质点推导一个正确的欠阻尼朗之万动力学模型，并实现一个数值稳定且物理一致的时间步进算法。\n\n您必须遵循以下要求。\n\n1) 物理模型与基本出发点：\n- 从拉格朗日量 $L = \\tfrac{1}{2} m(x) \\, v^{2} - U(x)$ 开始，其中 $x$ 是位置， $v = dx/dt$ 是速度， $U(x)$ 是一个光滑势能。\n- 将保守运动方程扩展，使其包含来自绝对温度为 $T$ 的热浴的等温线性阻力 $- \\gamma \\, v$，以及一个满足涨落-耗散原理的、均值为零且具有 delta 相关性的高斯白噪声力。\n- 使用正则动量定义 $p = \\partial L / \\partial v$作为基本变量，以处理随机力，使得在位置固定的情况下，动量的更新是可加的。不得假定任何预先推导的“捷径式”随机积分器；算法必须根据所述的物理原理构建。\n\n2) 数值离散化要求：\n- 设计一种时间积分方案，该方案以数值稳定的方式对保守漂移、线性阻力和高斯噪声进行分裂或处理，并确保在固定位置时与涨落-耗散原理保持一致。您必须在解题方案中基于第一性原理来解释您所选择的算法。\n- 势能必须是谐振势，$U(x) = \\tfrac{1}{2} k \\, x^{2}$，其中 $k$ 是一个正常数。\n- 质量分布必须为 $m(x) = m_{0} \\bigl( 1 + \\alpha \\, x^{2} \\bigr)$，其中 $\\alpha \\ge 0$，以确保在所有位置质量都严格为正。\n- 使用玻尔兹曼常数 $k_{\\mathrm{B}} = 1$，因此温度 $T$ 直接以能量单位计量。下面要求的所有输出都是无量纲的。\n\n3) 可观测量与平衡检验：\n- 对于处于稳态的长时间遍历轨道，计算以下无量纲比率：\n  - 动能均分比率 $R_{k} = \\langle m(x) \\, v^{2} \\rangle / T$。在平衡状态下，正确的温控应得到 $R_{k} \\approx 1$，且该值不依赖于 $m(x)$。\n  - 谐振子坐标的构型比率 $R_{x} = k \\, \\langle x^{2} \\rangle / T$。对于恒定质量，平衡状态意味着 $R_{x} \\approx 1$。对于位置依赖质量，由于动量积分测度的改变，$x$ 的正则测度也随之改变，因此 $R_{x}$ 通常会偏离 1。\n\n4) 测试套件：\n实现您的程序以模拟以下三组参数集。所有参数集都使用下面指定的相同时间步长、总步数、预烧（burn-in）步数和采样步长。为确保可复现性，每组参数集必须使用给定的伪随机种子独立进行模拟。对驱动噪声使用单位方差的正态（高斯）分布，并使用所述的种子。\n\n- 每组参数集共享的积分器参数：\n  - 时间步长 $\\Delta t = 0.002$，\n  - 总步数 $N_{\\text{steps}} = 400{,}000$，\n  - 预烧步数 $N_{\\text{burn}} = 100{,}000$，\n  - 采样步长 $s = 5$ (在预烧后每 $s$ 步记录一次)。\n\n- 情况 A (基线，恒定质量)：\n  - $m_{0} = 1$, $\\alpha = 0$, $k = 1$, $\\gamma = 1$, $T = 1$, 种子 $= 12345$。\n\n- 情况 B (中度位置依赖)：\n  - $m_{0} = 1$, $\\alpha = 1$, $k = 1$, $\\gamma = 1$, $T = 1$, 种子 $= 23456$。\n\n- 情况 C (更强的位置依赖)：\n  - $m_{0} = 1$, $\\alpha = 4$, $k = 1$, $\\gamma = 1$, $T = 1$, 种子 $= 34567$。\n\n5) 要求的最终输出：\n- 对每种情况，计算上文定义的两个浮点数 $R_k$ 和 $R_x$，并均四舍五入到三位小数。\n- 您的程序应生成单行输出，其中包含结果，格式为逗号分隔的三个双元素列表，按 A、B、C 的顺序排列，即形式为 $[[R_{k}^{A},R_{x}^{A}],[R_{k}^{B},R_{x}^{B}],[R_{k}^{C},R_{x}^{C}]]$。\n- 不使用角度；所要求的输出中没有量纲单位，因为这些比率是无量纲的。\n\n您的实现必须是一个完整、可运行的程序，该程序执行模拟并以单行形式按上述确切格式打印聚合结果。不允许用户输入或使用外部文件。", "solution": "该问题要求为具有位置依赖质量的粒子推导并实现一个欠阻尼朗之万动力学积分器。推导必须从第一性原理——即拉格朗日表述和涨落-耗散定理——出发。\n\n**1. 运动方程的推导**\n\n我们从给定的一维粒子在势 $U(x)$ 中运动的拉格朗日量开始，该粒子具有位置依赖质量 $m(x)$：\n$$\nL(x, v) = \\frac{1}{2} m(x) v^2 - U(x)\n$$\n其中 $v = dx/dt$ 是速度。正则动量 $p$ 定义为：\n$$\np = \\frac{\\partial L}{\\partial v} = m(x)v\n$$\n保守运动方程由欧拉-拉格朗日方程给出：\n$$\n\\frac{d}{dt}\\left(\\frac{\\partial L}{\\partial v}\\right) - \\frac{\\partial L}{\\partial x} = 0\n$$\n计算拉格朗日量对空间的导数：\n$$\n\\frac{\\partial L}{\\partial x} = \\frac{1}{2} \\frac{dm}{dx} v^2 - \\frac{dU}{dx}\n$$\n将这些代入欧拉-拉格朗日方程，得到动量的变化率：\n$$\n\\frac{dp}{dt} = \\frac{1}{2} \\frac{dm}{dx} v^2 - \\frac{dU}{dx}\n$$\n项 $\\frac{1}{2}\\frac{dm}{dx}v^2$ 是一个由粒子惯性变化产生的有效力。将速度表示为 $v = p/m(x)$，该力就变得同时依赖于位置和动量。\n\n为模拟与温度为 $T$ 的热库的相互作用，我们引入一个线性阻力 $F_{\\text{drag}} = -\\gamma v$ 和一个随机热力 $\\xi(t)$。动量的完整运动方程是所有力的总和：\n$$\n\\frac{dp}{dt} = \\left(\\frac{1}{2} \\frac{dm}{dx} v^2 - \\frac{dU}{dx}\\right) - \\gamma v + \\xi(t)\n$$\n代入 $v=p/m(x)$，我们得到相空间 $(x, p)$ 中的随机微分方程组 (SDEs)：\n$$\n\\begin{cases}\n\\frac{dx}{dt} = \\frac{p}{m(x)} \\\\\n\\frac{dp}{dt} = - \\frac{dU}{dx} + \\frac{1}{2} \\frac{dm}{dx} \\left(\\frac{p}{m(x)}\\right)^2 - \\frac{\\gamma}{m(x)}p + \\xi(t)\n\\end{cases}\n$$\n热噪声 $\\xi(t)$ 是一个均值为零的高斯白噪声过程，$\\langle \\xi(t) \\rangle = 0$。涨落-耗散原理规定了其相关性，将噪声强度与耗散（阻力）和温度联系起来：\n$$\n\\langle \\xi(t) \\xi(t') \\rangle = 2\\gamma k_{\\mathrm{B}} T \\delta(t-t')\n$$\n根据给定的约定 $k_{\\mathrm{B}}=1$，这简化为 $\\langle \\xi(t) \\xi(t') \\rangle = 2\\gamma T \\delta(t-t')$.\n\n**2. 数值积分方案**\n\n为了对这些随机微分方程组进行积分，我们使用一种对称分裂方法，该方法能确保数值稳定性、保守部分的时间可逆性，以及在长时间模拟中对平衡分布的正确采样。一个合适的选择是 \"BAOAB\" 积分器，它将时间演化算符分裂为三个部分：\n- **B 部分（力）：** 由保守力和质量依赖力引起的动量更新。$\\dot{p} = -U'(x) + \\frac{p^2 m'(x)}{2m(x)^2}$。\n- **A 部分（漂移）：** 位置更新。$\\dot{x} = p/m(x)$。\n- **O 部分（温控器）：** 由阻力和噪声引起的动量更新。$dp = -\\frac{\\gamma p}{m(x)}dt + \\sqrt{2\\gamma T}dW_t$，其中 $dW_t$ 是维纳过程增量。\n\nO 步骤代表了动量的一个奥恩斯坦-乌伦贝克 (OU) 过程，此过程中假定位置 $x$ 是固定的。正如问题陈述所要求的，这个子问题可以在一个时间步长 $\\Delta t$ 内精确求解。其解为：\n$$\np(t+\\Delta t) = p(t) e^{-\\frac{\\gamma \\Delta t}{m(x)}} + \\sqrt{m(x)T \\left(1 - e^{-2\\frac{\\gamma \\Delta t}{m(x)}}\\right)} R\n$$\n其中 $R$ 是一个标准正态随机数，$R \\sim N(0,1)$。\n\nBAOAB 算法在一个时间步长 $\\Delta t$ 内对称地组合这些步骤，将系统从 $(x_n, p_n)$ 演化到 $(x_{n+1}, p_{n+1})$：\n\n1.  **B-步骤 ($\\Delta t/2$)：** 使用力项更新动量，步长为半个时间步。\n    $p^{(1)} = p_n + \\left[-U'(x_n) + \\frac{p_n^2 m'(x_n)}{2m(x_n)^2}\\right] \\frac{\\Delta t}{2}$\n2.  **A-步骤 ($\\Delta t/2$)：** 使用新的动量更新位置，步长为半个时间步。\n    $x^{(1)} = x_n + \\frac{p^{(1)}}{m(x_n)} \\frac{\\Delta t}{2}$\n3.  **O-步骤 ($\\Delta t$)：** 在中间点位置 $x^{(1)}$ 对动量应用精确的 OU 更新，步长为一个完整时间步。\n    $p^{(2)} = p^{(1)} e^{-\\frac{\\gamma \\Delta t}{m(x^{(1)})}} + \\sqrt{m(x^{(1)})T \\left(1 - e^{-2\\frac{\\gamma \\Delta t}{m(x^{(1)})}}\\right)} R_n$\n4.  **A-步骤 ($\\Delta t/2$)：** 再次更新位置，步长为半个时间步，以达到最终位置。\n    $x_{n+1} = x^{(1)} + \\frac{p^{(2)}}{m(x^{(1)})} \\frac{\\Delta t}{2}$\n5.  **B-步骤 ($\\Delta t/2$)：** 使用终态 $(x_{n+1}, p^{(2)})$ 处的力更新动量，步长为半个时间步。\n    $p_{n+1} = p^{(2)} + \\left[-U'(x_{n+1}) + \\frac{(p^{(2)})^2 m'(x_{n+1})}{2m(x_{n+1})^2}\\right] \\frac{\\Delta t}{2}$\n\n这种对称分解确保了该算法能正确采​​样正则相空间分布 $P(x,p) \\propto \\exp(-H(x,p)/T)$，其中 $H(x,p) = p^2/(2m(x)) + U(x)$，这对于获得正确的平衡平均值至关重要。\n\n**3. 可观测量与理论检验**\n\n该问题要求计算两个比率：$R_k = \\langle m(x) v^2 \\rangle / T$ 和 $R_x = k \\langle x^2 \\rangle / T$。\n- **动能均分比率 ($R_k$)：** 动能为 $E_k = \\frac{1}{2}m(x)v^2$。在某些情况下，这也被写作 $p^2/(2m(x))$。能量均分定理指出，对能量有贡献的每个二次自由度的平均值为 $T/2$。在这里，动能对应于动量中的单个二次自由度。平均动能为 $\\langle E_k \\rangle = \\frac{1}{2}T$。因此，$\\langle m(x)v^2 \\rangle = T$。所以，我们预期对于所有情况都有 $R_k = \\langle m(x) v^2 \\rangle / T \\approx 1$，这是对温控器正确性的一个关键检验。\n- **构型比率 ($R_x$)：** 位置 $x$ 的平衡概率分布是通过对整个相空间分布进行动量积分得到的：$P(x) \\propto \\sqrt{m(x)} \\exp(-U(x)/T)$。当质量恒定 ($\\alpha=0$) 时，该分布简化为标准的玻尔兹曼分布 $P(x) \\propto \\exp(-U(x)/T)$。对于谐振势 $U(x) = \\frac{1}{2}kx^2$，这导致 $\\langle x^2 \\rangle = T/k$，因此 $R_x = 1$。然而，当质量与位置相关 ($\\alpha  0$) 时，因子 $\\sqrt{m(x)} = \\sqrt{m_0(1+\\alpha x^2)}$ 会给予较大的 $|x|$ 值额外的权重，导致 $\\langle x^2 \\rangle$ 增加。因此，我们预期情况 B 和 C 的 $R_x  1$，且偏差随 $\\alpha$ 的增大而增大。\n\n本实现将使用 BAOAB 积分器模拟动力学过程，并在经过初始的预烧（burn-in）阶段以达到平衡后，计算长时间遍历轨道上 $m(x)v^2 = p^2/m(x)$ 和 $x^2$ 的时间平均值。", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Solves the Langevin dynamics problem for a particle with position-dependent mass.\n    \"\"\"\n    # Define the test cases from the problem statement.\n    # Each case is a dictionary of parameters.\n    test_cases = [\n        # Case A (baseline, constant mass)\n        {\"m0\": 1.0, \"alpha\": 0.0, \"k\": 1.0, \"gamma\": 1.0, \"T\": 1.0, \"seed\": 12345},\n        # Case B (moderate position dependence)\n        {\"m0\": 1.0, \"alpha\": 1.0, \"k\": 1.0, \"gamma\": 1.0, \"T\": 1.0, \"seed\": 23456},\n        # Case C (stronger position dependence)\n        {\"m0\": 1.0, \"alpha\": 4.0, \"k\": 1.0, \"gamma\": 1.0, \"T\": 1.0, \"seed\": 34567},\n    ]\n\n    # Shared integrator parameters\n    dt = 0.002\n    n_steps = 400000\n    n_burn = 100000\n    stride = 5\n    \n    results = []\n\n    for case in test_cases:\n        m0, alpha, k, gamma, T, seed = case.values()\n        \n        # Set up the random number generator for reproducibility\n        rng = np.random.default_rng(seed)\n\n        # Define model-specific functions\n        def get_mass(x_val):\n            return m0 * (1.0 + alpha * x_val**2)\n\n        def get_force(x_val, p_val):\n            # F = -U'(x) + (1/2) * m'(x) * v^2\n            #   = -k*x + m0*alpha*x * (p/m(x))^2\n            m_val = get_mass(x_val)\n            force_conservative = -k * x_val\n            # The effective force due to position-dependent mass must be included.\n            if alpha == 0.0:\n                 return force_conservative\n            force_mass_dep = m0 * alpha * x_val * (p_val / m_val)**2\n            return force_conservative + force_mass_dep\n\n        # Initial conditions\n        x = 0.0\n        p = 0.0\n\n        # Accumulators for observables\n        sum_p2_over_m = 0.0\n        sum_x2 = 0.0\n        n_samples = 0\n\n        # Main simulation loop using the BAOAB integrator\n        for step in range(n_steps):\n            # B-step (half): Update momentum with force for dt/2\n            p_half_B = p + get_force(x, p) * dt / 2.0\n            \n            # A-step (half): Update position for dt/2\n            x_mid = x + (p_half_B / get_mass(x)) * dt / 2.0\n            \n            # O-step (full): Apply thermostat update to momentum\n            m_mid = get_mass(x_mid)\n            c1 = np.exp(-gamma * dt / m_mid)\n            c2 = np.sqrt(T * m_mid * (1.0 - c1**2))\n            p_after_O = c1 * p_half_B + c2 * rng.normal()\n            \n            # A-step (half): Update position for another dt/2\n            x_final = x_mid + (p_after_O / get_mass(x_mid)) * dt / 2.0\n            \n            # B-step (half): Update momentum with force at final position for dt/2\n            p_final = p_after_O + get_force(x_final, p_after_O) * dt / 2.0\n\n            # Update state for the next iteration\n            x, p = x_final, p_final\n            \n            # Sampling after burn-in period\n            if step >= n_burn and (step - n_burn) % stride == 0:\n                current_mass = get_mass(x)\n                sum_p2_over_m += p**2 / current_mass  # This is m(x)v^2\n                sum_x2 += x**2\n                n_samples += 1\n\n        # Calculate final averages and dimensionless ratios\n        avg_mv2 = sum_p2_over_m / n_samples\n        avg_x2 = sum_x2 / n_samples\n        \n        Rk = avg_mv2 / T\n        Rx = k * avg_x2 / T\n        \n        results.append([round(Rk, 3), round(Rx, 3)])\n\n    # Format the final output string as specified\n    formatted_results = [f\"[{r[0]},{r[1]}]\" for r in results]\n    print(f\"[{','.join(formatted_results)}]\")\n\nsolve()\n```", "id": "2406409"}]}