{"hands_on_practices": [{"introduction": "有限元方法的核心在于组装过程——将各个局部单元的贡献系统性地累加到全局系统中。本练习旨在帮助你建立对这一映射过程的坚实直觉。通过使用特意打乱的节点编号，它迫使你超越简单的编号模式，真正掌握适用于任何复杂非结构化网格的基本组装逻辑。[@problem_id:2393853]", "problem": "考虑一个稳态一维热传导问题，对象是一根导热系数 $k$ 和横截面积 $A$ 均为常数的直棱柱杆。杆内无内部热源。使用标准Galerkin有限元法和线性Lagrange形函数，将该杆离散化为4个单元和5个全局节点。全局节点标识符及其沿杆的位置如下：\n- 节点 $42$：$x=0.00 \\ \\mathrm{m}$\n- 节点 $7$：$x=0.35 \\ \\mathrm{m}$\n- 节点 $13$：$x=0.50 \\ \\mathrm{m}$\n- 节点 $5$：$x=0.90 \\ \\mathrm{m}$\n- 节点 $21$：$x=1.20 \\ \\mathrm{m}$\n\n单元连接关系被故意打乱，由以下双节点单元列表给出（第一节点，第二节点）：\n- 单元 $17$：$(42,7)$\n- 单元 $100$：$(13,7)$\n- 单元 $9$：$(13,5)$\n- 单元 $23$：$(21,5)$\n\n请为该无约束系统（即在施加任何边界条件之前）组装全局刚度矩阵。全局刚度矩阵的行和列需按照节点标识符序列 $(5, \\ 42, \\ 13, \\ 21, \\ 7)$ 进行排序。\n\n材料和几何属性如下：\n- 导热系数 $k = 180 \\ \\mathrm{W \\, m^{-1} \\, K^{-1}}$\n- 横截面积 $A = 2.0 \\times 10^{-3} \\ \\mathrm{m^{2}}$\n\n在组装的全局刚度矩阵中，与全局节点标识符 $13$ 相关联的对角元的值是多少？答案以 $\\mathrm{W \\, K^{-1}}$ 为单位，并四舍五入至4位有效数字。", "solution": "对于导热系数 $k$ 和横截面积 $A$ 均为常数且无内部热源的棱柱杆中的稳态一维热传导，其控制微分方程为\n$$\n-\\frac{\\mathrm{d}}{\\mathrm{d}x}\\!\\left(k A \\, \\frac{\\mathrm{d}T}{\\mathrm{d}x}\\right) \\,=\\, 0.\n$$\n对于长度为 $L_{e}$ 的双节点单元，使用标准Galerkin有限元法和线性Lagrange形函数，可得到单元刚度矩阵\n$$\n\\mathbf{K}^{(e)} \\,=\\, \\int_{0}^{L_{e}} k A \\, \\left(\\frac{\\mathrm{d}\\mathbf{N}}{\\mathrm{d}x}\\right)^{\\!\\top} \\left(\\frac{\\mathrm{d}\\mathbf{N}}{\\mathrm{d}x}\\right) \\, \\mathrm{d}x,\n$$\n其中 $\\mathbf{N} = \\begin{bmatrix} N_{1}  N_{2} \\end{bmatrix}$ 是线性形函数。对于线性双节点单元，其导数在单元上为常数，$\\frac{\\mathrm{d}N_{1}}{\\mathrm{d}x} = -\\frac{1}{L_{e}}$ 和 $\\frac{\\mathrm{d}N_{2}}{\\mathrm{d}x} = \\frac{1}{L_{e}}$，所以\n$$\n\\mathbf{K}^{(e)} \\,=\\, k A \\int_{0}^{L_{e}} \n\\begin{bmatrix}\n\\frac{1}{L_{e}^{2}}  -\\frac{1}{L_{e}^{2}} \\\\\n-\\frac{1}{L_{e}^{2}}  \\frac{1}{L_{e}^{2}}\n\\end{bmatrix}\n\\mathrm{d}x\n\\,=\\, \\frac{k A}{L_{e}} \\begin{bmatrix} 1  -1 \\\\ -1  1 \\end{bmatrix}.\n$$\n\n因此，每个单元为其两个关联节点的对角元贡献 $\\frac{k A}{L_{e}}$，并为相应的非对角耦合项贡献 $-\\frac{k A}{L_{e}}$。与某一特定全局节点相关联的全局刚度矩阵的对角元，是所有与该节点相连的单元的对角贡献之和。\n\n我们首先根据给定的节点坐标计算单元长度：\n- 单元 $17$ 连接节点 $(42, 7)$，其坐标分别为 $x=0.00 \\ \\mathrm{m}$ 和 $x=0.35 \\ \\mathrm{m}$，因此 $L_{17} = |0.35 - 0.00| = 0.35 \\ \\mathrm{m}$。\n- 单元 $100$ 连接节点 $(13, 7)$，其坐标分别为 $x=0.50 \\ \\mathrm{m}$ 和 $x=0.35 \\ \\mathrm{m}$，因此 $L_{100} = |0.50 - 0.35| = 0.15 \\ \\mathrm{m}$。\n- 单元 $9$ 连接节点 $(13, 5)$，其坐标分别为 $x=0.50 \\ \\mathrm{m}$ 和 $x=0.90 \\ \\mathrm{m}$，因此 $L_{9} = |0.90 - 0.50| = 0.40 \\ \\mathrm{m}$。\n- 单元 $23$ 连接节点 $(21, 5)$，其坐标分别为 $x=1.20 \\ \\mathrm{m}$ 和 $x=0.90 \\ \\mathrm{m}$，因此 $L_{23} = |1.20 - 0.90| = 0.30 \\ \\mathrm{m}$。\n\n全局节点 $13$ 与单元 $100$ 和单元 $9$ 相连。因此，与节点 $13$ 相关联的全局刚度矩阵的对角元为\n$$\nK_{(13,13)} \\,=\\, \\frac{k A}{L_{100}} \\,+\\, \\frac{k A}{L_{9}}.\n$$\n\n代入给定的材料和几何属性 $k = 180 \\ \\mathrm{W \\, m^{-1} \\, K^{-1}}$ 和 $A = 2.0 \\times 10^{-3} \\ \\mathrm{m^{2}}$：\n$$\nk A \\,=\\, 180 \\times \\left(2.0 \\times 10^{-3}\\right) \\,=\\, 0.36 \\ \\mathrm{W \\, m \\, K^{-1}}.\n$$\n因此，\n$$\nK_{(13,13)} \\,=\\, 0.36 \\left(\\frac{1}{0.15} + \\frac{1}{0.40}\\right) \\ \\mathrm{W \\, K^{-1}}.\n$$\n计算长度的倒数：\n$$\n\\frac{1}{0.15} \\,=\\, \\frac{100}{15} \\,=\\, \\frac{20}{3} \\,=\\, 6.\\overline{6}, \n\\qquad\n\\frac{1}{0.40} \\,=\\, \\frac{10}{4} \\,=\\, \\frac{5}{2} \\,=\\, 2.5.\n$$\n因此，\n$$\nK_{(13,13)} \\,=\\, 0.36 \\left( \\frac{20}{3} + \\frac{5}{2} \\right) \\ \\mathrm{W \\, K^{-1}}\n\\,=\\, 0.36 \\left( \\frac{40}{6} + \\frac{15}{6} \\right) \\ \\mathrm{W \\, K^{-1}}\n\\,=\\, 0.36 \\left( \\frac{55}{6} \\right) \\ \\mathrm{W \\, K^{-1}}.\n$$\n进行乘法运算：\n$$\n0.36 \\times \\frac{55}{6}\n\\,=\\, 0.06 \\times 55\n\\,=\\, 3.3.\n$$\n\n因此，与全局节点 $13$ 相关联的对角元为\n$$\nK_{(13,13)} \\,=\\, 3.3 \\ \\mathrm{W \\, K^{-1}}.\n$$\n按要求四舍五入到4位有效数字，得到 $3.300 \\ \\mathrm{W \\, K^{-1}}$。", "answer": "$$\\boxed{3.300}$$", "id": "2393853"}, {"introduction": "一旦我们能够组装矩阵，下一步就是理解它能告诉我们关于物理系统的哪些信息。这个实践将探索刚度矩阵的数学特性（奇异性）与一个关键物理行为（系统不稳定或刚体运动）之间的深刻联系。通过确定使矩阵不可逆的条件，你将更深刻地体会到全局矩阵是如何蕴含系统静态稳定性的信息的。[@problem_id:2400444]", "problem": "一个一维小位移质量-弹簧链由三个具有平移自由度 $x_{1}$、$x_{2}$ 和 $x_{3}$ 的质点组装而成。线性弹簧按如下方式连接这些自由度：一个刚度为 $k_{0}=4$ N/m 的接地弹簧将 $x_{1}$ 连接到地面；一个刚度为 $k_{1}=5$ N/m 的质量间弹簧连接 $x_{1}$ 和 $x_{2}$；以及一个刚度为 $\\alpha$ N/m 的可调质量间弹簧连接 $x_{2}$ 和 $x_{3}$。$x_{3}$ 没有直接连接到地面的弹簧。在标准线性弹簧模型下，组装的全局刚度矩阵 $K(\\alpha)$ 通过 $f=K(\\alpha)\\,x$ 将节点力向量 $f$ 与位移向量 $x$ 联系起来，其中连接自由度 $i$ 和 $j$ 的刚度为 $k$ 的每个弹簧对 $K_{ii}$ 和 $K_{jj}$ 的贡献为 $+k$，对 $K_{ij}$ 和 $K_{ji}$ 的贡献为 $-k$；而连接自由度 $i$ 到地面的刚度为 $k$ 的弹簧对 $K_{ii}$ 的贡献为 $+k$。\n\n确定可调刚度 $\\alpha$ 的值，该值使得系统刚度矩阵 $K(\\alpha)$ 奇异（不可逆），这对应于存在至少一个不相连的、自由移动的自由度。以 N/m 为单位表示您的答案。提供精确值，无需四舍五入。", "solution": "对问题陈述进行验证。\n\n**步骤 1：提取已知条件**\n- 该系统是一个具有三个平移自由度（$x_{1}$、$x_{2}$ 和 $x_{3}$）的一维质量-弹簧链。\n- 一个刚度为 $k_{0}=4$ N/m 的接地弹簧将 $x_{1}$ 连接到地面。\n- 一个刚度为 $k_{1}=5$ N/m 的质量间弹簧连接 $x_{1}$ 和 $x_{2}$。\n- 一个刚度为 $\\alpha$ N/m 的可调质量间弹簧连接 $x_{2}$ 和 $x_{3}$。\n- $x_{3}$ 处没有接地弹簧。描述中也暗示 $x_{2}$ 处没有接地弹簧。\n- 控制方程为 $f=K(\\alpha)\\,x$，其中 $f$ 是节点力向量，$x$ 是位移向量，$K(\\alpha)$ 是全局刚度矩阵。\n- 给出了刚度矩阵 $K$ 的组装规则：\n    - 连接自由度 $i$ 和 $j$ 的刚度为 $k$ 的弹簧对对角项 $K_{ii}$ 和 $K_{jj}$ 的贡献为 $+k$，对非对角项 $K_{ij}$ 和 $K_{ji}$ 的贡献为 $-k$。\n    - 连接自由度 $i$ 到地面的刚度为 $k$ 的弹簧对对角项 $K_{ii}$ 的贡献为 $+k$。\n- 目标是找到使矩阵 $K(\\alpha)$ 奇异（不可逆）的 $\\alpha$ 值。\n\n**步骤 2：使用提取的已知条件进行验证**\n- **科学依据：** 该问题基于线性弹性和结构力学的基本原理，特别是离散质量-弹簧系统的分析。从单个单元贡献组装全局刚度矩阵是计算力学和有限元法中的标准程序。\n- **适定性：** 该问题在数学上是适定的。系统的组件和连接性有明确定义，构造矩阵的规则是明确的，奇异性条件（$\\det(K)=0$）为找到唯一解提供了清晰的路径。\n- **客观性：** 问题以精确、客观的语言陈述，没有歧义或主观因素。\n\n**步骤 3：结论与行动**\n该问题被认为是有效的，因为它科学上合理、适定且客观。将制定解决方案。\n\n第一步是为自由度 $x_1$、$x_2$ 和 $x_3$ 构建 $3 \\times 3$ 的全局刚度矩阵 $K(\\alpha)$。我们应用给定的组装规则。\n\n对角项 $K_{ii}$ 是连接到自由度 $i$ 的所有弹簧的刚度总和。\n- 对于 $x_1$：连接的弹簧是接地弹簧 $k_0$ 和质量间弹簧 $k_1$。\n$$K_{11} = k_{0} + k_{1} = 4 + 5 = 9$$\n- 对于 $x_2$：连接的弹簧是质量间弹簧 $k_1$ 和可调弹簧 $\\alpha$。\n$$K_{22} = k_{1} + \\alpha = 5 + \\alpha$$\n- 对于 $x_3$：唯一连接的弹簧是可调弹簧 $\\alpha$。\n$$K_{33} = \\alpha$$\n\n非对角项 $K_{ij}$ ($i \\neq j$) 等于连接自由度 $i$ 和 $j$ 的弹簧刚度的负值。如果没有弹簧直接连接它们，则该项为零。\n- 对于 $x_1$ 和 $x_2$ 之间的连接：\n$$K_{12} = K_{21} = -k_{1} = -5$$\n- 对于 $x_2$ 和 $x_3$ 之间的连接：\n$$K_{23} = K_{32} = -\\alpha$$\n- 对于 $x_1$ 和 $x_3$ 之间的连接：没有直接的弹簧。\n$$K_{13} = K_{31} = 0$$\n\n将这些分量组装起来，得到全局刚度矩阵 $K(\\alpha)$：\n$$\nK(\\alpha) = \\begin{pmatrix}\nk_0+k_1  -k_1  0 \\\\\n-k_1  k_1+\\alpha  -\\alpha \\\\\n0  -\\alpha  \\alpha\n\\end{pmatrix}\n=\n\\begin{pmatrix}\n9  -5  0 \\\\\n-5  5+\\alpha  -\\alpha \\\\\n0  -\\alpha  \\alpha\n\\end{pmatrix}\n$$\n一个矩阵是奇异的当且仅当其行列式为零。因此，我们必须对参数 $\\alpha$ 求解方程 $\\det(K(\\alpha)) = 0$。\n\n我们计算行列式，例如，沿第一行进行代数余子式展开：\n$$\n\\det(K(\\alpha)) =\n9 \\cdot \\begin{vmatrix} 5+\\alpha  -\\alpha \\\\ -\\alpha  \\alpha \\end{vmatrix}\n- (-5) \\cdot \\begin{vmatrix} -5  -\\alpha \\\\ 0  \\alpha \\end{vmatrix}\n+ 0 \\cdot \\begin{vmatrix} -5  5+\\alpha \\\\ 0  -\\alpha \\end{vmatrix}\n$$\n计算 $2 \\times 2$ 行列式：\n$$\n\\det(K(\\alpha)) = 9 [(\\alpha)(5+\\alpha) - (-\\alpha)(-\\alpha)] + 5 [(-5)(\\alpha) - (0)(-\\alpha)] + 0\n$$\n$$\n\\det(K(\\alpha)) = 9 [5\\alpha + \\alpha^2 - \\alpha^2] + 5 [-5\\alpha]\n$$\n$$\n\\det(K(\\alpha)) = 9(5\\alpha) - 25\\alpha\n$$\n$$\n\\det(K(\\alpha)) = 45\\alpha - 25\\alpha\n$$\n$$\n\\det(K(\\alpha)) = 20\\alpha\n$$\n奇异性的条件是 $\\det(K(\\alpha))=0$，这导致方程：\n$$\n20\\alpha = 0\n$$\n解是：\n$$\n\\alpha = 0\n$$\n这个结果具有物理意义。问题陈述中提到，奇异刚度矩阵对应于“不相连的、自由移动的自由度”，这也被称为刚体模态。如果 $\\alpha=0$，连接自由度 $x_2$ 和 $x_3$ 的弹簧刚度为零，意味着它实际上被移除了。因此，$x_3$ 处的质量不再与系统中任何固定于地面的部分相连。它可以进行任意平移而没有任何恢复力。这是一种刚体模态，系统的势能相对于位移 $x_3$ 是不变的。要存在这种模态，刚度矩阵必须是奇异的。$\\alpha=0$ 这个值恰好创造了这种物理情况。所需的可调刚度值为 $0$ N/m。", "answer": "$$\\boxed{0}$$", "id": "2400444"}, {"introduction": "手动组装虽然富有启发性，但现实世界的问题可能涉及数百万个单元，这使得密集矩阵的存储变得不切实际。这个编程实践介绍了稀疏矩阵这一至关重要的概念，特别是压缩稀疏行（Compressed Sparse Row, CSR）格式，它是高效有限元方法的标准。通过使用稀疏数据结构实现组装过程，并将其内存使用量与密集矩阵进行比较，你将掌握高性能科学计算的一个基石。[@problem_id:2374280]", "problem": "您的任务是编写一个程序，使用有限元法为一维泊松问题组装全局刚度矩阵，将其以压缩稀疏行 (CSR) 格式存储，并将其内存占用与密集矩阵进行比较。您的程序必须从第一性原理实现组装过程，并且不得分配密集矩阵。所有计算都是纯粹的数学和逻辑运算，不涉及物理单位。请使用以下基础理论。\n\n从区间 $[0,L]$ 上的一维泊松方程的强形式开始，其两端具有齐次狄利克雷边界条件：\n$$\n- \\frac{d^2 u}{dx^2} = f(x), \\quad x \\in (0,L), \\quad u(0) = 0, \\quad u(L) = 0.\n$$\n在具有 $E$ 个单元的均匀网格上，使用标准有限元法和分段线性基函数。对于节点位于 $x_e$ 和 $x_{e+1}$ 的单个单元，其弱形式通过乘以一个测试函数并进行分部积分得到，从而产生一个涉及每个单元上线性形函数 $N_i$ 梯度 $\\frac{dN_i}{dx}$ 的表达式。全局刚度矩阵通过根据单元连接性对局部贡献求和来组装。您的算法必须通过用单位贡献覆盖受约束的行和列来施加齐次狄利克雷边界条件。\n\n您必须对组装后的矩阵使用压缩稀疏行 (CSR) 格式。在 CSR 格式中，非零值数组有 $N_{nz}$ 个浮点数条目，列索引数组有 $N_{nz}$ 个整数条目，行指针数组有 $n+1$ 个整数条目，其中 $n$ 是全局自由度的数量。假设使用以下存储模型：\n- 值存储为 $64$ 位浮点数。\n- 列索引和行指针存储为 $32$ 位整数。\n- 内存应以字节为单位报告。\n\n对于密集矩阵的比较，不要实际分配密集矩阵。而是将其内存计算为 $8 \\times n^2$ 字节，对应一个由 $64$ 位浮点数组成的 $n \\times n$ 数组。对于 CSR 矩阵，将其内存计算为 $8 \\times N_{nz} + 4 \\times N_{nz} + 4 \\times (n+1)$ 字节。\n\n实现以下测试套件。在每种情况下，按照指定的方式以 CSR 格式组装全局刚度矩阵，计算 CSR 内存（以字节为单位），根据指定公式计算密集内存（以字节为单位），并返回 CSR 内存与密集内存之比，结果为四舍五入到 $6$ 位小数的浮点数。\n\n- 测试用例 1 (正常路径): 长度为 $L = 1$ 的一维域， $E = 5$ 个线性单元，两端为齐次狄利克雷边界条件。节点数为 $n = E + 1 = 6$。\n- 测试用例 2 (边界小系统): $L = 1$, $E = 1$，两端为齐次狄利克雷边界条件。节点数为 $n = E + 1 = 2$。\n- 测试用例 3 (周期性连接边界): $L = 1$, $E = 100$ 个单元，采用周期性边界条件，形成环形拓扑。在此处的周期性边界条件下，节点数等于单元数，即 $n = E = 100$，并且单元连接性是环绕的，使得节点 $n-1$ 连接回节点 $0$。\n- 测试用例 4 (规模性): $L = 1$, $E = 5000$，两端为齐次狄利克雷边界条件。节点数为 $n = E + 1 = 5001$。\n\n您的程序应生成单行输出，其中包含用方括号括起来的逗号分隔列表形式的结果，例如，「[r1,r2,r3,r4]」。每个 $r_k$ 必须是测试用例 $k$ 的 CSR 内存与密集内存之比，四舍五入到 $6$ 位小数。不应打印其他任何文本。\n\n其他实现细节和约束：\n- 直接从带有线性形函数的有限元弱形式组装单元刚度矩阵。使用均匀网格，因此每个单元具有相同的长度 $h = L / E$。\n- 对于齐次狄利克雷边界条件，通过将相应行和列清零，然后将这些节点处的对角线元素设置为 $1$ 来施加。\n- 对于周期性边界条件，不施加任何狄利克雷约束；而是环绕连接性，使得对于 $e \\in \\{0,1,\\dots,E-1\\}$，单元 $e$ 连接节点 $(e, (e+1) \\bmod n)$。\n- 测试套件的最终输出必须是指定的单行格式，每个比率四舍五入到 $6$ 位小数。", "solution": "用户提供的问题陈述已被评估并被认为是有效的。它在科学上基于计算物理学的原理，特别是用于求解偏微分方程的有限元法 (FEM)。该问题是适定的、客观的，并且包含推导出唯一解所需的所有必要信息。关于边界条件和内存计算的说明是精确且无歧义的。\n\n任务是为一维泊松方程组装全局刚度矩阵，并比较稀疏表示（压缩稀疏行，CSR）与密集表示的内存存储需求。分析从第一性原理出发，过程如下。\n\n控制方程的强形式如下：\n$$\n- \\frac{d^2 u}{dx^2} = f(x), \\quad x \\in (0,L), \\quad u(0) = 0, \\quad u(L) = 0\n$$\n为了获得弱形式，我们乘以一个满足相同齐次边界条件（即 $v(0)=0, v(L)=0$）的任意测试函数 $v(x)$，并在域 $\\Omega = [0, L]$ 上积分：\n$$\n- \\int_0^L v \\frac{d^2 u}{dx^2} dx = \\int_0^L v f(x) dx\n$$\n对左侧项应用分部积分得到：\n$$\n\\int_0^L \\frac{dv}{dx} \\frac{du}{dx} dx - \\left[ v \\frac{du}{dx} \\right]_0^L = \\int_0^L v f(x) dx\n$$\n边界项 $\\left[ v \\frac{du}{dx} \\right]_0^L$ 为零，因为测试函数 $v(x)$ 在 $x=0$ 和 $x=L$ 处为零。得到的弱形式是：寻找 $u(x)$，使得对于所有有效的测试函数 $v(x)$，\n$$\n\\int_0^L \\frac{dv}{dx} \\frac{du}{dx} dx = \\int_0^L v f(x) dx\n$$\n\n在有限元法中，域被离散化为 $E$ 个单元。对于均匀网格，每个单元的长度为 $h = L/E$。在每个单元内，解 $u(x)$ 和测试函数 $v(x)$ 通过基函数 $N_i(x)$ 的线性组合来近似。我们使用分段线性的“帽子”函数。近似值为 $u_h(x) = \\sum_{j=0}^{n-1} u_j N_j(x)$ 和 $v_h(x) = \\sum_{i=0}^{n-1} v_i N_i(x)$，其中 $n$ 是节点数，$u_j$ 是解的未知节点值。\n\n将这些近似值代入弱形式，得到一个线性方程组 $KU=F$，其中 $K$ 是全局刚度矩阵，$U$ 是未知节点值向量，$F$ 是载荷向量。刚度矩阵的元素由下式给出：\n$$\nK_{ij} = \\int_0^L \\frac{dN_i}{dx} \\frac{dN_j}{dx} dx\n$$\n这个全局积分是通过对每个单元的贡献求和来计算的。在从 $x_e$ 延伸到 $x_{e+1}$ 的单个单元 $e$ 上，单元刚度矩阵 $K^e$ 是一个 $2 \\times 2$ 的矩阵。在归一化坐标 $\\xi = (x - x_e)/h \\in [0, 1]$ 中，局部基函数为 $N_1^e(\\xi) = 1-\\xi$ 和 $N_2^e(\\xi) = \\xi$。它们相对于 $x$ 的导数是 $\\frac{dN_1^e}{dx} = -\\frac{1}{h}$ 和 $\\frac{dN_2^e}{dx} = \\frac{1}{h}$。单元刚度矩阵的元素为：\n$$\nK^e_{ab} = \\int_{x_e}^{x_{e+1}} \\frac{dN_a^e}{dx} \\frac{dN_b^e}{dx} dx = \\int_0^1 \\left(\\frac{dN_a^e}{d\\xi}\\frac{d\\xi}{dx}\\right) \\left(\\frac{dN_b^e}{d\\xi}\\frac{d\\xi}{dx}\\right) h d\\xi\n$$\n由于 $\\frac{d\\xi}{dx} = \\frac{1}{h}$，上式简化为：\n$$\nK^e_{ab} = \\frac{1}{h} \\int_0^1 \\frac{dN_a^e}{d\\xi} \\frac{dN_b^e}{d\\xi} d\\xi\n$$\n为 $a,b \\in \\{1,2\\}$ 计算此式，可得单元刚度矩阵：\n$$\nK^e = \\frac{1}{h} \\begin{pmatrix} 1  -1 \\\\ -1  1 \\end{pmatrix}\n$$\n全局刚度矩阵 $K$ 是通过遍历所有单元并将每个 $K^e$ 加到相应的全局自由度上组装而成的。为避免分配一个完整的 $n \\times n$ 密集矩阵，我们可以使用字典（或坐标格式，COO）来仅存储非零项。对于连接全局节点 $i$ 和 $j$ 的每个单元 $e$，$K^e$ 的元素被添加到字典中的全局位置 $(i,i), (i,j), (j,i), (j,j)$。\n\n然后施加边界条件。\n对于节点 $i_{bc}$ 处的齐次狄利克雷条件，指定的过程是将矩阵中相应的行和列清零，并将对角线元素设置为 $1$。这通过过滤 COO 字典以移除任何满足 $r=i_{bc}$ 或 $c=i_{bc}$ 的条目 $(r, c)$，然后插入值为 $1.0$ 的条目 $(i_{bc}, i_{bc})$ 来实现。\n\n对于具有 $E$ 个单元的域上的周期性边界条件，节点数为 $n=E$。连接性是环绕的，因此单元 $E-1$ 连接节点 $E-1$ 和节点 $0$。这会在矩阵的角落添加非零项，特别是在 $K_{0, n-1}$ 和 $K_{n-1, 0}$ 位置。不施加狄利克雷约束。\n\n在组装和施加边界条件之后，我们得到一组最终的非零项。设 $N_{nz}$ 为非零项的数量，$n$ 为全局自由度的数量。CSR 和密集格式的内存占用根据问题的存储模型计算：\n- CSR 内存: M_{CSR} = $8 \\times N_{nz}$ (值) + $4 \\times N_{nz}$ (列索引) + $4 \\times (n+1)$ (行指针)\n- 密集内存: M_{dense} = $8 \\times n^2$\n\n最终结果是比率 $M_{CSR} / M_{dense}$。\n\n这个系统性的、基于原理的过程允许直接构建所需的稀疏矩阵数据，并对每个测试用例进行后续的内存分析，而无需实例化密集矩阵。", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\nfrom collections import defaultdict\n\ndef solve():\n    \"\"\"\n    Main solver function that runs through the test cases,\n    calculates the memory ratio for each, and prints the results.\n    \"\"\"\n\n    def calculate_memory_ratio(L, E, bc_type):\n        \"\"\"\n        Assembles the global stiffness matrix in a sparse format,\n        calculates memory for CSR and dense storage, and returns the ratio.\n\n        Args:\n            L (float): Length of the 1D domain.\n            E (int): Number of elements.\n            bc_type (str): Type of boundary condition ('dirichlet' or 'periodic').\n\n        Returns:\n            float: The ratio of CSR memory to dense memory, rounded to 6 decimal places.\n        \"\"\"\n        h = L / E\n        k_elem = (1.0 / h) * np.array([[1.0, -1.0], [-1.0, 1.0]], dtype=np.float64)\n\n        coo_matrix = defaultdict(float)\n\n        if bc_type == 'dirichlet':\n            n = E + 1\n            # Assemble the full matrix first (conceptually, in COO format)\n            for e in range(E):\n                nodes = (e, e + 1)\n                for i in range(2):\n                    for j in range(2):\n                        row, col = nodes[i], nodes[j]\n                        coo_matrix[(row, col)] += k_elem[i, j]\n\n            # Apply homogeneous Dirichlet boundary conditions\n            final_coo = {}\n            boundary_nodes = {0, n - 1}\n            for (r, c), v in coo_matrix.items():\n                if r not in boundary_nodes and c not in boundary_nodes:\n                    final_coo[(r, c)] = v\n            \n            # Set identity on boundary nodes\n            final_coo[(0, 0)] = 1.0\n            final_coo[(n - 1, n - 1)] = 1.0\n            \n            N_nz = len(final_coo)\n\n        elif bc_type == 'periodic':\n            n = E\n            for e in range(E):\n                nodes = (e, (e + 1) % n)\n                for i in range(2):\n                    for j in range(2):\n                        row, col = nodes[i], nodes[j]\n                        coo_matrix[(row, col)] += k_elem[i, j]\n            \n            N_nz = len(coo_matrix)\n        \n        else:\n            raise ValueError(\"Unknown boundary condition type\")\n\n        # Memory calculation based on the problem specification\n        # Values: 64-bit float (8 bytes)\n        # Indices/Pointers: 32-bit int (4 bytes)\n        csr_memory = 8 * N_nz + 4 * N_nz + 4 * (n + 1)\n        dense_memory = 8 * (n ** 2)\n        \n        if dense_memory == 0:\n            return 0.0\n\n        ratio = csr_memory / dense_memory\n        return round(ratio, 6)\n\n    # Define the test cases from the problem statement.\n    test_cases = [\n        # (L, E, bc_type)\n        (1.0, 5, 'dirichlet'),      # Test case 1\n        (1.0, 1, 'dirichlet'),      # Test case 2\n        (1.0, 100, 'periodic'),     # Test case 3\n        (1.0, 5000, 'dirichlet'),   # Test case 4\n    ]\n\n    results = []\n    for case in test_cases:\n        L, E, bc_type = case\n        result = calculate_memory_ratio(L, E, bc_type)\n        results.append(f\"{result:.6f}\")\n\n    # Final print statement in the exact required format.\n    print(f\"[{','.join(results)}]\")\n\nsolve()\n```", "id": "2374280"}]}