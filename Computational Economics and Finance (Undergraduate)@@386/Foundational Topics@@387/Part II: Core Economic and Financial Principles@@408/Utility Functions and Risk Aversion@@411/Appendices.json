{"hands_on_practices": [{"introduction": "Economic models often contain abstract parameters like the coefficient of risk aversion, $\\gamma$. A crucial skill is learning to estimate these parameters from observable data. This first practice [@problem_id:2445855] provides a direct application of this principle, using the celebrated Merton portfolio model to infer an investor's implied risk aversion from a single key decision: their portfolio allocation between a risky and a risk-free asset.", "id": "2445855", "problem": "An investor allocates a constant fraction of wealth to the Standard and Poor's (S&amp;P) $500$ index and the remainder to a risk-free money market account. The investor has constant relative risk aversion (CRRA) preferences over terminal wealth with utility $U(W) = \\frac{W^{1-\\gamma}}{1-\\gamma}$ for $\\gamma &gt; 0$, $\\gamma \\neq 1$. The S&amp;P $500$ index price $S_t$ follows a Geometric Brownian Motion (GBM) given by $\\mathrm{d}S_t/S_t = \\mu \\,\\mathrm{d}t + \\sigma \\,\\mathrm{d}B_t$, where $\\mu$ and $\\sigma$ are constants and $B_t$ is a standard Brownian motion. The risk-free rate is a constant $r$. The investor maintains a constant portfolio weight $\\omega$ in the S&amp;P $500$ at all times over the horizon $[0,T]$, investing $1-\\omega$ in the risk-free asset.\n\nYou observe that $\\omega = 0.60$. Assume the annualized parameters are $\\mu = 0.07$, $\\sigma = 0.20$, and $r = 0.02$, all expressed in per-year units. Under the maintained assumptions, infer the investorâ€™s implied coefficient of relative risk aversion $\\gamma$. Round your answer to three significant figures.", "solution": "The problem requires the inference of the coefficient of relative risk aversion, $\\gamma$, from an investor's observed optimal portfolio allocation. We begin by validating the problem statement.\n\nStep 1: Extract Givens.\n- Investor utility function: $U(W) = \\frac{W^{1-\\gamma}}{1-\\gamma}$ for $\\gamma > 0$, $\\gamma \\neq 1$. This is a constant relative risk aversion (CRRA) utility function.\n- Risky asset (S&P 500) price dynamics: $\\frac{\\mathrm{d}S_t}{S_t} = \\mu \\,\\mathrm{d}t + \\sigma \\,\\mathrm{d}B_t$.\n- Risk-free asset return rate: constant $r$.\n- Portfolio allocation: A constant fraction $\\omega$ is invested in the risky asset, and $1-\\omega$ in the risk-free asset.\n- Observed and given parameters:\n  - $\\omega = 0.60$\n  - $\\mu = 0.07$ (annualized expected return of the risky asset)\n  - $\\sigma = 0.20$ (annualized volatility of the risky asset)\n  - $r = 0.02$ (annualized risk-free rate)\n  - Investment horizon: $[0,T]$.\n\nStep 2: Validate Using Extracted Givens.\nThe problem is scientifically grounded as it is a direct application of Merton's portfolio problem, a classical and fundamental topic in mathematical finance. It is well-posed, as a unique value for $\\gamma$ can be determined from the provided parameters and the established theoretical model. The problem is stated objectively with precise numerical values and functional forms. It is self-contained and free of contradictions. The parameter values provided are realistic for financial markets. Therefore, the problem is deemed valid and a solution may be constructed.\n\nStep 3: Proceed with Solution.\nThe investor's objective is to maximize the expected utility of terminal wealth, $E[U(W_T)]$. For an investor with a CRRA utility function operating in a market with a single risky asset following a Geometric Brownian Motion and a constant risk-free rate, the optimal proportion of wealth to allocate to the risky asset, $\\omega^*$, is constant over time. This is a standard result from Merton's portfolio theory.\n\nLet $W_t$ be the investor's wealth at time $t$. The dynamics of the wealth process are determined by the returns on the portfolio components. The change in wealth, $dW_t$, is given by the sum of the returns from the risky and risk-free positions:\n$$ dW_t = (\\omega W_t) \\frac{dS_t}{S_t} + ((1-\\omega)W_t) r dt $$\nSubstituting the stochastic differential equation (SDE) for the risky asset, $\\frac{dS_t}{S_t} = \\mu dt + \\sigma dB_t$:\n$$ dW_t = \\omega W_t (\\mu dt + \\sigma dB_t) + (1-\\omega)W_t r dt $$\nWe can rearrange this by grouping the deterministic ($dt$) and stochastic ($dB_t$) terms:\n$$ dW_t = [\\omega \\mu + (1-\\omega)r] W_t dt + \\omega \\sigma W_t dB_t $$\nDividing by $W_t$ gives the SDE for the rate of return of the wealth portfolio:\n$$ \\frac{dW_t}{W_t} = [\\omega(\\mu - r) + r] dt + \\omega \\sigma dB_t $$\nThe solution to the optimization problem $\\max_{\\omega} E\\left[\\frac{W_T^{1-\\gamma}}{1-\\gamma}\\right]$ yields the optimal allocation $\\omega^*$. The coefficient of relative risk aversion for the given utility function is defined as $RRA(W) = - \\frac{W U''(W)}{U'(W)}$. For the specified utility function, $U'(W) = W^{-\\gamma}$ and $U''(W) = -\\gamma W^{-\\gamma-1}$, which gives $RRA(W) = - \\frac{W (-\\gamma W^{-\\gamma-1})}{W^{-\\gamma}} = \\gamma$.\n\nThe well-known Merton's ratio gives the optimal allocation as:\n$$ \\omega^* = \\frac{\\mu - r}{\\gamma \\sigma^2} $$\nHere, $\\mu - r$ is the market price of risk, or the equity risk premium. The term $\\gamma \\sigma^2$ is the product of the investor's risk aversion and the variance of the risky asset's returns.\n\nThe problem states that the investor maintains a constant allocation $\\omega = 0.60$. We equate this observed allocation to the investor's optimal allocation, so we set $\\omega^* = \\omega$. We are given the following parameter values:\n- $\\mu = 0.07$\n- $r = 0.02$\n- $\\sigma = 0.20$\n- $\\omega^* = 0.60$\n\nWe can now solve for the implied coefficient of relative risk aversion, $\\gamma$, by rearranging the formula for the optimal allocation:\n$$ \\gamma = \\frac{\\mu - r}{\\omega^* \\sigma^2} $$\nSubstituting the given numerical values into this expression:\n$$ \\gamma = \\frac{0.07 - 0.02}{0.60 \\times (0.20)^2} $$\nFirst, we compute the numerator and the terms in the denominator:\n- The equity risk premium: $\\mu - r = 0.05$.\n- The variance of the risky asset: $\\sigma^2 = (0.20)^2 = 0.04$.\n- The denominator product: $\\omega^* \\sigma^2 = 0.60 \\times 0.04 = 0.024$.\n\nNow, substitute these back into the expression for $\\gamma$:\n$$ \\gamma = \\frac{0.05}{0.024} $$\nTo compute the numerical value, we can express this as a fraction of integers:\n$$ \\gamma = \\frac{50}{24} = \\frac{25}{12} $$\nThis evaluates to approximately $2.08333...$. The problem requires the answer to be rounded to three significant figures.\n$$ \\gamma \\approx 2.08 $$\nThis value is a plausible measure of risk aversion.", "answer": "$$\n\\boxed{2.08}\n$$"}, {"introduction": "While inferring risk aversion from a single portfolio choice is insightful, a more robust approach uses multiple observations to account for decision noise. This practice [@problem_id:2445881] guides you through a foundational econometric method: estimating a utility parameter using Maximum Likelihood Estimation (MLE). By fitting a Constant Relative Risk Aversion (CRRA) utility function to a dataset of choices between lotteries, you will learn how to find the risk parameter $\\gamma$ that makes the observed behavior most probable.", "id": "2445881", "problem": "You are given a sequence of binary choices made by a single decision-maker between a certain payoff and a risky lottery, under the assumption that the decision-maker evaluates outcomes using a Constant Relative Risk Aversion (CRRA) power utility function. The utility of wealth is given by\n$$\nU(W) =\n\\begin{cases}\n\\dfrac{W^{1-\\gamma}}{1-\\gamma}, & \\gamma \\neq 1, \\\\\n\\log(W), & \\gamma = 1,\n\\end{cases}\n$$\nwhere $W$ is the payoff (assume $W$ is measured in the same monetary units across all tasks and that the initial wealth is $0$, so $W$ is the total wealth in each task), and $\\gamma$ is the risk aversion coefficient to be estimated. For each choice, the decision-maker selects between a certain payoff $S$ and a risky lottery that pays $x_h$ with probability $p$ and $x_\\ell$ with probability $1-p$, with $x_h > 0$, $x_\\ell > 0$, $S > 0$, and $p \\in (0,1)$ given in decimal form. Assume a binary response model in which the probability of choosing the risky lottery is\n$$\nP_{\\text{risky}}(\\gamma) = \\frac{1}{1+\\exp\\left(-\\lambda \\cdot \\Delta(\\gamma)\\right)},\n$$\nwhere\n$$\n\\Delta(\\gamma) = \\left[p \\cdot U(x_h) + (1-p)\\cdot U(x_\\ell)\\right] - U(S),\n$$\nand $\\lambda > 0$ is a given sensitivity parameter. The observed choice for each task is denoted by $c \\in \\{0,1\\}$, where $c=1$ indicates the risky lottery was chosen, and $c=0$ indicates the certain payoff was chosen. The log-likelihood contribution of one observation is\n$$\n\\ell(\\gamma) = c \\cdot \\log\\left(P_{\\text{risky}}(\\gamma)\\right) + (1-c)\\cdot \\log\\left(1 - P_{\\text{risky}}(\\gamma)\\right).\n$$\nYour task is to write a program that, for each dataset of choices, computes the value of $\\gamma$ within a closed interval $[\\underline{\\gamma},\\overline{\\gamma}]$ that maximizes the total log-likelihood, i.e., the sum of $\\ell(\\gamma)$ over all observations in that dataset.\n\nUse the following parameter values (these apply to all datasets):\n- Sensitivity parameter $\\lambda = 1.0$.\n- Risk aversion search interval $[\\underline{\\gamma},\\overline{\\gamma}] = [0.01, 3.0]$.\n\nTest Suite (each dataset is an ordered list of choice tuples $(S,p,x_h,x_\\ell,c)$, with $p$ expressed as a decimal):\n\n- Dataset A (general case, includes the $\\gamma=1$ boundary in the utility definition implicitly through the data):\n  1. $(4.0,\\, 0.5,\\, 10.0,\\, 2.0,\\, 1)$\n  2. $(5.0,\\, 0.5,\\, 10.0,\\, 2.0,\\, 0)$\n  3. $(8.0,\\, 0.5,\\, 20.0,\\, 4.0,\\, 1)$\n  4. $(9.5,\\, 0.5,\\, 20.0,\\, 4.0,\\, 0)$\n  5. $(2.0,\\, 0.5,\\, 5.0,\\, 1.0,\\, 1)$\n  6. $(2.8,\\, 0.5,\\, 5.0,\\, 1.0,\\, 0)$\n\n- Dataset B (lower risk aversion, near risk-neutral):\n  1. $(8.0,\\, 0.5,\\, 16.0,\\, 4.0,\\, 1)$\n  2. $(10.0,\\, 0.5,\\, 16.0,\\, 4.0,\\, 0)$\n  3. $(4.0,\\, 0.5,\\, 8.0,\\, 2.0,\\, 1)$\n  4. $(5.0,\\, 0.5,\\, 8.0,\\, 2.0,\\, 0)$\n  5. $(17.0,\\, 0.5,\\, 32.0,\\, 8.0,\\, 1)$\n  6. $(19.0,\\, 0.5,\\, 32.0,\\, 8.0,\\, 0)$\n\n- Dataset C (higher risk aversion):\n  1. $(4.0,\\, 0.5,\\, 12.0,\\, 3.0,\\, 1)$\n  2. $(5.2,\\, 0.5,\\, 12.0,\\, 3.0,\\, 0)$\n  3. $(9.0,\\, 0.5,\\, 24.0,\\, 6.0,\\, 1)$\n  4. $(10.0,\\, 0.5,\\, 24.0,\\, 6.0,\\, 0)$\n  5. $(2.2,\\, 0.5,\\, 6.0,\\, 1.5,\\, 1)$\n  6. $(2.6,\\, 0.5,\\, 6.0,\\, 1.5,\\, 0)$\n\nFinal Output Format:\n- Your program should produce a single line of output containing the estimated risk aversion coefficients for Dataset A, Dataset B, and Dataset C, in that order, as a comma-separated list enclosed in square brackets. Each estimate must be a floating-point number rounded to six decimal places. For example: \"[0.723456,1.234567,2.345678]\".", "solution": "The problem requires the estimation of a risk aversion parameter, $\\gamma$, by maximizing the log-likelihood of a series of observed binary choices. This is a standard problem in computational economics. Before proceeding, the problem statement must be validated for scientific soundness and consistency.\n\n**Step 1: Extract Givens**\n- **Utility Function**: The Constant Relative Risk Aversion (CRRA) power utility function is defined as $U(W) = \\frac{W^{1-\\gamma}}{1-\\gamma}$ for $\\gamma \\neq 1$, and $U(W) = \\log(W)$ for $\\gamma = 1$. The initial wealth is assumed to be $0$, so the payoff $W$ represents total wealth. All payoffs $W>0$.\n- **Choice Task**: A choice between a certain payoff $S$ and a risky lottery ($x_h$ with probability $p$, $x_\\ell$ with probability $1-p$).\n- **Choice Probability Model**: The probability of choosing the risky lottery is given by a logistic function, $P_{\\text{risky}}(\\gamma) = \\frac{1}{1+\\exp\\left(-\\lambda \\cdot \\Delta(\\gamma)\\right)}$.\n- **Utility Difference**: The argument of the logistic function is based on $\\Delta(\\gamma) = \\left[p \\cdot U(x_h) + (1-p)\\cdot U(x_\\ell)\\right] - U(S)$.\n- **Observation Data**: The observed choice for each task is $c \\in \\{0,1\\}$, where $c=1$ indicates the risky choice and $c=0$ indicates the certain choice.\n- **Log-Likelihood Function**: The log-likelihood for a single observation is $\\ell(\\gamma) = c \\cdot \\log\\left(P_{\\text{risky}}(\\gamma)\\right) + (1-c)\\cdot \\log\\left(1 - P_{\\text{risky}}(\\gamma)\\right)$.\n- **Objective**: Maximize the total log-likelihood, $\\sum_i \\ell_i(\\gamma)$, with respect to $\\gamma$.\n- **Parameters**: The sensitivity parameter is $\\lambda = 1.0$. The search for the optimal $\\gamma$ is constrained to the closed interval $[\\underline{\\gamma},\\overline{\\gamma}] = [0.01, 3.0]$.\n- **Test Suite**: Three datasets (A, B, C) are provided, each containing a list of choice tuples $(S,p,x_h,x_\\ell,c)$.\n\n**Step 2: Validate Using Extracted Givens**\n- **Scientific Grounding**: The problem is firmly grounded in microeconomic theory. The CRRA utility function is a cornerstone of decision theory for modeling choice under risk. The use of a logistic function to model probabilistic choice (a form of quantal response equilibrium) is a standard and well-accepted econometric technique. The problem is scientifically sound.\n- **Well-Posedness**: The objective is to maximize a function, the total log-likelihood, over a compact interval. The log-likelihood function for this model is generally well-behaved, and its maximization is a standard Maximum Likelihood Estimation (MLE) problem. A unique solution within the specified bounds is expected. The problem is well-posed.\n- **Objectivity and Completeness**: The problem is stated using precise mathematical definitions and objective numerical data. All parameters, functions, and data required for a solution are explicitly provided. The problem is self-contained and objective.\n\n**Step 3: Verdict and Action**\nThe problem is valid as it is scientifically sound, well-posed, objective, and complete. A solution will be constructed.\n\n**Solution Methodology**\n\nThe task is to find the value of the risk aversion parameter, $\\gamma$, that maximizes the total log-likelihood function $L(\\gamma) = \\sum_{i=1}^{N} \\ell_i(\\gamma)$ for a given set of $N$ observations. This is achieved through numerical optimization.\n\nThe utility function is:\n$$\nU(W, \\gamma) =\n\\begin{cases}\n\\dfrac{W^{1-\\gamma}}{1-\\gamma}, & \\gamma \\neq 1 \\\\\n\\log(W), & \\gamma = 1\n\\end{cases}\n$$\nFor each choice task $i$, defined by the tuple $(S_i, p_i, x_{h,i}, x_{\\ell,i}, c_i)$, we first compute the utility difference $\\Delta_i(\\gamma)$:\n$$\n\\Delta_i(\\gamma) = \\left[ p_i \\cdot U(x_{h,i}, \\gamma) + (1-p_i) \\cdot U(x_{\\ell,i}, \\gamma) \\right] - U(S_i, \\gamma)\n$$\nThe probability of having chosen the risky lottery is then:\n$$\nP_{\\text{risky},i}(\\gamma) = \\frac{1}{1+\\exp\\left(-\\lambda \\cdot \\Delta_i(\\gamma)\\right)}\n$$\nThe log-likelihood contribution from observation $i$ is:\n$$\n\\ell_i(\\gamma) = c_i \\cdot \\log\\left(P_{\\text{risky},i}(\\gamma)\\right) + (1-c_i)\\cdot \\log\\left(1 - P_{\\text{risky},i}(\\gamma)\\right)\n$$\nThe total log-likelihood for a dataset is $L(\\gamma) = \\sum_{i} \\ell_i(\\gamma)$. Our objective is to solve the following optimization problem for each dataset:\n$$\n\\hat{\\gamma} = \\arg\\max_{\\gamma \\in [0.01, 3.0]} L(\\gamma)\n$$\nThis is equivalent to minimizing the negative log-likelihood:\n$$\n\\hat{\\gamma} = \\arg\\min_{\\gamma \\in [0.01, 3.0]} -L(\\gamma)\n$$\nThis is a one-dimensional, bounded optimization problem. It can be solved efficiently using a standard numerical algorithm, such as the one provided by `scipy.optimize.minimize_scalar` with the `bounded` method.\n\nFor numerical stability, the log-likelihood calculation should avoid direct computation of $\\exp(-z)$ for large $z$ and $\\log(p)$ for $p$ near $0$. Let $z_i = \\lambda \\Delta_i(\\gamma)$. The log-probability of choosing the risky and certain options can be expressed using the log-sigmoid function, which is often implemented in a numerically stable way. Specifically, $\\log(P_{\\text{risky}}) = \\log(\\sigma(z)) = -\\log(1+e^{-z})$ and $\\log(1-P_{\\text{risky}}) = \\log(\\sigma(-z)) = -\\log(1+e^{z})$. This avoids overflow and maintains precision.\n\nThe procedure is as follows:\n$1$. For each dataset, define an objective function that takes $\\gamma$ as input and returns the negative of the total log-likelihood, $-L(\\gamma)$.\n$2$. Use a numerical minimization routine to find the value of $\\gamma$ in the interval $[0.01, 3.0]$ that minimizes this objective function.\n$3$. The resulting value of $\\gamma$ is the Maximum Likelihood Estimate. This process is repeated for Datasets A, B, and C.", "answer": "```python\nimport numpy as np\nfrom scipy.optimize import minimize_scalar\n\ndef solve():\n    \"\"\"\n    Solves for the maximum likelihood estimate of the CRRA risk aversion parameter\n    for three given datasets of choices under risk.\n    \"\"\"\n    \n    # Define the utility function as per the problem statement.\n    def utility(W, gamma):\n        \"\"\"\n        Computes the CRRA utility for a given wealth W and risk aversion gamma.\n        Handles the special case where gamma is close to 1.\n        \"\"\"\n        # np.isclose is used for robust floating-point comparison.\n        if np.isclose(gamma, 1.0):\n            # The problem statement ensures W > 0.\n            return np.log(W)\n        else:\n            return (W**(1 - gamma)) / (1 - gamma)\n\n    # Define the total log-likelihood function for a dataset.\n    def total_log_likelihood(gamma, dataset, lambda_param):\n        \"\"\"\n        Computes the total log-likelihood for a dataset given a value for gamma\n        and the sensitivity parameter lambda.\n        \"\"\"\n        log_likelihood_sum = 0.0\n\n        for S, p, x_h, x_l, c in dataset:\n            # Calculate expected utility of the lottery.\n            eu_lottery = p * utility(x_h, gamma) + (1 - p) * utility(x_l, gamma)\n            # Calculate utility of the certain amount.\n            u_certain = utility(S, gamma)\n\n            # Calculate the difference in utility.\n            delta_u = eu_lottery - u_certain\n            \n            z = lambda_param * delta_u\n            \n            # Use a numerically stable formulation for log-likelihood of a\n            # logistic model.\n            # log(sigmoid(z)) = -log(1 + exp(-z)) = -logaddexp(0, -z)\n            # log(1-sigmoid(z)) = log(sigmoid(-z)) = -log(1 + exp(z)) = -logaddexp(0, z)\n            # This avoids overflow/underflow issues.\n            log_p_risky = -np.logaddexp(0, -z)\n            log_p_certain = -np.logaddexp(0, z)\n            \n            log_likelihood_i = c * log_p_risky + (1 - c) * log_p_certain\n            \n            log_likelihood_sum += log_likelihood_i\n            \n        return log_likelihood_sum\n\n    # Define global parameters and test cases from the problem statement.\n    lambda_param = 1.0\n    gamma_bounds = (0.01, 3.0)\n\n    test_cases = [\n        # Dataset A\n        [\n          (4.0, 0.5, 10.0, 2.0, 1),\n          (5.0, 0.5, 10.0, 2.0, 0),\n          (8.0, 0.5, 20.0, 4.0, 1),\n          (9.5, 0.5, 20.0, 4.0, 0),\n          (2.0, 0.5, 5.0, 1.0, 1),\n          (2.8, 0.5, 5.0, 1.0, 0)\n        ],\n        # Dataset B\n        [\n          (8.0, 0.5, 16.0, 4.0, 1),\n          (10.0, 0.5, 16.0, 4.0, 0),\n          (4.0, 0.5, 8.0, 2.0, 1),\n          (5.0, 0.5, 8.0, 2.0, 0),\n          (17.0, 0.5, 32.0, 8.0, 1),\n          (19.0, 0.5, 32.0, 8.0, 0)\n        ],\n        # Dataset C\n        [\n          (4.0, 0.5, 12.0, 3.0, 1),\n          (5.2, 0.5, 12.0, 3.0, 0),\n          (9.0, 0.5, 24.0, 6.0, 1),\n          (10.0, 0.5, 24.0, 6.0, 0),\n          (2.2, 0.5, 6.0, 1.5, 1),\n          (2.6, 0.5, 6.0, 1.5, 0)\n        ]\n    ]\n    \n    results = []\n    \n    # Iterate through each dataset to find the optimal gamma.\n    for dataset in test_cases:\n        # The optimizer minimizes a function, so we minimize the negative\n        # log-likelihood to maximize the log-likelihood.\n        objective_function = lambda gamma: -total_log_likelihood(gamma, dataset, lambda_param)\n        \n        # Use scipy.optimize.minimize_scalar for 1D bounded optimization.\n        opt_result = minimize_scalar(\n            objective_function,\n            bounds=gamma_bounds,\n            method='bounded'\n        )\n        \n        estimated_gamma = opt_result.x\n        results.append(f\"{estimated_gamma:.6f}\")\n\n    # Print the final output in the specified format.\n    print(f\"[{','.join(results)}]\")\n\n# Execute the solver function.\nsolve()\n```"}, {"introduction": "Once we have a model of preferences, we can use it to quantify the value of economic strategies. This exercise [@problem_id:2445931] puts utility theory to work by answering a fundamental question in finance: what is the monetary value of diversification? You will use a Constant Absolute Risk Aversion (CARA) utility function to derive a precise measure of the benefit gained by combining assets, exploring how this value changes with risk, return, and correlation.", "id": "2445931", "problem": "Consider a single-period setting with an agent who evaluates random wealth using exponential utility. Let the utility function be given by $u(x)=-\\exp(-a x)$, where $a&gt;0$ is the coefficient of absolute risk aversion. There are two risky asset returns, $X_1$ and $X_2$, that are jointly normally distributed. Asset $i\\in\\{1,2\\}$ has mean $\\mu_i$ and standard deviation $\\sigma_i$. The correlation between $X_1$ and $X_2$ is $\\rho$. Define the equally weighted portfolio return as $P=\\tfrac{1}{2}X_1+\\tfrac{1}{2}X_2$. All quantities are dimensionless.\n\nFor any random payoff $Y$, define its certainty equivalent $\\mathrm{CE}(Y)$ as the unique scalar $c$ that satisfies $u(c)=\\mathbb{E}[u(Y)]$. Define the value of diversification (relative to holding only asset $1$) as $V=\\mathrm{CE}(P)-\\mathrm{CE}(X_1)$.\n\nYour task is to compute $V$ for each parameter set in the following test suite. In every case, the equally weighted portfolio $P$ must be formed using weights $\\tfrac{1}{2}$ and $\\tfrac{1}{2}$ on $X_1$ and $X_2$, respectively, and the single-asset baseline is $X_1$.\n\nTest suite (each case is $(a,\\mu_1,\\sigma_1,\\mu_2,\\sigma_2,\\rho)$):\n- Case $1$: $(2.0,\\,0.08,\\,0.2,\\,0.08,\\,0.2,\\,0.0)$.\n- Case $2$: $(2.0,\\,0.08,\\,0.2,\\,0.08,\\,0.2,\\,1.0)$.\n- Case $3$: $(2.0,\\,0.08,\\,0.2,\\,0.08,\\,0.2,\\,-1.0)$.\n- Case $4$: $(2.0,\\,0.08,\\,0.2,\\,0.02,\\,0.2,\\,0.0)$.\n- Case $5$: $(3.0,\\,0.06,\\,0.15,\\,0.06,\\,0.3,\\,0.5)$.\n\nRequired final output format: Your program should produce a single line of output containing the results as a comma-separated list enclosed in square brackets, in the order of the cases above; for example, $[v_1,v_2,v_3,v_4,v_5]$, where each $v_i$ is the computed value of $V$ for case $i$. The answers must be real numbers (decimals or fractions are both acceptable), and no additional text should be printed.", "solution": "The problem requires the computation of the value of diversification, $V$, defined as the difference between the certainty equivalent of an equally weighted portfolio, $\\mathrm{CE}(P)$, and the certainty equivalent of a single asset, $\\mathrm{CE}(X_1)$. The portfolio is $P=\\tfrac{1}{2}X_1+\\tfrac{1}{2}X_2$, where asset returns $X_1$ and $X_2$ are jointly normally distributed. The agent's utility is of the exponential form $u(x)=-\\exp(-ax)$ with a coefficient of absolute risk aversion $a>0$.\n\nFirst, we derive a general formula for the certainty equivalent, $\\mathrm{CE}(Y)$, of a random payoff $Y$ that follows a normal distribution, $Y \\sim \\mathcal{N}(\\mu_Y, \\sigma_Y^2)$. The certainty equivalent $c=\\mathrm{CE}(Y)$ is defined by the relation $u(c) = \\mathbb{E}[u(Y)]$.\nThe expected utility is given by $\\mathbb{E}[u(Y)] = \\mathbb{E}[-\\exp(-aY)] = -\\mathbb{E}[\\exp(-aY)]$.\nThe term $\\mathbb{E}[\\exp(-aY)]$ corresponds to the moment-generating function (MGF) of the normal random variable $Y$, $M_Y(t) = \\mathbb{E}[\\exp(tY)]$, evaluated at $t=-a$. The MGF of a normal distribution is $M_Y(t) = \\exp(\\mu_Y t + \\tfrac{1}{2}\\sigma_Y^2 t^2)$.\nSubstituting $t=-a$, we obtain:\n$$ \\mathbb{E}[\\exp(-aY)] = M_Y(-a) = \\exp(\\mu_Y(-a) + \\tfrac{1}{2}\\sigma_Y^2(-a)^2) = \\exp(-a\\mu_Y + \\tfrac{1}{2}a^2\\sigma_Y^2) $$\nThus, the expected utility is $\\mathbb{E}[u(Y)] = -\\exp(-a\\mu_Y + \\tfrac{1}{2}a^2\\sigma_Y^2)$.\nBy definition of the certainty equivalent $c$, we have $u(c) = -\\exp(-ac)$. Equating this with the expected utility:\n$$ -\\exp(-ac) = -\\exp(-a\\mu_Y + \\tfrac{1}{2}a^2\\sigma_Y^2) $$\nTaking the natural logarithm of both sides and dividing by $-a$ (since $a>0$) yields the expression for the certainty equivalent:\n$$ c = \\mu_Y - \\tfrac{1}{2}a\\sigma_Y^2 $$\nThis is the well-known certainty equivalent for an agent with constant absolute risk aversion (CARA) utility facing a normally distributed payoff.\n\nNext, we apply this formula to the specific assets in the problem.\nFor asset $X_1$, we are given that $X_1 \\sim \\mathcal{N}(\\mu_1, \\sigma_1^2)$. Its certainty equivalent is therefore:\n$$ \\mathrm{CE}(X_1) = \\mu_1 - \\tfrac{1}{2}a\\sigma_1^2 $$\n\nFor the portfolio $P=\\tfrac{1}{2}X_1+\\tfrac{1}{2}X_2$, we must first determine its distribution. As a linear combination of jointly normal random variables, $P$ is also normally distributed. We compute its mean, $\\mu_P$, and variance, $\\sigma_P^2$.\nThe mean of the portfolio is:\n$$ \\mu_P = \\mathbb{E}[P] = \\mathbb{E}[\\tfrac{1}{2}X_1+\\tfrac{1}{2}X_2] = \\tfrac{1}{2}\\mathbb{E}[X_1] + \\tfrac{1}{2}\\mathbb{E}[X_2] = \\tfrac{1}{2}\\mu_1 + \\tfrac{1}{2}\\mu_2 $$\nThe variance of the portfolio is:\n$$ \\sigma_P^2 = \\mathrm{Var}(P) = \\mathrm{Var}(\\tfrac{1}{2}X_1+\\tfrac{1}{2}X_2) = (\\tfrac{1}{2})^2\\mathrm{Var}(X_1) + (\\tfrac{1}{2})^2\\mathrm{Var}(X_2) + 2(\\tfrac{1}{2})(\\tfrac{1}{2})\\mathrm{Cov}(X_1, X_2) $$\nUsing $\\mathrm{Var}(X_i) = \\sigma_i^2$ and $\\mathrm{Cov}(X_1, X_2) = \\rho\\sigma_1\\sigma_2$, we have:\n$$ \\sigma_P^2 = \\tfrac{1}{4}\\sigma_1^2 + \\tfrac{1}{4}\\sigma_2^2 + \\tfrac{1}{2}\\rho\\sigma_1\\sigma_2 $$\nNow we can compute the certainty equivalent of the portfolio $P$:\n$$ \\mathrm{CE}(P) = \\mu_P - \\tfrac{1}{2}a\\sigma_P^2 = (\\tfrac{1}{2}\\mu_1 + \\tfrac{1}{2}\\mu_2) - \\tfrac{1}{2}a(\\tfrac{1}{4}\\sigma_1^2 + \\tfrac{1}{4}\\sigma_2^2 + \\tfrac{1}{2}\\rho\\sigma_1\\sigma_2) $$\n\nFinally, we compute the value of diversification, $V = \\mathrm{CE}(P) - \\mathrm{CE}(X_1)$.\n$$ V = \\left[ (\\tfrac{1}{2}\\mu_1 + \\tfrac{1}{2}\\mu_2) - \\tfrac{a}{2}(\\tfrac{1}{4}\\sigma_1^2 + \\tfrac{1}{4}\\sigma_2^2 + \\tfrac{1}{2}\\rho\\sigma_1\\sigma_2) \\right] - \\left[ \\mu_1 - \\tfrac{1}{2}a\\sigma_1^2 \\right] $$\nWe group the terms by mean and variance components:\n$$ V = (\\tfrac{1}{2}\\mu_1 + \\tfrac{1}{2}\\mu_2 - \\mu_1) - \\tfrac{a}{2} \\left[ (\\tfrac{1}{4}\\sigma_1^2 + \\tfrac{1}{4}\\sigma_2^2 + \\tfrac{1}{2}\\rho\\sigma_1\\sigma_2) - \\sigma_1^2 \\right] $$\nSimplifying each part:\n$$ V = (\\tfrac{1}{2}\\mu_2 - \\tfrac{1}{2}\\mu_1) - \\tfrac{a}{2} \\left[ \\tfrac{1}{4}\\sigma_2^2 - \\tfrac{3}{4}\\sigma_1^2 + \\tfrac{1}{2}\\rho\\sigma_1\\sigma_2 \\right] $$\nTo obtain the final compact form, we distribute the factors:\n$$ V = \\tfrac{1}{2}(\\mu_2 - \\mu_1) - \\tfrac{a}{8}(\\sigma_2^2 - 3\\sigma_1^2 + 2\\rho\\sigma_1\\sigma_2) $$\nThis can be rewritten as:\n$$ V = \\tfrac{\\mu_2 - \\mu_1}{2} + \\tfrac{a}{8}(3\\sigma_1^2 - \\sigma_2^2 - 2\\rho\\sigma_1\\sigma_2) $$\nThis analytical expression is used to compute the value of $V$ for each test case provided in the problem statement.", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Computes the value of diversification for several parameter sets.\n    \"\"\"\n    # Define the test cases from the problem statement.\n    # Each case is a tuple: (a, mu1, sigma1, mu2, sigma2, rho)\n    test_cases = [\n        (2.0, 0.08, 0.2, 0.08, 0.2, 0.0),   # Case 1\n        (2.0, 0.08, 0.2, 0.08, 0.2, 1.0),   # Case 2\n        (2.0, 0.08, 0.2, 0.08, 0.2, -1.0),  # Case 3\n        (2.0, 0.08, 0.2, 0.02, 0.2, 0.0),   # Case 4\n        (3.0, 0.06, 0.15, 0.06, 0.3, 0.5),  # Case 5\n    ]\n\n    results = []\n    for case in test_cases:\n        a, mu1, sigma1, mu2, sigma2, rho = case\n\n        # The value of diversification V is defined as CE(P) - CE(X1).\n        # Where P = 0.5*X1 + 0.5*X2.\n        # The derived analytical formula is:\n        # V = (mu2 - mu1)/2 + (a/8) * (3*sigma1^2 - sigma2^2 - 2*rho*sigma1*sigma2)\n\n        # Term related to the difference in mean returns\n        mean_diff_term = (mu2 - mu1) / 2.0\n\n        # Term related to the difference in risk profiles\n        risk_diff_term = (a / 8.0) * (3 * sigma1**2 - sigma2**2 - 2 * rho * sigma1 * sigma2)\n\n        # Total value of diversification\n        v_value = mean_diff_term + risk_diff_term\n        \n        results.append(v_value)\n\n    # Format the output as a comma-separated list in brackets, without spaces.\n    # The map function converts each float in the results list to a string.\n    # The join method then concatenates these strings with a comma.\n    print(f\"[{','.join(map(str, results))}]\")\n\nsolve()\n```"}]}