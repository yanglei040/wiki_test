{"hands_on_practices": [{"introduction": "Expected Utility Theory is not confined to finance; it provides a powerful framework for modeling decisions under uncertainty in any field. This first exercise applies EUT to a classic scenario from law and economics: a lawsuit settlement. By deriving the settlement amount $S^{\\ast}$ that makes a plaintiff indifferent between settling and going to trial, you will practice translating a real-world problem into a formal economic model and solving for a key decision-making threshold [@problem_id:2391038]. This is a fundamental skill for applying microeconomic theory.", "id": "2391038", "problem": "A plaintiff with initial wealth $W>0$ faces a decision between accepting a certain settlement or proceeding to trial. Under expected utility theory (EUT), the plaintiff evaluates outcomes using a constant relative risk aversion (CRRA) utility function $u(x)=\\frac{x^{1-\\gamma}}{1-\\gamma}$, with risk aversion parameter $\\gamma>0$ and $\\gamma\\neq 1$, defined for $x>0$.\n\nIf the plaintiff accepts a settlement of amount $S\\geq 0$, the plaintiff incurs a settlement-related cost $K_{S}\\geq 0$ and ends with certain final wealth $W+S-K_{S}$. If the plaintiff proceeds to trial, a court awards gross damages $D>0$ with probability $p\\in(0,1)$ and zero otherwise. The lawyer is compensated via a contingency fee at rate $c\\in(0,1)$ applied to the gross award, so that if the plaintiff wins, the plaintiff receives net damages $(1-c)D$. Proceeding to trial entails a plaintiff-borne litigation cost $K_{T}\\geq 0$ that is paid regardless of outcome. Thus, the plaintiff’s final wealth under trial is $W-K_{T}+(1-c)D$ with probability $p$ and $W-K_{T}$ with probability $1-p$.\n\nAssume that all relevant final wealth levels are strictly positive: $W-K_{T}>0$, $W-K_{T}+(1-c)D>0$, and $W+S-K_{S}>0$.\n\nLet $S^{\\ast}$ denote the settlement amount that makes the plaintiff indifferent between accepting the settlement and going to trial, under expected utility maximization. Derive a closed-form expression for $S^{\\ast}$ as a function of the parameters $W$, $\\gamma$, $p$, $D$, $c$, $K_{S}$, and $K_{T}$. Your final answer must be a single analytic expression. Do not approximate.", "solution": "The problem statement is subjected to validation before any attempt at a solution.\n\nGivens are extracted verbatim:\n- Initial wealth: $W > 0$.\n- Utility function: $u(x) = \\frac{x^{1-\\gamma}}{1-\\gamma}$ with $\\gamma > 0$, $\\gamma \\neq 1$, and domain $x > 0$.\n- Settlement amount: $S \\geq 0$.\n- Settlement cost: $K_S \\geq 0$.\n- Final wealth with settlement: $W + S - K_S$.\n- Probability of winning trial: $p \\in (0,1)$.\n- Gross damages: $D > 0$.\n- Contingency fee rate: $c \\in (0,1)$.\n- Net damages: $(1-c)D$.\n- Litigation cost: $K_T \\geq 0$.\n- Final wealth with trial win: $W - K_T + (1-c)D$.\n- Final wealth with trial loss: $W - K_T$.\n- Positivity assumption: $W - K_T > 0$, $W - K_T + (1-c)D > 0$, and $W + S - K_S > 0$.\n- Objective: Derive a closed-form expression for the indifference settlement amount, $S^{\\ast}$.\n\nThe problem is scientifically grounded in expected utility theory, a foundational concept in economics. It is well-posed, with all necessary parameters and constraints defined to permit a unique solution. The language is objective and precise. All assumptions, such as the positivity of final wealth states, are explicitly stated to ensure the utility function is well-defined. The problem is therefore valid. We may proceed with the derivation.\n\nThe core principle is that the plaintiff is indifferent between two options if the utility derived from the certain option (settlement) is equal to the expected utility derived from the uncertain option (trial).\n\nLet $S^{\\ast}$ be the settlement amount that renders the plaintiff indifferent. The final wealth from accepting this settlement is a certain amount, which we denote as $W_{S^{\\ast}}$.\n$$\nW_{S^{\\ast}} = W + S^{\\ast} - K_S\n$$\nThe utility from this certain outcome is $u(W_{S^{\\ast}})$.\n\nIf the plaintiff proceeds to trial, the outcome is a lottery. Let the final wealth in the event of a win be $W_{win}$ and in the event of a loss be $W_{lose}$.\n$$\nW_{win} = W - K_T + (1-c)D\n$$\n$$\nW_{lose} = W - K_T\n$$\nThe probability of winning is $p$, and the probability of losing is $1-p$. The expected utility of the trial, denoted $E[u(\\text{Trial})]$, is the probability-weighted average of the utilities of the possible outcomes.\n$$\nE[u(\\text{Trial})] = p \\cdot u(W_{win}) + (1-p) \\cdot u(W_{lose})\n$$\nThe indifference condition is therefore:\n$$\nu(W_{S^{\\ast}}) = E[u(\\text{Trial})]\n$$\nSubstituting the specified CRRA utility function, $u(x) = \\frac{x^{1-\\gamma}}{1-\\gamma}$, into the indifference condition gives:\n$$\n\\frac{(W_{S^{\\ast}})^{1-\\gamma}}{1-\\gamma} = p \\frac{(W_{win})^{1-\\gamma}}{1-\\gamma} + (1-p) \\frac{(W_{lose})^{1-\\gamma}}{1-\\gamma}\n$$\nSince the problem states $\\gamma \\neq 1$, the denominator $(1-\\gamma)$ is non-zero and can be cancelled from all terms by multiplication.\n$$\n(W_{S^{\\ast}})^{1-\\gamma} = p (W_{win})^{1-\\gamma} + (1-p) (W_{lose})^{1-\\gamma}\n$$\nThis equation defines the certainty equivalent relationship. The term $W_{S^{\\ast}}$ is the certainty equivalent wealth of the trial lottery, adjusted for the costs related to settlement. To solve for $W_{S^{\\ast}}$, we raise both sides of the equation to the power of $\\frac{1}{1-\\gamma}$.\n$$\nW_{S^{\\ast}} = \\left[ p (W_{win})^{1-\\gamma} + (1-p) (W_{lose})^{1-\\gamma} \\right]^{\\frac{1}{1-\\gamma}}\n$$\nNow, we substitute the expressions for $W_{S^{\\ast}}$, $W_{win}$, and $W_{lose}$:\n$$\nW + S^{\\ast} - K_S = \\left[ p (W - K_T + (1-c)D)^{1-\\gamma} + (1-p) (W - K_T)^{1-\\gamma} \\right]^{\\frac{1}{1-\\gamma}}\n$$\nThe final step is to isolate $S^{\\ast}$ algebraically. This is a simple rearrangement.\n$$\nS^{\\ast} = \\left[ p(W - K_T + (1-c)D)^{1-\\gamma} + (1-p)(W - K_T)^{1-\\gamma} \\right]^{\\frac{1}{1-\\gamma}} - W + K_S\n$$\nThis expression provides the required closed-form for the indifference settlement amount $S^{\\ast}$ as a function of the given parameters. The assumption that all final wealth states are strictly positive ensures that all terms raised to a power are positive, making the expression well-defined.", "answer": "$$\n\\boxed{\\left[ p(W - K_T + (1-c)D)^{1-\\gamma} + (1-p)(W - K_T)^{1-\\gamma} \\right]^{\\frac{1}{1-\\gamma}} - W + K_S}\n$$"}, {"introduction": "We now turn to a core application in quantitative finance: evaluating a complex investment. Modern financial products often have payoffs that depend on the uncertain performance of multiple assets. This practice problem challenges you to assess a structured note by computing the expected utility, $\\mathbb{E}[U(W_{T})]$, for an investor with a Constant Absolute Risk Aversion (CARA) utility function [@problem_id:2391039]. You will integrate principles of portfolio theory to handle correlated, normally distributed returns, providing a realistic test of your analytical skills in sophisticated financial contexts.", "id": "2391039", "problem": "An investor with Constant Absolute Risk Aversion (CARA) utility, defined by $U(w) = -\\exp(-\\gamma w)$ with risk aversion parameter $\\gamma = 3.0 \\times 10^{-6}$, considers purchasing a one-year structured note issued at par on a basket of international equity indices. The investor allocates all initial wealth $W_{0} = 1.0 \\times 10^{6}$ to buy a single note at price $1.0 \\times 10^{6}$ and has no other sources of risk or income. The note’s payoff at maturity is\n$$\nX = N \\left( 1 + \\beta \\sum_{i=1}^{3} w_{i} R_{i} \\right),\n$$\nwhere $N = 1.0 \\times 10^{6}$ is the notional, $\\beta = 0.8$, weights are $(w_{1}, w_{2}, w_{3}) = (0.5, 0.3, 0.2)$, and $(R_{1}, R_{2}, R_{3})$ are the simple one-year returns on the United States, Europe, and Emerging Markets indices, respectively. Assume $(R_{1}, R_{2}, R_{3})$ is jointly normally distributed with mean vector\n$$\n\\boldsymbol{\\mu} = \\begin{pmatrix} 0.06 \\\\ 0.04 \\\\ 0.08 \\end{pmatrix}\n$$\nand covariance matrix\n$$\n\\boldsymbol{\\Sigma} = \\begin{pmatrix}\n0.0225 & 0.0162 & 0.0150 \\\\\n0.0162 & 0.0324 & 0.0225 \\\\\n0.0150 & 0.0225 & 0.0625\n\\end{pmatrix}.\n$$\nThe investor’s terminal wealth equals the note’s payoff, $W_{T} = X$.\n\nCompute the expected utility $\\mathbb{E}[U(W_{T})]$ under these assumptions. Express your final answer as a pure number (no units) and round to four significant figures.", "solution": "The problem statement has been validated and is deemed scientifically grounded, well-posed, and objective. It contains all necessary information and is free from contradictions or ambiguity. I will now proceed with the solution.\n\nThe investor's terminal wealth, $W_{T}$, is equal to the payoff of the structured note, $X$. The payoff is given by:\n$$\nW_T = X = N \\left( 1 + \\beta \\sum_{i=1}^{3} w_{i} R_{i} \\right)\n$$\nLet the weighted average return of the basket of indices be $R_p = \\sum_{i=1}^{3} w_{i} R_{i}$. The terminal wealth can be written as a linear function of $R_p$:\n$$\nW_T = N + N \\beta R_p\n$$\nThe returns $(R_1, R_2, R_3)$ are jointly normally distributed. A linear combination of jointly normal random variables is also a normally distributed random variable. Thus, $R_p$ is normally distributed. Since $W_T$ is a linear transformation of $R_p$, $W_T$ is also normally distributed, i.e., $W_T \\sim \\mathcal{N}(\\mu_{W_T}, \\sigma^2_{W_T})$.\n\nTo find the expected utility, we must first determine the parameters of this distribution: the mean $\\mu_{W_T} = \\mathbb{E}[W_T]$ and the variance $\\sigma^2_{W_T} = \\text{Var}(W_T)$.\n\nThe mean of the terminal wealth is:\n$$\n\\mu_{W_T} = \\mathbb{E}[N + N \\beta R_p] = N + N \\beta \\mathbb{E}[R_p]\n$$\nThe expected portfolio return $\\mathbb{E}[R_p]$ is the weighted average of the expected individual returns:\n$$\n\\mathbb{E}[R_p] = \\mathbb{E}\\left[\\sum_{i=1}^{3} w_{i} R_{i}\\right] = \\sum_{i=1}^{3} w_{i} \\mathbb{E}[R_{i}] = \\mathbf{w}^T \\boldsymbol{\\mu}\n$$\nUsing the given values $\\mathbf{w} = \\begin{pmatrix} 0.5 \\\\ 0.3 \\\\ 0.2 \\end{pmatrix}$ and $\\boldsymbol{\\mu} = \\begin{pmatrix} 0.06 \\\\ 0.04 \\\\ 0.08 \\end{pmatrix}$:\n$$\n\\mathbb{E}[R_p] = (0.5)(0.06) + (0.3)(0.04) + (0.2)(0.08) = 0.030 + 0.012 + 0.016 = 0.058\n$$\nNow we can compute $\\mu_{W_T}$ with $N = 1.0 \\times 10^{6}$ and $\\beta = 0.8$:\n$$\n\\mu_{W_T} = (1.0 \\times 10^{6}) + (1.0 \\times 10^{6})(0.8)(0.058) = 1.0 \\times 10^{6} (1 + 0.0464) = 1,046,400\n$$\n\nThe variance of the terminal wealth is:\n$$\n\\sigma^2_{W_T} = \\text{Var}(N + N \\beta R_p) = (N \\beta)^2 \\text{Var}(R_p)\n$$\nThe variance of the portfolio return, $\\text{Var}(R_p)$, is given by:\n$$\n\\text{Var}(R_p) = \\mathbf{w}^T \\boldsymbol{\\Sigma} \\mathbf{w}\n$$\nwhere $\\boldsymbol{\\Sigma}$ is the covariance matrix of returns. We calculate this quadratic form:\n$$\n\\mathbf{w}^T \\boldsymbol{\\Sigma} = \\begin{pmatrix} 0.5 & 0.3 & 0.2 \\end{pmatrix} \\begin{pmatrix} 0.0225 & 0.0162 & 0.0150 \\\\ 0.0162 & 0.0324 & 0.0225 \\\\ 0.0150 & 0.0225 & 0.0625 \\end{pmatrix}\n$$\n$$\n\\mathbf{w}^T \\boldsymbol{\\Sigma} = \\begin{pmatrix} (0.5)(0.0225) + (0.3)(0.0162) + (0.2)(0.0150) \\\\ (0.5)(0.0162) + (0.3)(0.0324) + (0.2)(0.0225) \\\\ (0.5)(0.0150) + (0.3)(0.0225) + (0.2)(0.0625) \\end{pmatrix}^T\n$$\n$$\n\\mathbf{w}^T \\boldsymbol{\\Sigma} = \\begin{pmatrix} 0.01125 + 0.00486 + 0.003 \\\\ 0.0081 + 0.00972 + 0.0045 \\\\ 0.0075 + 0.00675 + 0.0125 \\end{pmatrix}^T = \\begin{pmatrix} 0.01911 & 0.02232 & 0.02675 \\end{pmatrix}\n$$\nNow, we post-multiply by $\\mathbf{w}$:\n$$\n\\text{Var}(R_p) = \\mathbf{w}^T \\boldsymbol{\\Sigma} \\mathbf{w} = \\begin{pmatrix} 0.01911 & 0.02232 & 0.02675 \\end{pmatrix} \\begin{pmatrix} 0.5 \\\\ 0.3 \\\\ 0.2 \\end{pmatrix}\n$$\n$$\n\\text{Var}(R_p) = (0.01911)(0.5) + (0.02232)(0.3) + (0.02675)(0.2) = 0.009555 + 0.006696 + 0.005350 = 0.021601\n$$\nNow we compute $\\sigma^2_{W_T}$:\n$$\n\\sigma^2_{W_T} = ((1.0 \\times 10^{6})(0.8))^2 (0.021601) = (8.0 \\times 10^5)^2 (0.021601) = (6.4 \\times 10^{11})(0.021601) = 1.382464 \\times 10^{10}\n$$\n\nThe investor's utility function is $U(W_T) = -\\exp(-\\gamma W_T)$. The expected utility is $\\mathbb{E}[U(W_T)] = \\mathbb{E}[-\\exp(-\\gamma W_T)] = -\\mathbb{E}[\\exp(-\\gamma W_T)]$. The term $\\mathbb{E}[\\exp(t W_T)]$ is the moment-generating function (MGF) of a random variable $W_T$. For a normally distributed variable $W_T \\sim \\mathcal{N}(\\mu_{W_T}, \\sigma^2_{W_T})$, the MGF is $M_{W_T}(t) = \\exp(\\mu_{W_T} t + \\frac{1}{2}\\sigma^2_{W_T} t^2)$.\nWe evaluate the MGF at $t = -\\gamma$:\n$$\n\\mathbb{E}[\\exp(-\\gamma W_T)] = M_{W_T}(-\\gamma) = \\exp(\\mu_{W_T}(-\\gamma) + \\frac{1}{2}\\sigma^2_{W_T}(-\\gamma)^2) = \\exp(-\\gamma \\mu_{W_T} + \\frac{1}{2}\\gamma^2 \\sigma^2_{W_T})\n$$\nTherefore, the expected utility is:\n$$\n\\mathbb{E}[U(W_T)] = -\\exp\\left(-\\gamma \\mu_{W_T} + \\frac{1}{2}\\gamma^2 \\sigma^2_{W_T}\\right)\n$$\nSubstituting the given value $\\gamma = 3.0 \\times 10^{-6}$ and the calculated mean and variance:\nThe exponent is:\n$$\n-\\gamma \\mu_{W_T} + \\frac{1}{2}\\gamma^2 \\sigma^2_{W_T} = -(3.0 \\times 10^{-6})(1,046,400) + \\frac{1}{2}(3.0 \\times 10^{-6})^2 (1.382464 \\times 10^{10})\n$$\n$$\n= -3.1392 + \\frac{1}{2}(9.0 \\times 10^{-12})(1.382464 \\times 10^{10})\n$$\n$$\n= -3.1392 + (4.5)(1.382464 \\times 10^{-2}) = -3.1392 + 0.06221088 = -3.07698912\n$$\nFinally, the expected utility is:\n$$\n\\mathbb{E}[U(W_T)] = -\\exp(-3.07698912) \\approx -0.04610142\n$$\nRounding to four significant figures, the result is $-0.04610$.", "answer": "$$\n\\boxed{-0.04610}\n$$"}, {"introduction": "While the previous exercises focused on specific utility functions, the true power of computational economics lies in building general tools. This final hands-on practice moves from solving specific cases to implementing the fundamental definition of the certainty equivalent, $CE$, itself. You will create a versatile function that finds the $CE$ for a discrete lottery given any valid utility function, $u(\\cdot)$, by numerically solving the equation $u(CE) = \\mathbb{E}[u(W)]$ [@problem_id:2391058]. Mastering this task demonstrates a deep understanding of the theory and equips you with a robust computational instrument for decision analysis.", "id": "2391058", "problem": "You are tasked with writing a complete, runnable program that computes the certainty equivalent for discrete wealth lotteries under Expected Utility Theory. The program must define a function that accepts an arbitrary Python callable representing a utility function and a discrete probability distribution over wealth outcomes, and returns the certainty equivalent.\n\nThe scientific base is the Expected Utility Axiom and the definition of certainty equivalent:\n- Let a random wealth $W$ take discrete values $\\{w_i\\}_{i=1}^n$ with associated probabilities $\\{p_i\\}_{i=1}^n$, where $p_i \\ge 0$ and $\\sum_{i=1}^n p_i = 1$.\n- Let $u(\\cdot)$ be a strictly increasing and continuous utility function.\n- The expected utility is $E[u(W)] = \\sum_{i=1}^n p_i \\, u(w_i)$.\n- The certainty equivalent $\\mathrm{CE}$ is defined as the unique real number satisfying $u(\\mathrm{CE}) = E[u(W)]$.\n\nProgramming requirements:\n- Implement a function that takes as input:\n  - A Python function handle $u(w)$ implementable as a callable accepting a scalar $w$ and returning a scalar $u(w)$.\n  - A list or NumPy array of wealth values $W = [w_1, \\dots, w_n]$ with real numbers.\n  - A list or NumPy array of weights $p = [p_1, \\dots, p_n]$ with nonnegative real numbers.\n- Validation and normalization:\n  - Verify that all entries of $p$ are nonnegative and that at least one entry is strictly positive.\n  - If $\\sum_i p_i \\neq 1$, normalize the vector so that it sums to $1$.\n  - Verify that $W$ and $p$ have the same length $n$.\n- Computation:\n  - Compute $E[u(W)] = \\sum_{i=1}^n p_i \\, u(w_i)$.\n  - Under the maintained assumptions that $u(\\cdot)$ is strictly increasing and continuous, find $\\mathrm{CE}$ as the unique solution to $u(c) - E[u(W)] = 0$ using a robust, bracketing root-finding approach on the interval $[ \\min_i w_i, \\max_i w_i ]$ with absolute tolerance $10^{-9}$. If $u(\\min_i w_i) = E[u(W)]$ or $u(\\max_i w_i) = E[u(W)]$, return the corresponding boundary as the certainty equivalent.\n- Numerical units: There are no physical units to report. All outputs should be real numbers.\n- Output format: Your program should produce a single line of output containing the certainty equivalents for the following test suite as a comma-separated list enclosed in square brackets, with each number rounded to $6$ decimal places.\n\nTest suite (each bullet defines $u(\\cdot)$, $W$, and $p$). Ensure all numbers are treated exactly as written:\n- Test $1$ (risk-neutral): $u(w) = w$, $W = [0.0, 100.0]$, $p = [0.5, 0.5]$.\n- Test $2$ (constant relative risk aversion with parameter $\\gamma = 2$): $u(w) = \\dfrac{w^{1-\\gamma}}{1-\\gamma}$ for $w > 0$, which equals $-\\dfrac{1}{w}$ when $\\gamma = 2$. Use $W = [50.0, 150.0]$, $p = [0.3, 0.7]$.\n- Test $3$ (constant absolute risk aversion with parameter $a = 0.05$): $u(w) = -\\exp(-a w)$ for all real $w$. Use $W = [-50.0, 50.0]$, $p = [0.5, 0.5]$.\n- Test $4$ (degenerate distribution, logarithmic utility): $u(w) = \\ln(w)$ for $w > 0$. Use $W = [80.0]$, $p = [1.0]$.\n- Test $5$ (square-root utility with unnormalized weights): $u(w) = \\sqrt{w}$ for $w \\ge 0$. Use $W = [25.0, 100.0, 400.0]$, $p = [1.0, 1.0, 2.0]$.\n\nFinal output specification:\n- The program should compute the certainty equivalent for each of the five tests in the order listed and output them on a single line as a Python-style list:\n  - Round each certainty equivalent to $6$ decimal places.\n  - The exact required format is a single line:\n  - Example format: $\\texttt{[x\\_1,x\\_2,x\\_3,x\\_4,x\\_5]}$ where $x_i$ are the rounded numbers with no extra text.", "solution": "The problem statement has been subjected to rigorous validation.\n\n**Step 1: Extract Givens**\n- **Topic**: Expected Utility Theory, Certainty Equivalent.\n- **Definitions**:\n  - A discrete random wealth variable $W$ takes values $\\{w_i\\}_{i=1}^n$ with probabilities $\\{p_i\\}_{i=1}^n$.\n  - Constraints: $p_i \\ge 0$ and $\\sum_{i=1}^n p_i = 1$.\n  - Utility function $u(\\cdot)$ is strictly increasing and continuous.\n  - Expected Utility: $E[u(W)] = \\sum_{i=1}^n p_i \\, u(w_i)$.\n  - Certainty Equivalent ($\\mathrm{CE}$): The value satisfying $u(\\mathrm{CE}) = E[u(W)]$.\n- **Programming Requirements**:\n  - A function must accept a callable utility function $u$, a list/array of wealths $W$, and a list/array of weights $p$.\n  - **Validation**:\n    - All $p_i$ must be non-negative.\n    - At least one $p_i$ must be strictly positive.\n    - The vector $p$ must be normalized if its sum is not $1$.\n    - $W$ and $p$ must have the same length.\n  - **Computation**:\n    - Find $\\mathrm{CE}$ by solving $u(c) - E[u(W)] = 0$.\n    - Use a bracketing root-finding method on the interval $[\\min_i w_i, \\max_i w_i]$.\n    - Use an absolute tolerance of $10^{-9}$.\n    - Handle cases where $\\mathrm{CE}$ is at the boundary of the interval.\n- **Test Suite**:\n  - **Test $1$**: $u(w) = w$, $W = [0.0, 100.0]$, $p = [0.5, 0.5]$.\n  - **Test $2$**: $u(w) = \\frac{w^{1-\\gamma}}{1-\\gamma}$ with $\\gamma = 2$ (so $u(w) = -w^{-1}$), $W = [50.0, 150.0]$, $p = [0.3, 0.7]$.\n  - **Test $3$**: $u(w) = -\\exp(-a w)$ with $a = 0.05$, $W = [-50.0, 50.0]$, $p = [0.5, 0.5]$.\n  - **Test $4$**: $u(w) = \\ln(w)$, $W = [80.0]$, $p = [1.0]$.\n  - **Test $5$**: $u(w) = \\sqrt{w}$, $W = [25.0, 100.0, 400.0]$, $p = [1.0, 1.0, 2.0]$.\n- **Output Format**: Single line, comma-separated list in brackets, with each value rounded to $6$ decimal places.\n\n**Step 2: Validate Using Extracted Givens**\nThe problem is evaluated against the required criteria:\n- **Scientifically Grounded**: The problem is based on the von Neumann-Morgenstern Expected Utility Theory, which is a fundamental concept in economics, finance, and decision theory. The definitions and utility functions provided are standard.\n- **Well-Posed**: The problem is well-posed. The a priori assumption that the utility function $u(\\cdot)$ is strictly increasing and continuous guarantees the existence of a unique certainty equivalent $\\mathrm{CE}$. Let the function to be solved be $f(c) = u(c) - E[u(W)]$. The expected utility $E[u(W)]$ is a convex combination of the values $\\{u(w_i)\\}$. Given that $u$ is strictly increasing, we have $u(\\min(W)) \\le u(w_i) \\le u(\\max(W))$ for all $i$. Therefore, $u(\\min(W)) \\le E[u(W)] \\le u(\\max(W))$. This implies that $f(\\min(W)) \\le 0$ and $f(\\max(W)) \\ge 0$. By the Intermediate Value Theorem, a root must exist in the interval $[\\min(W), \\max(W)]$. The strict monotonicity of $u(\\cdot)$ ensures this root is unique.\n- **Objective**: The problem is stated using precise, objective mathematical and computational language.\n- **Flaws**: No flaws related to scientific unsoundness, incompleteness, contradiction, or ambiguity are found. The problem is a standard, formalizable exercise in computational economics.\n\n**Step 3: Verdict and Action**\nThe problem is **valid**. A solution will be constructed.\n\n**Principle-Based Design**\n\nThe task is to find the certainty equivalent, $\\mathrm{CE}$, for a given discrete lottery over wealth outcomes. A lottery is defined by a set of possible wealth outcomes $W = \\{w_1, w_2, \\dots, w_n\\}$ and their corresponding probabilities $P_s = \\{p_1, p_2, \\dots, p_n\\}$. The problem statement permits unnormalized weights, which we will first normalize to a valid probability distribution $\\tilde{P} = \\{\\tilde{p}_1, \\tilde{p}_2, \\dots, \\tilde{p}_n\\}$, where $\\tilde{p}_i = p_i / \\sum_{j=1}^n p_j$.\n\nThe core of the problem lies in Expected Utility Theory. For a given utility function $u(w)$, which quantifies an individual's preference for a certain level of wealth $w$, the expected utility of the lottery is the weighted average of the utilities of each possible outcome:\n$$\nE[u(W)] = \\sum_{i=1}^n \\tilde{p}_i u(w_i)\n$$\nThe certainty equivalent, $\\mathrm{CE}$, is the amount of certain wealth that provides the same level of utility as the lottery's expected utility. It is formally defined by the equation:\n$$\nu(\\mathrm{CE}) = E[u(W)]\n$$\nIf the inverse utility function $u^{-1}(\\cdot)$ is known and simple to compute, the $\\mathrm{CE}$ can be found directly:\n$$\n\\mathrm{CE} = u^{-1}(E[u(W)])\n$$\nHowever, for many utility functions, the inverse is either not available in a closed analytical form or is computationally inconvenient. The problem mandates a more general, numerical approach: root-finding. We define a function $g(c)$ whose root is the desired certainty equivalent:\n$$\ng(c) = u(c) - E[u(W)] = 0\n$$\nThe problem specifies that $u(\\cdot)$ is strictly increasing and continuous. This guarantees that $g(c)$ is also strictly increasing and continuous. As established during validation, a unique root for $g(c)=0$ is guaranteed to exist within the closed interval defined by the minimum and maximum possible wealth outcomes, $[\\min(W), \\max(W)]$.\n\nThis structure makes the problem amenable to a bracketing root-finding algorithm, such as Brent's method, which is robust and efficient. The algorithm will systematically narrow the search interval $[a, b]$ where $g(a)$ and $g(b)$ have opposite signs, until the root is found to a specified tolerance.\n\nThe computational procedure is thus:\n1.  **Input Validation and Normalization**: Given inputs $u$, $W$, and $p$, first ensure they are valid. Convert $W$ and $p$ to numerical arrays. Check for consistent lengths. Confirm that probabilities in $p$ are non-negative and sum to a positive value. Then, normalize $p$ to create a true probability vector $\\tilde{p}$.\n2.  **Handle Degenerate Case**: If the lottery has only one possible outcome (i.e., $\\min(W) = \\max(W)$), it is not a lottery but a certain outcome. The certainty equivalent is simply this value.\n3.  **Compute Expected Utility**: Calculate $E[u(W)] = \\sum_i \\tilde{p}_i u(w_i)$. This is a simple dot product.\n4.  **Numerical Solution**:\n    a. Define the search bracket as $[\\min(W), \\max(W)]$.\n    b. Define the objective function $g(c) = u(c) - E[u(W)]$.\n    c. Handle trivial boundary solutions: If $g(\\min(W)) \\approx 0$ or $g(\\max(W)) \\approx 0$ within a small machine epsilon, the respective boundary is the solution.\n    d. Employ a numerical solver, such as `scipy.optimize.brentq`, to find the root of $g(c)$ within the bracket and to the required absolute tolerance of $10^{-9}$.\n\nThis structured approach guarantees a correct and robust implementation that adheres to the established principles of Expected Utility Theory and numerical analysis.", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\nfrom scipy.optimize import brentq\n\ndef solve():\n    \"\"\"\n    Main function to define test cases and compute their certainty equivalents.\n    \"\"\"\n\n    def calculate_certainty_equivalent(u, W, p):\n        \"\"\"\n        Computes the certainty equivalent for a discrete wealth lottery.\n\n        Args:\n            u (callable): A strictly increasing and continuous utility function.\n            W (list or np.ndarray): A list of wealth outcomes.\n            p (list or np.ndarray): A list of corresponding non-negative weights.\n\n        Returns:\n            float: The certainty equivalent.\n        \"\"\"\n        # 1. Input Validation and Normalization\n        try:\n            W_arr = np.asarray(W, dtype=float)\n            p_arr = np.asarray(p, dtype=float)\n        except Exception as e:\n            raise TypeError(f\"Inputs W and p must be convertible to numeric arrays. Error: {e}\")\n\n        if W_arr.ndim != 1 or p_arr.ndim != 1:\n            raise ValueError(\"Inputs W and p must be 1-dimensional arrays.\")\n        \n        if len(W_arr) != len(p_arr):\n            raise ValueError(\"Wealth outcomes (W) and weights (p) must have the same length.\")\n\n        if np.any(p_arr < 0):\n            raise ValueError(\"All probability weights in p must be non-negative.\")\n\n        p_sum = np.sum(p_arr)\n        if p_sum <= 0:\n            raise ValueError(\"The sum of probability weights must be strictly positive.\")\n\n        # Normalize probabilities\n        p_norm = p_arr / p_sum\n\n        # 2. Handle Degenerate Case\n        w_min, w_max = np.min(W_arr), np.max(W_arr)\n        if np.isclose(w_min, w_max):\n            return w_min\n\n        # 3. Compute Expected Utility\n        u_values = np.array([u(w) for w in W_arr])\n        expected_utility = np.dot(p_norm, u_values)\n\n        # 4. Numerical Solution\n        # Define the objective function for the root-finder\n        def g(c):\n            return u(c) - expected_utility\n\n        # The root is guaranteed to be in [w_min, w_max] because u is monotonic.\n        # Check boundary solutions as per problem spec\n        if np.isclose(g(w_min), 0.0):\n            return w_min\n        if np.isclose(g(w_max), 0.0):\n            return w_max\n        \n        # Use Brent's method for robust root-finding\n        try:\n            # xtol is the absolute tolerance on the root\n            ce = brentq(g, w_min, w_max, xtol=1e-9)\n        except ValueError:\n            # This should not happen if u is strictly increasing\n            raise RuntimeError(\n                \"Root-finding failed. The bracket [min(W), max(W)] might be invalid, \"\n                \"which implies the utility function is not strictly increasing.\"\n            )\n\n        return ce\n\n    # Define utility functions for the test suite\n    u1 = lambda w: w\n    \n    gamma = 2.0\n    u2 = lambda w: (w**(1.0 - gamma)) / (1.0 - gamma) if w > 0 else -np.inf\n\n    a = 0.05\n    u3 = lambda w: -np.exp(-a * w)\n    \n    u4 = lambda w: np.log(w) if w > 0 else -np.inf\n    \n    u5 = lambda w: np.sqrt(w) if w >= 0 else -np.inf\n\n    # Test suite from the problem description\n    test_cases = [\n        (u1, [0.0, 100.0], [0.5, 0.5]),\n        (u2, [50.0, 150.0], [0.3, 0.7]),\n        (u3, [-50.0, 50.0], [0.5, 0.5]),\n        (u4, [80.0], [1.0]),\n        (u5, [25.0, 100.0, 400.0], [1.0, 1.0, 2.0]),\n    ]\n\n    results = []\n    for u_func, W, p in test_cases:\n        ce = calculate_certainty_equivalent(u_func, W, p)\n        results.append(f\"{ce:.6f}\")\n\n    # Final print statement in the exact required format\n    print(f\"[{','.join(results)}]\")\n\nsolve()\n```"}]}