{"hands_on_practices": [{"introduction": "The concept of a perpetuity is a powerful tool that extends beyond finance into modeling long-term physical and engineering processes. This exercise demonstrates how to apply the perpetuity formula to estimate the total lifetime energy output of a solar farm experiencing a constant rate of degradation. By treating the declining annual energy production as a geometric series, you will gain a tangible understanding of how to value an infinite stream of 'payments' or outputs [@problem_id:2371754].", "id": "2371754", "problem": "A utility-scale solar photovoltaic facility has a nameplate capacity of $100$ megawatts. Its capacity factor is $0.25$, and there are $8760$ hours in a non-leap year. The photovoltaic modules experience a constant proportional degradation of $0.5$ percent per year, and this degradation multiplicatively reduces the energy produced each subsequent year relative to the immediately preceding year. Assume the facility operates indefinitely under these conditions, with no capacity additions, retirements, maintenance shocks, or external constraints.\n\nUsing a perpetuity-style model in which the stream of annual energy outputs continues without end under the stated degradation process, determine the total cumulative energy produced over all future years. Express your answer in megawatt-hours (MWh) and round your result to four significant figures.", "solution": "The problem statement must first be validated for scientific soundness, well-posedness, and objectivity.\n\n**Step 1: Extract Givens**\n- Nameplate capacity: $100$ megawatts\n- Capacity factor: $0.25$\n- Hours in a non-leap year: $8760$\n- Proportional degradation rate: $0.5$ percent per year\n- Degradation effect: Multiplicative reduction of energy produced each subsequent year relative to the immediately preceding year.\n- Operational timeframe: Indefinitely.\n- Model type: Perpetuity-style model.\n- Required output: Total cumulative energy in megawatt-hours (MWh), rounded to four significant figures.\n\n**Step 2: Validate Using Extracted Givens**\nThe problem is scientifically grounded. The concepts of nameplate capacity, capacity factor, and annual degradation are standard metrics in the field of power systems engineering and renewable energy finance. The given values are realistic; a capacity factor of $0.25$ is typical for solar PV in many regions, and an annual degradation rate of $0.5\\%$ is a standard assumption for modern crystalline silicon modules. The problem is well-posed, describing an infinite geometric series with a common ratio whose magnitude is less than one, which guarantees convergence to a unique, finite sum. The language is objective and precise. The use of a perpetuity model is an idealization, but it is explicitly stated as a modeling assumption and is a valid mathematical technique for approximating long-term cumulative effects. Therefore, the problem is deemed valid.\n\n**Step 3: Verdict and Action**\nThe problem is valid. A complete solution will now be derived.\n\nThe problem requires the calculation of the total energy produced over an infinite time horizon by a solar facility subject to a constant proportional degradation. This is equivalent to finding the sum of an infinite geometric series.\n\nFirst, let us determine the energy produced in the first year of operation, which we denote as $E_1$. The energy output is the product of the average power and the duration of operation. The average power is the nameplate capacity multiplied by the capacity factor.\n\nLet $C$ be the nameplate capacity, $f$ be the capacity factor, and $T$ be the number of hours in a year.\nThe energy produced in the first year is given by:\n$$E_1 = C \\times f \\times T$$\nSubstituting the given values:\n$$C = 100 \\text{ MW}$$\n$$f = 0.25$$\n$$T = 8760 \\text{ h}$$\nSo,\n$$E_1 = 100 \\text{ MW} \\times 0.25 \\times 8760 \\text{ h} = 25 \\text{ MW} \\times 8760 \\text{ h} = 219000 \\text{ MWh}$$\n\nThe problem states that the energy output experiences a constant proportional degradation of $d = 0.5\\%$ per year. This means the energy produced in any given year is a constant fraction of the energy produced in the preceding year. Let this constant multiplicative factor be $r$.\n$$d = 0.5\\% = 0.005$$\nThe factor $r$ is:\n$$r = 1 - d = 1 - 0.005 = 0.995$$\n\nThe stream of annual energy production forms a geometric sequence:\n- Year 1: $E_1 = 219000 \\text{ MWh}$\n- Year 2: $E_2 = E_1 \\times r$\n- Year 3: $E_3 = E_2 \\times r = E_1 \\times r^2$\n- Year $n$: $E_n = E_1 \\times r^{n-1}$\n\nThe total cumulative energy produced over all future years, $E_{\\text{total}}$, is the sum of this infinite geometric series:\n$$E_{\\text{total}} = \\sum_{n=1}^{\\infty} E_n = \\sum_{n=1}^{\\infty} E_1 \\times r^{n-1}$$\nThe formula for the sum of an infinite geometric series is:\n$$S = \\frac{a}{1-r}$$\nwhere $a$ is the first term and $r$ is the common ratio. This formula is valid only if $|r| < 1$. In this problem, the first term is $a = E_1$ and the common ratio is $r = 0.995$. Since $|0.995| < 1$, the series converges, and we can apply the formula.\n\n$$E_{\\text{total}} = \\frac{E_1}{1-r}$$\nSubstituting the values for $E_1$ and $r$:\n$$E_{\\text{total}} = \\frac{219000}{1 - 0.995} = \\frac{219000}{0.005}$$\nThis is equivalent to:\n$$E_{\\text{total}} = 219000 \\times \\frac{1}{0.005} = 219000 \\times 200$$\n$$E_{\\text{total}} = 43800000 \\text{ MWh}$$\n\nThe problem requires the answer to be rounded to four significant figures. The calculated value is $43,800,000$. The four most significant figures are $4$, $3$, $8$, and $0$. To express this in standard scientific notation with four significant figures, we write:\n$$E_{\\text{total}} = 4.380 \\times 10^7$$\nThis is the total cumulative energy produced by the facility over its infinite operational life under the specified degradation model.", "answer": "$$\\boxed{4.380 \\times 10^7}$$"}, {"introduction": "In financial markets, asset cash flows are rarely certain. This practice introduces a layer of realism by modeling a perpetuity's payments as a random walk with drift, a foundational concept in modeling asset prices. Your task is to work backward from a given price to find the implied discount rate, which requires you to first determine the expected path of future cash flows and then solve the valuation equation for an arithmetically growing perpetuity [@problem_id:2371756].", "id": "2371756", "problem": "A perpetuity delivers a stochastic sequence of annual cash payments $\\{C_{t}\\}_{t \\geq 1}$ with initial level $C_{0}$ observed at time $t=0$. The cash-flow process follows a random walk with drift:\n$$\nC_{t+1} \\;=\\; C_{t} \\;+\\; \\mu \\;+\\; \\varepsilon_{t+1}, \\quad t \\geq 0,\n$$\nwhere $\\{\\varepsilon_{t}\\}$ are independent and identically distributed (i.i.d.) shocks with $\\mathbb{E}[\\varepsilon_{t}] = 0$ and finite variance, and where $\\mu$ is a constant drift. Assume investors are risk-neutral and the per-period stochastic discount factor is deterministic and given by $(1+r)^{-1}$ with a constant discount rate $r>0$. The assetâ€™s time-$0$ price $P_{0}$ equals the expected discounted sum of future cash flows:\n$$\nP_{0} \\;=\\; \\sum_{t=1}^{\\infty} \\frac{\\mathbb{E}[C_{t}]}{(1+r)^{t}}.\n$$\nSuppose $P_{0} = 120$, $C_{0} = 5$, and $\\mu = 0.2$, with all quantities expressed in the same currency units and time in years. Find the implied discount rate $r$ that rationalizes the observed price under these assumptions. Give your final answer as a single decimal number (no percent sign), rounded to $4$ significant figures.", "solution": "The problem statement is subjected to validation.\n\nStep 1: Extract Givens\n-   Cash-flow process: $C_{t+1} = C_{t} + \\mu + \\varepsilon_{t+1}$ for $t \\geq 0$.\n-   Initial cash-flow level: $C_{0}$.\n-   Shocks: $\\{\\varepsilon_{t}\\}$ are i.i.d. with $\\mathbb{E}[\\varepsilon_{t}] = 0$.\n-   Drift: $\\mu$ is a constant.\n-   Discount rate: $r > 0$ is a constant.\n-   Pricing formula: $P_{0} = \\sum_{t=1}^{\\infty} \\frac{\\mathbb{E}[C_{t}]}{(1+r)^{t}}$.\n-   Numerical values: $P_{0} = 120$, $C_{0} = 5$, $\\mu = 0.2$.\n\nStep 2: Validate Using Extracted Givens\n-   **Scientific Grounding**: The problem uses a standard random walk model for cash flows and a risk-neutral pricing framework, both of which are fundamental concepts in financial economics. The model is scientifically sound.\n-   **Well-Posedness**: The problem provides sufficient information to determine the unknown variable $r$. The pricing formula involves an infinite series whose convergence is guaranteed for $r > 0$, a condition specified in the problem. The structure leads to a solvable algebraic equation.\n-   **Objectivity**: The problem is stated in precise, quantitative terms, free from any subjective or ambiguous language.\n\nStep 3: Verdict and Action\nThe problem is valid as it is scientifically grounded, well-posed, and objective. A solution will be derived.\n\nThe time-$0$ price of the asset, $P_{0}$, is the present value of the expected future cash flows, discounted at a constant rate $r$. The formula is given as:\n$$\nP_{0} = \\sum_{t=1}^{\\infty} \\frac{\\mathbb{E}[C_{t}]}{(1+r)^{t}}\n$$\nFirst, we must determine the expected value of the cash flow at time $t$, $\\mathbb{E}[C_{t}]$. The cash-flow process is given by the recurrence relation:\n$$\nC_{t+1} = C_{t} + \\mu + \\varepsilon_{t+1}\n$$\nTaking the expectation conditional on information at time $t=0$, and using the law of iterated expectations, we find the expected value. For $t=1$:\n$$\n\\mathbb{E}[C_{1}] = \\mathbb{E}[C_{0} + \\mu + \\varepsilon_{1}]\n$$\nSince $C_{0}$ is observed at $t=0$, it is a known constant. The expectation of the shock $\\varepsilon_{1}$ is zero. Thus:\n$$\n\\mathbb{E}[C_{1}] = C_{0} + \\mu\n$$\nFor $t=2$:\n$$\n\\mathbb{E}[C_{2}] = \\mathbb{E}[C_{1} + \\mu + \\varepsilon_{2}] = \\mathbb{E}[C_{1}] + \\mu = (C_{0} + \\mu) + \\mu = C_{0} + 2\\mu\n$$\nBy induction, the expected cash flow at any future time $t \\geq 1$ is an arithmetic progression:\n$$\n\\mathbb{E}[C_{t}] = C_{0} + t\\mu\n$$\nSubstituting this expression into the pricing formula for $P_{0}$:\n$$\nP_{0} = \\sum_{t=1}^{\\infty} \\frac{C_{0} + t\\mu}{(1+r)^{t}}\n$$\nWe can split this summation into two parts:\n$$\nP_{0} = C_{0} \\sum_{t=1}^{\\infty} \\left(\\frac{1}{1+r}\\right)^{t} + \\mu \\sum_{t=1}^{\\infty} t \\left(\\frac{1}{1+r}\\right)^{t}\n$$\nThe first sum is a standard geometric series, which represents the present value of a perpetuity paying a constant amount of $1$. Its value is:\n$$\n\\sum_{t=1}^{\\infty} \\left(\\frac{1}{1+r}\\right)^{t} = \\frac{1/(1+r)}{1 - 1/(1+r)} = \\frac{1}{r}\n$$\nThe second sum is an arithmetico-geometric series. Its value can be found by considering the derivative of a geometric series. Let $x = (1+r)^{-1}$. The sum is $\\sum_{t=1}^{\\infty} t x^{t}$. This sum is known to be $\\frac{x}{(1-x)^2}$. Substituting $x = (1+r)^{-1}$:\n$$\n\\sum_{t=1}^{\\infty} t \\left(\\frac{1}{1+r}\\right)^{t} = \\frac{1/(1+r)}{\\left(1 - \\frac{1}{1+r}\\right)^{2}} = \\frac{1/(1+r)}{(r/(1+r))^{2}} = \\frac{1+r}{r^{2}}\n$$\nThis is the present value of a perpetuity whose payments grow by $1$ unit each period, starting with a payment of $1$ at $t=1$.\nCombining these results, we obtain the expression for $P_{0}$:\n$$\nP_{0} = C_{0}\\left(\\frac{1}{r}\\right) + \\mu\\left(\\frac{1+r}{r^{2}}\\right) = \\frac{C_{0}}{r} + \\frac{\\mu}{r^{2}} + \\frac{\\mu}{r} = \\frac{C_{0}+\\mu}{r} + \\frac{\\mu}{r^{2}}\n$$\nThis formula represents the present value of an arithmetic growing perpetuity where the first payment is $\\mathbb{E}[C_1] = C_0+\\mu$ and the growth in payments is $\\mu$.\nNow, we substitute the given numerical values: $P_{0}=120$, $C_{0}=5$, and $\\mu=0.2$.\n$$\n120 = \\frac{5 + 0.2}{r} + \\frac{0.2}{r^{2}}\n$$\n$$\n120 = \\frac{5.2}{r} + \\frac{0.2}{r^{2}}\n$$\nTo solve for $r$, we multiply the entire equation by $r^{2}$ (which is permissible as $r>0$ implies $r \\neq 0$):\n$$\n120r^{2} = 5.2r + 0.2\n$$\nRearranging the terms gives a quadratic equation in $r$:\n$$\n120r^{2} - 5.2r - 0.2 = 0\n$$\nWe solve this equation using the quadratic formula, $r = \\frac{-b \\pm \\sqrt{b^2 - 4ac}}{2a}$, with $a=120$, $b=-5.2$, and $c=-0.2$.\n$$\nr = \\frac{-(-5.2) \\pm \\sqrt{(-5.2)^{2} - 4(120)(-0.2)}}{2(120)}\n$$\n$$\nr = \\frac{5.2 \\pm \\sqrt{27.04 + 96}}{240}\n$$\n$$\nr = \\frac{5.2 \\pm \\sqrt{123.04}}{240}\n$$\nThe two potential solutions for $r$ are:\n$$\nr_{1} = \\frac{5.2 + \\sqrt{123.04}}{240} \\quad \\text{and} \\quad r_{2} = \\frac{5.2 - \\sqrt{123.04}}{240}\n$$\nSince $\\sqrt{123.04} \\approx 11.09$, the second root $r_{2}$ will be negative. The problem statement specifies that the discount rate $r$ must be positive, so we only consider the positive root $r_{1}$.\n$$\nr = \\frac{5.2 + \\sqrt{123.04}}{240} \\approx \\frac{5.2 + 11.09234}{240} \\approx \\frac{16.29234}{240} \\approx 0.06788475\n$$\nThe problem requires the answer to be rounded to $4$ significant figures.\n$$\nr \\approx 0.06788\n$$", "answer": "$$\n\\boxed{0.06788}\n$$"}, {"introduction": "Modern financial instruments often feature complex, conditional repayment structures that depend on the behavior of market variables. This hands-on computational challenge requires you to model a structured product whose coupon payments are contingent on inflation staying within a specific band. You will implement the logic to construct the resulting cash flow stream and then apply a numerical root-finding algorithm to calculate the investment's internal rate of return (IRR), a critical skill in computational finance [@problem_id:2371722].", "id": "2371722", "problem": "You are asked to implement a complete program that computes the internal rate of return (IRR) for a structured product that pays conditional coupons based on a realized path of a country's inflation rate. The program must rely only on the following base concepts: the time value of money via present value discounting at a constant rate and the definition of internal rate of return as the rate that equates the present value of cash flows to zero. No other shortcuts or pre-packaged formulas may be assumed.\n\nA single product instance is defined by the tuple of inputs $\\left(P, C, L, U, T, g, \\{i_t\\}_{t=1}^{T}\\right)$, where $P$ is the initial principal invested at time $t=0$, $C$ is the fixed annual coupon amount, $L$ and $U$ are the lower and upper bounds of the inflation band, $T$ is the maturity in years, $g$ is the terminal principal guarantee fraction, and $\\{i_t\\}$ is the realized sequence of annual inflation rates expressed as decimals (not as percentages). The structured product delivers cash flows as follows:\n- At time $t=0$, the investor pays the initial outflow $-P$.\n- For each year $t \\in \\{1,2,\\dots,T\\}$, a coupon of amount $C$ is paid if and only if the inflation rate $i_t$ satisfies $L \\le i_t \\le U$; otherwise, the coupon for that year is $0$.\n- At the maturity time $t=T$, in addition to any coupon determined as above, the investor receives a guaranteed terminal payoff equal to $gP$ regardless of the inflation path.\n\nFor each input tuple, define the internal rate of return (IRR), denoted by $r$, to be the discount rate (expressed as a decimal) such that discounting all cash flows at rate $r$ to time $t=0$ and summing them yields zero. Your program must compute this $r$ for each of the specified test cases. All rates (inflation, IRR) must be represented as decimals (for example, use $0.03$ instead of $3\\%$). No physical units are involved.\n\nTest Suite:\nCompute the IRR $r$ for each of the following five cases. In every case, use the band inclusively, so that an inflation $i_t$ that equals $L$ or $U$ qualifies for the coupon in that year. All scalar inputs are real numbers, and all inflation sequences are real-valued lists.\n\n- Case 1 (mixed in-band and out-of-band years):\n  - $P = 1000$, $C = 50$, $L = 0.02$, $U = 0.035$, $T = 5$, $g = 1.0$, $\\{i_t\\}_{t=1}^{5} = [0.03, 0.01, 0.025, 0.04, 0.033]$.\n- Case 2 (boundary inclusions trigger coupons every year):\n  - $P = 1000$, $C = 40$, $L = 0.02$, $U = 0.035$, $T = 5$, $g = 1.0$, $\\{i_t\\}_{t=1}^{5} = [0.02, 0.035, 0.035, 0.02, 0.025]$.\n- Case 3 (no coupons ever, full principal returned at maturity):\n  - $P = 1000$, $C = 60$, $L = 0.02$, $U = 0.035$, $T = 5$, $g = 1.0$, $\\{i_t\\}_{t=1}^{5} = [0.05, 0.05, 0.05, 0.05, 0.05]$.\n- Case 4 (no coupons ever, partial principal returned at maturity):\n  - $P = 1000$, $C = 50$, $L = 0.02$, $U = 0.035$, $T = 5$, $g = 0.9$, $\\{i_t\\}_{t=1}^{5} = [0.05, 0.05, 0.05, 0.05, 0.05]$.\n- Case 5 (one-year product, coupon paid, full principal returned):\n  - $P = 1000$, $C = 100$, $L = 0.02$, $U = 0.035$, $T = 1$, $g = 1.0$, $\\{i_t\\}_{t=1}^{1} = [0.025]$.\n\nProgram requirements:\n- For each case, construct the cash flow sequence implied by the definition above, using the given inflation path and bounds to determine which coupons pay.\n- Compute the IRR $r$ as defined above. The solution must be computed numerically; exact algebraic simplifications should not be assumed to be available in general.\n- Numerical output specification: For each case, output the IRR as a floating-point number rounded to $8$ decimal places. Aggregate the results for all five cases into a single line as a comma-separated list enclosed in square brackets, for example $[r_1, r_2, r_3, r_4, r_5]$, where each $r_k$ is rounded to $8$ decimal places.\n\nFinal output format:\nYour program should produce a single line of output containing the results as a comma-separated list enclosed in square brackets (e.g., $[0.01234567,0.00000000,-0.01234567,0.03456789,0.10000000]$). No other output is permitted.", "solution": "The problem presented is a well-defined exercise in computational finance. It requires the calculation of the Internal Rate of Return (IRR) for a structured financial product whose cash flows are contingent upon an external economic variable, the inflation rate. All parameters and conditions are specified with sufficient clarity and precision to permit a unique and verifiable solution. The problem is scientifically grounded in the fundamental principles of the time value of money.\n\nThe validation steps are as follows:\n1.  **Givens Extraction**: All input parameters, $(P, C, L, U, T, g, \\{i_t\\}_{t=1}^{T})$, cash flow rules, the definition of IRR, and test data are explicitly stated and self-contained.\n2.  **Validation**: The problem is scientifically sound, relying on the established financial concept of discounted cash flow analysis. It is well-posed, as the described cash flow streams (a single initial outflow followed by a series of non-negative inflows) generally produce a unique, real-valued IRR. The problem statement is objective and free of ambiguity. It is formalizable into a precise mathematical equation and is directly relevant to the topic of annuities and perpetuities within computational finance.\n3.  **Verdict**: The problem is valid. A solution will be constructed.\n\nThe core of the problem is to find the internal rate of return, which we denote as $r$. By definition, $r$ is the specific discount rate that equates the net present value (NPV) of all cash flows from the structured product to zero.\n\nFirst, we must construct the sequence of cash flows, $\\{CF_t\\}_{t=0}^{T}$, based on the provided parameters.\nLet $P$ be the initial principal, $C$ be the annual coupon, $L$ and $U$ be the lower and upper bounds of the inflation band, $T$ be the maturity in years, $g$ be the terminal principal guarantee fraction, and $\\{i_t\\}_{t=1}^{T}$ be the sequence of realized annual inflation rates.\n\nThe cash flows are determined as follows:\n- At time $t=0$, there is an initial investment, which is an outflow of $P$. Thus, $CF_0 = -P$.\n- For each subsequent year $t$, where $t \\in \\{1, 2, \\dots, T\\}$, we must determine if a coupon is paid. Let $c_t$ be the coupon payment at time $t$. The condition for payment is that the inflation rate for that year, $i_t$, falls within the specified band, inclusive of its boundaries.\n$$\nc_t =\n\\begin{cases}\nC & \\text{if } L \\le i_t \\le U \\\\\n0 & \\text{otherwise}\n\\end{cases}\n$$\n- The cash flow for each year $t \\in \\{1, 2, \\dots, T-1\\}$ is simply the coupon payment for that year: $CF_t = c_t$.\n- At the maturity year, $t=T$, the cash flow includes both the coupon for that year, $c_T$, and the guaranteed terminal principal payoff, $gP$.\n$$\nCF_T = c_T + gP\n$$\n\nWith the complete cash flow sequence $\\{CF_t\\}_{t=0}^{T}$ established, we can define the Net Present Value as a function of the discount rate $r$:\n$$\n\\text{NPV}(r) = \\sum_{t=0}^{T} \\frac{CF_t}{(1+r)^t}\n$$\nBy definition, the IRR is the rate $r$ that solves the equation $\\text{NPV}(r) = 0$:\n$$\n\\sum_{t=0}^{T} \\frac{CF_t}{(1+r)^t} = 0\n$$\nSubstituting $CF_0 = -P$, we can rewrite this as:\n$$\n-P + \\sum_{t=1}^{T} \\frac{CF_t}{(1+r)^t} = 0 \\quad \\implies \\quad P = \\sum_{t=1}^{T} \\frac{CF_t}{(1+r)^t}\n$$\nThis equation is a polynomial in the variable $v = (1+r)^{-1}$ of degree $T$. For $T > 4$, there is no general algebraic solution for the roots. Therefore, we must employ a numerical root-finding algorithm to solve for $r$.\n\nThe procedure for solving this problem is as follows:\n1.  For each test case defined by the tuple $(P, C, L, U, T, g, \\{i_t\\}_{t=1}^{T})$:\n    a. Construct the vector of cash flows $CF = [CF_0, CF_1, \\dots, CF_T]$ according to the rules specified above.\n    b. Define the objective function $f(r) = \\text{NPV}(r)$, which we need to solve for $f(r)=0$.\n    c. Utilize a numerical solver to find the root of $f(r)$. The `scipy.optimize.newton` function, which implements the secant method (a variant of Newton's method), is a suitable and robust choice for this task. An initial guess, for example $r_0 = 0.1$, is provided to start the iterative process.\n2.  The computed value of $r$ for each case is then rounded to $8$ decimal places as required.\n3.  The final results are aggregated into a single formatted string.\n\nThis methodology relies only on the fundamental definition of IRR and a general-purpose numerical solver, adhering to all constraints of the problem statement.", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\nfrom scipy.optimize import newton\n\ndef solve():\n    \"\"\"\n    Computes the Internal Rate of Return (IRR) for a structured product\n    across several test cases.\n    \"\"\"\n\n    # Define the test cases from the problem statement.\n    test_cases = [\n        # Case 1 (mixed in-band and out-of-band years)\n        {'P': 1000, 'C': 50, 'L': 0.02, 'U': 0.035, 'T': 5, 'g': 1.0, 'i_t': [0.03, 0.01, 0.025, 0.04, 0.033]},\n        # Case 2 (boundary inclusions trigger coupons every year)\n        {'P': 1000, 'C': 40, 'L': 0.02, 'U': 0.035, 'T': 5, 'g': 1.0, 'i_t': [0.02, 0.035, 0.035, 0.02, 0.025]},\n        # Case 3 (no coupons ever, full principal returned at maturity)\n        {'P': 1000, 'C': 60, 'L': 0.02, 'U': 0.035, 'T': 5, 'g': 1.0, 'i_t': [0.05, 0.05, 0.05, 0.05, 0.05]},\n        # Case 4 (no coupons ever, partial principal returned at maturity)\n        {'P': 1000, 'C': 50, 'L': 0.02, 'U': 0.035, 'T': 5, 'g': 0.9, 'i_t': [0.05, 0.05, 0.05, 0.05, 0.05]},\n        # Case 5 (one-year product, coupon paid, full principal returned)\n        {'P': 1000, 'C': 100, 'L': 0.02, 'U': 0.035, 'T': 1, 'g': 1.0, 'i_t': [0.025]},\n    ]\n\n    def npv_function(r, cash_flows):\n        \"\"\"\n        Calculates the Net Present Value for a given discount rate r and\n        a sequence of cash flows.\n        \"\"\"\n        times = np.arange(len(cash_flows))\n        return np.sum(cash_flows / ((1 + r)**times))\n\n    def compute_irr_for_case(params):\n        \"\"\"\n        Calculates the IRR for a single structured product instance.\n        \"\"\"\n        P, C, L, U, T, g, inflation_rates = \\\n            params['P'], params['C'], params['L'], params['U'], \\\n            params['T'], params['g'], params['i_t']\n\n        # Construct the cash flow sequence\n        cash_flows = np.zeros(T + 1)\n        cash_flows[0] = -P\n\n        for t in range(1, T + 1):\n            # Inflation rates list is 0-indexed, time t is 1-indexed\n            inflation_t = inflation_rates[t - 1]\n            coupon = 0\n            if L <= inflation_t <= U:\n                coupon = C\n            cash_flows[t] = coupon\n        \n        # Add the terminal principal guarantee at maturity\n        cash_flows[T] += g * P\n        \n        # Use a numerical solver (secant method) to find the root of the NPV function\n        # An initial guess of 0.1 (10%) is provided.\n        try:\n            irr = newton(npv_function, x0=0.1, args=(cash_flows,))\n        except RuntimeError:\n            # In cases where the function is very flat (like IRR=0),\n            # a different starting guess might be needed.\n            try:\n                irr = newton(npv_function, x0=0.0, args=(cash_flows,))\n            except RuntimeError:\n                 # Should not happen for these well-behaved cases\n                 irr = np.nan\n\n        return irr\n\n    results = []\n    for case in test_cases:\n        result = compute_irr_for_case(case)\n        results.append(result)\n\n    # Format each result to 8 decimal places and join into the final string\n    formatted_results = [f\"{res:.8f}\" for res in results]\n    print(f\"[{','.join(formatted_results)}]\")\n\nsolve()\n```"}]}