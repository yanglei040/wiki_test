{"hands_on_practices": [{"introduction": "The Black-Scholes PDE is a cornerstone of financial modeling, but its variable coefficients, which depend on the asset price $S$, can complicate numerical discretization. A powerful and common technique is to transform the coordinate system to simplify the equation before applying a finite difference scheme. This practice will guide you through the essential steps of transforming the Black-Scholes PDE via a logarithmic change of variables, $x = \\ln(S)$, and then deriving the coefficients of the resulting discrete linear system using the Crank-Nicolson method [@problem_id:2393113].", "id": "2393113", "problem": "Consider the risk-neutral Black–Scholes partial differential equation (PDE) for a European contingent claim with continuous dividend yield, given by $V_{t} + \\tfrac{1}{2}\\sigma^{2} S^{2} V_{SS} + (r - q) S V_{S} - r V = 0$ for $S \\in (0,\\infty)$ and $t \\in [0,T)$. Let $x = \\ln(S)$ and define $u(x,t) = V(S,t)$ with $S = \\exp(x)$. Starting from this PDE and using only the chain rule and standard central finite differences, perform the following steps.\n\n1. Derive the transformed PDE satisfied by $u(x,t)$ under the change of variables $x = \\ln(S)$. Then introduce the time-to-maturity variable $\\tau = T - t$ so that the equation becomes forward in $\\tau$, and rewrite it in the constant-coefficient form $u_{\\tau} = a\\,u_{xx} + b\\,u_{x} - r\\,u$, identifying the constants $a$ and $b$ in terms of $\\sigma$, $r$, and $q$.\n\n2. Consider a uniform spatial grid in $x$ given by $x_{i} = x_{\\min} + i\\,\\Delta x$ for integer $i$, and a uniform temporal grid in $\\tau$ given by $\\tau^{n} = n\\,\\Delta t$ for integer $n$. Using centered differences for $u_{x}$ and $u_{xx}$, and the Crank–Nicolson (CN) time discretization for the PDE in $\\tau$, write the fully discrete scheme at an interior node $i$ and time level $n+1$ in the standard tridiagonal form $A\\,u_{i-1}^{n+1} + B\\,u_{i}^{n+1} + C\\,u_{i+1}^{n+1} = \\text{RHS}$, where $A$, $B$, and $C$ are the left-hand-side coefficients multiplying $u^{n+1}$ at nodes $i-1$, $i$, and $i+1$, respectively.\n\nYour task is to give the closed-form analytic expression for the interior diagonal coefficient $B$ as a function of $\\sigma$, $r$, $\\Delta x$, and $\\Delta t$. Express your final answer as a single analytic expression. No numerical evaluation is required, and no rounding is needed.", "solution": "The problem statement is subjected to validation before any attempt at a solution.\n\n**Problem Validation**\n\n**Step 1: Extract Givens**\n-   The governing partial differential equation (PDE) is the risk-neutral Black–Scholes equation: $V_{t} + \\tfrac{1}{2}\\sigma^{2} S^{2} V_{SS} + (r - q) S V_{S} - r V = 0$.\n-   The domain is $S \\in (0,\\infty)$ and $t \\in [0,T)$.\n-   A change of variables is defined: $x = \\ln(S)$ and $u(x,t) = V(S,t)$, implying $S = \\exp(x)$.\n-   A second time variable is introduced: $\\tau = T - t$.\n-   The target form for the transformed PDE is specified as $u_{\\tau} = a\\,u_{xx} + b\\,u_{x} - r\\,u$.\n-   A uniform grid is defined: $x_{i} = x_{\\min} + i\\,\\Delta x$ and $\\tau^{n} = n\\,\\Delta t$.\n-   The discretization method is specified as the Crank–Nicolson scheme, using central differences for spatial derivatives.\n-   The resulting discrete equation must be in the form $A\\,u_{i-1}^{n+1} + B\\,u_{i}^{n+1} + C\\,u_{i+1}^{n+1} = \\text{RHS}$.\n-   The objective is to find the analytic expression for the coefficient $B$.\n\n**Step 2: Validate Using Extracted Givens**\n-   **Scientifically Grounded**: The problem is based on the Black-Scholes equation, a fundamental model in financial mathematics. The transformation of this PDE and its numerical solution using finite difference methods are standard, well-established techniques in computational finance. The problem is scientifically and mathematically sound.\n-   **Well-Posed**: The problem is clearly stated, providing all necessary information to proceed from the initial PDE to the final discrete coefficient. The tasks are specified sequentially and logically, leading to a unique, meaningful answer.\n-   **Objective**: The problem is formulated with precise mathematical language, free from any subjective or ambiguous terminology.\n\n**Step 3: Verdict and Action**\nThe problem is valid. It is a standard exercise in the numerical analysis of partial differential equations as applied to finance. We will now proceed with the solution.\n\n**Derivation of the Solution**\n\nThe solution requires two main steps: first, the transformation of the PDE, and second, its discretization to find the specified coefficient.\n\n**Part 1: Transformation of the PDE**\n\nWe begin with the Black-Scholes equation for a contingent claim value $V(S,t)$:\n$$V_{t} + \\frac{1}{2}\\sigma^{2} S^{2} V_{SS} + (r - q) S V_{S} - r V = 0$$\nWe introduce the change of variables $x = \\ln(S)$ and define $u(x,t) = V(S,t)$. We use the chain rule to express the derivatives of $V$ with respect to $S$ and $t$ in terms of derivatives of $u$ with respect to $x$ and $t$.\n\nFirst, we find the partial derivatives with respect to $S$:\n$$V_{S} = \\frac{\\partial V}{\\partial S} = \\frac{\\partial u}{\\partial x} \\frac{\\partial x}{\\partial S} = u_{x} \\frac{1}{S}$$\n$$V_{SS} = \\frac{\\partial}{\\partial S} \\left( u_{x} \\frac{1}{S} \\right) = \\left( \\frac{\\partial u_{x}}{\\partial S} \\right) \\frac{1}{S} - u_{x} \\frac{1}{S^{2}} = \\left( \\frac{\\partial u_{x}}{\\partial x} \\frac{\\partial x}{\\partial S} \\right) \\frac{1}{S} - \\frac{u_{x}}{S^{2}} = \\left( u_{xx} \\frac{1}{S} \\right) \\frac{1}{S} - \\frac{u_{x}}{S^{2}} = \\frac{1}{S^{2}} (u_{xx} - u_{x})$$\nThe derivative with respect to $t$ is straightforward, as $x$ does not depend on $t$:\n$$V_{t} = \\frac{\\partial V}{\\partial t} = \\frac{\\partial u}{\\partial t} = u_{t}$$\nSubstituting these into the Black-Scholes PDE yields:\n$$u_{t} + \\frac{1}{2}\\sigma^{2} S^{2} \\left[ \\frac{1}{S^{2}} (u_{xx} - u_{x}) \\right] + (r - q) S \\left[ u_{x} \\frac{1}{S} \\right] - r u = 0$$\nSimplifying this expression by canceling terms:\n$$u_{t} + \\frac{1}{2}\\sigma^{2} (u_{xx} - u_{x}) + (r - q) u_{x} - r u = 0$$\nGrouping the terms by the order of the derivative of $u$ with respect to $x$:\n$$u_{t} + \\frac{1}{2}\\sigma^{2} u_{xx} + \\left( r - q - \\frac{1}{2}\\sigma^{2} \\right) u_{x} - r u = 0$$\nNext, we introduce the time-to-maturity variable $\\tau = T - t$. This implies $t = T - \\tau$, and thus $\\frac{\\partial}{\\partial t} = \\frac{\\partial \\tau}{\\partial t} \\frac{\\partial}{\\partial \\tau} = -1 \\cdot \\frac{\\partial}{\\partial \\tau}$. Therefore, $u_{t} = -u_{\\tau}$.\nSubstituting this into the transformed PDE:\n$$-u_{\\tau} + \\frac{1}{2}\\sigma^{2} u_{xx} + \\left( r - q - \\frac{1}{2}\\sigma^{2} \\right) u_{x} - r u = 0$$\nRearranging to solve for $u_{\\tau}$, we obtain the forward-in-$\\tau$ equation:\n$$u_{\\tau} = \\frac{1}{2}\\sigma^{2} u_{xx} + \\left( r - q - \\frac{1}{2}\\sigma^{2} \\right) u_{x} - r u$$\nComparing this to the specified form $u_{\\tau} = a\\,u_{xx} + b\\,u_{x} - r\\,u$, we identify the constant coefficients:\n$$a = \\frac{1}{2}\\sigma^{2}$$\n$$b = r - q - \\frac{1}{2}\\sigma^{2}$$\n\n**Part 2: Crank-Nicolson Discretization**\n\nWe now discretize the PDE $u_{\\tau} = a\\,u_{xx} + b\\,u_{x} - r\\,u$. Let $u_{i}^{n}$ denote the numerical approximation of $u(x_{i}, \\tau^{n})$. The Crank-Nicolson method is an implicit scheme that averages the spatial operator over the time levels $n$ and $n+1$:\n$$\\frac{u_{i}^{n+1} - u_{i}^{n}}{\\Delta t} = \\frac{1}{2} \\left[ \\left( a\\,u_{xx} + b\\,u_{x} - r\\,u \\right)_{i}^{n+1} + \\left( a\\,u_{xx} + b\\,u_{x} - r\\,u \\right)_{i}^{n} \\right]$$\nWe use standard second-order central difference approximations for the spatial derivatives $u_{x}$ and $u_{xx}$:\n$$u_{x} \\approx \\frac{u_{i+1} - u_{i-1}}{2\\,\\Delta x}$$\n$$u_{xx} \\approx \\frac{u_{i+1} - 2u_{i} + u_{i-1}}{(\\Delta x)^{2}}$$\nSubstituting these into the Crank-Nicolson formula and reordering to group terms at time level $n+1$ on the left-hand side (LHS) and terms at $n$ on the right-hand side (RHS):\n$$u_{i}^{n+1} - \\frac{\\Delta t}{2} \\left[ a \\frac{u_{i+1}^{n+1} - 2u_{i}^{n+1} + u_{i-1}^{n+1}}{(\\Delta x)^{2}} + b \\frac{u_{i+1}^{n+1} - u_{i-1}^{n+1}}{2\\,\\Delta x} - r u_{i}^{n+1} \\right] = \\text{RHS}$$\nWe are only interested in the coefficients on the LHS. Let us organize the LHS to match the form $A\\,u_{i-1}^{n+1} + B\\,u_{i}^{n+1} + C\\,u_{i+1}^{n+1}$. We collect the coefficients for each nodal value $u_{j}^{n+1}$:\n\n-   For $u_{i-1}^{n+1}$: The coefficient is $A = -\\frac{\\Delta t}{2} \\left( \\frac{a}{(\\Delta x)^{2}} - \\frac{b}{2\\,\\Delta x} \\right)$.\n-   For $u_{i+1}^{n+1}$: The coefficient is $C = -\\frac{\\Delta t}{2} \\left( \\frac{a}{(\\Delta x)^{2}} + \\frac{b}{2\\,\\Delta x} \\right)$.\n-   For $u_{i}^{n+1}$: The coefficient is obtained from the terms multiplying $u_{i}^{n+1}$.\n    $$B = 1 - \\frac{\\Delta t}{2} \\left( a \\frac{-2}{(\\Delta x)^{2}} - r \\right) = 1 + \\frac{\\Delta t}{2} \\left( \\frac{2a}{(\\Delta x)^{2}} + r \\right)$$\n\nThe question asks for the closed-form expression for the interior diagonal coefficient $B$. Simplifying the expression for $B$:\n$$B = 1 + \\frac{a\\,\\Delta t}{(\\Delta x)^{2}} + \\frac{r\\,\\Delta t}{2}$$\nFinally, we substitute the expression for $a = \\frac{1}{2}\\sigma^{2}$ that we derived in Part 1:\n$$B = 1 + \\frac{(\\frac{1}{2}\\sigma^{2})\\,\\Delta t}{(\\Delta x)^{2}} + \\frac{r\\,\\Delta t}{2}$$\nThis simplifies to:\n$$B = 1 + \\frac{\\sigma^{2}\\,\\Delta t}{2(\\Delta x)^{2}} + \\frac{r\\,\\Delta t}{2}$$\nThis can be written more compactly by factoring out $\\frac{\\Delta t}{2}$:\n$$B = 1 + \\frac{\\Delta t}{2} \\left( \\frac{\\sigma^{2}}{(\\Delta x)^{2}} + r \\right)$$\nThis is the final expression for the coefficient $B$ as a function of the given parameters $\\sigma$, $r$, $\\Delta x$, and $\\Delta t$. Notice that the coefficient $B$ is independent of the dividend yield $q$, which only affects the advection term and thus the off-diagonal coefficients $A$ and $C$.", "answer": "$$\\boxed{1 + \\frac{\\Delta t}{2} \\left( \\frac{\\sigma^{2}}{(\\Delta x)^{2}} + r \\right)}$$"}, {"introduction": "While finding the option price is a primary goal, a finite difference grid holds a wealth of additional information crucial for risk management. The option's sensitivities to market parameters, known as 'the Greeks,' can be directly estimated by applying difference formulas to the computed price grid. In this exercise, you will implement a full finite difference solver and then use your numerical solution to compute the option's Gamma ($\\Gamma$), a key measure of convexity, and analyze its accuracy by comparing it to the analytical solution [@problem_id:2393056].", "id": "2393056", "problem": "Consider the Black–Scholes partial differential equation for the value $V(S,t)$ of a European call option on a non-dividend-paying underlying with current price $S$, strike price $K$, risk-free rate $r$, volatility $\\sigma$, and maturity $T$:\n$$\n\\frac{\\partial V}{\\partial t}(S,t) + \\frac{1}{2}\\sigma^2 S^2 \\frac{\\partial^2 V}{\\partial S^2}(S,t) + r S \\frac{\\partial V}{\\partial S}(S,t) - r V(S,t) = 0,\n$$\nposed for $(S,t) \\in [0,S_{\\max}] \\times [0,T]$, with terminal condition\n$$\nV(S,T) = \\max(S - K, 0),\n$$\nand boundary conditions \n$$\nV(0,t) = 0 \\quad \\text{and} \\quad V(S_{\\max},t) = S_{\\max} - K e^{-r (T - t)}, \\quad \\text{for } t \\in [0,T].\n$$\n\nYour task is to compute a numerical price grid $V(S_i, t_n)$ on a uniform spatial grid with spacing $\\Delta S$ and a uniform temporal grid with spacing $\\Delta t$. Then, at time $t=0$, compute the option’s Gamma at $S=K$ by differencing the price grid using the second-order central difference on the spatial grid:\n$$\n\\Gamma_{\\text{num}}(K,0) \\approx \\frac{V(K+\\Delta S,0) - 2 V(K,0) + V(K-\\Delta S,0)}{(\\Delta S)^2}.\n$$\nCompare this numerical Gamma to the analytical Black–Scholes Gamma for a European call:\n$$\n\\Gamma_{\\text{BS}}(S,t) = \\frac{\\phi(d_1)}{S \\sigma \\sqrt{T-t}}, \\quad \\text{where} \\quad d_1 = \\frac{\\ln\\!\\left(\\frac{S}{K}\\right) + \\left(r + \\tfrac{1}{2}\\sigma^2\\right)(T-t)}{\\sigma \\sqrt{T-t}},\n$$\nand $\\phi(x) = \\frac{1}{\\sqrt{2\\pi}} e^{-x^2/2}$ is the standard normal probability density function. Compute the absolute error\n$$\nE = \\left|\\Gamma_{\\text{num}}(K,0) - \\Gamma_{\\text{BS}}(K,0)\\right|.\n$$\n\nUse the parameter values $r = 0.05$, $\\sigma = 0.2$, $K = 100$, $T = 1$, and $S_{\\max} = 400$. Assume a uniform grid in $S$ with $N_S$ intervals, so that $\\Delta S = S_{\\max}/N_S$, and a uniform grid in $t$ with $N_t$ steps, so that $\\Delta t = T/N_t$. The spatial grid must include $S=K$ exactly (i.e., $K/\\Delta S$ is an integer).\n\nImplement your program to compute $E$ for each of the following six test cases $(N_S, N_t)$:\n\n- Spatial refinement with small $\\Delta t$:\n  1. $(N_S, N_t) = (100, 1600)$,\n  2. $(N_S, N_t) = (200, 1600)$,\n  3. $(N_S, N_t) = (400, 1600)$.\n\n- Temporal refinement with fine space:\n  4. $(N_S, N_t) = (400, 50)$,\n  5. $(N_S, N_t) = (400, 100)$,\n  6. $(N_S, N_t) = (400, 200)$.\n\nYour program must return the six absolute errors $E$ corresponding to the six test cases, in the order listed above.\n\nFinal output format: Your program should produce a single line of output containing the results as a comma-separated list enclosed in square brackets (e.g., \"[result1,result2,result3,result4,result5,result6]\").", "solution": "The user has provided a valid, well-posed problem statement from the field of computational finance. It is scientifically grounded and contains all necessary information to proceed with a solution.\n\nThe problem requires the numerical solution of the Black-Scholes partial differential equation (PDE) for a European call option. The PDE is given by:\n$$\n\\frac{\\partial V}{\\partial t}(S,t) + \\frac{1}{2}\\sigma^2 S^2 \\frac{\\partial^2 V}{\\partial S^2}(S,t) + r S \\frac{\\partial V}{\\partial S}(S,t) - r V(S,t) = 0\n$$\nwhere $V(S,t)$ is the option price, $S$ is the underlying asset price, $t$ is time, $r$ is the risk-free rate, and $\\sigma$ is the volatility. The equation is defined on the domain $(S,t) \\in [0, S_{\\max}] \\times [0, T]$ with a terminal condition at time $T$, $V(S,T) = \\max(S-K, 0)$, and boundary conditions $V(0,t)=0$ and $V(S_{\\max},t) = S_{\\max} - Ke^{-r(T-t)}$.\n\nThis is a terminal value problem, which is typically solved by stepping backward in time from $t=T$ to $t=0$. To facilitate a standard forward-in-time numerical approach, we introduce a change of variable for time: $\\tau = T - t$. With this change, $\\frac{\\partial}{\\partial t} = -\\frac{\\partial}{\\partial \\tau}$, and the PDE transforms into an initial value problem:\n$$\n\\frac{\\partial V}{\\partial \\tau} = \\frac{1}{2}\\sigma^2 S^2 \\frac{\\partial^2 V}{\\partial S^2} + r S \\frac{\\partial V}{\\partial S} - r V, \\quad \\text{for } \\tau \\in [0,T]\n$$\nwith the initial condition at $\\tau=0$ being $V(S,0) = \\max(S-K, 0)$. The boundary conditions become $V(0,\\tau) = 0$ and $V(S_{\\max},\\tau) = S_{\\max} - Ke^{-r\\tau}$.\n\nWe discretize this PDE on a uniform grid with $N_S+1$ spatial points $S_i = i\\Delta S$ for $i=0, \\dots, N_S$, and $N_t+1$ temporal points $\\tau_n = n\\Delta t$ for $n=0, \\dots, N_t$. Let $V_i^n$ denote the numerical approximation of $V(S_i, \\tau_n)$. We employ the Crank-Nicolson method, which is unconditionally stable and second-order accurate in both time and space. The scheme is formulated by averaging the spatial operator at time steps $n$ and $n+1$:\n$$\n\\frac{V_i^{n+1} - V_i^n}{\\Delta t} = \\frac{1}{2} \\left( (\\mathcal{L}_h V^{n+1})_i + (\\mathcal{L}_h V^n)_i \\right)\n$$\nwhere $\\mathcal{L}_h$ is the discretized spatial operator. Using second-order central differences for the spatial derivatives, we can rearrange the equation to isolate the unknown values $V_i^{n+1}$ on the left-hand side and the known values $V_i^n$ on the right-hand side. For each interior spatial point $i=1, \\dots, N_S-1$, this results in the equation:\n$$\n-l_i V_{i-1}^{n+1} + d_i V_i^{n+1} - u_i V_{i+1}^{n+1} = l_i V_{i-1}^n + (2-d_i) V_i^n + u_i V_{i+1}^n\n$$\nwhere the coefficients are defined as:\n$$\nl_i = \\frac{\\Delta t}{4} (\\sigma^2 i^2 - ri), \\quad d_i = 1 + \\frac{\\Delta t}{2} (\\sigma^2 i^2 + r), \\quad u_i = \\frac{\\Delta t}{4} (\\sigma^2 i^2 + ri)\n$$\nThis forms a tridiagonal system of linear equations, $A \\mathbf{V}^{n+1} = \\mathbf{b}^n$, for the vector of unknown option prices $\\mathbf{V}^{n+1} = [V_1^{n+1}, \\dots, V_{N_S-1}^{n+1}]^T$ at each time step. The matrix $A$ is constant through time and its diagonals are constructed from the coefficients $-l_i$, $d_i$, and $-u_i$. The right-hand side vector $\\mathbf{b}^n$ depends on the known values from the previous time step $\\mathbf{V}^n$. The boundary conditions are incorporated by modifying the equations for the first ($i=1$) and last ($i=N_S-1$) interior points. The condition $V_0^n=0$ simplifies the first equation. For the last equation, the known boundary value $V_{N_S}^{n+1} = S_{\\max} - K e^{-r\\tau_{n+1}}$ is moved to the right-hand side, adjusting the last element of the vector $\\mathbf{b}^n$.\n\nThe solution process begins at $\\tau=0$ ($t=T$) with the known terminal payoff. We then iteratively solve the tridiagonal system for each time step from $n=0$ to $n=N_t-1$, advancing the solution forward in $\\tau$ until we reach $\\tau=T$ ($t=0$).\n\nUpon obtaining the option price grid $V(S_i, 0)$ at time $t=0$, we compute the numerical Gamma, $\\Gamma_{\\text{num}}$, at $S=K$. The problem statement guarantees $S=K$ is a grid point, $S_{k_{\\text{idx}}}=K$. We use the second-order central difference formula:\n$$\n\\Gamma_{\\text{num}}(K,0) = \\frac{V_{k_{\\text{idx}}+1}^0 - 2V_{k_{\\text{idx}}}^0 + V_{k_{\\text{idx}}-1}^0}{(\\Delta S)^2}\n$$\nThis numerical result is compared against the analytical Black-Scholes Gamma, $\\Gamma_{\\text{BS}}$, at $S=K$ and $t=0$:\n$$\n\\Gamma_{\\text{BS}}(K,0) = \\frac{\\phi(d_1)}{K \\sigma \\sqrt{T}}, \\quad \\text{where} \\quad d_1 = \\frac{(r + \\frac{1}{2}\\sigma^2)T}{\\sigma\\sqrt{T}}\n$$\nwith $\\phi(x)$ being the standard normal probability density function. The absolute error $E = |\\Gamma_{\\text{num}} - \\Gamma_{\\text{BS}}|$ is then calculated for each specified test case.", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\nfrom scipy.stats import norm\nfrom scipy.linalg import solve_banded\n\ndef solve():\n    \"\"\"\n    Computes the absolute error between numerical and analytical Gamma of a European call option\n    for six different grid configurations using a Crank-Nicolson finite difference method.\n    \"\"\"\n    \n    # Define the test cases from the problem statement.\n    test_cases = [\n        # (Ns, Nt)\n        (100, 1600),\n        (200, 1600),\n        (400, 1600),\n        (400, 50),\n        (400, 100),\n        (400, 200),\n    ]\n\n    r = 0.05\n    sigma = 0.2\n    K = 100.0\n    T = 1.0\n    S_max = 400.0\n\n    results = []\n    \n    # --- Analytical Gamma Calculation (constant for all cases) ---\n    d1_analytical = (np.log(K / K) + (r + 0.5 * sigma**2) * T) / (sigma * np.sqrt(T))\n    phi_d1 = norm.pdf(d1_analytical)\n    analytical_gamma = phi_d1 / (K * sigma * np.sqrt(T))\n\n    for Ns, Nt in test_cases:\n        # --- Grid and Parameter Setup ---\n        dS = S_max / Ns\n        dt = T / Nt\n        S = np.linspace(0, S_max, Ns + 1)\n\n        # --- Terminal Condition (at t=T, which is tau=0) ---\n        V = np.maximum(S - K, 0)\n        \n        # --- Crank-Nicolson Finite Difference Method Setup ---\n        # We solve forward in tau = T-t\n        \n        # Coefficients for the tridiagonal systems\n        # Vector i for all interior points\n        i = np.arange(1, Ns)\n        l_coeff = 0.25 * dt * (sigma**2 * i**2 - r * i)\n        d_coeff = 1 + 0.5 * dt * (sigma**2 * i**2 + r)\n        u_coeff = 0.25 * dt * (sigma**2 * i**2 + r * i)\n\n        # LHS matrix A does not change over time, so we pre-assemble it\n        # in the format required by scipy.linalg.solve_banded\n        # For l=1, u=1: ab[0,:]=upper, ab[1,:]=main, ab[2,:]=lower\n        A = np.zeros((3, Ns - 1))\n        A[0, 1:] = -u_coeff[:-1]  # Upper diagonal\n        A[1, :] = d_coeff         # Main diagonal\n        A[2, :-1] = -l_coeff[1:]  # Lower diagonal\n\n        # --- Time-stepping Loop (from tau=dt to tau=T) ---\n        # Corresponds to stepping from t=T-dt down to t=0\n        for n in range(1, Nt + 1):\n            tau_n = n * dt\n            \n            # Construct the RHS vector b from known values V at the previous time step\n            b = l_coeff * V[:-2] + (2 - d_coeff) * V[1:-1] + u_coeff * V[2:]\n            \n            # Apply boundary condition at S=S_max for the current time step\n            # The equation for i=Ns-1 is modified\n            # -l * V_{Ns-2} + d * V_{Ns-1} - u * V_{Ns} = ...\n            # The V_{Ns} term is known and moves to the RHS.\n            v_boundary_n = S_max - K * np.exp(-r * tau_n)\n            b[-1] += u_coeff[-1] * v_boundary_n\n\n            # Solve the tridiagonal system A * V_interior_new = b\n            V_interior_new = solve_banded((1, 1), A, b)\n            \n            # Update the solution vector V for the current time step\n            V[1:-1] = V_interior_new\n            V[0] = 0.0  # V(0, t) = 0 boundary condition\n            V[-1] = v_boundary_n # V(S_max, t) boundary condition\n        \n        # --- At this point, V contains option prices at t=0 (tau=T) ---\n\n        # --- Numerical Gamma Calculation ---\n        # S=K must be on the grid\n        k_idx = int(round(K / dS))\n        \n        v_minus = V[k_idx - 1]\n        v_zero = V[k_idx]\n        v_plus = V[k_idx + 1]\n        \n        numerical_gamma = (v_plus - 2 * v_zero + v_minus) / (dS**2)\n\n        # --- Error Calculation ---\n        error = abs(numerical_gamma - analytical_gamma)\n        results.append(error)\n\n    # Final print statement in the exact required format.\n    print(f\"[{','.join(f'{err:.12f}' for err in results)}]\")\n\nsolve()\n```"}, {"introduction": "High-order numerical schemes like Crank-Nicolson are generally desirable, but they can produce unphysical oscillations when applied to problems with non-smooth initial conditions, such as the 'hockey-stick' payoff of an option. This hands-on practice explores this important numerical pathology and a standard technique to mitigate it, known as Rannacher smoothing. You will implement and compare a standard Crank-Nicolson solver against a smoothed version for an American option, quantifying the improvement in solution quality and gaining insight into the practical challenges of numerical stability [@problem_id:2393097].", "id": "2393097", "problem": "Consider the valuation of an American put option under the Black–Scholes model. Let the option price be denoted by $V(S,t)$ for underlying asset price $S \\ge 0$ and time $t \\in [0,T]$, with strike $K &gt; 0$, risk-free rate $r \\ge 0$, and volatility $\\sigma &gt; 0$. The Black–Scholes partial differential equation (PDE) for a European option is given by the condition that $V(S,t)$ satisfies\n$$\n\\frac{\\partial V}{\\partial t} + \\frac{1}{2}\\sigma^2 S^2 \\frac{\\partial^2 V}{\\partial S^2} + r S \\frac{\\partial V}{\\partial S} - r V = 0,\n$$\nwith terminal condition\n$$\nV(S,T) = \\max(K - S, 0).\n$$\nFor an American put option, early exercise is permitted, and the price satisfies the linear complementarity system\n$$\n\\begin{cases}\nV(S,t) \\ge \\max(K-S,0), \\\\\n\\frac{\\partial V}{\\partial t} + \\frac{1}{2}\\sigma^2 S^2 \\frac{\\partial^2 V}{\\partial S^2} + r S \\frac{\\partial V}{\\partial S} - r V \\le 0, \\\\\n\\left(V(S,t) - \\max(K-S,0)\\right)\\left(\\frac{\\partial V}{\\partial t} + \\frac{1}{2}\\sigma^2 S^2 \\frac{\\partial^2 V}{\\partial S^2} + r S \\frac{\\partial V}{\\partial S} - r V\\right) = 0,\n\\end{cases}\n$$\nwith boundary conditions appropriate for an American put: $V(0,t) = K$ and $V(S_{\\max}, t) \\approx 0$ for sufficiently large $S_{\\max}$, and the terminal condition $V(S,T) = \\max(K-S,0)$.\n\nYou will implement two time-stepping schemes on a uniform spatial grid $S_j = j \\Delta S$ for $j = 0,1,\\dots,N$, where $\\Delta S = S_{\\max}/N$, and uniform time steps $t_n = n \\Delta t$ for $n=0,1,\\dots,M$ with $\\Delta t = T/M$, marching backward in time from $t_M = T$ to $t_{M-1} = T - \\Delta t$:\n- A Crank–Nicolson scheme that uses central differences in space and the trapezoidal rule in time.\n- A Rannacher-smoothed variant that replaces the first Crank–Nicolson step by two Backward Euler half-steps of size $\\Delta t/2$ each, before any further Crank–Nicolson steps (for this task, you will only need these two half-steps to reach $t_{M-1}$).\n\nFor the American early exercise constraint, enforce the inequality $V(S,t) \\ge \\max(K-S,0)$ at each time step by solving the resulting linear complementarity problem with a projected iterative method, such as Projected Successive Over-Relaxation (PSOR), on the tridiagonal finite difference system that arises from your discretization. Use central finite differences for spatial derivatives on the interior points, standard Dirichlet boundary conditions $V(0,t) = K$, $V(S_{\\max},t) = 0$, and ensure your linear systems reflect these boundary values.\n\nDefine the discrete convexity measure at a given time level on the grid as the count of indices $j \\in \\{1,2,\\dots,N-1\\}$ for which the second central difference is negative, that is, the number of indices for which\n$$\nV_{j+1} - 2 V_j + V_{j-1} &lt; 0,\n$$\nwhere $V_j$ denotes the numerical approximation to $V(S_j, \\cdot)$ at the time level of interest. This discrete convexity should be nonnegative for a convex function of $S$, and violations indicate oscillations. To quantify the effect of Rannacher smoothing in damping payoff-induced oscillations, compare the count of such convexity violations at the time level $t = T - \\Delta t$ between:\n- A single Crank–Nicolson step of size $\\Delta t$ taken backward from $t = T$.\n- Two Backward Euler half-steps of size $\\Delta t/2$ each, taken backward from $t = T$ to $t = T - \\Delta t$ (Rannacher smoothing).\n\nYour program must:\n- Construct the finite difference discretization as described above from first principles, using only central differences in space and the specified time-stepping choices.\n- Solve the American option linear complementarity problem at the needed time level using a projected iterative method so that the inequality constraint is satisfied at every grid point.\n- For each test case, compute an integer equal to\n$$\n\\text{diff} = \\left(\\text{number of convexity violations without smoothing at } t = T - \\Delta t\\right) - \\left(\\text{number with Rannacher smoothing at } t = T - \\Delta t\\right).\n$$\nA positive $\\text{diff}$ indicates that Rannacher smoothing reduced the oscillations relative to a plain Crank–Nicolson step.\n\nUse the following test suite of parameter sets, where each tuple is $(K, r, \\sigma, T, S_{\\max}, N, M)$:\n- Test $1$: $(100, 0.05, 0.2, 0.25, 400, 120, 10)$\n- Test $2$: $(100, 0.03, 0.3, 0.5, 400, 80, 8)$\n- Test $3$: $(50, 0.1, 0.4, 1.0, 200, 100, 10)$\n\nYour program should produce a single line of output containing the results as a comma-separated list enclosed in square brackets, in the order of the tests above, for example, $[d_1,d_2,d_3]$, where each $d_i$ is the integer $\\text{diff}$ for test $i$. No physical units are required in the output. The numerical answer types must be integers. The computation should use only the given parameter values, and no user input is required.", "solution": "The problem presented is a standard, well-posed problem in computational finance concerning the valuation of an American put option and the analysis of numerical schemes. It is scientifically grounded in the Black-Scholes framework and mathematically sound. All parameters, boundary conditions, and objectives are clearly and objectively defined. The problem is complete and internally consistent. Therefore, the problem is deemed **valid**, and a solution will be provided.\n\nThe core of the problem is to solve the Black-Scholes linear complementarity problem for an American put option and to compare the numerical stability of two finite difference schemes. We are specifically asked to quantify the spurious oscillations that may arise from the non-smooth payoff function at expiry when using a standard Crank-Nicolson scheme, and to measure the damping effect of Rannacher smoothing.\n\nFirst, we transform the continuous Black-Scholes partial differential equation (PDE) into a system of discrete equations. Let $V(S,t)$ be the option price. We discretize the asset price $S$ and time $t$ domains into a grid. The spatial grid is $S_j = j \\Delta S$ for $j=0, 1, \\dots, N$, with $\\Delta S = S_{\\max}/N$. The time grid is $t_n = n \\Delta t$ for $n=0, 1, \\dots, M$, with $\\Delta t = T/M$. We solve the problem by marching backward in time from the expiry date $t_M=T$ to $t_0=0$.\n\nThe spatial derivatives in the Black-Scholes operator, $\\mathcal{L}V = \\frac{1}{2}\\sigma^2 S^2 \\frac{\\partial^2 V}{\\partial S^2} + r S \\frac{\\partial V}{\\partial S} - r V$, are approximated using second-order central differences on the interior grid points $j=1, \\dots, N-1$:\n$$\n\\frac{\\partial V}{\\partial S}\\bigg|_{S_j} \\approx \\frac{V_{j+1} - V_{j-1}}{2 \\Delta S}\n$$\n$$\n\\frac{\\partial^2 V}{\\partial S^2}\\bigg|_{S_j} \\approx \\frac{V_{j+1} - 2V_j + V_{j-1}}{(\\Delta S)^2}\n$$\nwhere $V_j(t)$ is the approximation of $V(S_j, t)$. Substituting these into the operator $\\mathcal{L}$ gives a discrete operator, which can be represented by a tridiagonal matrix $A$ of size $(N-1) \\times (N-1)$. The action of this matrix on the vector of interior option prices $\\mathbf{V} = [V_1, \\dots, V_{N-1}]^T$ is given by $(A\\mathbf{V})_i = \\alpha_{i+1} V_{i} + \\beta_{i+1} V_{i+1} + \\gamma_{i+1} V_{i+2}$ (using 0-based vector indexing for indices $i=0, \\dots, N-2$). The coefficients are:\n$$\n\\alpha_j = \\frac{1}{2}\\sigma^2 j^2 - \\frac{1}{2}r j, \\quad \\beta_j = -\\sigma^2 j^2 - r, \\quad \\gamma_j = \\frac{1}{2}\\sigma^2 j^2 + \\frac{1}{2}r j\n$$\nfor $j=1, \\dots, N-1$.\n\nThe Dirichlet boundary conditions $V(0,t) = K$ and $V(S_{\\max},t) = 0$ are incorporated into the system. The term involving $V_0=K$ affects the equation for $j=1$, introducing an affine term. The term involving $V_N=0$ for $j=N-1$ vanishes.\n\nThe time derivative is discretized using a $\\theta$-scheme, which allows us to represent both the Crank-Nicolson and Backward Euler methods. Marching from time level $n$ to $n-1$, the PDE $\\frac{\\partial V}{\\partial t} + \\mathcal{L}V = 0$ becomes:\n$$\n\\frac{\\mathbf{V}^n - \\mathbf{V}^{n-1}}{\\Delta t} + (1-\\theta) (\\mathcal{A}\\mathbf{V}^n + \\mathbf{c}_b) + \\theta (\\mathcal{A}\\mathbf{V}^{n-1} + \\mathbf{c}_b) = 0\n$$\nwhere $\\mathbf{V}^n$ is the vector of prices at time $t_n$, $\\mathcal{A}$ is the matrix representing the discrete spatial operator, and $\\mathbf{c}_b$ is a vector for the boundary condition terms. Rearranging for the unknown $\\mathbf{V}^{n-1}$ yields a linear system:\n$$\n(I + \\theta \\Delta t \\mathcal{A}) \\mathbf{V}^{n-1} = (I - (1-\\theta) \\Delta t \\mathcal{A}) \\mathbf{V}^n - \\Delta t \\mathbf{c}_b\n$$\n- For the **Crank-Nicolson** scheme, $\\theta = 1/2$.\n- For the **Backward Euler** scheme, $\\theta = 1$.\n\nFor an American option, we must enforce the early exercise constraint $V(S,t) \\ge g(S)$, where $g(S) = \\max(K-S, 0)$. At each time step, this transforms the linear system into a linear complementarity problem (LCP), which we solve using the specified **Projected Successive Over-Relaxation (PSOR)** method. For a system $M\\mathbf{v} = \\mathbf{b}$ with constraint $\\mathbf{v} \\ge \\mathbf{g}$, the PSOR iteration updates each component $v_i$ as:\n$$\nv_i^{(k+1)} = \\max\\left(g_i, \\ v_i^{(k)} + \\frac{\\omega}{M_{ii}}\\left(b_i - \\sum_{j<i} M_{ij}v_j^{(k+1)} - \\sum_{j \\ge i} M_{ij}v_j^{(k)}\\right)\\right)\n$$\nwhere $\\omega \\in (0,2)$ is the relaxation parameter.\n\nThe task is to compare two approaches at the first time step from $t=T$ to $t=T-\\Delta t$, where the initial data is the non-smooth payoff function $V(S,T) = \\max(K-S,0)$.\n\n1.  **Standard Crank-Nicolson**: We take one full step of size $\\Delta t$ from $t=T$ to $t = T-\\Delta t$ using the Crank-Nicolson scheme ($\\theta=1/2$). We solve the corresponding LCP to find the option price vector $\\mathbf{V}_{\\text{CN}}$.\n\n2.  **Rannacher Smoothing**: We take two consecutive half-steps, each of size $\\Delta t/2$, using the Backward Euler scheme ($\\theta=1$). The first step takes us from $t=T$ to $t=T-\\Delta t/2$, and the second step from $t=T-\\Delta t/2$ to $t=T-\\Delta t$. This yields the option price vector $\\mathbf{V}_{\\text{Rannacher}}$. The high numerical dissipation of the Backward Euler scheme is intended to dampen the oscillations caused by the non-smooth initial data.\n\nFinally, we quantify the oscillations by counting the number of \"convexity violations\" for each resulting price vector. A violation at grid point $j$ occurs if the discrete second derivative is negative:\n$$\nV_{j+1} - 2V_j + V_{j-1} < 0.\n$$\nThis count is computed for $j=1, \\dots, N-1$. The desired output for each test case is the difference between the violation count from the Crank-Nicolson scheme and the count from the Rannacher-smoothed scheme. A positive difference demonstrates the effectiveness of the smoothing technique.\n\nThe provided Python code implements this entire procedure: it constructs the finite difference matrices, handles boundary conditions, solves the LCP using PSOR, executes both time-stepping schemes for the first step, and computes the difference in convexity violations for each set of parameters.", "answer": "```python\nimport numpy as np\n\ndef solve_lcp_psor(A, b, g, v_initial, omega, tol, max_iter):\n    \"\"\"\n    Solves the linear complementarity problem corresponding to the implicit\n    time-stepping of the American option PDE using Projected Successive\n    Over-Relaxation (PSOR).\n\n    The problem is to find v such that:\n    v >= g\n    A*v - b >= 0\n    (v - g) * (A*v - b) = 0\n\n    Args:\n        A (np.ndarray): The system matrix (LHS).\n        b (np.ndarray): The system vector (RHS).\n        g (np.ndarray): The exercise payoff vector (the constraint).\n        v_initial (np.ndarray): The initial guess for the solution v.\n        omega (float): The relaxation parameter for SOR.\n        tol (float): The convergence tolerance.\n        max_iter (int): The maximum number of iterations.\n\n    Returns:\n        np.ndarray: The solution vector v.\n    \"\"\"\n    v = v_initial.copy()\n    n = len(v)\n    for k in range(max_iter):\n        v_old = v.copy()\n        max_abs_diff = 0.0\n        for i in range(n):\n            # Sum over components already updated in this iteration (j < i)\n            s1 = np.dot(A[i, :i], v[:i])\n            # Sum over components from the previous iteration (j > i)\n            s2 = np.dot(A[i, i+1:], v_old[i+1:])\n            \n            # Standard SOR update value before projection\n            # This is equivalent to (1-omega)*v_old[i] + omega*(Gauss-Seidel update)\n            sor_val = v_old[i] + omega * ((b[i] - s1 - s2) / A[i, i] - v_old[i])\n\n            # Projection step to enforce the early exercise constraint\n            new_vi = max(g[i], sor_val)\n            \n            max_abs_diff = max(max_abs_diff, abs(new_vi - v_old[i]))\n            v[i] = new_vi\n        \n        if max_abs_diff < tol:\n            break\n            \n    return v\n\ndef count_convexity_violations(V_interior, K, N):\n    \"\"\"\n    Counts the number of indices j in {1, ..., N-1} where the discrete\n    second spatial derivative of the option price is negative.\n\n    Args:\n        V_interior (np.ndarray): Vector of option prices at interior points V_1, ..., V_{N-1}.\n        K (float): The strike price, used as the boundary value V_0.\n        N (float): The number of spatial divisions.\n\n    Returns:\n        int: The number of convexity violations.\n    \"\"\"\n    V_full = np.zeros(N + 1)\n    V_full[0] = K\n    V_full[1:N] = V_interior\n    # V_full[N] is 0.0, as V(S_max, t) = 0\n    \n    # Check V_{j+1} - 2*V_j + V_{j-1} < 0 for j=1, ..., N-1\n    second_derivs = V_full[2:] - 2 * V_full[1:-1] + V_full[:-2]\n    \n    return int(np.sum(second_derivs < 0))\n\ndef compute_oscillation_diff(params):\n    \"\"\"\n    Main computational routine for a single test case. It computes the option\n    price at time T-dt using both standard Crank-Nicolson and Rannacher\n    smoothing, and returns the difference in convexity violations.\n    \"\"\"\n    K, r, sigma, T, S_max, N, M = params\n    \n    # Grid parameters\n    dt = T / M\n    dS = S_max / N\n    \n    # Spatial grid for interior points (j = 1, ..., N-1)\n    j = np.arange(1, N) \n    \n    # Terminal condition at t=T and payoff constraint g(S)\n    S_grid = np.linspace(0, S_max, N + 1)\n    V_T = np.maximum(K - S_grid, 0)\n    g_interior = V_T[1:N]\n    \n    # --- Setup finite difference matrix A for the spatial operator ---\n    A = np.zeros((N - 1, N - 1))\n    \n    alpha = 0.5 * sigma**2 * j**2 - 0.5 * r * j\n    beta = -sigma**2 * j**2 - r\n    gamma = 0.5 * sigma**2 * j**2 + 0.5 * r * j\n    \n    A[np.arange(N - 1), np.arange(N - 1)] = beta\n    A[np.arange(N - 2), np.arange(N - 2) + 1] = gamma[:-1]\n    A[np.arange(1, N - 1), np.arange(1, N - 1) - 1] = alpha[1:]\n            \n    # Vector for boundary condition V(0, t)=K\n    bc_term_vector = np.zeros(N - 1)\n    bc_term_vector[0] = alpha[0] * K\n    \n    # PSOR parameters\n    omega = 1.2\n    tol = 1e-9\n    max_iter = 20000\n    \n    # --- Method 1: Single Crank-Nicolson Step ---\n    V_prev_ts = V_T[1:N]\n    theta_cn = dt / 2.0\n    \n    L_cn = np.identity(N - 1) - theta_cn * A\n    R_cn = np.identity(N - 1) + theta_cn * A\n    \n    # Assemble the RHS vector\n    b_cn = R_cn @ V_prev_ts + dt * bc_term_vector\n    \n    V_cn_interior = solve_lcp_psor(L_cn, b_cn, g_interior, g_interior.copy(), omega, tol, max_iter)\n    violations_cn = count_convexity_violations(V_cn_interior, K, N)\n\n    # --- Method 2: Rannacher Smoothing (Two Backward Euler half-steps) ---\n    theta_be = dt / 2.0\n    L_be = np.identity(N - 1) - theta_be * A\n    \n    # First half-step from T to T - dt/2\n    b_be1 = V_T[1:N] + theta_be * bc_term_vector\n    V_half_step = solve_lcp_psor(L_be, b_be1, g_interior, g_interior.copy(), omega, tol, max_iter)\n    \n    # Second half-step from T - dt/2 to T - dt\n    b_be2 = V_half_step + theta_be * bc_term_vector\n    V_rannacher_interior = solve_lcp_psor(L_be, b_be2, g_interior, V_half_step, omega, tol, max_iter)\n    \n    violations_rannacher = count_convexity_violations(V_rannacher_interior, K, N)\n    \n    return violations_cn - violations_rannacher\n\ndef solve():\n    \"\"\"\n    Main driver function to run all test cases and print results.\n    \"\"\"\n    test_cases = [\n        # (K, r, sigma, T, S_max, N, M)\n        (100.0, 0.05, 0.2, 0.25, 400.0, 120, 10),\n        (100.0, 0.03, 0.3, 0.5, 400.0, 80, 8),\n        (50.0, 0.1, 0.4, 1.0, 200.0, 100, 10),\n    ]\n\n    results = []\n    for case in test_cases:\n        diff = compute_oscillation_diff(case)\n        results.append(diff)\n\n    # Final print statement in the exact required format.\n    print(f\"[{','.join(map(str, results))}]\")\n\nsolve()\n```"}]}