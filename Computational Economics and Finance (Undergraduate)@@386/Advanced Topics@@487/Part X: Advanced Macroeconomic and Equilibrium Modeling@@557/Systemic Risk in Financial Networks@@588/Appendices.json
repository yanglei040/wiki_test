{"hands_on_practices": [{"introduction": "To effectively monitor the financial system, regulators and analysts often rely on summary indicators that capture its overall health. This first practice challenges you to construct such a measure, a \"financial brittleness\" index. You will learn to synthesize metrics of network topology, like the clustering coefficient, with fundamental financial data, such as institutional leverage. This exercise [@problem_id:2435773] demonstrates how systemic risk arises not just from individual weakness, but from the intricate combination of network structure and the financial positions of its members.", "id": "2435773", "problem": "A financial system is represented by an undirected network of $5$ banks labeled $A,B,C,D,E$, where an undirected edge between two banks indicates a bilateral exposure relationship. The edge set is $\\{AB,AC,BC,BD,CD,DE\\}$. Each bank $i$ has total assets $A_i$ and equity $E_i$ given by:\n- Bank $A$: $A_A=100$, $E_A=10$.\n- Bank $B$: $A_B=150$, $E_B=12.5$.\n- Bank $C$: $A_C=120$, $E_C=15$.\n- Bank $D$: $A_D=80$, $E_D=8$.\n- Bank $E$: $A_E=50$, $E_E=10$.\n\nDefine the following primitives:\n1. The global clustering coefficient $C$ (transitivity) of an undirected simple graph is defined as $C = \\dfrac{3 T}{W}$, where $T$ is the number of triangles in the graph and $W$ is the number of connected triples of vertices. A connected triple is an unordered triple of distinct vertices with at least two edges that share a common vertex.\n2. The node leverage of bank $i$ is $L_i = \\dfrac{A_i}{E_i}$. The aggregate leverage is the asset-weighted average leverage\n$$\n\\bar{L} = \\sum_{i \\in \\{A,B,C,D,E\\}} \\omega_i L_i, \\quad \\text{with } \\omega_i = \\dfrac{A_i}{\\sum_{j \\in \\{A,B,C,D,E\\}} A_j}.\n$$\n\nA “financial brittleness” index $B$ is to be constructed by combining topology and leverage under the following calibration protocol. First, define linearly normalized measures\n$$\nx_C = \\dfrac{C - C_{\\mathrm{S}}}{C_{\\mathrm{R}} - C_{\\mathrm{S}}}, \\qquad x_L = \\dfrac{\\bar{L} - \\bar{L}_{\\mathrm{S}}}{\\bar{L}_{\\mathrm{R}} - \\bar{L}_{\\mathrm{S}}},\n$$\nrelative to two anchor states: a “safe” anchor with $(C_{\\mathrm{S}}, \\bar{L}_{\\mathrm{S}}) = (0, 5)$ and a “risky” anchor with $(C_{\\mathrm{R}}, \\bar{L}_{\\mathrm{R}}) = (0.6, 15)$.\n\nLet\n$$\nB = \\gamma + \\lambda \\big( w x_L + (1-w) x_C \\big),\n$$\nwhere leverage receives twice the weight of clustering, so $w = \\dfrac{2}{3}$. The constants $\\gamma$ and $\\lambda$ are determined by the calibration conditions $B=0.2$ at the safe anchor and $B=0.8$ at the risky anchor.\n\nCompute the brittleness index $B$ for the given network using these definitions and calibration. Round your final result to four significant figures. Express the answer as a pure number without units.", "solution": "The problem is well-defined, self-contained, and consistent with principles of network science and financial modeling. All necessary data and definitions are provided, allowing for a unique solution. I will therefore proceed with a systematic calculation of the financial brittleness index $B$.\n\nThe calculation proceeds in five sequential steps: ($1$) computing the network's global clustering coefficient $C$, ($2$) computing the system's aggregate leverage $\\bar{L}$, ($3$) normalizing these two measures, ($4$) calibrating the brittleness index formula, and ($5$) computing the final value of $B$.\n\nFirst, we analyze the network topology to find the global clustering coefficient, $C = \\frac{3T}{W}$. The network consists of $N=5$ vertices (banks) $\\{A, B, C, D, E\\}$ and the edge set $\\{AB, AC, BC, BD, CD, DE\\}$.\n$T$ is the number of triangles (complete subgraphs of $3$ vertices). By inspection of the edge set:\n-   The vertex set $\\{A, B, C\\}$ forms a triangle because the edges $AB$, $AC$, and $BC$ are all present.\n-   The vertex set $\\{B, C, D\\}$ forms a triangle because the edges $BC$, $BD$, and $CD$ are all present.\nNo other combination of three vertices forms a triangle. Therefore, the number of triangles is $T=2$.\n\n$W$ is the number of connected triples, which are paths of length $2$. The number of such paths centered at a vertex $v$ is given by $\\binom{d(v)}{2}$, where $d(v)$ is the degree of vertex $v$. We first compute the degrees of all vertices:\n-   $d(A) = 2$ (connected to $B, C$)\n-   $d(B) = 3$ (connected to $A, C, D$)\n-   $d(C) = 3$ (connected to $A, B, D$)\n-   $d(D) = 3$ (connected to $B, C, E$)\n-   $d(E) = 1$ (connected to $D$)\nThe total number of connected triples is the sum over all vertices:\n$$W = \\sum_{i \\in \\{A,B,C,D,E\\}} \\binom{d(i)}{2} = \\binom{2}{2} + \\binom{3}{2} + \\binom{3}{2} + \\binom{3}{2} + \\binom{1}{2}$$\n$$W = 1 + 3 + 3 + 3 + 0 = 10$$\nNow, we can compute the global clustering coefficient:\n$$C = \\frac{3T}{W} = \\frac{3 \\times 2}{10} = \\frac{6}{10} = 0.6$$\n\nSecond, we compute the aggregate leverage $\\bar{L}$. First, we find the leverage $L_i = \\frac{A_i}{E_i}$ for each bank:\n-   $L_A = \\frac{A_A}{E_A} = \\frac{100}{10} = 10$\n-   $L_B = \\frac{A_B}{E_B} = \\frac{150}{12.5} = 12$\n-   $L_C = \\frac{A_C}{E_C} = \\frac{120}{15} = 8$\n-   $L_D = \\frac{A_D}{E_D} = \\frac{80}{8} = 10$\n-   $L_E = \\frac{A_E}{E_E} = \\frac{50}{10} = 5$\nNext, we determine the asset-weighted average. The total assets in the system are:\n$$\\sum_{j} A_j = A_A + A_B + A_C + A_D + A_E = 100 + 150 + 120 + 80 + 50 = 500$$\nThe weights $\\omega_i = \\frac{A_i}{\\sum_j A_j}$ are:\n-   $\\omega_A = \\frac{100}{500} = 0.2$\n-   $\\omega_B = \\frac{150}{500} = 0.3$\n-   $\\omega_C = \\frac{120}{500} = 0.24$\n-   $\\omega_D = \\frac{80}{500} = 0.16$\n-   $\\omega_E = \\frac{50}{500} = 0.1$\nThe aggregate leverage $\\bar{L}$ is the weighted sum:\n$$\\bar{L} = \\sum_{i} \\omega_i L_i = (0.2)(10) + (0.3)(12) + (0.24)(8) + (0.16)(10) + (0.1)(5)$$\n$$\\bar{L} = 2.0 + 3.6 + 1.92 + 1.6 + 0.5 = 9.62$$\n\nThird, we normalize the computed values $C$ and $\\bar{L}$ using the given anchor states: the \"safe\" anchor $(C_{\\mathrm{S}}, \\bar{L}_{\\mathrm{S}}) = (0, 5)$ and the \"risky\" anchor $(C_{\\mathrm{R}}, \\bar{L}_{\\mathrm{R}}) = (0.6, 15)$.\nThe normalized clustering measure is:\n$$x_C = \\frac{C - C_{\\mathrm{S}}}{C_{\\mathrm{R}} - C_{\\mathrm{S}}} = \\frac{0.6 - 0}{0.6 - 0} = 1$$\nThe normalized leverage measure is:\n$$x_L = \\frac{\\bar{L} - \\bar{L}_{\\mathrm{S}}}{\\bar{L}_{\\mathrm{R}} - \\bar{L}_{\\mathrm{S}}} = \\frac{9.62 - 5}{15 - 5} = \\frac{4.62}{10} = 0.462$$\n\nFourth, we calibrate the brittleness index $B = \\gamma + \\lambda(w x_L + (1-w) x_C)$ using the boundary conditions.\nAt the safe anchor, $(x_C, x_L)=(0,0)$ and $B=0.2$. Substituting these values gives:\n$$0.2 = \\gamma + \\lambda(w \\cdot 0 + (1-w) \\cdot 0) \\implies \\gamma = 0.2$$\nAt the risky anchor, $(x_C, x_L)=(1,1)$ and $B=0.8$. Substituting these values gives:\n$$0.8 = \\gamma + \\lambda(w \\cdot 1 + (1-w) \\cdot 1) = \\gamma + \\lambda$$\nUsing $\\gamma = 0.2$, we solve for $\\lambda$:\n$$0.8 = 0.2 + \\lambda \\implies \\lambda = 0.6$$\nThe calibrated brittleness index formula is $B = 0.2 + 0.6(w x_L + (1-w) x_C)$.\n\nFifth, we compute the final value of $B$ for the given network. We use the calculated normalized values $x_C=1$ and $x_L=0.462$, and the prescribed weight $w = \\frac{2}{3}$.\n$$B = 0.2 + 0.6 \\left( \\left(\\frac{2}{3}\\right) x_L + \\left(1-\\frac{2}{3}\\right) x_C \\right)$$\n$$B = 0.2 + 0.6 \\left( \\left(\\frac{2}{3}\\right)(0.462) + \\left(\\frac{1}{3}\\right)(1) \\right)$$\n$$B = 0.2 + 0.6 \\left( \\frac{2 \\times 0.462 + 1}{3} \\right)$$\n$$B = 0.2 + 0.2 (0.924 + 1)$$\n$$B = 0.2 + 0.2 (1.924)$$\n$$B = 0.2 + 0.3848 = 0.5848$$\nThe problem requires the result to be rounded to four significant figures. The calculated value $0.5848$ already has four significant figures.", "answer": "$$\n\\boxed{0.5848}\n$$"}, {"introduction": "While a static index can diagnose vulnerability, understanding how a crisis actually unfolds requires a dynamic model. This exercise asks you to simulate a default cascade, a step-by-step process where an initial shock propagates through the network. You will specifically explore the concept of \"regulatory arbitrage\" [@problem_id:2435816] by varying the fraction of activities, $s$, that banks shift to a riskier, unregulated \"shadow\" sector. This simulation provides a powerful, hands-on illustration of contagion dynamics and reveals how loopholes can dramatically amplify systemic risk.", "id": "2435816", "problem": "You are given a stylized interbank network with two layers of obligations that represent a regulated layer and a shadow (unregulated) layer. Banks can reroute a fraction of their gross interbank obligations through the shadow layer, which is more fragile due to lower recoveries in default. The financial system evolves deterministically according to balance-sheet identities and a discrete-time default cascade with losses on default.\n\nFundamental base:\n- Equity is defined by the accounting identity, for each bank $i$: $q_i = A_i - P_i$, where $A_i$ are total assets and $P_i$ are total liabilities. Limited liability implies that default occurs when $q_i &lt; 0$.\n- Interbank obligations are represented by a liabilities matrix $\\mathbf{L} \\in \\mathbb{R}_+^{N \\times N}$ with entries $L_{ij}$ meaning bank $i$ owes $L_{ij}$ to bank $j$. For each bank $i$, total interbank liabilities are $\\bar{p}_i = \\sum_{j=1}^N L_{ij}$ and total interbank assets are $\\sum_{k=1}^N L_{ki}$.\n- External assets $e_i \\ge 0$ are shocked by an exogenous, deterministic amount $\\Delta_i \\ge 0$, yielding post-shock external assets $e_i - \\Delta_i$.\n- Loss Given Default (LGD) is modeled deterministically: when a borrower defaults, each creditor realizes a fixed recovery on the defaulted exposure. The regulated layer has recovery $r_R \\in [0,1]$ and the shadow layer has recovery $r_S \\in [0,1]$ with $r_S &lt; r_R$. The corresponding LGD values are $1 - r_R$ and $1 - r_S$.\n\nLayer construction and regulatory arbitrage:\n- For a given shift fraction $s \\in [0,1]$, each gross bilateral obligation is decomposed as $L_{ij}^{(R)} = (1-s) L_{ij}$ in the regulated layer and $L_{ij}^{(S)} = s L_{ij}$ in the shadow layer.\n- When a bank $j$ defaults, any creditor $i$ with exposure to $j$ loses deterministically\n$$\n\\text{loss}_{i \\leftarrow j}(s) = (1-r_R) L_{j i}^{(R)} + (1-r_S) L_{j i}^{(S)} = \\big( (1-s)(1-r_R) + s(1-r_S) \\big) L_{j i}.\n$$\nDefine the effective loss multiplier\n$$\nm(s) = (1-s)(1-r_R) + s(1-r_S).\n$$\n\nContagion mechanism (discrete-time cascade):\n- Step $0$: Compute initial post-shock equity for each bank $i$,\n$$\nq_i^{(0)} = \\big(e_i - \\Delta_i\\big) + \\sum_{k=1}^N L_{k i} - \\sum_{j=1}^N L_{i j}.\n$$\nAny bank $i$ with $q_i^{(0)} &lt; 0$ defaults at step $0$.\n- Step $t \\ge 1$: For each borrower $j$ that newly defaulted at step $t-1$, reduce the equity of each creditor $i$ by $\\text{loss}_{i \\leftarrow j}(s) = m(s) L_{j i}$. If this reduction pushes some solvent bank $i$ to $q_i^{(t)} &lt; 0$, then bank $i$ becomes a new defaulter at step $t$. Each borrower triggers losses only once (upon its first default). Iterate until no new defaults occur.\n\nYour task:\n- Implement this deterministic cascade algorithm for the fixed network and parameter values below.\n- For each test case, output the final total number of defaulted banks as a nonnegative integer.\n\nFixed network and recoveries:\n- Number of banks: $N = 3$.\n- Interbank liabilities matrix $\\mathbf{L}$ with rows as borrowers and columns as creditors:\n$$\n\\mathbf{L} =\n\\begin{bmatrix}\n0 & 70 & 0 \\\\\n0 & 0 & 80 \\\\\n30 & 0 & 0\n\\end{bmatrix}.\n$$\n- External assets vector:\n$$\n\\mathbf{e} = \\begin{bmatrix} 60 \\\\ 30 \\\\ 5 \\end{bmatrix}.\n$$\n- Regulated-layer recovery $r_R = 0.9$ and shadow-layer recovery $r_S = 0.2$.\n\nTest suite:\nEach test case specifies the shift fraction $s$ and the external shock vector $\\boldsymbol{\\Delta}$. All $s$ values are decimals in $[0,1]$, and all components of $\\boldsymbol{\\Delta}$ are nonnegative reals.\n\n- Test $1$: $s = 0.0$, $\\boldsymbol{\\Delta} = \\begin{bmatrix} 55 \\\\ 0 \\\\ 0 \\end{bmatrix}$.\n- Test $2$: $s = 0.3$, $\\boldsymbol{\\Delta} = \\begin{bmatrix} 55 \\\\ 0 \\\\ 0 \\end{bmatrix}$.\n- Test $3$: $s = 0.5$, $\\boldsymbol{\\Delta} = \\begin{bmatrix} 55 \\\\ 0 \\\\ 0 \\end{bmatrix}$.\n- Test $4$: $s = 1.0$, $\\boldsymbol{\\Delta} = \\begin{bmatrix} 55 \\\\ 0 \\\\ 0 \\end{bmatrix}$.\n- Test $5$: $s = 0.8$, $\\boldsymbol{\\Delta} = \\begin{bmatrix} 0 \\\\ 0 \\\\ 0 \\end{bmatrix}$.\n\nProgram requirements:\n- Write a complete, runnable program that computes the final number of defaults for each test case, using the cascade mechanism above and the fixed data. No randomness is allowed.\n- Final output format: Your program should produce a single line of output containing the results as a comma-separated list enclosed in square brackets, for example, $[x_1,x_2,\\dots,x_5]$, where each $x_k$ is the integer number of defaults for test $k$ in the order listed above.", "solution": "The problem presented is a well-posed exercise in computational finance, specifically concerning systemic risk propagation in a stylized, multi-layered interbank network. All necessary parameters and dynamics are provided with sufficient clarity and mathematical rigor. The problem is therefore valid, and a deterministic solution can be derived.\n\nThe core of the problem lies in tracking the evolution of bank equities under an initial shock and subsequent contagion effects. The system is defined by a set of $N$ banks, their interbank obligations, and their holdings of external assets. The financial structure is governed by the fundamental balance sheet identity for each bank $i$:\n$$\nq_i = A_i - P_i\n$$\nwhere $q_i$ is the equity, $A_i$ are the total assets, and $P_i$ are the total liabilities. A bank is considered to be in default if its equity becomes negative, $q_i < 0$, consistent with the principle of limited liability.\n\nThe total assets $A_i$ of bank $i$ are composed of its external assets $e_i$ and its interbank assets $\\bar{a}_i$, which are claims on other banks. The total liabilities $P_i$ are its interbank liabilities $\\bar{p}_i$, which are obligations to other banks. The interbank exposures are encoded in the liabilities matrix $\\mathbf{L}$, where $L_{ij}$ represents the amount bank $i$ owes to bank $j$.\nThus, for each bank $i$, we can write:\n- Total interbank liabilities: $\\bar{p}_i = \\sum_{j=1}^N L_{ij}$\n- Total interbank assets: $\\bar{a}_i = \\sum_{k=1}^N L_{ki}$\n\nThe initial, pre-shock equity of bank $i$ is therefore:\n$$\nq_{i, \\text{pre-shock}} = e_i + \\bar{a}_i - \\bar{p}_i\n$$\n\nFor the given network with $N=3$:\n- Liabilities matrix: $\\mathbf{L} = \\begin{bmatrix} 0 & 70 & 0 \\\\ 0 & 0 & 80 \\\\ 30 & 0 & 0 \\end{bmatrix}$\n- External assets: $\\mathbf{e} = \\begin{bmatrix} 60 \\\\ 30 \\\\ 5 \\end{bmatrix}$\n\nWe first compute the vector of total interbank liabilities, $\\bar{\\mathbf{p}}$, by summing the rows of $\\mathbf{L}$:\n$$\n\\bar{\\mathbf{p}} = \\begin{bmatrix} 0+70+0 \\\\ 0+0+80 \\\\ 30+0+0 \\end{bmatrix} = \\begin{bmatrix} 70 \\\\ 80 \\\\ 30 \\end{bmatrix}\n$$\nNext, we compute the vector of total interbank assets, $\\bar{\\mathbf{a}}$, by summing the columns of $\\mathbf{L}$:\n$$\n\\bar{\\mathbf{a}} = \\begin{bmatrix} 0+0+30 \\\\ 70+0+0 \\\\ 0+80+0 \\end{bmatrix} = \\begin{bmatrix} 30 \\\\ 70 \\\\ 80 \\end{bmatrix}\n$$\nThe initial, pre-shock equity vector $\\mathbf{q}_{\\text{pre-shock}}$ is:\n$$\n\\mathbf{q}_{\\text{pre-shock}} = \\mathbf{e} + \\bar{\\mathbf{a}} - \\bar{\\mathbf{p}} = \\begin{bmatrix} 60 \\\\ 30 \\\\ 5 \\end{bmatrix} + \\begin{bmatrix} 30 \\\\ 70 \\\\ 80 \\end{bmatrix} - \\begin{bmatrix} 70 \\\\ 80 \\\\ 30 \\end{bmatrix} = \\begin{bmatrix} 20 \\\\ 20 \\\\ 55 \\end{bmatrix}\n$$\nAll banks are initially solvent. The contagion process begins with an exogenous shock $\\boldsymbol{\\Delta}$ to external assets.\n\nThe contagion mechanism depends critically on the loss-given-default, which is determined by the recoveries on the regulated ($r_R=0.9$) and shadow ($r_S=0.2$) layers. The fraction of obligations shifted to the shadow layer is $s$. When a bank defaults, its creditors incur a loss. The loss is magnified by the effective loss multiplier, $m(s)$:\n$$\nm(s) = (1-s)(1-r_R) + s(1-r_S) = (1-s)(1-0.9) + s(1-0.2) = 0.1(1-s) + 0.8s = 0.1 + 0.7s\n$$\nThe cascade proceeds in discrete time steps.\n\n**Step 0: Initial Shock**\nThe initial post-shock equity vector $\\mathbf{q}^{(0)}$ is computed as:\n$$\n\\mathbf{q}^{(0)} = \\mathbf{q}_{\\text{pre-shock}} - \\boldsymbol{\\Delta}\n$$\nAny bank $i$ with $q_i^{(0)} < 0$ is declared defaulted.\n\n**Step $t \\ge 1$: Contagion**\nIf a set of banks $D_{t-1}$ newly defaulted at step $t-1$, then for each non-defaulted bank $i$, its equity is updated to reflect losses from these new defaults:\n$$\nq_i^{(t)} = q_i^{(t-1)} - \\sum_{j \\in D_{t-1}} m(s) L_{ji}\n$$\nAny bank $i$ for which $q_i^{(t)}$ falls below zero becomes a new defaulter at step $t$. The process is iterated until no new defaults occur in a step.\n\nWe now solve for each test case.\n\n**Test Case 1:** $s = 0.0$, $\\boldsymbol{\\Delta} = [55, 0, 0]^T$\n- Loss multiplier: $m(0.0) = 0.1 + 0.7(0.0) = 0.1$.\n- Step 0: $\\mathbf{q}^{(0)} = [20, 20, 55]^T - [55, 0, 0]^T = [-35, 20, 55]^T$. Bank 1 ($q_1^{(0)} = -35 < 0$) defaults. Defaulted set: $\\{1\\}$.\n- Step 1: Bank 1 owes $L_{12} = 70$ to bank 2.\n  - Loss for bank 2: $m(0.0) \\times L_{12} = 0.1 \\times 70 = 7$.\n  - Equity of bank 2: $q_2^{(1)} = q_2^{(0)} - 7 = 20 - 7 = 13$. Bank 2 remains solvent.\n- No further defaults. Cascade terminates.\n- Total defaults: $1$.\n\n**Test Case 2:** $s = 0.3$, $\\boldsymbol{\\Delta} = [55, 0, 0]^T$\n- Loss multiplier: $m(0.3) = 0.1 + 0.7(0.3) = 0.1 + 0.21 = 0.31$.\n- Step 0: $\\mathbf{q}^{(0)} = [-35, 20, 55]^T$. Bank 1 defaults. Defaulted set: $\\{1\\}$.\n- Step 1: Bank 1's default propagates.\n  - Loss for bank 2: $m(0.3) \\times L_{12} = 0.31 \\times 70 = 21.7$.\n  - Equity of bank 2: $q_2^{(1)} = 20 - 21.7 = -1.7$. Bank 2 ($q_2^{(1)} < 0$) defaults. Defaulted set: $\\{1, 2\\}$.\n- Step 2: Bank 2's default propagates. Bank 2 owes $L_{23} = 80$ to bank 3.\n  - Loss for bank 3: $m(0.3) \\times L_{23} = 0.31 \\times 80 = 24.8$.\n  - Equity of bank 3: $q_3^{(2)} = q_3^{(0)} - 24.8 = 55 - 24.8 = 30.2$. Bank 3 remains solvent.\n- No further defaults. Cascade terminates.\n- Total defaults: $2$.\n\n**Test Case 3:** $s = 0.5$, $\\boldsymbol{\\Delta} = [55, 0, 0]^T$\n- Loss multiplier: $m(0.5) = 0.1 + 0.7(0.5) = 0.1 + 0.35 = 0.45$.\n- Step 0: $\\mathbf{q}^{(0)} = [-35, 20, 55]^T$. Bank 1 defaults. Defaulted set: $\\{1\\}$.\n- Step 1: Bank 1's default propagates.\n  - Loss for bank 2: $m(0.5) \\times L_{12} = 0.45 \\times 70 = 31.5$.\n  - Equity of bank 2: $q_2^{(1)} = 20 - 31.5 = -11.5$. Bank 2 defaults. Defaulted set: $\\{1, 2\\}$.\n- Step 2: Bank 2's default propagates.\n  - Loss for bank 3: $m(0.5) \\times L_{23} = 0.45 \\times 80 = 36$.\n  - Equity of bank 3: $q_3^{(2)} = 55 - 36 = 19$. Bank 3 remains solvent.\n- No further defaults.\n- Total defaults: $2$.\n\n**Test Case 4:** $s = 1.0$, $\\boldsymbol{\\Delta} = [55, 0, 0]^T$\n- Loss multiplier: $m(1.0) = 0.1 + 0.7(1.0) = 0.8$.\n- Step 0: $\\mathbf{q}^{(0)} = [-35, 20, 55]^T$. Bank 1 defaults. Defaulted set: $\\{1\\}$.\n- Step 1: Bank 1 defaults.\n  - Loss for bank 2: $m(1.0) \\times L_{12} = 0.8 \\times 70 = 56$.\n  - Equity of bank 2: $q_2^{(1)} = 20 - 56 = -36$. Bank 2 defaults. Defaulted set: $\\{1, 2\\}$.\n- Step 2: Bank 2 defaults.\n  - Loss for bank 3: $m(1.0) \\times L_{23} = 0.8 \\times 80 = 64$.\n  - Equity of bank 3: $q_3^{(2)} = 55 - 64 = -9$. Bank 3 defaults. Defaulted set: $\\{1, 2, 3\\}$.\n- Step 3: Bank 3's default propagates. Bank 3 owes $L_{31}=30$ to bank 1. Since bank 1 is already defaulted, this has no effect on the set of defaulters.\n- The entire system has collapsed.\n- Total defaults: $3$.\n\n**Test Case 5:** $s = 0.8$, $\\boldsymbol{\\Delta} = [0, 0, 0]^T$\n- Loss multiplier: $m(0.8) = 0.1 + 0.7(0.8) = 0.66$.\n- Step 0: $\\mathbf{q}^{(0)} = \\mathbf{q}_{\\text{pre-shock}} - [0, 0, 0]^T = [20, 20, 55]^T$.\n- All initial equities are positive. There are no initial defaults.\n- The cascade is not initiated.\n- Total defaults: $0$.\n\nThe analysis demonstrates a critical phenomenon: as the financial system shifts obligations to a less regulated, more fragile \"shadow\" layer (increasing $s$), its resilience to initial shocks deteriorates. A shock that was contained at $s=0.0$ leads to a partial cascade for intermediate $s$ values and a full systemic collapse when $s=1.0$.", "answer": "```python\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Solves for the number of defaulted banks in a stylized interbank network\n    for a given set of test cases.\n    \"\"\"\n\n    # Fixed network parameters\n    # L_ij means bank i (row) owes bank j (column)\n    L = np.array([\n        [0.0, 70.0, 0.0],\n        [0.0, 0.0, 80.0],\n        [30.0, 0.0, 0.0]\n    ])\n    e = np.array([60.0, 30.0, 5.0])\n    r_R = 0.9\n    r_S = 0.2\n    N = 3\n\n    # Test cases: (shift fraction s, shock vector Delta)\n    test_cases = [\n        (0.0, np.array([55.0, 0.0, 0.0])),\n        (0.3, np.array([55.0, 0.0, 0.0])),\n        (0.5, np.array([55.0, 0.0, 0.0])),\n        (1.0, np.array([55.0, 0.0, 0.0])),\n        (0.8, np.array([0.0, 0.0, 0.0]))\n    ]\n\n    results = []\n\n    # Calculate fixed network properties once\n    p_bar = np.sum(L, axis=1)  # Total interbank liabilities (row sums)\n    a_bar = np.sum(L, axis=0)  # Total interbank assets (column sums)\n    q_pre_shock = e + a_bar - p_bar\n\n    for s, Delta in test_cases:\n        # Effective loss multiplier for the current s\n        m_s = (1 - s) * (1 - r_R) + s * (1 - r_S)\n\n        # Step 0: Initial shock and defaults\n        q = q_pre_shock - Delta\n        \n        # Sets to track defaulted banks\n        # Bank indices are 1-based, numpy arrays are 0-based\n        defaulted_banks = set(np.where(q < 0)[0] + 1)\n        newly_defaulted = defaulted_banks.copy()\n        \n        # Iterative contagion process\n        while newly_defaulted:\n            # Banks that defaulted in the previous wave trigger new losses\n            current_wave_defaulters = newly_defaulted.copy()\n            newly_defaulted.clear()\n            \n            for j_defaulter in current_wave_defaulters:\n                # Propagate losses to creditors of the defaulted bank j_defaulter\n                # A bank i is a creditor if L[j-1, i-1] > 0\n                for i_creditor in range(1, N + 1):\n                    # Continue if creditor is already defaulted\n                    if i_creditor in defaulted_banks:\n                        continue\n                    \n                    # Calculate loss for creditor i from defaulter j\n                    # L is indexed by (borrower, creditor)\n                    loss = m_s * L[j_defaulter - 1, i_creditor - 1]\n                    \n                    if loss > 0:\n                        # Update equity of the creditor\n                        q[i_creditor - 1] -= loss\n                        \n                        # Check if the creditor defaults\n                        if q[i_creditor - 1] < 0:\n                            defaulted_banks.add(i_creditor)\n                            newly_defaulted.add(i_creditor)\n        \n        # The result for this case is the total number of defaulted banks\n        results.append(len(defaulted_banks))\n\n    # Print the final results in the specified format\n    print(f\"[{','.join(map(str, results))}]\")\n\nsolve()\n```"}, {"introduction": "After diagnosing risk and simulating contagion, the crucial final step is to design effective interventions. This practice puts you in the role of a regulator tasked with stabilizing a shocked financial system in the most efficient way possible. Using the canonical Eisenberg-Noe model of financial clearing, you will calculate the precise minimum capital injection, $\\Delta C_{\\min}$, needed to ensure all institutions can once again meet their full obligations. This problem [@problem_id:2435808] offers a glimpse into the sophisticated quantitative tools that underpin modern crisis management and policy design.", "id": "2435808", "problem": "Consider a financial system with $n$ institutions, represented by a directed weighted liability network. Let $L \\in \\mathbb{R}_{\\ge 0}^{n \\times n}$ be the nominal liability matrix where $L_{ij}$ is the obligation of institution $i$ to institution $j$. Define the total nominal liabilities vector $\\bar{p} \\in \\mathbb{R}_{\\ge 0}^{n}$ by\n$$\n\\bar{p}_i \\equiv \\sum_{j=1}^{n} L_{ij}.\n$$\nDefine the relative liability matrix $\\Pi \\in \\mathbb{R}_{\\ge 0}^{n \\times n}$ by\n$$\n\\Pi_{ij} \\equiv \n\\begin{cases}\n\\dfrac{L_{ij}}{\\bar{p}_i}, & \\text{if } \\bar{p}_i > 0, \\\\\n0, & \\text{if } \\bar{p}_i = 0,\n\\end{cases}\n$$\nso that each row of $\\Pi$ sums to at most $1$. Let $x \\in \\mathbb{R}_{\\ge 0}^{n}$ be the vector of external assets prior to any shock.\n\nAn initial shock of size $S_0 \\ge 0$ to a designated node $i \\in \\{1,\\dots,n\\}$ reduces its external assets to $x_i' = \\max\\{x_i - S_0, 0\\}$, while $x_k' = x_k$ for all $k \\ne i$. A non-negative capital injection $\\Delta C \\ge 0$ may then be allocated exclusively to the shocked node $i$, yielding post-injection external assets $x_i'' = x_i' + \\Delta C$ and $x_k'' = x_k'$ for all $k \\ne i$.\n\nPayments clear according to the Eisenberg–Noe fixed-point model: a clearing payment vector $p \\in \\mathbb{R}_{\\ge 0}^{n}$ must satisfy\n$$\np = \\min\\left\\{\\bar{p},\\, \\Pi^\\top p + x''\\right\\},\n$$\nwhere the minimum is taken componentwise and $x''$ is the post-injection external assets vector.\n\nDefine “stabilize the network” to mean that all institutions pay in full, i.e., the clearing payments equal the total nominal liabilities: $p = \\bar{p}$. In other words, stabilization requires that full repayment by all institutions is feasible under the Eisenberg–Noe model with the given shock and the capital injection applied only to node $i$.\n\nTask. For each test case below, compute the minimum capital injection $\\Delta C_{\\min}$ (in the same capital units as $x$ and $L$) required to stabilize the network after the initial shock of size $S_0$ to the specified node $i$. If no finite non-negative $\\Delta C$ allocated exclusively to node $i$ can achieve full repayment by all institutions, return the value $-1.0$ for that test case.\n\nYour program must produce a single line of output containing all results as a comma-separated list enclosed in square brackets, with each number rounded to exactly $6$ decimals. For example, a valid output for four results is of the form $[r_1,r_2,r_3,r_4]$ with each $r_k$ displayed to $6$ decimals.\n\nUse the following test suite. In each case, the network size is $n = 3$.\n\nTest case $1$ (general case):\n- Node index shocked: $i = 1$ (using $1$-based indexing; your program may use $0$-based internally but must respect the data as given here).\n- Initial shock: $S_0 = 1.5$.\n- Liability matrix:\n$$\nL = \\begin{bmatrix}\n0 & 2 & 0 \\\\\n0 & 0 & 1 \\\\\n1 & 0 & 0\n\\end{bmatrix}.\n$$\n- External assets:\n$$\nx = \\begin{bmatrix}\n2 \\\\\n1 \\\\\n0.5\n\\end{bmatrix}.\n$$\n\nTest case $2$ (already stable after shock, requiring zero injection):\n- Node index shocked: $i = 1$.\n- Initial shock: $S_0 = 0.2$.\n- Liability matrix:\n$$\nL = \\begin{bmatrix}\n0 & 2 & 0 \\\\\n0 & 0 & 1 \\\\\n1 & 0 & 0\n\\end{bmatrix}.\n$$\n- External assets:\n$$\nx = \\begin{bmatrix}\n2 \\\\\n1 \\\\\n0.5\n\\end{bmatrix}.\n$$\n\nTest case $3$ (impossible to stabilize by injecting only at the shocked node):\n- Node index shocked: $i = 3$.\n- Initial shock: $S_0 = 0$.\n- Liability matrix:\n$$\nL = \\begin{bmatrix}\n0 & 1 & 0 \\\\\n0 & 0 & 1 \\\\\n0 & 0 & 0\n\\end{bmatrix}.\n$$\n- External assets:\n$$\nx = \\begin{bmatrix}\n0.1 \\\\\n0.1 \\\\\n0.1\n\\end{bmatrix}.\n$$\n\nTest case $4$ (boundary case with a zero-liability node being shocked):\n- Node index shocked: $i = 1$.\n- Initial shock: $S_0 = 10.0$.\n- Liability matrix:\n$$\nL = \\begin{bmatrix}\n0 & 0 & 0 \\\\\n1 & 0 & 0 \\\\\n0 & 1 & 0\n\\end{bmatrix}.\n$$\n- External assets:\n$$\nx = \\begin{bmatrix}\n0.5 \\\\\n0.5 \\\\\n1.0\n\\end{bmatrix}.\n$$\n\nFinal output format requirement. Your program should produce a single line of output containing the results in order for Test cases $1$ through $4$ as a comma-separated list enclosed in square brackets, with each value rounded to exactly $6$ decimals, for example\n$$\n[\\Delta C_{\\min}^{(1)},\\Delta C_{\\min}^{(2)},\\Delta C_{\\min}^{(3)},\\Delta C_{\\min}^{(4)}].\n$$\nIf stabilization is impossible by injecting only at the shocked node, print $-1.000000$ for that case.", "solution": "The problem statement is subjected to validation.\n\nStep 1: Extract Givens\n- The number of institutions is $n$.\n- The nominal liability matrix is $L \\in \\mathbb{R}_{\\ge 0}^{n \\times n}$, where $L_{ij}$ is the debt of institution $i$ to $j$.\n- The total nominal liabilities vector is $\\bar{p} \\in \\mathbb{R}_{\\ge 0}^{n}$, defined by $\\bar{p}_i \\equiv \\sum_{j=1}^{n} L_{ij}$.\n- The relative liability matrix is $\\Pi \\in \\mathbb{R}_{\\ge 0}^{n \\times n}$, defined by $\\Pi_{ij} \\equiv L_{ij}/\\bar{p}_i$ if $\\bar{p}_i > 0$, and $\\Pi_{ij} = 0$ if $\\bar{p}_i = 0$.\n- The vector of external assets is $x \\in \\mathbb{R}_{\\ge 0}^{n}$.\n- An initial shock of size $S_0 \\ge 0$ is applied to a designated node $i$.\n- The post-shock external assets vector $x'$ is defined by $x_i' = \\max\\{x_i - S_0, 0\\}$ and $x_k' = x_k$ for $k \\ne i$.\n- A capital injection $\\Delta C \\ge 0$ is allocated to the shocked node $i$.\n- The post-injection external assets vector $x''$ is defined by $x_i'' = x_i' + \\Delta C$ and $x_k'' = x_k'$ for $k \\ne i$.\n- The clearing payment vector $p \\in \\mathbb{R}_{\\ge 0}^{n}$ satisfies the fixed-point equation $p = \\min\\left\\{\\bar{p},\\, \\Pi^\\top p + x''\\right\\}$.\n- Network stabilization is defined as the condition where all institutions pay in full, i.e., $p = \\bar{p}$.\n- The task is to find the minimum capital injection $\\Delta C_{\\min}$ to stabilize the network. If stabilization by injecting only at node $i$ is not possible, the value is $-1.0$.\n- Four test cases are provided with specific values for $n$, $L$, $x$, $i$, and $S_0$.\n\nStep 2: Validate Using Extracted Givens\n- **Scientifically Grounded**: The problem is based on the Eisenberg–Noe model of financial clearing, a cornerstone of systemic risk analysis in computational economics. The model is mathematically rigorous and widely accepted. The premises are factually sound within this framework.\n- **Well-Posed**: The problem asks for the minimum of a non-negative quantity, $\\Delta C$, subject to a set of linear inequalities. This structure is well-posed. The conditions for existence and uniqueness of a solution are well-defined by the problem's constraints.\n- **Objective**: All terms are defined with mathematical precision. The instructions are clear and unambiguous, free of subjective language.\n- **Completeness and Consistency**: The problem provides all necessary data ($L, x, i, S_0$) and definitions to formulate a solution. There are no internal contradictions.\n\nStep 3: Verdict and Action\nThe problem is valid. It is a well-defined mathematical exercise in the context of a recognized economic model. A solution will now be formulated.\n\nThe core of the problem is to determine the minimum non-negative capital injection, $\\Delta C_{\\min}$, required to achieve network stabilization. Stabilization is defined by the clearing payment vector $p$ being equal to the total nominal liabilities vector $\\bar{p}$, that is, $p = \\bar{p}$.\n\nThe clearing process is governed by the fixed-point equation:\n$$\np = \\min\\left\\{\\bar{p}, \\Pi^\\top p + x''\\right\\}\n$$\nwhere the minimum is taken component-wise. For stabilization to occur, we must have $p = \\bar{p}$. Substituting this condition into the equation yields:\n$$\n\\bar{p} = \\min\\left\\{\\bar{p}, \\Pi^\\top \\bar{p} + x''\\right\\}\n$$\nThis equality holds if and only if for every institution $k \\in \\{1, \\dots, n\\}$, the following inequality is satisfied:\n$$\n\\bar{p}_k \\le (\\Pi^\\top \\bar{p})_k + x''_k\n$$\nThis system of $n$ linear inequalities represents the condition that each institution's total available funds (incoming payments from other institutions, $\\Pi^\\top \\bar{p}$, plus its own post-injection external assets, $x''$) are sufficient to cover its total nominal liabilities, $\\bar{p}$. Let us expand the matrix-vector product term:\n$$\n(\\Pi^\\top \\bar{p})_k = \\sum_{j=1}^{n} (\\Pi^\\top)_{kj} \\bar{p}_j = \\sum_{j=1}^{n} \\Pi_{jk} \\bar{p}_j\n$$\nThe post-injection external assets vector $x''$ depends on the initial shock $S_0$ and the capital injection $\\Delta C$, both applied to a single node $i$. The components of $x''$ are:\n$$\nx''_k = \\begin{cases}\n\\max\\{x_i - S_0, 0\\} + \\Delta C, & \\text{if } k=i \\\\\nx_k, & \\text{if } k \\ne i \\text{ and } k \\text{ is not the shocked node}\n\\end{cases}\n$$\nMore precisely, the shock is applied to node $i$, after which the injection is applied to the same node $i$. Let the shocked node have index $i_{shock}$.\nThen for any node $k$:\n$$\nx'_k = \\begin{cases}\n\\max\\{x_{i_{shock}} - S_0, 0\\}, & \\text{if } k=i_{shock} \\\\\nx_k, & \\text{if } k \\ne i_{shock}\n\\end{cases}\n$$\nAnd the post-injection assets are:\n$$\nx''_k = \\begin{cases}\nx'_{i_{shock}} + \\Delta C, & \\text{if } k=i_{shock} \\\\\nx'_k, & \\text{if } k \\ne i_{shock}\n\\end{cases}\n$$\nWe substitute this into our system of inequalities.\n\nFor any institution $k \\ne i_{shock}$, the stability condition is:\n$$\n\\bar{p}_k \\le \\sum_{j=1}^{n} \\Pi_{jk} \\bar{p}_j + x_k\n$$\nThis inequality does not depend on $\\Delta C$ or $S_0$ (as the shock is not on node $k$). If this condition is violated for any $k \\ne i_{shock}$, then institution $k$ is insolvent even before any shock is considered on node $i_{shock}$. Let's re-read the problem statement carefully: \"An initial shock...reduces its external assets...while $x_k' = x_k$ for all $k \\ne i$\". So all non-shocked nodes retain their original assets. The condition for $k \\ne i_{shock}$ is:\n$$\n\\bar{p}_k \\le \\sum_{j=1}^{n} \\Pi_{jk} \\bar{p}_j + x_k\n$$\nHowever, my initial reading was slightly imprecise. The shock hits node $i$, so $x_i$ is affected. My asset vectors should be defined relative to the initial vector $x$. The post-shock, pre-injection vector is $x'$.\n$$\nx'_k = x_k \\text{ for } k \\ne i_{shock} \\text{ and } x'_{i_{shock}} = \\max(x_{i_{shock}}-S_0, 0).\n$$\nThe post-injection vector is $x''$.\n$$\nx''_k = x'_k \\text{ for } k \\ne i_{shock} \\text{ and } x''_{i_{shock}} = x'_{i_{shock}} + \\Delta C.\n$$\nThe system of stability inequalities is $\\bar{p} \\le \\Pi^\\top \\bar{p} + x''$.\n\nFor any node $k \\ne i_{shock}$:\n$$\n\\bar{p}_k \\le \\sum_{j=1}^{n} \\Pi_{jk} \\bar{p}_j + x'_k = \\sum_{j=1}^{n} \\Pi_{jk} \\bar{p}_j + x_k\n$$\nThis condition is independent of the shock $S_0$ and the injection $\\Delta C$. Let us define the \"solvency gap\" for each node $k$, pre-injection, as:\n$$\nG_k = \\bar{p}_k - \\left( \\sum_{j=1}^{n} \\Pi_{jk} \\bar{p}_j + x'_k \\right)\n$$\nFor stabilization to be possible by only injecting capital into node $i_{shock}$, all other nodes $k \\ne i_{shock}$ must be solvent on their own. That is, for all $k \\ne i_{shock}$, it must be that $G_k \\le 0$. If there exists any $k \\ne i_{shock}$ such that $G_k > 0$, then no amount of capital injected into node $i_{shock}$ can remedy the shortfall at node $k$. In this case, stabilization is impossible, and the result is $-1.0$.\n\nFor the shocked node $k = i_{shock}$, the stability condition is:\n$$\n\\bar{p}_{i_{shock}} \\le \\sum_{j=1}^{n} \\Pi_{j,i_{shock}} \\bar{p}_j + x''_{i_{shock}}\n$$\nSubstituting $x''_{i_{shock}} = x'_{i_{shock}} + \\Delta C$:\n$$\n\\bar{p}_{i_{shock}} \\le \\sum_{j=1}^{n} \\Pi_{j,i_{shock}} \\bar{p}_j + x'_{i_{shock}} + \\Delta C\n$$\nWe can rearrange this inequality to solve for the required injection $\\Delta C$:\n$$\n\\Delta C \\ge \\bar{p}_{i_{shock}} - \\left( \\sum_{j=1}^{n} \\Pi_{j,i_{shock}} \\bar{p}_j + x'_{i_{shock}} \\right) = G_{i_{shock}}\n$$\nSince the capital injection must be non-negative ($\\Delta C \\ge 0$), the minimum capital injection required is $\\Delta C_{\\min} = \\max\\{0, G_{i_{shock}}\\}$.\n\nThe complete algorithm is as follows:\n1.  Given $L$, $x$, $i_{shock}$ (1-based), and $S_0$. Convert $i_{shock}$ to a 0-based index.\n2.  Compute the vector of total nominal liabilities $\\bar{p}$ from $L$: $\\bar{p}_i = \\sum_j L_{ij}$.\n3.  Compute the relative liability matrix $\\Pi$. For each row $i$: if $\\bar{p}_i > 0$, $\\Pi_{ij} = L_{ij} / \\bar{p}_i$; otherwise $\\Pi_{ij} = 0$.\n4.  Compute the post-shock external asset vector $x'$. Let $i_{idx} = i_{shock} - 1$.\n    - $x'_{i_{idx}} = \\max\\{x_{i_{idx}} - S_0, 0\\}$.\n    - For all $k \\ne i_{idx}$, $x'_k = x_k$.\n5.  Compute the vector of total expected incoming payments from other institutions, assuming full repayment: $v = \\Pi^\\top \\bar{p}$.\n6.  For each institution $k=0, \\dots, n-1$, compute the solvency gap $G_k = \\bar{p}_k - (v_k + x'_k)$.\n7.  Check for impossibility. For each $k \\ne i_{idx}$, if $G_k > 0$, stabilization is impossible. Return $-1.0$.\n8.  If the check in step 7 passes, calculate the minimum required injection: $\\Delta C_{\\min} = \\max\\{0, G_{i_{idx}}\\}$. Return this value.\n\nThis procedure correctly addresses all aspects of the problem statement.", "answer": "```python\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Solves for the minimum capital injection to stabilize a financial network\n    for a series of test cases.\n    \"\"\"\n\n    # Test cases defined in the problem statement.\n    test_cases = [\n        {\n            \"shocked_node_idx\": 1,\n            \"S0\": 1.5,\n            \"L\": np.array([\n                [0, 2, 0],\n                [0, 0, 1],\n                [1, 0, 0]\n            ]),\n            \"x\": np.array([2, 1, 0.5])\n        },\n        {\n            \"shocked_node_idx\": 1,\n            \"S0\": 0.2,\n            \"L\": np.array([\n                [0, 2, 0],\n                [0, 0, 1],\n                [1, 0, 0]\n            ]),\n            \"x\": np.array([2, 1, 0.5])\n        },\n        {\n            \"shocked_node_idx\": 3,\n            \"S0\": 0.0,\n            \"L\": np.array([\n                [0, 1, 0],\n                [0, 0, 1],\n                [0, 0, 0]\n            ]),\n            \"x\": np.array([0.1, 0.1, 0.1])\n        },\n        {\n            \"shocked_node_idx\": 1,\n            \"S0\": 10.0,\n            \"L\": np.array([\n                [0, 0, 0],\n                [1, 0, 0],\n                [0, 1, 0]\n            ]),\n            \"x\": np.array([0.5, 0.5, 1.0])\n        }\n    ]\n\n    results = []\n\n    for case in test_cases:\n        L = case[\"L\"]\n        x = case[\"x\"]\n        # Convert 1-based shocked_node_idx to 0-based index\n        shocked_node_idx_0based = case[\"shocked_node_idx\"] - 1\n        S0 = case[\"S0\"]\n        n = L.shape[0]\n\n        # Step 2: Compute total nominal liabilities p_bar\n        p_bar = np.sum(L, axis=1)\n\n        # Step 3: Compute relative liability matrix Pi\n        Pi = np.zeros_like(L, dtype=float)\n        # Use np.divide to handle division by zero where p_bar_i is 0\n        non_zero_liabilities = p_bar > 1e-12 # Use tolerance for float comparison\n        Pi[non_zero_liabilities] = np.divide(\n            L[non_zero_liabilities], \n            p_bar[non_zero_liabilities, np.newaxis]\n        )\n\n        # Step 4: Compute post-shock external asset vector x_prime\n        x_prime = x.copy().astype(float)\n        x_prime[shocked_node_idx_0based] = np.maximum(\n            x[shocked_node_idx_0based] - S0, 0\n        )\n\n        # Step 5: Compute expected incoming payments v = Pi^T * p_bar\n        v = Pi.T @ p_bar\n\n        # Step 6: Compute solvency gaps G_k\n        # G_k = p_bar_k - (v_k + x_prime_k)\n        gaps = p_bar - (v + x_prime)\n\n        # Step 7: Check for impossibility\n        is_impossible = False\n        for k in range(n):\n            if k != shocked_node_idx_0based:\n                # If any non-shocked node has a positive gap, stabilization is impossible.\n                # A small tolerance is used for floating point comparisons.\n                if gaps[k] > 1e-9:\n                    is_impossible = True\n                    break\n        \n        if is_impossible:\n            results.append(-1.0)\n            continue\n\n        # Step 8: Calculate minimum injection for the shocked node\n        # delta_C_min = max(0, G_{i_shock})\n        delta_C_min = np.maximum(0.0, gaps[shocked_node_idx_0based])\n        results.append(delta_C_min)\n\n    # Format the final output according to problem specification\n    formatted_results = [f\"{r:.6f}\" for r in results]\n    print(f\"[{','.join(formatted_results)}]\")\n\nsolve()\n```"}]}