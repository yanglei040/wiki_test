{"hands_on_practices": [{"introduction": "The cornerstone of analyzing non-cooperative games is the ability to compute a Nash Equilibrium. This practice problem [@problem_id:2381493] presents a classic scenario where two players have conflicting incentives, leading to a situation with no stable outcome in pure strategies. You will step into the role of a game theorist, first by translating a narrative into a formal payoff matrix, and then by using the principle of indifference to calculate the precise probabilities for a symmetric mixed-strategy equilibrium.", "id": "2381493", "problem": "Consider a static, simultaneous-move game between two ($2$) scientists. Each scientist chooses one of two actions: Safe ($S$) or Risky ($R$). Payoffs are measured in research credit units. The environment is as follows.\n\n- If a scientist chooses $S$, they receive a guaranteed payoff of $s = 3$ regardless of the other scientistâ€™s choice.\n- If exactly one scientist chooses $R$ while the other chooses $S$, the $R$-scientist faces a success probability of $\\theta = 0.12$ for achieving a major breakthrough valued at $B = 30$. If the breakthrough occurs, the $R$-scientist obtains $B$; otherwise they receive $0$. The $S$-scientist still receives $s$.\n- If both scientists choose $R$, there is at most one breakthrough in the period. The probability that a breakthrough occurs when both choose $R$ is $\\varphi = 0.18$. If a breakthrough occurs, exactly one of the two scientists is credited with it, with each having equal probability by symmetry. The credited scientist receives $B$, and the other receives $0$. If no breakthrough occurs, both receive $0$.\n\nAssume common knowledge of payoffs and probabilities, and that both scientists are expected payoff maximizers. Let $p^{*}$ denote the symmetric mixed-strategy Nash equilibrium (NE) probability with which each scientist chooses $R$ in this game.\n\nWhat is $p^{*}$? Provide your answer in exact form (for example, as a reduced fraction). Do not include units.", "solution": "The problem statement is subjected to validation.\n\nStep 1: Extract Givens.\n- Number of players (scientists): $2$.\n- Player actions: Safe ($S$), Risky ($R$).\n- Payoff for action $S$: A guaranteed $s = 3$.\n- Outcome for action profile $(R,S)$: The $R$-scientist has a success probability $\\theta = 0.12$ for a breakthrough of value $B = 30$. Payoff is $B$ on success, $0$ on failure. The $S$-scientist receives $s$.\n- Outcome for action profile $(R,R)$: Total probability of one breakthrough is $\\varphi = 0.18$. If a breakthrough occurs, one scientist is credited with probability $0.5$ and receives $B = 30$. The other receives $0$. If no breakthrough, both receive $0$.\n- Assumptions: Players are expected payoff maximizers, and the game structure is common knowledge.\n- Objective: Find the symmetric mixed-strategy Nash Equilibrium (NE) probability, $p^{*}$, with which a scientist chooses action $R$.\n\nStep 2: Validate Using Extracted Givens.\n- The problem is scientifically grounded. It is a standard application of game theory, specifically the computation of a Nash equilibrium in a static game of complete information. The concepts of expected payoff maximization and mixed strategies are fundamental to this field.\n- The problem is well-posed. It provides all necessary parameters ($s$, $\\theta$, $B$, $\\varphi$) to define the payoff structure and asks for a specific, calculable quantity ($p^{*}$). The existence of a mixed-strategy Nash equilibrium in finite games is guaranteed by Nash's theorem.\n- The problem is objective. All terms are defined with mathematical precision. There are no subjective or ambiguous statements.\n- The problem setup is self-contained and consistent. No contradictions are present in the provided data.\n\nStep 3: Verdict and Action.\nThe problem is deemed valid. A complete solution will be provided.\n\nTo determine the symmetric mixed-strategy Nash equilibrium, we must first construct the payoff matrix for this $2$-player game. Let the players be Scientist $1$ and Scientist $2$. The actions are $S$ (Safe) and $R$ (Risky). The payoff matrix entries $(u_1, u_2)$ represent the expected payoffs for Scientist $1$ and Scientist $2$, respectively.\n\n1.  Action Profile $(S, S)$: Both scientists choose Safe.\n    According to the problem, if a scientist chooses $S$, they receive a guaranteed payoff of $s = 3$.\n    Thus, $u_1(S, S) = 3$ and $u_2(S, S) = 3$. The payoff pair is $(3, 3)$.\n\n2.  Action Profile $(R, S)$: Scientist $1$ chooses Risky, Scientist $2$ chooses Safe.\n    - Scientist $1$ ($R$) has a success probability of $\\theta = 0.12$ for a breakthrough valued at $B = 30$. The expected payoff is $E[u_1(R, S)] = \\theta \\times B + (1 - \\theta) \\times 0 = 0.12 \\times 30 = 3.6$.\n    - Scientist $2$ ($S$) receives the guaranteed payoff $s = 3$.\n    The payoff pair is $(3.6, 3)$.\n\n3.  Action Profile $(S, R)$: Scientist $1$ chooses Safe, Scientist $2$ chooses Risky.\n    - By symmetry with the $(R, S)$ case, Scientist $1$ ($S$) receives $s = 3$.\n    - Scientist $2$ ($R$) has an expected payoff of $E[u_2(S, R)] = \\theta \\times B = 3.6$.\n    The payoff pair is $(3, 3.6)$.\n\n4.  Action Profile $(R, R)$: Both scientists choose Risky.\n    - A single breakthrough occurs with total probability $\\varphi = 0.18$. If it occurs, each scientist is credited with probability $0.5$.\n    - The probability that Scientist $1$ is credited with the breakthrough is $0.5 \\times \\varphi = 0.5 \\times 0.18 = 0.09$.\n    - The expected payoff for Scientist $1$ is $E[u_1(R, R)] = (0.5 \\times \\varphi) \\times B + (1 - 0.5 \\times \\varphi) \\times 0 = 0.09 \\times 30 = 2.7$.\n    - By symmetry, the expected payoff for Scientist $2$ is identical: $E[u_2(R, R)] = 2.7$.\n    The payoff pair is $(2.7, 2.7)$.\n\nThe normal-form representation of the game is given by the following payoff matrix, where Scientist $1$ is the row player and Scientist $2$ is the column player:\n$$\n\\begin{array}{c|cc}\n & S & R \\\\\n\\hline\nS & (3, 3) & (3, 3.6) \\\\\nR & (3.6, 3) & (2.7, 2.7) \\\\\n\\end{array}\n$$\n\nThe problem asks for the symmetric mixed-strategy Nash equilibrium, where each scientist chooses $R$ with probability $p^{*}$ and $S$ with probability $1 - p^{*}$. In a mixed-strategy equilibrium, a player must be indifferent between the pure strategies over which they are randomizing.\n\nLet's consider Scientist $1$. Let Scientist $2$ choose $R$ with probability $p^{*}$ and $S$ with probability $1 - p^{*}$. For Scientist $1$ to be willing to mix between $S$ and $R$, the expected payoff from playing $S$ must equal the expected payoff from playing $R$.\n\nThe expected payoff for Scientist $1$ from choosing $S$ is:\n$E[u_1(S)] = p^{*} \\cdot u_1(S, R) + (1 - p^{*}) \\cdot u_1(S, S) = p^{*} \\cdot 3 + (1 - p^{*}) \\cdot 3 = 3$.\nThis is consistent with the problem's stated guaranteed payoff of $s=3$ for choosing $S$.\n\nThe expected payoff for Scientist $1$ from choosing $R$ is:\n$E[u_1(R)] = p^{*} \\cdot u_1(R, R) + (1 - p^{*}) \\cdot u_1(R, S) = p^{*} \\cdot (2.7) + (1 - p^{*}) \\cdot (3.6)$.\n\nSetting the expected payoffs equal defines the indifference condition:\n$E[u_1(S)] = E[u_1(R)]$\n$$3 = 2.7 p^{*} + 3.6(1 - p^{*})$$\n$$3 = 2.7 p^{*} + 3.6 - 3.6 p^{*}$$\n$$3 - 3.6 = 2.7 p^{*} - 3.6 p^{*}$$\n$$-0.6 = -0.9 p^{*}$$\n$$p^{*} = \\frac{0.6}{0.9} = \\frac{6}{9}$$\nReducing the fraction to its simplest form gives:\n$$p^{*} = \\frac{2}{3}$$\nSince the game is symmetric, the same calculation for Scientist $2$ yields the same equilibrium probability. Thus, the symmetric mixed-strategy Nash equilibrium involves each scientist choosing the Risky action with probability $p^{*} = \\frac{2}{3}$.", "answer": "$$\n\\boxed{\\frac{2}{3}}\n$$"}, {"introduction": "Game theory extends beyond simple two-player games to model large populations, offering powerful insights into social and economic dynamics like technology adoption. This exercise [@problem_id:2381176] explores a coordination game where a group of farmers must decide between a conventional technology and a sustainable one with higher potential but also higher costs. Your task is to apply equilibrium analysis to determine the minimal government subsidy required to shift the entire population to the socially optimal high-yield equilibrium, demonstrating how computational models can guide effective policy design.", "id": "2381176", "problem": "A unit-mass continuum of identical farmers chooses between two production technologies: a sustainable high-yield technology, denoted by strategy $S$, and a conventional low-yield technology, denoted by strategy $C$. Let $x \\in [0,1]$ denote the population share adopting $S$. The per-period payoff to a farmer who adopts $S$ when the population share is $x$ is\n$$\n\\pi_{S}(x) \\;=\\; Y_{H} \\;-\\; c \\;+\\; b\\,x \\;+\\; s,\n$$\nand the per-period payoff to a farmer who adopts $C$ is\n$$\n\\pi_{C}(x) \\;=\\; Y_{L} \\;+\\; a\\,(1 - x).\n$$\nHere $Y_{H} > Y_{L}$ are the baseline yields of the two technologies, $c > 0$ is the private adoption cost of $S$, $a > 0$ and $b > 0$ capture technology-specific strategic complementarities, and $s \\ge 0$ is a per-farmer subsidy paid only to adopters of $S$. Assume that at $s = 0$ the game exhibits coordination incentives, in the sense that\n$$\n\\left(Y_{H} - Y_{L}\\right) - c - a \\;<\\; 0 \\;<\\; \\left(Y_{H} - Y_{L}\\right) - c + b.\n$$\n\nConsider the induced symmetric population game on $[0,1]$ with these payoff functions. Let a symmetric Nash equilibrium (NE) be any $x^{\\ast} \\in [0,1]$ such that no farmer can increase her payoff by deviating, taking $x^{\\ast}$ as given.\n\nDetermine the minimal threshold subsidy $s_{\\mathrm{bar}}$ (as a closed-form analytic expression in the primitives $Y_{H}$, $Y_{L}$, $c$, $a$, $b$) with the property that for any $s > s_{\\mathrm{bar}}$, the induced game has the unique symmetric NE $x^{\\ast} = 1$ (all farmers adopt $S$). Your final answer must be a single closed-form expression. No numerical approximation is required.", "solution": "The problem is first validated. The givens are:\n- Payoff for strategy $S$: $\\pi_{S}(x) = Y_{H} - c + b x + s$\n- Payoff for strategy $C$: $\\pi_{C}(x) = Y_{L} + a(1 - x)$\n- Parameters: $Y_{H} > Y_{L}$, $c > 0$, $a > 0$, $b > 0$, $s \\ge 0$.\n- Population share adopting $S$: $x \\in [0, 1]$.\n- Condition for $s=0$: $(Y_{H} - Y_{L}) - c - a < 0 < (Y_{H} - Y_{L}) - c + b$.\n\nThe problem is a well-posed question in computational game theory, specifically concerning technology adoption dynamics. It is scientifically grounded, self-contained, and free of ambiguities. Thus, a solution can be derived.\n\nA symmetric Nash Equilibrium (NE) is a population share $x^{\\ast} \\in [0, 1]$ where no individual farmer has an incentive to unilaterally deviate. The conditions for the three possible types of symmetric NE are:\n1.  A corner equilibrium $x^{\\ast} = 0$, where all farmers choose strategy $C$. This is a NE if a single farmer switching to $S$ would not gain a higher payoff, i.e., $\\pi_{S}(0) \\le \\pi_{C}(0)$.\n2.  A corner equilibrium $x^{\\ast} = 1$, where all farmers choose strategy $S$. This is a NE if a single farmer switching to $C$ would not gain a higher payoff, i.e., $\\pi_{C}(1) \\le \\pi_{S}(1)$.\n3.  An interior equilibrium $x^{\\ast} \\in (0, 1)$, where a fraction $x^{\\ast}$ of farmers chooses $S$ and $1-x^{\\ast}$ chooses $C$. This requires that farmers are indifferent between the two strategies, so their payoffs must be equal: $\\pi_{S}(x^{\\ast}) = \\pi_{C}(x^{\\ast})$.\n\nTo analyze these conditions systematically, we define the payoff difference function $\\Delta\\pi(x) = \\pi_{S}(x) - \\pi_{C}(x)$.\n$$\n\\Delta\\pi(x) = (Y_{H} - c + bx + s) - (Y_{L} + a(1 - x))\n$$\n$$\n\\Delta\\pi(x) = (Y_{H} - Y_{L} - c - a + s) + (a + b)x\n$$\nSince $a > 0$ and $b > 0$, the sum $a+b$ is strictly positive. Therefore, $\\Delta\\pi(x)$ is a strictly increasing linear function of $x$.\n\nThe NE conditions can be expressed in terms of $\\Delta\\pi(x)$:\n- $x^{\\ast} = 0$ is a NE if and only if $\\Delta\\pi(0) \\le 0$.\n- $x^{\\ast} = 1$ is a NE if and only if $\\Delta\\pi(1) \\ge 0$.\n- An interior NE $x^{\\ast} \\in (0, 1)$ exists if and only if $\\Delta\\pi(x^{\\ast}) = 0$. Because $\\Delta\\pi(x)$ is monotonic, such an $x^{\\ast}$ is unique if it exists. Its existence within $(0, 1)$ requires that $\\Delta\\pi(0)$ and $\\Delta\\pi(1)$ have opposite signs, specifically $\\Delta\\pi(0) < 0$ and $\\Delta\\pi(1) > 0$.\n\nThe objective is to find the minimal subsidy $s_{\\mathrm{bar}}$ such that for any $s > s_{\\mathrm{bar}}$, the unique symmetric NE is $x^{\\ast}=1$.\nFor $x^{\\ast}=1$ to be the unique NE, strategy $S$ must be preferable to strategy $C$ regardless of the population share $x$. This means $\\pi_{S}(x) > \\pi_{C}(x)$ for all $x \\in [0, 1]$, or equivalently, $\\Delta\\pi(x) > 0$ for all $x \\in [0, 1]$.\nSince $\\Delta\\pi(x)$ is a strictly increasing function of $x$, this condition is satisfied if and only if the function is positive at its minimum value on the interval $[0, 1]$, which occurs at $x=0$.\nThus, the condition for $x^{\\ast}=1$ to be the unique NE is $\\Delta\\pi(0) > 0$.\n\nLet's evaluate $\\Delta\\pi(0)$:\n$$\n\\Delta\\pi(0) = (Y_{H} - Y_{L} - c - a + s)\n$$\nThe condition for uniqueness of the $x^{\\ast}=1$ equilibrium becomes:\n$$\nY_{H} - Y_{L} - c - a + s > 0\n$$\nSolving this inequality for the subsidy $s$:\n$$\ns > a + c - (Y_{H} - Y_{L})\n$$\nThis inequality defines all values of the subsidy $s$ for which $x^{\\ast}=1$ is the unique NE. The problem asks for the minimal threshold subsidy, $s_{\\mathrm{bar}}$, such that this uniqueness holds for any $s > s_{\\mathrm{bar}}$. This threshold is the lower bound of the inequality.\n$$\ns_{\\mathrm{bar}} = a + c - (Y_{H} - Y_{L})\n$$\nWe must verify that this analysis is consistent with the problem's premises. The initial condition for $s=0$, namely $(Y_{H} - Y_{L}) - c - a < 0$, implies that $a + c - (Y_{H} - Y_{L}) > 0$. This confirms that $s_{\\mathrm{bar}}$ is a positive subsidy, which is economically sensible. For any $s > s_{\\mathrm{bar}}$, $\\Delta\\pi(0) > 0$. Since $\\Delta\\pi(x)$ is increasing, $\\Delta\\pi(x) > 0$ for all $x \\in [0, 1]$.\nThis means:\n- $x^{\\ast}=0$ is not a NE because $\\Delta\\pi(0) > 0$.\n- No interior NE exists because $\\Delta\\pi(x)$ is never zero in $[0, 1]$.\n- $x^{\\ast}=1$ is a NE because $\\Delta\\pi(1) > \\Delta\\pi(0) > 0$.\n\nTherefore, for any $s > s_{\\mathrm{bar}}$, the only existing Nash equilibrium is $x^{\\ast} = 1$. The minimal such threshold is precisely this value $s_{\\mathrm{bar}}$.\nThe expression can be written as $a + c + Y_L - Y_H$.", "answer": "$$\n\\boxed{a + c - (Y_{H} - Y_{L})}\n$$"}, {"introduction": "In complex multi-player settings, computing Nash equilibria can be prohibitively difficult, but other powerful solution concepts exist. This problem [@problem_id:2381200] introduces the correlated equilibrium, a more general and often more computationally tractable concept that can be found using linear programming. You will model a city's traffic grid as a coordination game and then construct and solve a linear program to find the correlated equilibrium that maximizes social welfare, showcasing a core technique at the intersection of game theory and computer science.", "id": "2381200", "problem": "Consider a finite normal-form coordination game that models a grid of signalized intersections in an orthogonal city network. Intersections are located on a rectangular grid with $R$ rows and $C$ columns, so there are $N = R \\times C$ players. Each player $i \\in \\{0,1,\\dots,N-1\\}$ corresponds to one intersection and chooses one of two signal phases (actions) $a_i \\in \\{0,1\\}$, where $a_i = 0$ means that the North-South approaches receive a green phase and $a_i = 1$ means that the East-West approaches receive a green phase. Each undirected road segment between adjacent intersections carries an exogenous, nonnegative demand. For every vertical road segment that connects $(r,c)$ to $(r+1,c)$, the demand is given by $V[r,c] \\ge 0$. For every horizontal road segment that connects $(r,c)$ to $(r,c+1)$, the demand is given by $H[r,c] \\ge 0$. For a fixed scalar parameter $\\alpha \\in [0,1]$, the realized contribution of a road segment to an endpoint intersection depends on whether both incident intersections align their phases to serve that segment. Specifically, for an intersection $i$ at grid coordinates $(r,c)$ with action $a_i$ and a neighboring intersection $j$ connected by a road segment with demand $d \\ge 0$:\n- If the segment is vertical and $a_i = 0$, then the contribution of this segment to the payoff of intersection $i$ equals $d$ if $a_j = 0$ and equals $\\alpha \\cdot d$ if $a_j = 1$. If $a_i = 1$, the contribution from this vertical segment is $0$.\n- If the segment is horizontal and $a_i = 1$, then the contribution of this segment to the payoff of intersection $i$ equals $d$ if $a_j = 1$ and equals $\\alpha \\cdot d$ if $a_j = 0$. If $a_i = 0$, the contribution from this horizontal segment is $0$.\n\nThe payoff function $u_i(a)$ for player $i$ under an action profile $a = (a_0,\\dots,a_{N-1})$ is the sum of the contributions from all road segments incident to $i$ according to the rules above. The social welfare for action profile $a$ is defined as $W(a) = \\sum_{i=0}^{N-1} u_i(a)$.\n\nA correlated equilibrium (CE) is a probability distribution $p$ over action profiles that satisfies incentive compatibility. Using the definition of correlated equilibrium introduced by Robert Aumann, $p$ is a correlated equilibrium if for every player $i$ and for every pair of actions $s,t \\in \\{0,1\\}$,\n$$\n\\sum_{a_{-i}} p(s,a_{-i}) \\big( u_i(s,a_{-i}) - u_i(t,a_{-i}) \\big) \\ge 0,\n$$\nwhere $a_{-i}$ denotes the actions of all players other than player $i$.\n\nYour task is to construct and solve a linear program that computes a correlated equilibrium $p$ that maximizes expected social welfare $\\mathbb{E}_p[W(a)] = \\sum_{a} p(a) W(a)$, subject to the correlated equilibrium constraints, the simplex constraints $p(a) \\ge 0$ for all $a$ and $\\sum_a p(a) = 1$, and the model-specific payoff structure given above.\n\nImplement a program that:\n- Enumerates all action profiles $a \\in \\{0,1\\}^N$.\n- Computes $u_i(a)$ for every player $i$ and action profile $a$ from the primitive definitions above, without using any shortcut formula that presupposes properties of the equilibrium.\n- Builds a linear program with variables $p(a)$ for each action profile $a$ to maximize expected social welfare under the correlated equilibrium constraints.\n- Solves the linear program numerically.\n- Returns, for each specified test case, the optimal expected social welfare $\\max_{p \\in \\text{CE}} \\mathbb{E}_p[W(a)]$ as a float rounded to $6$ decimal places.\n\nTest suite. Your program must compute the result for each of the following parameter sets, in order:\n- Case A: $R = 2$, $C = 2$, $\\alpha = 0.4$.\n  - Vertical demands $V$ of shape $(R-1) \\times C = (1) \\times 2$: $V[0,0] = 3.0$, $V[0,1] = 2.0$.\n  - Horizontal demands $H$ of shape $R \\times (C-1) = 2 \\times (1)$: $H[0,0] = 1.0$, $H[1,0] = 1.5$.\n- Case B: $R = 3$, $C = 2$, $\\alpha = 0.7$.\n  - Vertical demands $V$ of shape $(R-1) \\times C = (2) \\times 2$: $V[0,0] = 1.0$, $V[0,1] = 4.0$, $V[1,0] = 2.0$, $V[1,1] = 3.0$.\n  - Horizontal demands $H$ of shape $R \\times (C-1) = 3 \\times (1)$: $H[0,0] = 5.0$, $H[1,0] = 2.0$, $H[2,0] = 3.0$.\n- Case C: $R = 2$, $C = 3$, $\\alpha = 1.0$.\n  - Vertical demands $V$ of shape $(R-1) \\times C = (1) \\times 3$: $V[0,0] = 2.0$, $V[0,1] = 2.5$, $V[0,2] = 1.0$.\n  - Horizontal demands $H$ of shape $R \\times (C-1) = 2 \\times (2)$: $H[0,0] = 1.0$, $H[0,1] = 3.0$, $H[1,0] = 2.0$, $H[1,1] = 2.0$.\n\nFundamental base. Use only the core definitions of normal-form games, the definition of correlated equilibrium, and linear programming duality as needed for correctness. Do not assume any additional structure beyond the given payoff construction and the definition of correlated equilibrium.\n\nFinal output format. Your program should produce a single line of output containing the three results, as a comma-separated list enclosed in square brackets (for example, a string of the form \"[x,y,z]\"). Each number must be rounded to $6$ decimal places using standard rounding rules. No other text should be printed. No units are involved in this problem, and angles are not present. The only acceptable data types in the output list are floats.", "solution": "The problem presented is a well-defined task in computational game theory. It asks for the maximum expected social welfare achievable under a correlated equilibrium in a specific class of coordination games played on a grid. The problem is scientifically grounded, self-contained, and algorithmically solvable using linear programming. I will proceed with a full solution.\n\nThe core of the problem is to formulate and solve a linear program (LP). A linear program seeks to optimize a linear objective function subject to a set of linear equality and inequality constraints. Our task is to find a probability distribution $p$ over the set of all possible joint actions (action profiles) that maximizes expected social welfare, while satisfying the conditions for a correlated equilibrium (CE).\n\nFirst, let us formalize the components of the game and the resulting linear program.\n\n**1. Game Definition**\n- **Players:** A set of $N = R \\times C$ players, indexed $i \\in \\{0, 1, \\dots, N-1\\}$. Each player $i$ is located at grid coordinates $(r,c)$, where we can establish a consistent mapping such as row-major order: $i = r \\cdot C + c$.\n- **Actions:** Each player $i$ chooses an action $a_i \\in \\{0, 1\\}$. The set of all possible action profiles is $\\mathcal{A} = \\{0, 1\\}^N$, which has a size of $|\\mathcal{A}| = 2^N$. An action profile is a vector $a = (a_0, a_1, \\dots, a_{N-1})$.\n- **Payoffs:** The payoff $u_i(a)$ for player $i$ under profile $a$ is the sum of contributions from its adjacent road segments. The rules are specified precisely: a contribution is non-zero only if player $i$ chooses an action compatible with the orientation of the road segment (action $0$ for North-South, action $1$ for East-West). The magnitude of the contribution depends on whether the neighbor's action is coordinated, with a factor of $\\alpha \\in [0,1]$ for miscoordination.\n- **Social Welfare:** For a given action profile $a$, the social welfare is defined as the sum of all players' payoffs: $W(a) = \\sum_{i=0}^{N-1} u_i(a)$.\n\n**2. Correlated Equilibrium and the Linear Program**\nA correlated equilibrium is a probability distribution $p$ on the set of action profiles $\\mathcal{A}$. The variables of our linear program will be the probabilities $p(a)$ for each $a \\in \\mathcal{A}$. For convenience, we can order the $2^N$ profiles and represent these probabilities as a vector $\\mathbf{p} \\in \\mathbb{R}^{2^N}$.\n\n**Objective Function:**\nWe aim to maximize the expected social welfare, which is a linear function of the probabilities $p(a)$:\n$$\n\\mathbb{E}_p[W(a)] = \\sum_{a \\in \\mathcal{A}} p(a) W(a)\n$$\nThis can be written in vector form as $\\mathbf{c}^T \\mathbf{p}$, where the vector $\\mathbf{c}$ contains the social welfare values $W(a)$ for each action profile $a$. Since standard LP solvers typically minimize, we will minimize $-\\mathbf{c}^T \\mathbf{p}$.\n\n**Constraints:**\nThe distribution $p$ must satisfy three sets of linear constraints.\n1.  **Correlated Equilibrium (Incentive Compatibility) Constraints:** For any player $i$, if they are recommended an action $s \\in \\{0,1\\}$, they must not have an incentive to unilaterally deviate to the other action $t = 1-s$. Mathematically, for each player $i \\in \\{0, \\dots, N-1\\}$ and each pair of actions $s, t \\in \\{0,1\\}$ with $s \\neq t$:\n    $$\n    \\sum_{a_{-i} \\in \\{0,1\\}^{N-1}} p(s, a_{-i}) \\left( u_i(s, a_{-i}) - u_i(t, a_{-i}) \\right) \\ge 0\n    $$\n    Here, $(s, a_{-i})$ denotes the action profile where player $i$ plays $s$ and other players play according to the vector $a_{-i}$. The term $u_i(t, a_{-i})$ represents the payoff player $i$ would receive by deviating to action $t$ while others follow their recommendations in $a_{-i}$. This gives $2N$ linear inequality constraints. Each can be written as a row in the matrix inequality $\\mathbf{A}_{\\text{ub}} \\mathbf{p} \\le \\mathbf{b}_{\\text{ub}}$.\n\n2.  **Probability Normalization Constraint:** The sum of all probabilities must equal $1$.\n    $$\n    \\sum_{a \\in \\mathcal{A}} p(a) = 1\n    $$\n    This is a single linear equality constraint, represented as $\\mathbf{A}_{\\text{eq}} \\mathbf{p} = \\mathbf{b}_{\\text{eq}}$.\n\n3.  **Non-negativity Constraints:** Probabilities cannot be negative.\n    $$\n    p(a) \\ge 0 \\quad \\forall a \\in \\mathcal{A}\n    $$\n    These are simple lower bounds on our variables, $\\mathbf{p} \\ge \\mathbf{0}$.\n\n**3. Algorithmic Implementation**\nThe solution requires the following steps for each test case:\n1.  **Enumeration:** Systematically generate all $2^N$ action profiles. A simple method is to iterate an integer from $0$ to $2^N - 1$ and use its $N$-bit binary representation for each profile. We must maintain a consistent mapping between these integers and the profiles.\n2.  **Payoff Calculation:** For each of the $2^N$ profiles, calculate the payoff $u_i(a)$ for every player $i$. This involves iterating through each player, identifying their neighbors on the grid, and applying the specified payoff rules based on the actions of the player and their neighbors. Summing these individual payoffs for a given profile yields the social welfare $W(a)$. This step populates the objective function vector $\\mathbf{c}$ and provides the necessary values for constructing the CE constraints.\n3.  **LP Construction:** Construct the matrices and vectors for the LP based on the calculated payoffs:\n    -   The objective vector $\\mathbf{c}$ is formed by the negated social welfare values, i.e., $c_j = -W(a_j)$ for the $j$-th profile $a_j$.\n    -   The CE constraints matrix $\\mathbf{A}_{\\text{ub}}$ ($2N \\times 2^N$) and vector $\\mathbf{b}_{\\text{ub}}$ (all zeros) are populated. For each player $i$ and potential deviation from action $s$ to $t$, we form a constraint row. The coefficient for a variable $p(a)$ in this row is non-zero only if $a_i = s$, and its value is $-\\left(u_i(a) - u_i(a|_{a_i=t})\\right)$, where $a|_{a_i=t}$ is the profile $a$ with player $i$'s action switched to $t$.\n    -   The equality constraint matrix $\\mathbf{A}_{\\text{eq}}$ is a single row of ones ($1 \\times 2^N$), and $\\mathbf{b}_{\\text{eq}}$ is the scalar $1$.\n4.  **Solver Execution:** Use a numerical linear programming solver, such as the `linprog` function from the `scipy.optimize` library, to find the optimal solution vector $\\mathbf{p}^*$. The maximum expected social welfare is the negative of the minimum value returned by the solver.\n\nThis systematic approach correctly translates the theoretical definition of a welfare-maximizing correlated equilibrium into a solvable computational problem, adhering strictly to the problem's definitions without making unwarranted assumptions about the solution structure.", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\nfrom scipy.optimize import linprog\n\ndef solve():\n    \"\"\"\n    Main function to define and run all test cases.\n    \"\"\"\n    test_cases = [\n        # Case A: R=2, C=2, alpha=0.4\n        {\n            \"R\": 2, \"C\": 2, \"alpha\": 0.4,\n            \"V\": np.array([[3.0, 2.0]]),\n            \"H\": np.array([[1.0], [1.5]])\n        },\n        # Case B: R=3, C=2, alpha=0.7\n        {\n            \"R\": 3, \"C\": 2, \"alpha\": 0.7,\n            \"V\": np.array([[1.0, 4.0], [2.0, 3.0]]),\n            \"H\": np.array([[5.0], [2.0], [3.0]])\n        },\n        # Case C: R=2, C=3, alpha=1.0\n        {\n            \"R\": 2, \"C\": 3, \"alpha\": 1.0,\n            \"V\": np.array([[2.0, 2.5, 1.0]]),\n            \"H\": np.array([[1.0, 3.0], [2.0, 2.0]])\n        }\n    ]\n\n    results = []\n    for case in test_cases:\n        result = solve_case(case[\"R\"], case[\"C\"], case[\"alpha\"], case[\"V\"], case[\"H\"])\n        results.append(result)\n\n    # Final print statement in the exact required format.\n    print(f\"[{','.join([f'{r:.6f}' for r in results])}]\")\n\ndef solve_case(R, C, alpha, V, H):\n    \"\"\"\n    Solves a single instance of the correlated equilibrium problem.\n    \"\"\"\n    N = R * C\n    M = 1 << N  # Number of action profiles, 2^N\n\n    # Helper maps for grid coordinates and player indices\n    coord_to_idx = {(r, c): r * C + c for r in range(R) for c in range(C)}\n    idx_to_coord = {i: (r, c) for (r, c), i in coord_to_idx.items()}\n\n    # Step 1: Enumerate all profiles\n    # The integer j from 0 to M-1 represents a profile.\n    # The k-th bit of j is the action of player k.\n    \n    # Step 2: Compute payoffs and social welfare for each profile\n    payoffs = np.zeros((N, M))\n    social_welfare = np.zeros(M)\n\n    for j in range(M):\n        # j is the integer representation of the action profile\n        profile = tuple((j >> i) & 1 for i in range(N))\n        current_total_payoff = 0.0\n        \n        for i in range(N):\n            r, c = idx_to_coord[i]\n            action_i = profile[i]\n            player_payoff = 0.0\n\n            # Contribution from North-South (vertical) segments\n            if action_i == 0:\n                # Neighbor Up (North)\n                if r > 0:\n                    neighbor_idx = coord_to_idx[(r - 1, c)]\n                    action_j = profile[neighbor_idx]\n                    demand = V[r - 1, c]\n                    player_payoff += demand if action_j == 0 else alpha * demand\n                # Neighbor Down (South)\n                if r < R - 1:\n                    neighbor_idx = coord_to_idx[(r + 1, c)]\n                    action_j = profile[neighbor_idx]\n                    demand = V[r, c]\n                    player_payoff += demand if action_j == 0 else alpha * demand\n            \n            # Contribution from East-West (horizontal) segments\n            elif action_i == 1:\n                # Neighbor Left (West)\n                if c > 0:\n                    neighbor_idx = coord_to_idx[(r, c - 1)]\n                    action_j = profile[neighbor_idx]\n                    demand = H[r, c - 1]\n                    player_payoff += demand if action_j == 1 else alpha * demand\n                # Neighbor Right (East)\n                if c < C - 1:\n                    neighbor_idx = coord_to_idx[(r, c + 1)]\n                    action_j = profile[neighbor_idx]\n                    demand = H[r, c]\n                    player_payoff += demand if action_j == 1 else alpha * demand\n            \n            payoffs[i, j] = player_payoff\n            current_total_payoff += player_payoff\n        \n        social_welfare[j] = current_total_payoff\n\n    # Step 3: Construct the linear program\n    # Objective function: maximize sum(W(a) * p(a)) => minimize -sum(W(a) * p(a))\n    c = -social_welfare\n\n    # Inequality constraints (CE): A_ub * x <= b_ub\n    num_ce_constraints = 2 * N\n    A_ub = np.zeros((num_ce_constraints, M))\n    b_ub = np.zeros(num_ce_constraints)\n    \n    constraint_idx = 0\n    for i in range(N):  # For each player\n        for s in range(2): # For recommended action s\n            t = 1 - s      # The alternative action\n            for j in range(M): # For each profile j\n                if ((j >> i) & 1) == s:\n                    # k is the index of the profile where player i deviates to t\n                    k = j ^ (1 << i)\n                    # Regret for deviating\n                    regret = payoffs[i, j] - payoffs[i, k]\n                    # The constraint is sum(p(a)*(u_i(a)-u_i(a'))) >= 0\n                    # For linprog (<= form): sum(p(a)*-(u_i(a)-u_i(a'))) <= 0\n                    A_ub[constraint_idx, j] = -regret\n            constraint_idx += 1\n\n    # Equality constraint (sum of probabilities is 1): A_eq * x = b_eq\n    A_eq = np.ones((1, M))\n    b_eq = np.array([1])\n\n    # Bounds for variables p(a) >= 0\n    bounds = (0, None)\n\n    # Step 4: Solve the LP\n    res = linprog(c, A_ub=A_ub, b_ub=b_ub, A_eq=A_eq, b_eq=b_eq, bounds=bounds, method='highs')\n\n    if not res.success:\n        raise RuntimeError(f\"Linear program solver failed for R={R}, C={C}. Message: {res.message}\")\n\n    # The result is -res.fun because we minimized the negative of the welfare\n    return -res.fun\n\nsolve()\n```"}]}