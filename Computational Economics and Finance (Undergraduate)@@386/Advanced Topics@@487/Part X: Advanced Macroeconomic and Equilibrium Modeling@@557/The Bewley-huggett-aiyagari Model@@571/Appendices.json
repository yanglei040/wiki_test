{"hands_on_practices": [{"introduction": "To build a solid understanding of the Bewley-Huggett-Aiyagari model, we begin by isolating one of its core components: the stationary distribution of agents. This first exercise simplifies the problem by providing you with the optimal savings policy function directly, bypassing the need to solve the household's complex optimization problem. Your task is to use this given policy, along with the stochastic income process, to construct the correct transition matrix for the population and calculate the long-run equilibrium distribution of assets and income [@problem_id:2437609]. This pen-and-paper practice will build crucial intuition for how individual decisions aggregate to form a stable macroeconomic outcome.", "id": "2437609", "problem": "Consider a Bewley-Huggett-Aiyagari model with a unit mass of ex ante identical agents who face idiosyncratic labor income risk and self-insure by saving in a single risk-free asset. Let the idiosyncratic income process be a two-state Markov chain $z \\in \\{z_{L}, z_{H}\\}$ with transition probabilities given by\n$$\n\\begin{pmatrix}\n\\mathbb{P}(z' = z_{L} \\mid z = z_{L}) & \\mathbb{P}(z' = z_{H} \\mid z = z_{L}) \\\\\n\\mathbb{P}(z' = z_{L} \\mid z = z_{H}) & \\mathbb{P}(z' = z_{H} \\mid z = z_{H})\n\\end{pmatrix}\n=\n\\begin{pmatrix}\n\\frac{4}{5} & \\frac{1}{5} \\\\\n\\frac{1}{5} & \\frac{4}{5}\n\\end{pmatrix}.\n$$\nThe asset grid is discrete with two points $a \\in \\{a_{0}, a_{1}\\}$, with $a_{0} < a_{1}$. Suppose the optimal next-period asset policy (obtained by solving the household problem given prices) is a deterministic function $a' = g(a,z)$ that takes values on the grid and is given by\n- $g(a_{0}, z_{L}) = a_{0}$,\n- $g(a_{0}, z_{H}) = a_{1}$,\n- $g(a_{1}, z_{L}) = a_{0}$,\n- $g(a_{1}, z_{H}) = a_{1}$.\nDefine the joint state as $s = (a,z)$ and enumerate the $4$ states in the order\n$$\ns_{1} = (a_{0}, z_{L}), \\quad s_{2} = (a_{0}, z_{H}), \\quad s_{3} = (a_{1}, z_{L}), \\quad s_{4} = (a_{1}, z_{H}).\n$$\nThe histogram (also called discretization) method computes the stationary distribution as a fixed point of the linear law of motion for the cross-sectional measure on this finite state space. A long panel simulation method simulates $N$ agents for $T$ periods, discards an initial burn-in, and then forms empirical frequencies.\n\nWhich of the following statements are correct?\n\nA. The stationary distribution over $(s_{1}, s_{2}, s_{3}, s_{4})$ computed by the histogram method is\n$$\n\\pi = \\left(\\frac{2}{5}, \\frac{1}{10}, \\frac{1}{10}, \\frac{2}{5}\\right).\n$$\n\nB. For a long panel simulation with $N$ large and $T$ large and after discarding a burn-in, the empirical cross-sectional state frequencies converge almost surely to the same stationary distribution as in option A.\n\nC. The stationary mass on states with $a = a_{1}$ equals $\\frac{1}{2}$.\n\nD. If the panel is initialized exactly at the stationary distribution and the policy $g$ is deterministic as above, then after one more period the simulated cross-sectional distribution remains exactly the same for any finite $N$.\n\nE. The histogram method introduces sampling error that vanishes only as $N \\to \\infty$; in contrast, a long simulation has no sampling error if initialized at stationarity.", "solution": "The problem statement is subjected to validation.\n\n**Step 1: Extract Givens**\n- **Model**: Bewley-Huggett-Aiyagari.\n- **Agents**: Unit mass, ex ante identical.\n- **Income Process**: A two-state Markov chain for $z \\in \\{z_{L}, z_{H}\\}$ with transition matrix\n$$\n\\mathbf{\\Pi}_{z} =\n\\begin{pmatrix}\n\\frac{4}{5} & \\frac{1}{5} \\\\\n\\frac{1}{5} & \\frac{4}{5}\n\\end{pmatrix}.\n$$\n- **Asset Grid**: Discrete, $a \\in \\{a_{0}, a_{1}\\}$ where $a_{0} < a_{1}$.\n- **Policy Function**: $a' = g(a,z)$ is given by:\n  - $g(a_{0}, z_{L}) = a_{0}$\n  - $g(a_{0}, z_{H}) = a_{1}$\n  - $g(a_{1}, z_{L}) = a_{0}$\n  - $g(a_{1}, z_{H}) = a_{1}$\n- **State Space**: The joint state is $s = (a,z)$, enumerated as:\n  $s_{1} = (a_{0}, z_{L})$, $s_{2} = (a_{0}, z_{H})$, $s_{3} = (a_{1}, z_{L})$, $s_{4} = (a_{1}, z_{H})$.\n\n**Step 2: Validate Using Extracted Givens**\nThe problem is well-defined and scientifically grounded. It presents a standard, simplified heterogeneous agent model used in computational economics. All components required to analyze the dynamics of the cross-sectional distribution—the state space, the income process, and the policy function—are explicitly provided and are mutually consistent. The combination of the deterministic policy rule $g(a,z)$ and the stochastic income process results in a well-defined finite-state Markov chain over the joint state space $S = \\{s_{1}, s_{2}, s_{3}, s_{4}\\}$. This chain is irreducible, guaranteeing the existence of a unique stationary distribution. The problem is therefore valid.\n\n**Step 3: Verdict and Action**\nThe problem is valid. A solution will be derived.\n\n**Derivation**\n\nThe core of the problem is to find the stationary distribution $\\pi$ of the Markov chain over the $4$ states $s = (a,z)$. This requires constructing the $4 \\times 4$ transition matrix $\\mathbf{P}$, where $P_{ij} = \\mathbb{P}(s' = s_{j} \\mid s = s_{i})$. An agent in state $s = (a,z)$ transitions to a new asset state $a' = g(a,z)$ and a new income state $z'$ drawn according to the transition probabilities $\\mathbf{\\Pi}_{z}$.\n\nLet's construct the rows of $\\mathbf{P}$:\n1.  From $s_{1}=(a_{0}, z_{L})$: The next asset state is $a' = g(a_{0}, z_{L}) = a_{0}$. The income state $z'$ becomes $z_{L}$ with probability $\\frac{4}{5}$ or $z_{H}$ with probability $\\frac{1}{5}$. Thus, the next state is $s_{1}=(a_{0}, z_{L})$ with probability $\\frac{4}{5}$ or $s_{2}=(a_{0}, z_{H})$ with probability $\\frac{1}{5}$. The first row of $\\mathbf{P}$ is $(\\frac{4}{5}, \\frac{1}{5}, 0, 0)$.\n2.  From $s_{2}=(a_{0}, z_{H})$: The next asset state is $a' = g(a_{0}, z_{H}) = a_{1}$. The income state $z'$ becomes $z_{L}$ with probability $\\frac{1}{5}$ or $z_{H}$ with probability $\\frac{4}{5}$. Thus, the next state is $s_{3}=(a_{1}, z_{L})$ with probability $\\frac{1}{5}$ or $s_{4}=(a_{1}, z_{H})$ with probability $\\frac{4}{5}$. The second row of $\\mathbf{P}$ is $(0, 0, \\frac{1}{5}, \\frac{4}{5})$.\n3.  From $s_{3}=(a_{1}, z_{L})$: The next asset state is $a' = g(a_{1}, z_{L}) = a_{0}$.The income state $z'$ becomes $z_{L}$ with probability $\\frac{4}{5}$ or $z_{H}$ with probability $\\frac{1}{5}$. Thus, the next state is $s_{1}=(a_{0}, z_{L})$ with probability $\\frac{4}{5}$ or $s_{2}=(a_{0}, z_{H})$ with probability $\\frac{1}{5}$. The third row of $\\mathbf{P}$ is $(\\frac{4}{5}, \\frac{1}{5}, 0, 0)$.\n4.  From $s_{4}=(a_{1}, z_{H})$: The next asset state is $a' = g(a_{1}, z_{H}) = a_{1}$. The income state $z'$ becomes $z_{L}$ with probability $\\frac{1}{5}$ or $z_{H}$ with probability $\\frac{4}{5}$. Thus, the next state is $s_{3}=(a_{1}, z_{L})$ with probability $\\frac{1}{5}$ or $s_{4}=(a_{1}, z_{H})$ with probability $\\frac{4}{5}$. The fourth row of $\\mathbf{P}$ is $(0, 0, \\frac{1}{5}, \\frac{4}{5})$.\n\nThe transition matrix is:\n$$\n\\mathbf{P} =\n\\begin{pmatrix}\n\\frac{4}{5} & \\frac{1}{5} & 0 & 0 \\\\\n0 & 0 & \\frac{1}{5} & \\frac{4}{5} \\\\\n\\frac{4}{5} & \\frac{1}{5} & 0 & 0 \\\\\n0 & 0 & \\frac{1}{5} & \\frac{4}{5}\n\\end{pmatrix}\n$$\nThe stationary distribution $\\pi = (\\pi_{1}, \\pi_{2}, \\pi_{3}, \\pi_{4})$ is the left eigenvector of $\\mathbf{P}$ with eigenvalue $1$, satisfying $\\pi \\mathbf{P} = \\pi$ and $\\sum_{i=1}^{4} \\pi_{i} = 1$. This yields the system of linear equations:\n$$\n\\pi_{1} = \\frac{4}{5}\\pi_{1} + \\frac{4}{5}\\pi_{3} \\\\\n\\pi_{2} = \\frac{1}{5}\\pi_{1} + \\frac{1}{5}\\pi_{3} \\\\\n\\pi_{3} = \\frac{1}{5}\\pi_{2} + \\frac{1}{5}\\pi_{4} \\\\\n\\pi_{4} = \\frac{4}{5}\\pi_{2} + \\frac{4}{5}\\pi_{4}\n$$\nFrom the first equation, $\\frac{1}{5}\\pi_{1} = \\frac{4}{5}\\pi_{3}$, which implies $\\pi_{1} = 4\\pi_{3}$.\nFrom the fourth equation, $\\frac{1}{5}\\pi_{4} = \\frac{4}{5}\\pi_{2}$, which implies $\\pi_{4} = 4\\pi_{2}$.\nSubstituting $\\pi_{1} = 4\\pi_{3}$ into the second equation gives $\\pi_{2} = \\frac{1}{5}(4\\pi_{3}) + \\frac{1}{5}\\pi_{3} = \\pi_{3}$.\nSo we have the relationships: $\\pi_{2} = \\pi_{3}$, $\\pi_{1} = 4\\pi_{3} = 4\\pi_{2}$, and $\\pi_{4} = 4\\pi_{2}$.\nUsing the normalization condition $\\pi_{1} + \\pi_{2} + \\pi_{3} + \\pi_{4} = 1$:\n$$\n4\\pi_{2} + \\pi_{2} + \\pi_{2} + 4\\pi_{2} = 1 \\\\\n10\\pi_{2} = 1 \\implies \\pi_{2} = \\frac{1}{10}\n$$\nFrom this, we find the other components:\n$\\pi_{1} = 4 \\cdot \\frac{1}{10} = \\frac{4}{10} = \\frac{2}{5}$\n$\\pi_{3} = \\frac{1}{10}$\n$\\pi_{4} = 4 \\cdot \\frac{1}{10} = \\frac{4}{10} = \\frac{2}{5}$\nThe stationary distribution is $\\pi = (\\frac{2}{5}, \\frac{1}{10}, \\frac{1}{10}, \\frac{2}{5})$.\n\n**Option-by-Option Analysis**\n\nA. The stationary distribution over $(s_{1}, s_{2}, s_{3}, s_{4})$ computed by the histogram method is $\\pi = \\left(\\frac{2}{5}, \\frac{1}{10}, \\frac{1}{10}, \\frac{2}{5}\\right)$.\nThis statement is **Correct**. The calculation above, which corresponds to the histogram method, yields exactly this distribution.\n\nB. For a long panel simulation with $N$ large and $T$ large and after discarding a burn-in, the empirical cross-sectional state frequencies converge almost surely to the same stationary distribution as in option A.\nThis statement is **Correct**. The constructed Markov chain is finite and irreducible, which implies it is ergodic. The ergodic theorem for Markov chains guarantees that for a large number of agents $N$ and a long time series $T$, the empirical distribution of states in a simulation will converge almost surely to the unique stationary distribution $\\pi$.\n\nC. The stationary mass on states with $a = a_{1}$ equals $\\frac{1}{2}$.\nThis statement is **Correct**. The states corresponding to asset level $a_{1}$ are $s_{3} = (a_{1}, z_{L})$ and $s_{4} = (a_{1}, z_{H})$. The total stationary probability mass on these states is $\\pi_{3} + \\pi_{4} = \\frac{1}{10} + \\frac{2}{5} = \\frac{1}{10} + \\frac{4}{10} = \\frac{5}{10} = \\frac{1}{2}$.\n\nD. If the panel is initialized exactly at the stationary distribution and the policy $g$ is deterministic as above, then after one more period the simulated cross-sectional distribution remains exactly the same for any finite $N$.\nThis statement is **Incorrect**. Let the number of agents be $N$. If the system is initialized with $N_{i} = N\\pi_{i}$ agents in each state $i$, the number of agents transitioning to state $j$ is a sum of Bernoulli random variables. For any finite $N$, this realized number will almost surely differ from its expectation due to sampling variation. The law of large numbers implies that the realized distribution converges to the stationary distribution only as $N \\to \\infty$. For finite $N$, the distribution will not remain *exactly* the same.\n\nE. The histogram method introduces sampling error that vanishes only as $N \\to \\infty$; in contrast, a long simulation has no sampling error if initialized at stationarity.\nThis statement is **Incorrect**. It fundamentally mischaracterizes the sources of error. The histogram method is a deterministic numerical procedure for a given grid; its errors are *discretization error* (from approximating a continuous state space) and numerical solver error, not sampling error related to a number of agents $N$. A simulation with a finite number of agents $N$ inherently involves *sampling error* in every period, regardless of initialization, because the evolution of the cross-section is a stochastic process.", "answer": "$$\\boxed{ABC}$$"}, {"introduction": "Having mastered the mechanics of the stationary distribution, we now tackle the full Bewley-Huggett-Aiyagari model from start to finish. This comprehensive exercise requires you to first solve the individual household's dynamic programming problem using Value Function Iteration to find the optimal savings policy [@problem_id:2437637]. You will then use this micro-founded policy to simulate the entire economy's transition from one steady state to another following a permanent change in unemployment benefits. This practice demonstrates the real power of these models: connecting individual rational behavior to the dynamic evolution of macroeconomic aggregates.", "id": "2437637", "problem": "Consider a standard heterogeneous-agent incomplete-markets economy in the spirit of the Bewley-Huggett-Aiyagari model with a unit mass of infinitely lived households facing idiosyncratic employment risk and no aggregate shocks. Time is discrete. Each household maximizes expected lifetime utility with constant relative risk aversion preferences given by $E_{0}\\left[\\sum_{t=0}^{\\infty} \\beta^{t} u(c_{t})\\right]$ where $u(c) = \\frac{c^{1-\\sigma}}{1-\\sigma}$ for $\\sigma \\neq 1$, discount factor $\\beta \\in (0,1)$, and consumption $c \\ge 0$. Households have assets $a \\in \\mathcal{A} = [a_{\\min}, a_{\\max}]$ with borrowing constraint $a^{\\prime} \\ge a_{\\min}$ and $a_{\\min} \\ge 0$. The per-period budget constraint is $c + a^{\\prime} = (1+r) a + y(z)$, where $r$ is an exogenous real interest rate and employment state $z \\in \\{0,1\\}$ follows a two-state Markov chain with transition matrix $P = \\begin{bmatrix} \\Pr(z^{\\prime}=0 \\mid z=0) & \\Pr(z^{\\prime}=1 \\mid z=0) \\\\ \\Pr(z^{\\prime}=0 \\mid z=1) & \\Pr(z^{\\prime}=1 \\mid z=1) \\end{bmatrix}$. Labor income is $y(1) = w$ if employed, and $y(0) = b$ if unemployed, where $w$ is an exogenous wage and $b$ is an unemployment benefit that is policy-determined. Prices $(r,w)$ are fixed and there is no aggregate production or capital market clearing to determine prices; the focus is purely on partial-equilibrium distributional dynamics.\n\nLet the individual household’s dynamic program be the Bellman equation\n$$\nV(a,z) = \\max_{a^{\\prime} \\in \\mathcal{A},\\, a^{\\prime} \\ge a_{\\min}} \\left\\{ u\\left((1+r)a + y(z) - a^{\\prime}\\right) + \\beta \\sum_{z^{\\prime} \\in \\{0,1\\}} P_{z z^{\\prime}} V(a^{\\prime}, z^{\\prime}) \\right\\}.\n$$\nLet $\\pi(a,z)$ denote an optimal stationary policy mapping from $(a,z)$ to next period assets $a^{\\prime}$. Given a discretized grid of assets $\\{a_{i}\\}_{i=1}^{N_{a}}$ and employment states $\\{0,1\\}$, the optimal policy $\\pi$ induces a Markov transition kernel $Q$ over the finite state space $\\{(a_{i},z)\\}$ of size $2 N_{a}$, where each row of $Q$ contains the transition probabilities from a current state $(a_{i},z)$ to next states $(a_{j},z^{\\prime})$ given by the optimal next-asset choice $a_{j} = \\pi(a_{i},z)$ and the employment transition probabilities $P_{z z^{\\prime}}$. A stationary distribution $\\mu^{\\star}$ is an invariant measure satisfying $\\mu^{\\star} = \\mu^{\\star} Q$.\n\nSuppose the economy is initially at a stationary state under unemployment benefit level $b_{0}$ with associated optimal stationary policy $\\pi_{0}$, transition kernel $Q_{0}$, and cross-sectional stationary distribution $\\mu_{0}$ over $(a,z)$. At time $t=0$, there is an unanticipated, permanent increase to unemployment benefits from $b_{0}$ to $b_{1} > 0$. Under $b_{1}$, let the new optimal policy be $\\pi_{1}$, the new kernel be $Q_{1}$, and the new stationary distribution be $\\mu_{1}^{\\star}$. After the policy change, the cross-sectional distribution follows deterministic law of motion $\\mu_{t+1} = \\mu_{t} Q_{1}$ for $t \\ge 0$, starting from $\\mu_{0}$ at $t=0$. Define aggregate assets at time $t$ as $A_{t} = \\sum_{i,z} \\mu_{t}(a_{i},z) \\cdot a_{i}$, and the new stationary aggregate assets as $A_{\\infty} = \\sum_{i,z} \\mu_{1}^{\\star}(a_{i},z) \\cdot a_{i}$.\n\nYour task is to write a complete, runnable program that:\n- Solves the household problem for a given benefit $b$ via the Bellman equation on a discretized grid to obtain an optimal policy $\\pi$ and the induced kernel $Q$.\n- Computes a stationary distribution $\\mu^{\\star}$ under a given kernel $Q$ via forward iteration on the distribution over the finite state space.\n- Computes the transition path of the distribution from $\\mu_{0}$ under $Q_{1}$ and tracks $A_{t}$.\n- For each test case below, returns three quantities: the minimal nonnegative integer time $\\tau$ such that $\\frac{|A_{\\tau} - A_{\\infty}|}{\\max\\{1, |A_{\\infty}|\\}} \\le \\varepsilon$ with a given tolerance $\\varepsilon$, the initial aggregate assets $A_{0}$, and the new stationary aggregate assets $A_{\\infty}$.\n\nUse the following fixed parameters across all test cases unless otherwise stated: $\\beta = 0.96$, $\\sigma = 2.0$, $r = 0.01$, $w = 1.0$, $P = \\begin{bmatrix} 0.70 & 0.30 \\\\ 0.05 & 0.95 \\end{bmatrix}$ where rows correspond to $z \\in \\{0,1\\}$ ordered as $(0,1)$, the asset grid $\\{a_{i}\\}_{i=1}^{N_{a}}$ is linearly spaced on $[a_{\\min}, a_{\\max}]$ with $a_{\\min} = 0.0$ and $a_{\\max} = 50.0$, and the employment income mapping is $y(1) = w$, $y(0) = b$. Use $N_{a}$ as specified per test case. When computing utilities, impose feasibility $c = (1+r)a + y(z) - a^{\\prime} \\ge 0$, and treat $c \\le 0$ as infeasible with utility $-\\infty$. Use Value Function Iteration (VFI) or any numerically correct contraction-based method on the asset grid; interpolation is not required but admissible if you choose. For the stationary distribution under a kernel $Q$, iterate a distribution forward until convergence in the sup norm below a small tolerance.\n\nDefine the convergence tolerance for the transition time as $\\varepsilon = 10^{-6}$ in the relative metric $\\frac{|A_{t} - A_{\\infty}|}{\\max\\{1, |A_{\\infty}|\\}}$. If $b_{1} = b_{0}$, the transition time should be $\\tau = 0$ by construction. Use a maximum horizon of $T_{\\max} = 2000$ periods when searching for $\\tau$; if the condition is not met by $T_{\\max}$, return $\\tau = T_{\\max}$.\n\nTest suite. Your program must compute the triple $(\\tau, A_{0}, A_{\\infty})$ for each of the following three parameter sets:\n- Test case $1$ (baseline increase): $b_{0} = 0.10$, $b_{1} = 0.20$, $N_{a} = 80$.\n- Test case $2$ (no change boundary): $b_{0} = 0.15$, $b_{1} = 0.15$, $N_{a} = 80$.\n- Test case $3$ (large increase): $b_{0} = 0.05$, $b_{1} = 0.40$, $N_{a} = 80$.\n\nAnswer specification and final output format:\n- For each test case, output the integer $\\tau$, and the floats $A_{0}$ and $A_{\\infty}$ rounded to six decimal places.\n- Aggregate all test case results into a single line printed by the program as a comma-separated list enclosed in square brackets, in the order $[\\tau_{1}, A_{0,1}, A_{\\infty,1}, \\tau_{2}, A_{0,2}, A_{\\infty,2}, \\tau_{3}, A_{0,3}, A_{\\infty,3}]$, with no spaces.\n- There are no physical units in this problem. Angles are not involved. Do not display percentages; all ratios must be expressed as decimals if any appear, and adhere to the rounding instruction for $A_{0}$ and $A_{\\infty}$.\n\nScientific realism, fundamental base, and derivation expectations: Build your solution from the fundamental definitions of dynamic programming, Markov chains over discrete state spaces induced by optimal stationary policies, and invariant measures for finite Markov chains. Do not use any shortcut formulas not derivable from these bases. Ensure all numerical procedures (grid discretization, contraction-based fixed-point iteration for the value function, forward iteration for distributions) are implemented in a scientifically sound and self-consistent way.", "solution": "The problem is assessed to be valid. It constitutes a well-posed and standard exercise in computational economics, grounded in the established Bewley-Huggett-Aiyagari framework. The task is to analyze the distributional and aggregate consequences of a permanent change in unemployment benefits. The solution requires solving a household's dynamic programming problem, determining the induced Markov process for wealth and employment, and simulating the economy's transition to a new steady state. The methodology will be implemented numerically as follows.\n\nFirst, we define the discretized state space. The continuous state of a household is its asset holding $a$ and its employment status $z$. The asset space $\\mathcal{A} = [a_{\\min}, a_{\\max}]$ is discretized into a grid of $N_a$ points, $\\{a_i\\}_{i=1}^{N_a}$, which are linearly spaced. The employment state $z$ is discrete, $z \\in \\{0, 1\\}$. Thus, the full state space for our numerical problem is the finite set $S = \\{a_i\\}_{i=1}^{N_a} \\times \\{0, 1\\}$, containing $2 N_a$ distinct states. We can represent a state by an ordered pair $(a_i, z)$.\n\nThe core of the model is the household's optimization problem, which we solve using Value Function Iteration (VFI). The Bellman equation for a household in state $(a,z)$ is given by:\n$$ V(a,z) = \\max_{a' \\ge a_{\\min}} \\left\\{ u(c) + \\beta \\sum_{z' \\in \\{0,1\\}} P_{zz'} V(a', z') \\right\\} $$\nsubject to the budget constraint $c + a' = (1+r)a + y(z)$ and the non-negativity constraint on consumption $c \\ge 0$. The utility function is $u(c) = \\frac{c^{1-\\sigma}}{1-\\sigma}$.\nTo solve this on our discretized grid, we iterate on the value function, represented as a matrix $V$ of size $2 \\times N_a$. Starting with an initial guess $V_0$, we iterate $V_{k+1} = T(V_k)$, where $T$ is the Bellman operator. For each state $(a_i, z)$, the operator is:\n$$ (T V)(a_i, z) = \\max_{j \\in \\{1,...,N_a\\}} \\left\\{ u\\left((1+r)a_i + y(z) - a_j\\right) + \\beta \\sum_{z' \\in \\{0,1\\}} P_{zz'} V_k(a_j, z') \\right\\} $$\nWe must enforce the constraint that consumption $c = (1+r)a_i + y(z) - a_j$ must be positive; if not, the utility is taken to be $-\\infty$, rendering that choice of $a_j$ infeasible. The iteration continues until the value function converges, i.e., when the sup-norm of the difference between successive iterates, $\\|V_{k+1} - V_k\\|_{\\infty}$, falls below a small tolerance. This process yields the converged value function $V^{\\star}$ and an optimal policy function $\\pi(a_i, z) = a_j$, which maps each state $(a_i, z)$ to an optimal next-period asset choice $a_j$. This is implemented efficiently using vectorization.\n\nThe optimal policy $\\pi$ and the exogenous employment transition matrix $P$ together define a time-homogeneous Markov chain on the discrete state space $S$. We construct a $2N_a \\times 2N_a$ transition matrix $Q$. Let the states be ordered such that the first $N_a$ indices correspond to states $(a_i, 0)$ for $i=1,\\dots,N_a$ and the next $N_a$ indices to states $(a_i, 1)$. An element $Q_{(i,z), (k,z')}$ gives the probability of transitioning from state $(a_i, z)$ to $(a_k, z')$. This probability is non-zero only if the policy for state $(a_i, z)$ dictates choosing $a_k$ for the next period. Formally:\n$$ Q_{(a_i,z), (a_k,z')} = \\begin{cases} P_{zz'} & \\text{if } \\pi(a_i,z) = a_k \\\\ 0 & \\text{otherwise} \\end{cases} $$\nThis matrix $Q$ describes the law of motion for an individual household over the state space.\n\nGiven the transition matrix $Q$, the cross-sectional distribution of households, $\\mu$, evolves according to $\\mu_{t+1} = \\mu_t Q$, where $\\mu_t$ is a row vector of size $2N_a$ representing the mass of households in each state at time $t$. A stationary distribution $\\mu^{\\star}$ is a fixed point of this mapping, satisfying $\\mu^{\\star} = \\mu^{\\star} Q$. Since the underlying shock process is ergodic and households engage in precautionary saving, this Markov chain is also ergodic, guaranteeing a unique stationary distribution. We compute $\\mu^{\\star}$ by forward iteration: starting from an arbitrary initial distribution (e.g., uniform), we repeatedly apply the update $\\mu_{k+1} = \\mu_k Q$ until $\\|\\mu_{k+1} - \\mu_k\\|_{\\infty}$ is smaller than a convergence tolerance.\n\nThe problem requires us to analyze a policy transition. We first compute the initial stationary state corresponding to an unemployment benefit level $b_0$.This involves finding the optimal policy $\\pi_0$, the kernel $Q_0$, and the stationary distribution $\\mu_0$ for $b_0$. From $\\mu_0$, we calculate the initial aggregate assets $A_0 = \\sum_{i=1}^{N_a} \\sum_{z \\in \\{0,1\\}} \\mu_0(a_i, z) \\cdot a_i$.\nNext, we compute the new stationary state for the new benefit level $b_1$. This yields a new kernel $Q_1$ and a new stationary distribution $\\mu_1^{\\star}$, from which we calculate the new long-run aggregate assets $A_{\\infty} = \\sum_{i=1}^{N_a} \\sum_{z \\in \\{0,1\\}} \\mu_1^{\\star}(a_i, z) \\cdot a_i$.\n\nFinally, we simulate the transition path. The economy starts with the distribution $\\mu_0$ at time $t=0$. The policy change to $b_1$ means the dynamics are now governed by $Q_1$. The distribution evolves as $\\mu_{t+1} = \\mu_t Q_1$. We simulate this path period by period, calculating aggregate assets $A_t = \\sum_{i,z} \\mu_t(a_i, z) \\cdot a_i$ at each step. We track the time $t$ and stop when the convergence criterion is met, identifying the minimal non-negative integer $\\tau$ such that $\\frac{|A_{\\tau} - A_{\\infty}|}{\\max\\{1, |A_{\\infty}|\\}} \\le \\varepsilon$. If this condition is not met by the maximum horizon $T_{max}$, we set $\\tau=T_{\\max}$. The final output for each test case is the triplet $(\\tau, A_0, A_{\\infty})$.", "answer": "```python\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Main function to solve the problem for the given test cases.\n    \"\"\"\n\n    def solve_economy(b, Na, params):\n        \"\"\"\n        Solves the household problem and computes the transition kernel for a given benefit level 'b'.\n        \"\"\"\n        beta, sigma, r, w, P, a_min, a_max = params\n        a_grid = np.linspace(a_min, a_max, Na)\n        y = np.array([b, w])\n\n        # Value Function Iteration\n        v = np.zeros((2, Na))\n        policy_idx = np.zeros((2, Na), dtype=int)\n        vfi_tol = 1e-8\n        max_iter_vfi = 2000\n        \n        for k in range(max_iter_vfi):\n            v_old = v.copy()\n            expected_v = P @ v_old # E[V(a', z') | z] = P_z . V(a',:)\n\n            for z in range(2): # 0: unemployed, 1: employed\n                # Vectorized calculation over current assets a_i\n                cash_on_hand = (1 + r) * a_grid + y[z]\n                \n                # consumption_matrix[i, j] = consumption if current asset is a_i and next asset is a_j\n                consumption_matrix = cash_on_hand.reshape(-1, 1) - a_grid.reshape(1, -1)\n                \n                utility_matrix = np.full((Na, Na), -np.inf)\n                feasible = consumption_matrix > 0\n                utility_matrix[feasible] = (consumption_matrix[feasible]**(1 - sigma)) / (1 - sigma)\n\n                # Bellman RHS for each (i, j) pair\n                # continuation_value[j] = beta * E[V(a_j, z') | z]\n                continuation_value = beta * expected_v[z, :]\n                value_matrix = utility_matrix + continuation_value.reshape(1, -1)\n                \n                v[z, :] = np.max(value_matrix, axis=1)\n                policy_idx[z, :] = np.argmax(value_matrix, axis=1)\n\n            if np.max(np.abs(v - v_old)) < vfi_tol:\n                break\n        \n        # Construct transition matrix Q\n        num_states = 2 * Na\n        Q = np.zeros((num_states, num_states))\n        for z in range(2):\n            for i in range(Na):\n                current_state_idx = z * Na + i\n                next_asset_idx = policy_idx[z, i]\n                \n                # Transition to unemployed state with next asset\n                next_state_unemp_idx = 0 * Na + next_asset_idx\n                Q[current_state_idx, next_state_unemp_idx] = P[z, 0]\n                \n                # Transition to employed state with next asset\n                next_state_emp_idx = 1 * Na + next_asset_idx\n                Q[current_state_idx, next_state_emp_idx] = P[z, 1]\n                \n        return Q, a_grid\n\n    def compute_stationary_distribution(Q, Na):\n        \"\"\"\n        Computes the stationary distribution for a given transition matrix Q.\n        \"\"\"\n        num_states = 2 * Na\n        mu = np.ones(num_states) / num_states\n        dist_tol = 1e-12\n        max_iter_dist = 5000\n\n        for _ in range(max_iter_dist):\n            mu_new = mu @ Q\n            if np.max(np.abs(mu_new - mu)) < dist_tol:\n                return mu_new\n            mu = mu_new\n        return mu\n\n    def run_case(b0, b1, Na):\n        \"\"\"\n        Runs a single test case scenario.\n        \"\"\"\n        # Fixed parameters\n        beta = 0.96\n        sigma = 2.0\n        r = 0.01\n        w = 1.0\n        P = np.array([[0.70, 0.30], [0.05, 0.95]])\n        a_min = 0.0\n        a_max = 50.0\n        params = (beta, sigma, r, w, P, a_min, a_max)\n        \n        # Transition path parameters\n        eps_tau = 1e-6\n        T_max = 2000\n\n        # --- Initial Steady State (b0) ---\n        Q0, a_grid = solve_economy(b0, Na, params)\n        mu0 = compute_stationary_distribution(Q0, Na)\n        full_asset_vector = np.tile(a_grid, 2)\n        A0 = np.dot(mu0, full_asset_vector)\n\n        # --- Handle no-change case ---\n        if b0 == b1:\n            A_inf = A0\n            tau = 0\n            return tau, A0, A_inf\n            \n        # --- New Steady State (b1) ---\n        Q1, _ = solve_economy(b1, Na, params)\n        mu1_star = compute_stationary_distribution(Q1, Na)\n        A_inf = np.dot(mu1_star, full_asset_vector)\n        \n        # --- Transition Path ---\n        mu_t = mu0\n        tau = T_max\n        denominator = max(1.0, abs(A_inf))\n\n        for t in range(T_max + 1):\n            A_t = np.dot(mu_t, full_asset_vector)\n            if abs(A_t - A_inf) / denominator <= eps_tau:\n                tau = t\n                break\n            mu_t = mu_t @ Q1\n\n        return tau, A0, A_inf\n\n    # Define test cases\n    test_cases = [\n        {'b0': 0.10, 'b1': 0.20, 'Na': 80},  # Test case 1\n        {'b0': 0.15, 'b1': 0.15, 'Na': 80},  # Test case 2\n        {'b0': 0.05, 'b1': 0.40, 'Na': 80},  # Test case 3\n    ]\n\n    all_results = []\n    for case in test_cases:\n        tau, A0, A_inf = run_case(case['b0'], case['b1'], case['Na'])\n        all_results.append(tau)\n        all_results.append(f\"{A0:.6f}\")\n        all_results.append(f\"{A_inf:.6f}\")\n\n    print(f\"[{','.join(map(str, all_results))}]\")\n\nsolve()\n```"}, {"introduction": "Our final practice pushes into the frontier of computational economics, addressing the crucial questions of accuracy and scalability. In this exercise, you will solve a more complex model with two continuous asset states, giving you a direct encounter with the infamous \"curse of dimensionality\" [@problem_id:2437584]. Your primary task is to assess the accuracy of your numerical solution by calculating the Euler equation residuals, a standard diagnostic tool in the field. This practice will develop your skills in validating computational work and build an appreciation for the trade-offs between model complexity and numerical precision.", "id": "2437584", "problem": "Consider a heterogeneous-agent, incomplete-markets economy of the Bewley-Huggett-Aiyagari type with two continuous asset positions. A representative household faces idiosyncratic labor income risk and maximizes discounted expected utility over consumption subject to a sequence of budget constraints and borrowing limits. Time is discrete. Preferences exhibit Constant Relative Risk Aversion (CRRA). Formally, the household solves\n$$\n\\max_{\\{c_t,a_{1,t+1},a_{2,t+1}\\}_{t=0}^{\\infty}} \\ \\mathbb{E}_0 \\sum_{t=0}^{\\infty} \\beta^t \\, u(c_t),\n$$\nwhere $u(c) = \\frac{c^{1-\\sigma}}{1-\\sigma}$ for $\\sigma \\neq 1$, and $u(c) = \\log(c)$ for $\\sigma = 1$. The budget constraint is\n$$\nc_t + a_{1,t+1} + a_{2,t+1} = (1+r_1) a_{1,t} + (1+r_2) a_{2,t} + w z_t,\n$$\nwith borrowing constraints\n$$\na_{1,t+1} \\ge a_{\\min}, \\quad a_{2,t+1} \\ge a_{\\min}.\n$$\nLabor productivity $z_t$ follows a time-homogeneous, finite-state Markov chain on a set $\\mathcal{Z} = \\{z^1, \\ldots, z^M\\}$ with transition matrix $\\Pi = [\\pi_{ij}]_{i,j=1}^M$, where $\\pi_{ij} = \\mathbb{P}(z_{t+1} = z^j \\mid z_t = z^i)$ and $\\sum_{j=1}^M \\pi_{ij} = 1$ for each $i$. The state vector is $(a_1,a_2,z) \\in \\mathcal{A}_1 \\times \\mathcal{A}_2 \\times \\mathcal{Z}$, where $\\mathcal{A}_1$ and $\\mathcal{A}_2$ are compact subsets of $\\mathbb{R}$ with lower bound $a_{\\min}$.\n\nLet the value function be defined by the Bellman equation\n$$\nV(a_1,a_2,z) = \\max_{a_1' \\ge a_{\\min}, \\, a_2' \\ge a_{\\min}} \\left\\{ u\\left((1+r_1)a_1 + (1+r_2)a_2 + w z - a_1' - a_2' \\right) + \\beta \\sum_{z' \\in \\mathcal{Z}} \\pi(z,z') \\, V(a_1',a_2',z') \\right\\},\n$$\nwhere $\\pi(z,z')$ denotes the transition probability from $z$ to $z'$.\n\nDefine the stationary one-period-ahead policy functions $(g_1,g_2)$ mapping current states $(a_1,a_2,z)$ to next assets $(a_1',a_2')$. Given such policy functions, define current consumption by\n$$\nc(a_1,a_2,z) = (1+r_1)a_1 + (1+r_2)a_2 + w z - g_1(a_1,a_2,z) - g_2(a_1,a_2,z),\n$$\nand next-period consumption contingent on the realization $z'$ by\n$$\nc'(z'; a_1,a_2,z) = (1+r_1) g_1(a_1,a_2,z) + (1+r_2) g_2(a_1,a_2,z) + w z' - g_1(g_1(a_1,a_2,z), g_2(a_1,a_2,z), z') - g_2(g_1(a_1,a_2,z), g_2(a_1,a_2,z), z').\n$$\n\nFor interior choices (meaning both policy choices strictly above the borrowing limit), the Euler equations require\n$$\nu'\\!\\left(c(a_1,a_2,z)\\right) = \\beta (1+r_1) \\, \\mathbb{E}\\left[ u'\\!\\left(c'(z'; a_1,a_2,z)\\right) \\,\\middle|\\, z \\right],\n$$\n$$\nu'\\!\\left(c(a_1,a_2,z)\\right) = \\beta (1+r_2) \\, \\mathbb{E}\\left[ u'\\!\\left(c'(z'; a_1,a_2,z)\\right) \\,\\middle|\\, z \\right],\n$$\nwhere $u'(c) = c^{-\\sigma}$ for $\\sigma \\neq 1$ and $u'(c) = 1/c$ for $\\sigma = 1$. When a borrowing constraint binds for an asset, the corresponding Euler inequality holds with $\\ge$.\n\nYour task is to compute, for each parameter set in the test suite below, the maximum absolute interior Euler residual across the discretized state space, defined as follows. Let $\\mathcal{G}_1 \\subset \\mathcal{A}_1$ and $\\mathcal{G}_2 \\subset \\mathcal{A}_2$ be uniform grids with $N_1$ and $N_2$ points, respectively, including the lower bound $a_{\\min}$. Restrict feasible choices $(a_1',a_2')$ to these grids. Use the stationary optimal policy induced by the Bellman problem above under this discrete choice restriction. For each state $(a_1,a_2,z)$ on the grid, if the optimal choices are strictly interior on the grids (not equal to $a_{\\min}$ and not equal to the upper grid endpoints) and both current consumption and all possible next-period consumptions are strictly positive, define the two residuals\n$$\nR_1(a_1,a_2,z) = u'\\!\\left(c(a_1,a_2,z)\\right) - \\beta (1+r_1)\\sum_{z' \\in \\mathcal{Z}} \\pi(z,z') \\, u'\\!\\left(c'(z'; a_1,a_2,z)\\right),\n$$\n$$\nR_2(a_1,a_2,z) = u'\\!\\left(c(a_1,a_2,z)\\right) - \\beta (1+r_2)\\sum_{z' \\in \\mathcal{Z}} \\pi(z,z') \\, u'\\!\\left(c'(z'; a_1,a_2,z)\\right).\n$$\nReport the scalar\n$$\n\\max \\left\\{ \\left| R_1(a_1,a_2,z) \\right|, \\left| R_2(a_1,a_2,z) \\right| \\ \\text{over all grid states with interior choices and strictly positive consumptions} \\right\\}.\n$$\nIf no grid state satisfies these interior and positivity conditions, report the value $0.0$.\n\nTest suite. For each of the three cases below, all parameters are in natural units, and there are no physical units to report. All numbers must be treated as real numbers. For each case, compute the stationary optimal policy on the specified grids and then compute the maximum absolute interior Euler residual as defined above:\n\n- Case A (happy path):\n  - Preferences: $\\beta = 0.96$, $\\sigma = 2.0$.\n  - Returns and wage: $r_1 = 0.02$, $r_2 = 0.04$, $w = 1.0$.\n  - Income process: $\\mathcal{Z} = \\{0.5, 1.0, 1.5\\}$, with transition matrix\n    $$\n    \\Pi =\n    \\begin{bmatrix}\n    0.50 & 0.30 & 0.20 \\\\\n    0.20 & 0.50 & 0.30 \\\\\n    0.20 & 0.30 & 0.50\n    \\end{bmatrix}.\n    $$\n  - Asset grids: $a_{\\min} = 0.0$, upper bounds $a_{1,\\max} = a_{2,\\max} = 8.0$, uniform grids with $N_1 = 10$ and $N_2 = 10$ points.\n\n- Case B (low return and tighter curvature, tests potential boundary choices):\n  - Preferences: $\\beta = 0.94$, $\\sigma = 3.0$.\n  - Returns and wage: $r_1 = 0.00$, $r_2 = 0.005$, $w = 1.0$.\n  - Income process: $\\mathcal{Z} = \\{0.5, 1.0\\}$, with transition matrix\n    $$\n    \\Pi =\n    \\begin{bmatrix}\n    0.70 & 0.30 \\\\\n    0.30 & 0.70\n    \\end{bmatrix}.\n    $$\n  - Asset grids: $a_{\\min} = 0.0$, upper bounds $a_{1,\\max} = a_{2,\\max} = 6.0$, uniform grids with $N_1 = 8$ and $N_2 = 8$ points.\n\n- Case C (degenerate income risk, tests deterministic dynamics with two assets):\n  - Preferences: $\\beta = 0.95$, $\\sigma = 1.5$.\n  - Returns and wage: $r_1 = 0.03$, $r_2 = 0.03$, $w = 1.0$.\n  - Income process: $\\mathcal{Z} = \\{1.0\\}$, with transition matrix $\\Pi = [1.0]$.\n  - Asset grids: $a_{\\min} = 0.0$, upper bounds $a_{1,\\max} = a_{2,\\max} = 10.0$, uniform grids with $N_1 = 12$ and $N_2 = 12$ points.\n\nComputational and numerical conventions to be followed:\n- Treat any candidate consumption $c \\le 0$ as infeasible with utility $-\\infty$ for the purpose of the optimization. In implementation, this may be represented by a very large negative payoff that is dominated by any feasible choice.\n- When computing the Euler residuals, only include states where current consumption and all relevant next-period consumptions are strictly positive.\n- For numerical stability when evaluating $u'$ at very small but positive consumption in residuals, clipping to a small positive lower bound is acceptable as long as it remains strictly positive.\n\nYour program should produce a single line of output containing the results for Cases A, B, and C, in that order, as a comma-separated list of three floats rounded to six decimal places and enclosed in square brackets. For example, the output format must be exactly like\n$$\n[\\text{residual\\_A},\\text{residual\\_B},\\text{residual\\_C}],\n$$\nwhere each placeholder is a real number rounded to six decimals.", "solution": "The problem presented is a request to solve and analyze a standard economic model from the field of computational macroeconomics. It is a variant of the Bewley-Huggett-Aiyagari model, extended to include two distinct asset positions. The task is to find the stationary optimal policy for household savings and consumption and then to quantify the accuracy of this computed policy by calculating the maximum Euler equation residual across the state space.\n\nBefore proceeding to a solution, a rigorous validation of the problem statement is required.\n\n**Problem Validation**\n\n**Step 1: Extraction of Givens**\nThe problem provides a complete formal description of a household dynamic programming problem, including:\n- The household's objective function, which is the maximization of the expected sum of discounted CRRA utility, $\\mathbb{E}_0 \\sum_{t=0}^{\\infty} \\beta^t \\, u(c_t)$, with $u(c) = \\frac{c^{1-\\sigma}}{1-\\sigma}$ or $u(c) = \\log(c)$.\n- The sequential budget constraint: $c_t + a_{1,t+1} + a_{2,t+1} = (1+r_1) a_{1,t} + (1+r_2) a_{2,t} + w z_t$.\n- Borrowing limits: $a_{1,t+1} \\ge a_{\\min}, a_{2,t+1} \\ge a_{\\min}$.\n- A stochastic process for labor productivity $z_t$, specified as a finite-state Markov chain.\n- The corresponding Bellman functional equation for the value function $V(a_1,a_2,z)$.\n- The definitions of the Euler equations that characterize an optimal interior solution.\n- A precise definition of the Euler residuals, $R_1$ and $R_2$, on a discretized state and choice space.\n- A clear task: compute the maximum absolute Euler residual over all grid states where the optimal choice is interior and all associated consumptions (current and future) are strictly positive.\n- Three distinct, fully parameterized test cases (A, B, C) are provided, specifying all necessary values for $\\beta$, $\\sigma$, $r_1, r_2, w$, the income process ($\\mathcal{Z}, \\Pi$), and the asset grid structure ($a_{\\min}, a_{1,\\max}, a_{2,\\max}, N_1, N_2$).\n\n**Step 2: Validation Using Extracted Givens**\n- **Scientific Grounding**: The model is a canonical heterogeneous-agent model in macroeconomics. All equations and concepts are standard and theoretically sound. The parameter values provided in the test cases are within conventional ranges used in academic literature. The transition matrices are valid stochastic matrices. The model is scientifically well-founded.\n- **Well-Posedness**: The problem is formulated as a discounted dynamic programming problem. Given $\\beta \\in (0,1)$ and a bounded return function (achieved by the compact state space and borrowing constraints), the Bellman operator is a contraction mapping. Standard theorems (e.g., Blackwell's sufficient conditions) guarantee the existence of a unique, stable fixed point for the value function, $V$, and an associated stationary optimal policy function. The task of calculating residuals from this policy is well-defined.\n- **Objectivity and Completeness**: The problem is stated in objective, mathematical language. All parameters, constraints, and definitions required for a computational solution are explicitly provided. The definition for \"interior\" choices and the handling of non-positive consumption are specified, removing ambiguity. The problem is self-contained and complete.\n\n**Step 3: Verdict and Action**\nThe problem is deemed **valid**. It is a well-posed, scientifically grounded, and fully specified problem in computational economics. I will now provide the full computational solution.\n\n**Methodology for Solution**\n\nThe solution requires finding the fixed point of the Bellman equation, which is accomplished using the numerical method of Value Function Iteration (VFI) on a discretized version of the state space.\n\n1.  **Discretization**: The continuous state variables $a_1$ and $a_2$ are discretized into uniform grids, $\\mathcal{G}_1$ and $\\mathcal{G}_2$, with $N_1$ and $N_2$ points, respectively, spanning $[a_{\\min}, a_{1,\\max}]$ and $[a_{\\min}, a_{2,\\max}]$. The full state space for the numerical problem is the Cartesian product of these grids and the discrete shock set $\\mathcal{Z}$, i.e., $\\mathcal{G}_1 \\times \\mathcal{G}_2 \\times \\mathcal{Z}$.\n\n2.  **Value Function Iteration (VFI)**: We iterate on the value function, represented as a three-dimensional array $V(i, j, m)$ where $i, j, m$ are indices for the grids of $a_1, a_2, z$. Starting with an initial guess $V_0$, we iterate the Bellman operator $V_{k+1} = T(V_k)$:\n    $$\n    V_{k+1}(a_{1,i}, a_{2,j}, z_m) = \\max_{p,q} \\left\\{ u\\left(y_{i,j,m} - a_{1,p}' - a_{2,q}' \\right) + \\beta \\sum_{m'=1}^M \\pi_{m,m'} \\, V_k(a_{1,p}', a_{2,q}', z_{m'}) \\right\\}\n    $$\n    where $y_{i,j,m} = (1+r_1)a_{1,i} + (1+r_2)a_{2,j} + w z_m$ is cash-on-hand, and the maximization is over all choice grid indices $(p,q)$. The iteration continues until the value function converges, i.e., $\\max |V_{k+1} - V_k| < \\epsilon$ for some small tolerance $\\epsilon$. During the final iteration, we store the indices $(p^*, q^*)$ that attain the maximum for each state $(i,j,m)$. These stored indices constitute the discrete optimal policy functions, $g_1(i, j, m) = p^*$ and $g_2(i, j, m) = q^*$.\n\n3.  **Euler Residual Calculation**: After obtaining the converged value function and the corresponding stationary policy functions, we proceed to calculate the Euler residuals. We iterate through every state $(a_{1,i}, a_{2,j}, z_m)$ on the grid:\n    - We retrieve the optimal next-period asset choices $(a'_{1,p^*}, a'_{2,q^*})$ from the policy functions.\n    - We check if these choices are **interior**, meaning $0 < p^* < N_1-1$ and $0 < q^* < N_2-1$.\n    - If interior, we calculate current consumption $c$ and check if it is strictly positive.\n    - If $c > 0$, we then calculate consumption for all possible next-period states, $c'(z_{m'})$, and check if they are all strictly positive. This requires finding the optimal choices out of the state $(a'_{1,p^*}, a'_{2,q^*}, z_{m'})$, which we can look up in our computed policy function.\n    - Only if all these conditions (interiority and positivity of all consumptions) are met, we compute the marginal utilities $u'(c)$ and $u'(c'(z_{m'}))$.\n    - We then calculate the right-hand side of the Euler equations by taking the expectation, $E[u'(c')] = \\sum_{m'} \\pi_{m, m'} u'(c'(z_{m'}))$.\n    - Finally, the residuals $R_1$ and $R_2$ are computed using their definitions. The maximum absolute value found across all valid states is recorded. If no state satisfies the conditions, the result is $0.0$.\n\nThis procedure is systematically applied to each of the three test cases specified in the problem statement.", "answer": "```python\nimport numpy as np\n\ndef _solve_case(beta, sigma, r1, r2, w, z_grid, pi_matrix, a_min, a_max1, a_max2, n1, n2):\n    \"\"\"\n    Solves the two-asset Bewley-Huggett-Aiyagari model for one parameter case.\n    \"\"\"\n    # 1. Setup Grids and Utility Functions\n    a1_grid = np.linspace(a_min, a_max1, n1)\n    a2_grid = np.linspace(a_min, a_max2, n2)\n    m_shocks = len(z_grid)\n\n    def u_func(c):\n        # Using a small positive number to avoid log(0) or division by zero,\n        # but the main logic handles infeasible states (c<=0).\n        c_safe = np.maximum(c, 1e-12)\n        if sigma == 1.0:\n            val = np.log(c_safe)\n        else:\n            val = (c_safe**(1 - sigma)) / (1 - sigma)\n        # Infeasible consumption yields -infinity utility.\n        if isinstance(val, np.ndarray):\n            val[c <= 0] = -np.inf\n        elif c <= 0:\n            val = -np.inf\n        return val\n\n    def du_func(c):\n        c_safe = np.maximum(c, 1e-12)\n        return c_safe**(-sigma)\n\n    # 2. Value Function Iteration\n    V = np.zeros((n1, n2, m_shocks))\n    policy_idx1 = np.zeros((n1, n2, m_shocks), dtype=np.int32)\n    policy_idx2 = np.zeros((n1, n2, m_shocks), dtype=np.int32)\n\n    max_iter = 1000\n    tol = 1e-7\n\n    # Precompute grid of total savings choices\n    total_savings_choices = a1_grid[:, None] + a2_grid[None, :]\n\n    for it in range(max_iter):\n        V_old = V.copy()\n        \n        # Precompute the expected continuation value for each choice (p,q) and current shock m.\n        # V has shape (n1, n2, m_shocks), pi_matrix.T has shape (m_shocks, m_shocks).\n        # The matmul op broadcasts over the first two dimensions of V.\n        EV = beta * np.matmul(V, pi_matrix.T)\n\n        for i in range(n1):\n            for j in range(n2):\n                for m in range(m_shocks):\n                    cash_on_hand = (1 + r1) * a1_grid[i] + (1 + r2) * a2_grid[j] + w * z_grid[m]\n                    consumption_candidates = cash_on_hand - total_savings_choices\n                    \n                    value_candidates = u_func(consumption_candidates) + EV[:, :, m]\n                    \n                    # Find maximum value and corresponding choice indices\n                    best_idx_flat = np.argmax(value_candidates)\n                    p_star, q_star = np.unravel_index(best_idx_flat, (n1, n2))\n                    \n                    V[i, j, m] = value_candidates[p_star, q_star]\n                    policy_idx1[i, j, m] = p_star\n                    policy_idx2[i, j, m] = q_star\n        \n        error = np.max(np.abs(V - V_old))\n        if error < tol:\n            break\n\n    # 3. Euler Residual Calculation\n    max_residual = 0.0\n    \n    for i in range(n1):\n        for j in range(n2):\n            for m in range(m_shocks):\n                p_star = policy_idx1[i, j, m]\n                q_star = policy_idx2[i, j, m]\n                \n                # Condition 1: Check if the choice is strictly interior on the grids.\n                if not (0 < p_star < n1 - 1 and 0 < q_star < n2 - 1):\n                    continue\n                \n                a1_prime = a1_grid[p_star]\n                a2_prime = a2_grid[q_star]\n                \n                # Condition 2: Check if current consumption is strictly positive.\n                c_current = (1 + r1) * a1_grid[i] + (1 + r2) * a2_grid[j] + w * z_grid[m] - a1_prime - a2_prime\n                if c_current <= 0:\n                    continue\n                    \n                # Condition 3: Check if all possible next-period consumptions are strictly positive.\n                c_prime_list = []\n                all_c_prime_positive = True\n                for m_prime in range(m_shocks):\n                    # Optimal policy from state (a1_prime, a2_prime, z_prime), where indices are (p_star, q_star, m_prime)\n                    p_double_star = policy_idx1[p_star, q_star, m_prime]\n                    q_double_star = policy_idx2[p_star, q_star, m_prime]\n                    \n                    a1_double_prime = a1_grid[p_double_star]\n                    a2_double_prime = a2_grid[q_double_star]\n                    \n                    c_prime = (1 + r1) * a1_prime + (1 + r2) * a2_prime + w * z_grid[m_prime] - a1_double_prime - a2_double_prime\n                    \n                    if c_prime <= 0:\n                        all_c_prime_positive = False\n                        break\n                    c_prime_list.append(c_prime)\n                \n                if not all_c_prime_positive:\n                    continue\n                \n                # If all conditions are met, calculate residuals.\n                du_current = du_func(c_current)\n                du_prime_values = du_func(np.array(c_prime_list))\n                expected_du_prime = np.dot(pi_matrix[m, :], du_prime_values)\n                \n                R1 = du_current - beta * (1 + r1) * expected_du_prime\n                R2 = du_current - beta * (1 + r2) * expected_du_prime\n                \n                max_residual = max(max_residual, abs(R1), abs(R2))\n                \n    return max_residual\n\ndef solve():\n    \"\"\"\n    Defines test cases and computes the max Euler residual for each.\n    \"\"\"\n    test_cases = [\n        # Case A\n        {\n            \"beta\": 0.96, \"sigma\": 2.0, \"r1\": 0.02, \"r2\": 0.04, \"w\": 1.0,\n            \"z_grid\": np.array([0.5, 1.0, 1.5]),\n            \"pi_matrix\": np.array([[0.50, 0.30, 0.20], [0.20, 0.50, 0.30], [0.20, 0.30, 0.50]]),\n            \"a_min\": 0.0, \"a_max1\": 8.0, \"a_max2\": 8.0, \"n1\": 10, \"n2\": 10\n        },\n        # Case B\n        {\n            \"beta\": 0.94, \"sigma\": 3.0, \"r1\": 0.00, \"r2\": 0.005, \"w\": 1.0,\n            \"z_grid\": np.array([0.5, 1.0]),\n            \"pi_matrix\": np.array([[0.70, 0.30], [0.30, 0.70]]),\n            \"a_min\": 0.0, \"a_max1\": 6.0, \"a_max2\": 6.0, \"n1\": 8, \"n2\": 8\n        },\n        # Case C\n        {\n            \"beta\": 0.95, \"sigma\": 1.5, \"r1\": 0.03, \"r2\": 0.03, \"w\": 1.0,\n            \"z_grid\": np.array([1.0]),\n            \"pi_matrix\": np.array([[1.0]]),\n            \"a_min\": 0.0, \"a_max1\": 10.0, \"a_max2\": 10.0, \"n1\": 12, \"n2\": 12\n        }\n    ]\n\n    results = []\n    for case in test_cases:\n        result = _solve_case(**case)\n        results.append(result)\n\n    # Format the output as a comma-separated list of floats with 6 decimal places.\n    formatted_results = [f\"{r:.6f}\" for r in results]\n    print(f\"[{','.join(formatted_results)}]\")\n\nsolve()\n```"}]}