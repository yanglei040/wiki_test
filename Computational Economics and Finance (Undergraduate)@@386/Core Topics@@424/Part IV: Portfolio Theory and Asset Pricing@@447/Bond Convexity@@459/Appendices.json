{"hands_on_practices": [{"introduction": "To build a strong foundation, we begin by exploring how a bond's cash flow structure directly influences its convexity. This initial practice challenges you to compare a zero-coupon bond with a coupon-paying bond, revealing why the timing of payments is a crucial determinant of second-order interest rate risk. By working through this conceptual problem [@problem_id:2376960], you will gain a deeper intuition for what convexity truly represents.", "id": "2376960", "problem": "A default-free annual-pay zero-coupon bond with face value $1$ and maturity $T = 5$ years is priced off a flat annual yield to maturity (YTM) $y = 5\\%$. Define the bond’s convexity with respect to the annual YTM as $C(y) \\equiv \\dfrac{1}{P(y)} \\dfrac{d^{2}P(y)}{dy^{2}}$, where $P(y)$ is the bond’s price as a function of $y$. Consider also a default-free annual-pay coupon bond with the same face value $1$, the same maturity $T = 5$ years, and annual coupon rate $5\\%$, also priced off the same flat annual YTM $y = 5\\%$. \n\nWhich option correctly reports the convexity of the zero-coupon bond at $y = 5\\%$ (rounded to two decimals) and provides the correct explanation for why it is higher than the convexity of the coupon bond of the same maturity?\n\nA. $27.21$; because all of the zero-coupon bond’s cash flow occurs at the final date $t = T$, the curvature-weight $t(t+1)$ applies entirely at the largest $t$, whereas coupon payments shift weight to earlier, smaller $t$, lowering the coupon bond’s convexity for a given price.\n\nB. $23.94$; because earlier coupon payments create more sensitivity to interest rates, the coupon bond’s convexity exceeds that of the zero-coupon bond.\n\nC. $27.21$; because the zero-coupon bond has a lower duration than an otherwise identical coupon bond, its convexity must be higher.\n\nD. $30.00$; because convexity for a zero-coupon bond equals $T(T+1)$, independent of the yield level.", "solution": "The problem statement must first be validated for its scientific and logical integrity.\n\n**Step 1: Extract Givens**\n\n- **Bond 1 (Zero-Coupon Bond):**\n  - Type: Default-free, annual-pay zero-coupon bond.\n  - Face Value: $F = 1$.\n  - Maturity: $T = 5$ years.\n  - Yield to Maturity (YTM): Flat annual rate, $y = 5\\% = 0.05$.\n\n- **Bond 2 (Coupon Bond):**\n  - Type: Default-free, annual-pay coupon bond.\n  - Face Value: $F = 1$.\n  - Maturity: $T = 5$ years.\n  - Annual Coupon Rate: $c = 5\\% = 0.05$.\n  - Yield to Maturity (YTM): Flat annual rate, $y = 5\\% = 0.05$.\n\n- **Definition of Convexity:**\n  - $C(y) \\equiv \\dfrac{1}{P(y)} \\dfrac{d^{2}P(y)}{dy^{2}}$, where $P(y)$ is the bond's price as a function of the annual YTM $y$.\n\n**Step 2: Validate Using Extracted Givens**\n\nThe problem is subjected to rigorous validation.\n1.  **Scientifically Grounded:** The concepts of bond pricing, yield to maturity (YTM), and bond convexity are fundamental, well-established principles in financial mathematics. The definitions and relationships are standard. The problem is scientifically sound.\n2.  **Well-Posed:** The problem provides all necessary parameters ($F$, $T$, $y$, $c$) and a precise definition of convexity to calculate a unique numerical answer for the zero-coupon bond and to perform a qualitative comparison with the coupon bond.\n3.  **Objective:** The problem is stated in objective, quantitative terms, free of subjective or ambiguous language.\n4.  **Complete and Consistent:** The provided information is sufficient and free of internal contradictions. The term \"annual-pay zero-coupon bond\" is understood to mean that the YTM is compounded annually, which is consistent with the context of an \"annual YTM\".\n\n**Step 3: Verdict and Action**\n\nThe problem statement is valid. A rigorous solution can be derived.\n\n**Derivation of the Solution**\n\nFirst, we calculate the convexity for the zero-coupon bond. The price, $P(y)$, of a zero-coupon bond with face value $F=1$ and maturity $T=5$ is given by the present value of its single cash flow at maturity:\n$$P(y) = \\dfrac{1}{(1+y)^T} = (1+y)^{-T}$$\nGiven $T=5$, the price function is:\n$$P(y) = (1+y)^{-5}$$\n\nTo find the convexity, we must compute the first and second derivatives of the price function with respect to the yield, $y$.\nThe first derivative is:\n$$\\dfrac{dP(y)}{dy} = -5(1+y)^{-6}$$\nThe second derivative is:\n$$\\dfrac{d^{2}P(y)}{dy^{2}} = (-5)(-6)(1+y)^{-7} = 30(1+y)^{-7}$$\n\nUsing the provided definition of convexity, $C(y) = \\dfrac{1}{P(y)} \\dfrac{d^{2}P(y)}{dy^{2}}$:\n$$C(y) = \\dfrac{1}{(1+y)^{-5}} \\left[ 30(1+y)^{-7} \\right] = 30(1+y)^{-2}$$\nAlternatively, for a zero-coupon bond, the general formula for convexity is:\n$$C(y) = \\dfrac{T(T+1)}{(1+y)^2}$$\nSubstituting $T=5$:\n$$C(y) = \\dfrac{5(5+1)}{(1+y)^2} = \\dfrac{30}{(1+y)^2}$$\nThis confirms the derived expression. We now evaluate this at the given yield $y = 0.05$:\n$$C(0.05) = \\dfrac{30}{(1+0.05)^2} = \\dfrac{30}{(1.05)^2} = \\dfrac{30}{1.1025} \\approx 27.21088...$$\nRounding to two decimal places, the convexity of the zero-coupon bond is $27.21$.\n\nNext, we must explain why this convexity is higher than that of the coupon bond. The price of a general bond is the sum of the present values of its cash flows, $CF_t$:\n$$P(y) = \\sum_{t=1}^{T} \\dfrac{CF_t}{(1+y)^t}$$\nThe second derivative is:\n$$\\dfrac{d^2P(y)}{dy^2} = \\sum_{t=1}^{T} CF_t \\cdot t(t+1)(1+y)^{-(t+2)}$$\nConvexity is then:\n$$C(y) = \\dfrac{1}{P(y)} \\sum_{t=1}^{T} \\dfrac{CF_t \\cdot t(t+1)}{(1+y)^{t+2}} = \\dfrac{1}{(1+y)^2} \\sum_{t=1}^{T} \\left[ \\dfrac{CF_t / (1+y)^t}{P(y)} \\right] t(t+1)$$\nLet $w_t = \\dfrac{PV(CF_t)}{P(y)}$ be the weight of the cash flow at time $t$ relative to the total price. These weights sum to unity, $\\sum w_t = 1$. The convexity expression becomes a weighted average:\n$$C(y) = \\dfrac{1}{(1+y)^2} \\sum_{t=1}^{T} w_t \\cdot t(t+1)$$\nFor the zero-coupon bond, there is only one cash flow at $t=T=5$. Thus, $w_5=1$ and all other weights $w_{t<5}=0$. The sum reduces to a single term:\n$$C_{zero}(y) = \\dfrac{1}{(1+y)^2} \\cdot [1 \\cdot T(T+1)] = \\dfrac{T(T+1)}{(1+y)^2} = \\dfrac{30}{(1+y)^2}$$\nFor the coupon bond, there are cash flows at times $t=1, 2, 3, 4, 5$. Therefore, $w_1, w_2, w_3, w_4, w_5$ are all positive. The convexity is:\n$$C_{coupon}(y) = \\dfrac{1}{(1+y)^2} \\left[ w_1(1\\cdot2) + w_2(2\\cdot3) + w_3(3\\cdot4) + w_4(4\\cdot5) + w_5(5\\cdot6) \\right]$$\nThis is a weighted average of the terms $t(t+1)$ for $t=1,...,5$. Since the weights $w_{t<5}$ are positive, the average value $\\sum w_t \\cdot t(t+1)$ must be strictly less than the maximum possible value of $T(T+1) = 30$. The coupon payments shift weight to earlier times $t$, where the \"curvature contribution\" term $t(t+1)$ is smaller (e.g., $1 \\cdot 2 = 2$, $2 \\cdot 3 = 6$) compared to the final term at $t=5$ ($5 \\cdot 6 = 30$). Consequently, the overall convexity of the coupon bond is lower.\n$$C_{coupon}(y) < C_{zero}(y)$$\n\n**Option-by-Option Analysis**\n\n- **Option A:**\n  - **Numerical Value:** $27.21$. This is **Correct**.\n  - **Explanation:** The reasoning states that the zero-coupon bond's cash flow is entirely at $t=T$, where the \"curvature-weight\" $t(t+1)$ is largest. In contrast, the coupon bond's cash flows are distributed to earlier times $t$, with smaller corresponding $t(t+1)$ values, thus lowering the weighted average and the total convexity. This logic is entirely consistent with our derivation.\n  - **Verdict:** **Correct**.\n\n- **Option B:**\n  - **Numerical Value:** $23.94$. This is **Incorrect**.\n  - **Explanation:** The claim that \"earlier coupon payments create more sensitivity to interest rates\" is misleading in the context of convexity. While duration (first-order sensitivity) is complex, convexity (second-order sensitivity) is unambiguously reduced by earlier cash flows. Furthermore, the conclusion that the coupon bond's convexity is higher is factually wrong.\n  - **Verdict:** **Incorrect**.\n\n- **Option C:**\n  - **Numerical Value:** $27.21$. This is **Correct**.\n  - **Explanation:** The reasoning is based on the premise that \"the zero-coupon bond has a lower duration than an otherwise identical coupon bond\". This premise is false. A zero-coupon bond's Macaulay duration is exactly its maturity, $T=5$. A coupon bond pays intermediate coupons, so its Macaulay duration (the weighted-average time of cash flows) is always strictly less than its maturity, $T$. Therefore, the zero-coupon bond has the *highest* possible duration for a given maturity, not the lowest. The reasoning is fundamentally flawed.\n  - **Verdict:** **Incorrect**.\n\n- **Option D:**\n  - **Numerical Value:** $30.00$. This is **Incorrect**. Our calculation yielded approximately $27.21$.\n  - **Explanation:** The claim that convexity for a zero-coupon bond equals $T(T+1)$ is false. It is equal to $\\dfrac{T(T+1)}{(1+y)^2}$. The formula given incorrectly omits the denominator $(1+y)^2$, thereby falsely asserting independence from the yield level.\n  - **Verdict:** **Incorrect**.\n\nOnly Option A provides both the correct numerical value and the correct scientific explanation.", "answer": "$$\\boxed{A}$$"}, {"introduction": "Moving from intuition to application, this exercise requires you to implement a core computational finance algorithm from first principles. You will build a Newton-Raphson solver to find a bond's yield-to-maturity, a process that naturally involves the bond's first and second derivatives, which are directly related to duration and convexity. This hands-on coding practice [@problem_id:2376917] solidifies your understanding of how these theoretical sensitivities are calculated and used in practice.", "id": "2376917", "problem": "Implement a self-contained program that, for each bond in a given test suite, computes the nominal annual yield to maturity as the unique real number $y$ (expressed as a decimal, not a percentage) that equates the present value of all promised cash flows to the observed full price. The present value $P(y)$ of a bond paying a nominal annual coupon rate $c$ on face value $F$, with $f$ coupon payments per year, and maturity $T$ years (so that the total number of coupon periods is $N = fT$ and $N$ is an integer), is defined by the fundamental time-value-of-money identity\n$$\nP(y) \\equiv \\sum_{t=1}^{N} \\frac{\\mathrm{CF}_t}{(1 + y/f)^{t}},\n$$\nwhere for $t \\in \\{1,\\dots,N-1\\}$ one has $\\mathrm{CF}_t = F \\cdot c/f$, and for $t=N$ one has $\\mathrm{CF}_N = F \\cdot c/f + F$. Assume equal spacing between coupon dates, zero default risk, and that the quoted price is the full price (no accrued interest). All inputs are deterministic.\n\nYour program must find the unique $y$ that solves $P(y) = P_{\\text{mkt}}$ for each test case, and, at every iterate of its root-finding process, evaluate the bond’s instantaneous price sensitivities with respect to $y$, namely:\n- the modified duration $D_{\\text{mod}}(y)$, defined by $D_{\\text{mod}}(y) \\equiv -\\frac{1}{P(y)} \\frac{\\mathrm{d}P}{\\mathrm{d}y}(y)$, reported in years, and\n- the modified convexity $C_{\\text{mod}}(y)$, defined by $C_{\\text{mod}}(y) \\equiv \\frac{1}{P(y)} \\frac{\\mathrm{d}^2 P}{\\mathrm{d}y^2}(y)$, reported as a pure number when $y$ is in decimal units.\n\nYour numerical root-finding procedure must use first principles: start from the definition of present value, compute derivatives with respect to $y$ directly from that definition, and iterate until convergence. Declare convergence if either the absolute change in $y$ is below $10^{-12}$ or the absolute present-value mismatch $\\lvert P(y) - P_{\\text{mkt}} \\rvert$ is below $10^{-12}$. Use at most $100$ iterations per test case and report the final converged $y$, $D_{\\text{mod}}(y)$, and $C_{\\text{mod}}(y)$ for each test case. All yields and rates must be expressed as decimals, not with a percentage sign.\n\nTest Suite:\nFor each tuple $(F,c,f,T,P_{\\text{mkt}})$ below, solve for $y$ and report the associated $D_{\\text{mod}}(y)$ and $C_{\\text{mod}}(y)$ at the converged $y$.\n1. $F=100$, $c=0.05$, $f=2$, $T=5$, $P_{\\text{mkt}}=102$.\n2. $F=100$, $c=0$, $f=1$, $T=3$, $P_{\\text{mkt}}=85$.\n3. $F=100$, $c=0.12$, $f=2$, $T=10$, $P_{\\text{mkt}}=140$.\n4. $F=100$, $c=0.06$, $f=2$, $T=0.5$, $P_{\\text{mkt}}=101.5$.\n5. $F=100$, $c=0.08$, $f=4$, $T=7$, $P_{\\text{mkt}}=95$.\n\nFinal Output Format:\nYour program should produce a single line of output containing a comma-separated list enclosed in square brackets. For each test case $i \\in \\{1,2,3,4,5\\}$, append three floating-point numbers in this exact order: the converged yield $y_i$, the modified duration $D_{\\text{mod},i}$, and the modified convexity $C_{\\text{mod},i}$. Each number must be rounded to exactly $10$ decimal places. The final output therefore contains $15$ numbers in a single flat list:\n$[y_1,D_{\\text{mod},1},C_{\\text{mod},1},y_2,D_{\\text{mod},2},C_{\\text{mod},2},y_3,D_{\\text{mod},3},C_{\\text{mod},3},y_4,D_{\\text{mod},4},C_{\\text{mod},4},y_5,D_{\\text{mod},5},C_{\\text{mod},5}]$.", "solution": "The problem statement has been subjected to rigorous validation and is determined to be valid. It is scientifically grounded in the fundamental principles of quantitative finance, mathematically well-posed, and specified with sufficient, unambiguous detail to permit a unique and meaningful solution. The problem requires the computation of a bond's yield to maturity and its associated price sensitivities, which is a standard and essential task in computational finance.\n\nThe central task is to find the nominal annual yield to maturity, denoted by $y$, which is the unique real root of the equation $g(y) = 0$, where $g(y) = P(y) - P_{\\text{mkt}}$. The function $P(y)$ represents the theoretical price (present value) of the bond as a function of yield, and $P_{\\text{mkt}}$ is its given market price. The price function is defined as:\n$$\nP(y) = \\sum_{t=1}^{N} \\frac{\\mathrm{CF}_t}{(1 + y/f)^{t}}\n$$\nHere, $f$ is the coupon frequency, $T$ is the maturity in years, $N=fT$ is the total number of coupon periods, and $\\mathrm{CF}_t$ is the cash flow at the end of period $t$. For periods $t \\in \\{1, \\dots, N-1\\}$, the cash flow is the periodic coupon payment, $\\mathrm{CF}_t = F \\cdot c/f$, where $F$ is the face value and $c$ is the nominal annual coupon rate. For the final period $t=N$, the cash flow includes the final coupon and the principal repayment, $\\mathrm{CF}_N = F \\cdot c/f + F$.\n\nTo solve for $y$, we will implement the Newton-Raphson method, a powerful root-finding algorithm known for its rapid, quadratic convergence when the initial guess is sufficiently close to the root. The iterative formula for this method is:\n$$\ny_{k+1} = y_k - \\frac{g(y_k)}{g'(y_k)} = y_k - \\frac{P(y_k) - P_{\\text{mkt}}}{\\frac{\\mathrm{d}P}{\\mathrm{d}y}(y_k)}\n$$\nThis requires the first derivative of the price function with respect to the yield, $\\frac{\\mathrm{d}P}{\\mathrm{d}y}$. The problem also requires the calculation of price convexity, which involves the second derivative, $\\frac{\\mathrm{d}^2P}{\\mathrm{d}y^2}$. We derive these derivatives directly from the definition of $P(y)$ using the chain rule.\n\nThe first derivative of the price function is:\n$$\n\\frac{\\mathrm{d}P}{\\mathrm{d}y}(y) = \\frac{\\mathrm{d}}{\\mathrm{d}y} \\sum_{t=1}^{N} \\mathrm{CF}_t (1 + y/f)^{-t} = \\sum_{t=1}^{N} \\mathrm{CF}_t \\left[ -t (1 + y/f)^{-t-1} \\cdot \\frac{1}{f} \\right] \\\\\n\\frac{\\mathrm{d}P}{\\mathrm{d}y}(y) = -\\frac{1}{f} \\sum_{t=1}^{N} \\frac{t \\cdot \\mathrm{CF}_t}{(1 + y/f)^{t+1}}\n$$\nThis derivative is strictly negative for any bond with non-negative cash flows, which confirms that the price function $P(y)$ is monotonically decreasing with yield $y$.\n\nThe second derivative is obtained by differentiating $\\frac{\\mathrm{d}P}{\\mathrm{d}y}$ with respect to $y$:\n$$\n\\frac{\\mathrm{d}^2P}{\\mathrm{d}y^2}(y) = \\frac{\\mathrm{d}}{\\mathrm{d}y} \\left( -\\frac{1}{f} \\sum_{t=1}^{N} t \\cdot \\mathrm{CF}_t (1 + y/f)^{-t-1} \\right) = -\\frac{1}{f} \\sum_{t=1}^{N} t \\cdot \\mathrm{CF}_t \\left[ -(t+1) (1 + y/f)^{-t-2} \\cdot \\frac{1}{f} \\right] \\\\\n\\frac{\\mathrm{d}^2P}{\\mathrm{d}y^2}(y) = \\frac{1}{f^2} \\sum_{t=1}^{N} \\frac{t(t+1) \\mathrm{CF}_t}{(1 + y/f)^{t+2}}\n$$\nThis derivative is strictly positive, indicating that the price-yield relationship is convex.\n\nThe algorithm proceeds as follows:\n1. For each test case, the cash flow vector $\\mathrm{CF}$ is constructed based on the parameters $F$, $c$, $f$, and $T$.\n2. The initial guess for the yield, $y_0$, is set to the coupon rate, $c$, a logical starting point as the yield converges to the coupon rate for a bond trading at par.\n3. The Newton-Raphson iteration is executed for a maximum of $100$ steps. At each step $k$, $y_{k+1}$ is computed from $y_k$, $P(y_k)$, and $\\frac{\\mathrm{d}P}{\\mathrm{d}y}(y_k)$.\n4. Convergence is declared when the absolute change in yield, $|y_{k+1} - y_k|$, falls below $10^{-12}$, or when the pricing error, $|P(y_{k+1}) - P_{\\text{mkt}}|$, falls below $10^{-12}$.\n5. Upon convergence to a final yield $y$, the required risk metrics are calculated. The modified duration, $D_{\\text{mod}}$, and modified convexity, $C_{\\text{mod}}$, are defined as:\n$$\nD_{\\text{mod}}(y) \\equiv -\\frac{1}{P(y)} \\frac{\\mathrm{d}P}{\\mathrm{d}y}(y)\n$$\n$$\nC_{\\text{mod}}(y) \\equiv \\frac{1}{P(y)} \\frac{\\mathrm{d}^2P}{\\mathrm{d}y^2}(y)\n$$\nIn these formulae, $P(y)$ is the theoretical price calculated at the converged yield $y$, as specified. At convergence, $P(y)$ is functionally equivalent to $P_{\\text{mkt}}$.\n\nThe implementation utilizes `numpy` for efficient, vectorized computation of the summations involved in $P(y)$ and its derivatives. The procedure is applied to each test case in the provided suite to obtain the specified results.", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Main function to solve for yield, duration, and convexity for a suite of bonds.\n    \"\"\"\n    # Test Suite: Tuples of (F, c, f, T, P_mkt)\n    # F: Face Value\n    # c: Annual coupon rate (decimal)\n    # f: Coupon frequency per year\n    # T: Maturity in years\n    # P_mkt: Market price (full price)\n    test_cases = [\n        (100.0, 0.05, 2.0, 5.0, 102.0),\n        (100.0, 0.0, 1.0, 3.0, 85.0),\n        (100.0, 0.12, 2.0, 10.0, 140.0),\n        (100.0, 0.06, 2.0, 0.5, 101.5),\n        (100.0, 0.08, 4.0, 7.0, 95.0),\n    ]\n\n    results = []\n    for case in test_cases:\n        y, d_mod, c_mod = solve_for_bond(*case)\n        results.append(f\"{y:.10f}\")\n        results.append(f\"{d_mod:.10f}\")\n        results.append(f\"{c_mod:.10f}\")\n\n    # Final print statement in the exact required format.\n    print(f\"[{','.join(results)}]\")\n\ndef solve_for_bond(F, c, f, T, P_mkt):\n    \"\"\"\n    Calculates yield, modified duration, and modified convexity for a single bond.\n    \n    Uses the Newton-Raphson method to find the yield to maturity.\n    \"\"\"\n    # Derived parameters\n    N = int(f * T)\n    C_periodic = F * c / f\n\n    # Cash flow vector (1-based index logic from problem)\n    cf = np.full(N, C_periodic)\n    if N > 0:\n        cf[-1] += F\n    \n    # Time periods vector (t=1, 2, ..., N)\n    t = np.arange(1, N + 1)\n\n    # --- Helper functions for P(y) and its derivatives ---\n    def price(y):\n        if y <= -f:\n            return np.inf  # Avoid domain error\n        discount_factors = (1 + y / f) ** -t\n        return np.sum(cf * discount_factors)\n\n    def price_prime(y):\n        if y <= -f:\n            return -np.inf\n        terms = t * cf * (1 + y / f) ** (-t - 1)\n        return -np.sum(terms) / f\n\n    def price_double_prime(y):\n        if y <= -f:\n            return np.inf\n        terms = t * (t + 1) * cf * (1 + y / f) ** (-t - 2)\n        return np.sum(terms) / (f**2)\n\n    # --- Newton-Raphson Root-finding ---\n    y_k = c  # Initial guess\n    if y_k <= -f: # Safety check for pathological initial guess\n        y_k = 0.0\n\n    max_iter = 100\n    conv_tol_y = 1e-12\n    conv_tol_p = 1e-12\n\n    for _ in range(max_iter):\n        y_prev = y_k\n        \n        p = price(y_k)\n        p_prime = price_prime(y_k)\n\n        # Newton's step\n        if abs(p_prime) < 1e-15:\n            # Derivative is too small; Newton's method may become unstable.\n            # This should not occur for standard bonds.\n            break\n        \n        y_k = y_k - (p - P_mkt) / p_prime\n        \n        # Check for convergence\n        if abs(y_k - y_prev) < conv_tol_y or abs(price(y_k) - P_mkt) < conv_tol_p:\n            break\n\n    # --- Final calculations at converged yield ---\n    y_final = y_k\n    p_final = price(y_final)\n    p_prime_final = price_prime(y_final)\n    p_double_prime_final = price_double_prime(y_final)\n\n    # Modified Duration and Convexity as per problem definitions\n    if abs(p_final) < 1e-15: # Avoid division by zero\n        D_mod = np.nan\n        C_mod = np.nan\n    else:\n        D_mod = -p_prime_final / p_final\n        C_mod = p_double_prime_final / p_final\n        \n    return y_final, D_mod, C_mod\n\nif __name__ == \"__main__\":\n    solve()\n```"}, {"introduction": "The final practice elevates our analysis from a single instrument to the portfolio level, tackling a realistic risk management challenge. You will design an algorithm that rebalances a bond portfolio to maintain constant duration and convexity targets after an interest rate shock, a strategy known as immunization. This capstone problem [@problem_id:2376977] demonstrates the ultimate practical utility of convexity in constructing and maintaining resilient investment portfolios.", "id": "2376977", "problem": "You are asked to design and implement a complete, runnable program that dynamically rebalances a fixed-coupon bond portfolio to maintain a constant target duration and convexity after parallel yield shocks. Your derivation and algorithm must start from the fundamental definition of present value and the derivative-based definitions of duration and convexity. Do not use any pre-packaged \"shortcut\" formulas; instead, derive the necessary expressions from first principles.\n\nConsider a set of fixed-coupon, annual-pay, bullet bonds indexed by $i \\in \\{1,\\dots,N\\}$. Each bond $i$ has maturity $T_i$ (in years), annual coupon rate $c_i$ (as a decimal per year), face value normalized to $1$, and yield to maturity (YTM) $y_i$ (as a decimal per year). The present value price function of bond $i$ as a function of yield $y$ is given by the discounted sum of its future cash flows:\n$$\nP_i(y) \\equiv \\sum_{t=1}^{T_i} \\frac{\\mathrm{CF}_{i,t}}{(1+y)^t},\n$$\nwhere the cash flow at year $t$ is $\\mathrm{CF}_{i,t} = c_i$ for $t \\in \\{1,\\dots,T_i-1\\}$ and $\\mathrm{CF}_{i,T_i} = 1 + c_i$.\n\nDefine the derivative-based modified duration $D_i(y)$ and convexity $C_i(y)$ of bond $i$ at yield $y$ by\n$$\nD_i(y) \\equiv -\\frac{1}{P_i(y)} \\frac{\\partial P_i}{\\partial y}(y), \\qquad\nC_i(y) \\equiv \\frac{1}{P_i(y)} \\frac{\\partial^2 P_i}{\\partial y^2}(y).\n$$\n\nLet the portfolio weights be $w \\in \\mathbb{R}^N$, where $w_i$ is the market-value weight of bond $i$ and $\\sum_{i=1}^N w_i = 1$. The portfolio modified duration and convexity at a vector of current yields $y = (y_1,\\dots,y_N)$ are the market-value-weighted averages of the component sensitivities:\n$$\nD^{\\mathrm{port}}(w,y) \\equiv \\sum_{i=1}^N w_i \\, D_i(y_i), \\qquad\nC^{\\mathrm{port}}(w,y) \\equiv \\sum_{i=1}^N w_i \\, C_i(y_i).\n$$\n\nYou will enforce constant targets $D^\\star$ and $C^\\star$ equal to the portfolio’s initial modified duration and convexity computed at baseline yields and initial weights. After a parallel yield shock $\\Delta y$ is applied (i.e., all bond yields become $y_i + \\Delta y$), you must rebalance the weights to exactly match the targets while minimally deviating from the pre-shock weights in the Euclidean sense. Formally, given the pre-shock weights $w^{\\mathrm{prev}}$ and the post-shock bond-level sensitivities $D_i(y_i+\\Delta y)$ and $C_i(y_i+\\Delta y)$, compute the new weights $w^{\\mathrm{new}}$ that solve the following equality-constrained least-squares problem:\n$$\n\\begin{aligned}\n\\min_{w \\in \\mathbb{R}^N} \\quad & \\| w - w^{\\mathrm{prev}} \\|_2^2 \\\\\n\\text{subject to} \\quad & \\sum_{i=1}^N w_i = 1, \\\\\n& \\sum_{i=1}^N w_i \\, D_i(y_i+\\Delta y) = D^\\star, \\\\\n& \\sum_{i=1}^N w_i \\, C_i(y_i+\\Delta y) = C^\\star.\n\\end{aligned}\n$$\nNo inequality constraints are imposed; short positions are permissible if necessary to meet the targets.\n\nTasks your program must perform for each test case:\n1. Compute each bond’s price $P_i(y_i)$, modified duration $D_i(y_i)$, and convexity $C_i(y_i)$ from the definitions above by directly differentiating the present value formula with respect to yield.\n2. Compute the initial portfolio targets $D^\\star$ and $C^\\star$ using the baseline weights $w^{0}$ and baseline yields $y$.\n3. Apply the specified parallel yield shock $\\Delta y$ to obtain post-shock yields $y_i^{\\mathrm{post}} = y_i + \\Delta y$, recompute $D_i(y_i^{\\mathrm{post}})$ and $C_i(y_i^{\\mathrm{post}})$, and then solve the equality-constrained least-squares problem to obtain $w^{\\mathrm{new}}$ that exactly attains the targets with minimal Euclidean deviation from $w^{\\mathrm{prev}}$.\n\nScientific and numerical details:\n- Payments are annual. All rates ($c_i$, $y_i$, and $\\Delta y$) must be treated as decimals per year (for example, $0.05$ means five percent per year). Do not use a percentage sign.\n- Durations are in units of years and convexities are in units of years squared. Weights are unitless fractions that sum to $1$.\n- Angles are not involved in this problem; no angle unit is required.\n- For numerical output, weights should be rounded to $6$ decimal places.\n\nTest suite:\nUse $N=4$ bonds with the following characteristics (annual-pay, face value $1$):\n- Bond $1$: $T_1 = 2$, $c_1 = 0.03$, baseline $y_1 = 0.032$.\n- Bond $2$: $T_2 = 5$, $c_2 = 0.04$, baseline $y_2 = 0.039$.\n- Bond $3$: $T_3 = 10$, $c_3 = 0.05$, baseline $y_3 = 0.051$.\n- Bond $4$: $T_4 = 30$, $c_4 = 0.06$, baseline $y_4 = 0.059$.\n\nBaseline portfolio weights (pre-shock) for all test cases:\n- $w^{0} = [0.25, 0.25, 0.25, 0.25]$.\n\nDefine targets $D^\\star$ and $C^\\star$ by computing $D^{\\mathrm{port}}(w^{0}, y)$ and $C^{\\mathrm{port}}(w^{0}, y)$ at the baseline yields.\n\nProvide three yield-shock test cases, each a single-step rebalance from the same baseline:\n- Case A (happy path): $\\Delta y = 0.005$.\n- Case B (no-op boundary): $\\Delta y = 0.000$.\n- Case C (larger negative shock): $\\Delta y = -0.010$.\n\nFinal output format:\nYour program should produce a single line of output containing the results as a comma-separated list enclosed in square brackets, where each element is the list of rebalanced weights $w^{\\mathrm{new}}$ for a test case, with each weight rounded to $6$ decimal places. For example:\n\"[[w1_A,w2_A,w3_A,w4_A],[w1_B,w2_B,w3_B,w4_B],[w1_C,w2_C,w3_C,w4_C]]\".", "solution": "The user has requested the design and implementation of a program to rebalance a bond portfolio to maintain constant duration and convexity after a yield shock, minimizing the change in portfolio weights.\n\n### Step 1: Extract Givens\n\n- **Bonds**: A set of $N$ fixed-coupon, annual-pay, bullet bonds.\n- **Bond Parameters**: For each bond $i \\in \\{1, \\dots, N\\}$: maturity $T_i$ (years), annual coupon rate $c_i$ (decimal), face value $1$, and yield to maturity $y_i$ (decimal).\n- **Present Value (Price)**: $P_i(y) = \\sum_{t=1}^{T_i} \\frac{\\mathrm{CF}_{i,t}}{(1+y)^t}$, where $\\mathrm{CF}_{i,t} = c_i$ for $t < T_i$ and $\\mathrm{CF}_{i,T_i} = 1 + c_i$.\n- **Modified Duration**: $D_i(y) = -\\frac{1}{P_i(y)} \\frac{\\partial P_i}{\\partial y}(y)$.\n- **Convexity**: $C_i(y) = \\frac{1}{P_i(y)} \\frac{\\partial^2 P_i}{\\partial y^2}(y)$.\n- **Portfolio Weights**: $w \\in \\mathbb{R}^N$ such that $\\sum_{i=1}^N w_i = 1$.\n- **Portfolio Duration**: $D^{\\mathrm{port}}(w,y) = \\sum_{i=1}^N w_i \\, D_i(y_i)$.\n- **Portfolio Convexity**: $C^{\\mathrm{port}}(w,y) = \\sum_{i=1}^N w_i \\, C_i(y_i)$.\n- **Optimization Problem**:\n  $$\n  \\begin{aligned}\n  \\min_{w \\in \\mathbb{R}^N} \\quad & \\| w - w^{\\mathrm{prev}} \\|_2^2 \\\\\n  \\text{subject to} \\quad & \\sum_{i=1}^N w_i = 1, \\\\\n  & \\sum_{i=1}^N w_i \\, D_i(y_i+\\Delta y) = D^\\star, \\\\\n  & \\sum_{i=1}^N w_i \\, C_i(y_i+\\Delta y) = C^\\star.\n  \\end{aligned}\n  $$\n- **Targets**: $D^\\star$ and $C^\\star$ are the initial portfolio duration and convexity computed with baseline weights $w^0$ and baseline yields $y$.\n- **Test Data**:\n  - $N=4$ bonds:\n    - Bond 1: $T_1 = 2$, $c_1 = 0.03$, $y_1 = 0.032$.\n    - Bond 2: $T_2 = 5$, $c_2 = 0.04$, $y_2 = 0.039$.\n    - Bond 3: $T_3 = 10$, $c_3 = 0.05$, $y_3 = 0.051$.\n    - Bond 4: $T_4 = 30$, $c_4 = 0.06$, $y_4 = 0.059$.\n  - Baseline weights: $w^0 = [0.25, 0.25, 0.25, 0.25]$.\n  - Yield shocks $\\Delta y$: $0.005$, $0.000$, $-0.010$.\n\n### Step 2: Validate Using Extracted Givens\n\nThe problem statement is subjected to validation against the required criteria.\n\n- **Scientifically Grounded**: The problem is rooted in established principles of financial mathematics and portfolio theory. The concepts of bond pricing, modified duration, and convexity as derivatives of the price-yield function are fundamental in fixed-income analysis. The optimization problem describes a standard portfolio immunization strategy. The problem is scientifically sound.\n- **Well-Posed**: The problem is an equality-constrained quadratic programming (QP) problem. The objective function, $\\| w - w^{\\mathrm{prev}} \\|_2^2$, is strictly convex, and the constraints are linear. This structure guarantees that a unique, stable, and meaningful solution exists, provided the constraints are not linearly dependent. For the given bond data, the vectors of post-shock durations and convexities are numerically verified to be linearly independent from the vector of ones, ensuring the constraint matrix is full rank. The problem is well-posed.\n- **Objective**: The problem is stated in precise, quantitative terms using standard mathematical and financial notation. It is free from subjective, ambiguous, or opinion-based language.\n- **Completeness and Consistency**: All necessary data (bond characteristics, initial weights, yield shocks) and definitions are provided. The problem is self-contained and free of internal contradictions.\n- **Realism**: The bond parameters and yield shocks are within a realistic range for financial markets. The rebalancing strategy is a practical, albeit simplified, representation of dynamic hedging.\n- **Verifiability**: The solution can be derived analytically and implemented numerically, producing results that are verifiable and reproducible.\n\n### Step 3: Verdict and Action\n\nThe problem statement is **valid**. It is scientifically sound, well-posed, objective, and complete. A rigorous solution can be derived and implemented. I will proceed with the solution derivation.\n\n### Principle-Based Solution Design\n\nThe solution is developed in three stages: first, deriving the analytical expressions for bond sensitivities from first principles; second, solving the constrained optimization problem using the method of Lagrange multipliers; and third, outlining the computational algorithm.\n\n**1. Derivation of Bond Sensitivities**\n\nThe price of bond $i$ is given by the sum of its discounted cash flows:\n$$\nP_i(y) = \\sum_{t=1}^{T_i} \\frac{\\mathrm{CF}_{i,t}}{(1+y)^t}\n$$\nTo find the modified duration and convexity, we must compute the first and second partial derivatives of the price $P_i(y)$ with respect to the yield $y$.\n\nThe first derivative is found by differentiating term-by-term:\n$$\n\\frac{\\partial P_i}{\\partial y}(y) = \\frac{\\partial}{\\partial y} \\sum_{t=1}^{T_i} \\mathrm{CF}_{i,t} (1+y)^{-t} = \\sum_{t=1}^{T_i} \\mathrm{CF}_{i,t} \\frac{\\partial}{\\partial y} (1+y)^{-t} = \\sum_{t=1}^{T_i} \\mathrm{CF}_{i,t} (-t) (1+y)^{-t-1}\n$$\nThe second derivative is found by differentiating the first derivative:\n$$\n\\frac{\\partial^2 P_i}{\\partial y^2}(y) = \\frac{\\partial}{\\partial y} \\sum_{t=1}^{T_i} \\mathrm{CF}_{i,t} (-t) (1+y)^{-t-1} = \\sum_{t=1}^{T_i} \\mathrm{CF}_{i,t} (-t) (-(t+1)) (1+y)^{-t-2} = \\sum_{t=1}^{T_i} \\mathrm{CF}_{i,t} \\, t(t+1) (1+y)^{-t-2}\n$$\nUsing the provided definitions, the modified duration $D_i(y)$ and convexity $C_i(y)$ are:\n$$\nD_i(y) = -\\frac{1}{P_i(y)} \\frac{\\partial P_i}{\\partial y}(y) = \\frac{1}{P_i(y)} \\sum_{t=1}^{T_i} \\frac{t \\cdot \\mathrm{CF}_{i,t}}{(1+y)^{t+1}}\n$$\n$$\nC_i(y) = \\frac{1}{P_i(y)} \\frac{\\partial^2 P_i}{\\partial y^2}(y) = \\frac{1}{P_i(y)} \\sum_{t=1}^{T_i} \\frac{t(t+1) \\cdot \\mathrm{CF}_{i,t}}{(1+y)^{t+2}}\n$$\nThese formulas allow for direct computation of bond sensitivities, forming the basis of our algorithm.\n\n**2. Solution of the Constrained Optimization Problem**\n\nThe rebalancing problem is to find the new weight vector $w^{\\mathrm{new}}$ that minimizes the squared Euclidean distance from a previous weight vector $w^{\\mathrm{prev}}$, subject to three linear equality constraints. We can simplify the objective function to $\\frac{1}{2} \\| w - w^{\\mathrm{prev}} \\|_2^2$ without changing the optimum. The problem is:\n$$\n\\begin{aligned}\n\\min_{w \\in \\mathbb{R}^N} \\quad & \\frac{1}{2} \\| w - w^{\\mathrm{prev}} \\|_2^2 \\\\\n\\text{subject to} \\quad & \\sum_{i=1}^N w_i = 1, \\\\\n& \\sum_{i=1}^N w_i D^{\\mathrm{post}}_i = D^\\star, \\\\\n& \\sum_{i=1}^N w_i C^{\\mathrm{post}}_i = C^\\star.\n\\end{aligned}\n$$\nwhere $D^{\\mathrm{post}}_i = D_i(y_i+\\Delta y)$ and $C^{\\mathrm{post}}_i = C_i(y_i+\\Delta y)$ are the post-shock sensitivities.\n\nThis is a classic quadratic programming problem with linear equality constraints, which can be solved using the method of Lagrange multipliers. The Lagrangian function $\\mathcal{L}$ is:\n$$\n\\mathcal{L}(w, \\lambda) = \\frac{1}{2} \\sum_{k=1}^N (w_k - w_k^{\\mathrm{prev}})^2 - \\lambda_1 \\left( \\sum_{k=1}^N w_k - 1 \\right) - \\lambda_2 \\left( \\sum_{k=1}^N w_k D^{\\mathrm{post}}_k - D^\\star \\right) - \\lambda_3 \\left( \\sum_{k=1}^N w_k C^{\\mathrm{post}}_k - C^\\star \\right)\n$$\nwhere $\\lambda = (\\lambda_1, \\lambda_2, \\lambda_3)$ is the vector of Lagrange multipliers. The first-order condition for optimality is $\\nabla_w \\mathcal{L} = 0$. For each weight $w_k$:\n$$\n\\frac{\\partial \\mathcal{L}}{\\partial w_k} = (w_k - w_k^{\\mathrm{prev}}) - \\lambda_1 - \\lambda_2 D^{\\mathrm{post}}_k - \\lambda_3 C^{\\mathrm{post}}_k = 0\n$$\nSolving for $w_k$, we express the optimal weights in terms of the Lagrange multipliers:\n$$\nw_k = w_k^{\\mathrm{prev}} + \\lambda_1 + \\lambda_2 D^{\\mathrm{post}}_k + \\lambda_3 C^{\\mathrm{post}}_k\n$$\nThis can be written in matrix form. Let the constraint matrix $A$ be a $3 \\times N$ matrix whose rows are the coefficients of the weights in the constraints, and let the vector $b$ contain the constant terms of the constraints:\n$$\nA = \\begin{pmatrix} 1 & 1 & \\dots & 1 \\\\ D^{\\mathrm{post}}_1 & D^{\\mathrm{post}}_2 & \\dots & D^{\\mathrm{post}}_N \\\\ C^{\\mathrm{post}}_1 & C^{\\mathrm{post}}_2 & \\dots & C^{\\mathrm{post}}_N \\end{pmatrix}, \\quad b = \\begin{pmatrix} 1 \\\\ D^\\star \\\\ C^\\star \\end{pmatrix}\n$$\nThe linear system of constraints is $A w = b$. The expression for the optimal weight vector $w$ is:\n$$\nw = w^{\\mathrm{prev}} + A^T \\lambda\n$$\nTo find the unknown Lagrange multipliers $\\lambda$, we substitute this expression for $w$ back into the constraint equation $A w = b$:\n$$\nA(w^{\\mathrm{prev}} + A^T \\lambda) = b \\implies A w^{\\mathrm{prev}} + (A A^T) \\lambda = b\n$$\nThis gives a linear system for $\\lambda$:\n$$\n(A A^T) \\lambda = b - A w^{\\mathrm{prev}}\n$$\nThe matrix $A A^T$ is a $3 \\times 3$ matrix. Assuming it is invertible (which it is for the given problem data), we can solve for $\\lambda$:\n$$\n\\lambda = (A A^T)^{-1} (b - A w^{\\mathrm{prev}})\n$$\nOnce $\\lambda$ is computed, the new weight vector $w^{\\mathrm{new}}$ is found by substituting $\\lambda$ back into the expression for $w$.\n\n**3. Algorithmic Implementation**\n\nThe algorithm proceeds as follows for each test case:\n1.  **Initialization**: Compute the initial sensitivities $D_i(y_i)$ and $C_i(y_i)$ for each bond $i$ using the baseline yields $y_i$.\n2.  **Target Calculation**: Calculate the portfolio target duration $D^\\star$ and convexity $C^\\star$ using the initial weights $w^0$:\n    $D^\\star = \\sum_{i=1}^N w_i^0 D_i(y_i)$ and $C^\\star = \\sum_{i=1}^N w_i^0 C_i(y_i)$.\n3.  **Post-Shock Calculation**: Given a yield shock $\\Delta y$, compute the post-shock yield $y_i^{\\mathrm{post}} = y_i + \\Delta y$ for each bond. Then, calculate the new sensitivities $D^{\\mathrm{post}}_i = D_i(y_i^{\\mathrm{post}})$ and $C^{\\mathrm{post}}_i = C_i(y_i^{\\mathrm{post}})$.\n4.  **Solve for New Weights**:\n    a. Construct the $3 \\times N$ constraint matrix $A$ and the $3 \\times 1$ target vector $b$.\n    b. Compute the $3 \\times 3$ matrix $M = A A^T$.\n    c. Compute the $3 \\times 1$ right-hand side vector $R = b - A w^{\\mathrm{prev}}$ (where $w^{\\mathrm{prev}} = w^0$).\n    d. Solve the linear system $M \\lambda = R$ for the Lagrange multipliers $\\lambda$.\n    e. Calculate the new weight vector $w^{\\mathrm{new}} = w^{\\mathrm{prev}} + A^T \\lambda$.\n5.  **Output**: Store and format the resulting $w^{\\mathrm{new}}$ according to the specified output format. This process is repeated for all given yield shocks.", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Solves for rebalanced bond portfolio weights after yield shocks.\n    \"\"\"\n\n    def calculate_bond_sensitivities(T, c, y):\n        \"\"\"\n        Calculates price, modified duration, and convexity of a single bond\n        from first principles.\n\n        Args:\n            T (int): Maturity in years.\n            c (float): Annual coupon rate as a decimal.\n            y (float): Yield to maturity as a decimal.\n\n        Returns:\n            tuple: A tuple containing (price, duration, convexity).\n        \"\"\"\n        if y <= -1.0:\n            raise ValueError(\"Yield must be greater than -1.\")\n            \n        price_val = 0.0\n        dp_dy_sum = 0.0\n        d2p_dy2_sum = 0.0\n        \n        for t in range(1, T + 1):\n            if t < T:\n                cf = c\n            else:  # At maturity, cash flow is coupon + face value (1)\n                cf = 1.0 + c\n            \n            discount_factor = (1.0 + y) ** (-t)\n            \n            # Accumulate terms for price and derivatives based on summation formulas\n            price_val += cf * discount_factor\n            dp_dy_sum += cf * (-t) * (1.0 + y) ** (-t - 1.0)\n            d2p_dy2_sum += cf * t * (t + 1.0) * (1.0 + y) ** (-t - 2.0)\n            \n        # Calculate Modified Duration and Convexity from their definitions\n        # D = - (1/P) * (dP/dy)\n        # C =   (1/P) * (d^2P/dy^2)\n        if price_val == 0.0:\n             # Avoid division by zero, though unlikely for these params\n            return 0.0, 0.0, 0.0\n\n        duration = - (1.0 / price_val) * dp_dy_sum\n        convexity = (1.0 / price_val) * d2p_dy2_sum\n        \n        return price_val, duration, convexity\n\n    # Define the test cases from the problem statement.\n    bonds = [\n        {'T': 2, 'c': 0.03, 'y': 0.032},\n        {'T': 5, 'c': 0.04, 'y': 0.039},\n        {'T': 10, 'c': 0.05, 'y': 0.051},\n        {'T': 30, 'c': 0.06, 'y': 0.059}\n    ]\n    N = len(bonds)\n    w_initial = np.array([0.25, 0.25, 0.25, 0.25])\n    \n    test_cases = [\n        0.005,   # Case A\n        0.000,   # Case B\n        -0.010   # Case C\n    ]\n\n    # --- Step 1 & 2: Calculate initial portfolio state and targets D*, C* ---\n    initial_durations = np.zeros(N)\n    initial_convexities = np.zeros(N)\n    for i, bond in enumerate(bonds):\n        _, D, C = calculate_bond_sensitivities(bond['T'], bond['c'], bond['y'])\n        initial_durations[i] = D\n        initial_convexities[i] = C\n    \n    D_target = np.sum(w_initial * initial_durations)\n    C_target = np.sum(w_initial * initial_convexities)\n\n    all_results = []\n    \n    # Process each yield shock test case\n    for delta_y in test_cases:\n        w_prev = w_initial\n        \n        # --- Step 3: Calculate post-shock sensitivities ---\n        post_shock_durations = np.zeros(N)\n        post_shock_convexities = np.zeros(N)\n        for i, bond in enumerate(bonds):\n            post_shock_yield = bond['y'] + delta_y\n            _, D_post, C_post = calculate_bond_sensitivities(bond['T'], bond['c'], post_shock_yield)\n            post_shock_durations[i] = D_post\n            post_shock_convexities[i] = C_post\n\n        # --- Step 4: Solve the constrained optimization problem ---\n        # min ||w - w_prev||^2 subject to A*w = b\n        \n        # The constraint matrix A is a 3xN matrix\n        A = np.array([\n            np.ones(N),\n            post_shock_durations,\n            post_shock_convexities\n        ])\n        \n        # The constraint vector b is a 3x1 vector\n        b = np.array([1.0, D_target, C_target])\n        \n        # Solve for Lagrange multipliers lambda: (A*A.T)*lambda = b - A*w_prev\n        M = A @ A.T  # This is a 3x3 matrix\n        rhs = b - (A @ w_prev) # This is a 3x1 vector\n        \n        # Solve the 3x3 system M * lambda = rhs\n        lagrange_multipliers = np.linalg.solve(M, rhs)\n        \n        # Calculate new weights: w_new = w_prev + A.T * lambda\n        w_new = w_prev + A.T @ lagrange_multipliers\n        \n        all_results.append(w_new)\n\n    # --- Final print statement in the exact required format ---\n    # Example: [[w1_A,w2_A,w3_A,w4_A],[w1_B,w2_B,w3_B,w4_B],[w1_C,w2_C,w3_C,w4_C]]\n    case_strings = []\n    for result_vector in all_results:\n        # Round each weight to 6 decimal places and format as a string\n        weight_strings = [f\"{w:.6f}\" for w in result_vector]\n        # Join weights for one case into a string like \"[w1,w2,w3,w4]\"\n        case_strings.append(f\"[{','.join(weight_strings)}]\")\n\n    # Join all case strings into the final format \"[[...],[...],...]\"\n    final_output_string = f\"[{','.join(case_strings)}]\"\n    print(final_output_string)\n\nsolve()\n```"}]}