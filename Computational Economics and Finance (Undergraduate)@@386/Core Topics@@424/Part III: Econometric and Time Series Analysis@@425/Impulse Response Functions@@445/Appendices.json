{"hands_on_practices": [{"introduction": "To truly understand Impulse Response Functions, we begin with their analytical roots. This exercise challenges you to derive the closed-form expression for the IRF of a standard AR($2$) process, a fundamental building block in time series modeling. By connecting the response shape to the roots of the model's characteristic polynomial, you will gain a deep intuition for why shocks can lead to either smooth or oscillatory dynamics in an economic system. [@problem_id:2400804]", "id": "2400804", "problem": "Consider a univariate, covariance-stationary autoregressive process of order $2$ (abbreviated AR($2$)) used in computational economics and finance to summarize dynamic responses to shocks:\n$$\ny_{t} = \\phi_{1} y_{t-1} + \\phi_{2} y_{t-2} + \\epsilon_{t},\n$$\nwhere $\\{\\epsilon_{t}\\}$ is a sequence of serially uncorrelated innovations with zero mean and finite variance, and $\\phi_{1}$ and $\\phi_{2}$ are real parameters such that the process is covariance-stationary. Define the impulse response function (IRF) $\\{\\psi_{h}\\}_{h \\ge 0}$ as the sequence of responses $y_{h}$ to a one-time unit innovation at time $t=0$ when the system is at rest prior to the shock, that is, $y_{-1}=y_{-2}=0$ and $\\epsilon_{0}=1$, $\\epsilon_{t}=0$ for all $t \\ne 0$. Let $r_{1}$ and $r_{2}$ denote the real and distinct roots of the characteristic equation\n$$\nr^{2} - \\phi_{1} r - \\phi_{2} = 0.\n$$\nDerive a closed-form expression for the IRF coefficient $\\psi_{h}$ for any integer horizon $h \\ge 0$ in terms of $r_{1}$, $r_{2}$, and $h$. Briefly relate, in words, how the qualitative shape of the IRF depends on the signs and magnitudes of $r_{1}$ and $r_{2}$. Your final answer must be a single analytic expression for $\\psi_{h}$ in terms of $r_{1}$, $r_{2}$, and $h$. No numerical approximation is required.", "solution": "The problem statement is subjected to validation.\n\nStep 1: Extract Givens.\n- The model is a univariate, covariance-stationary autoregressive process of order $2$, AR($2$): $y_{t} = \\phi_{1} y_{t-1} + \\phi_{2} y_{t-2} + \\epsilon_{t}$.\n- The innovations $\\{\\epsilon_{t}\\}$ are a sequence of serially uncorrelated random variables with zero mean and finite variance.\n- The parameters $\\phi_{1}$ and $\\phi_{2}$ are real constants ensuring covariance-stationarity.\n- The impulse response function (IRF), $\\{\\psi_{h}\\}_{h \\ge 0}$, is defined as the response sequence $y_{h}$ to a one-time unit shock at $t=0$.\n- The initial conditions for the IRF are $y_{-1}=0$ and $y_{-2}=0$.\n- The shock is specified as $\\epsilon_{0}=1$ and $\\epsilon_{t}=0$ for all integers $t \\ne 0$.\n- The characteristic equation is $r^{2} - \\phi_{1} r - \\phi_{2} = 0$.\n- The roots of the characteristic equation, $r_1$ and $r_2$, are specified to be real and distinct.\n\nStep 2: Validate Using Extracted Givens.\n- The problem is **scientifically grounded**. It addresses a fundamental concept in time series analysis and econometricsâ€”the impulse response function of an AR($2$) process. This is a standard topic in the field.\n- The problem is **well-posed**. It provides all necessary information (the model, initial conditions, shock specification, and properties of the characteristic roots) to derive a unique, meaningful solution.\n- The problem is **objective**. Its language is precise and devoid of subjective or ambiguous terminology.\n- The problem is internally consistent and complete. The assumption of covariance-stationarity implies that the roots $r_1, r_2$ must lie inside the unit circle, i.e., $|r_1|<1$ and $|r_2|<1$, which ensures the IRF converges to zero. This is a standard and necessary condition for a non-explosive system.\n\nStep 3: Verdict and Action.\nThe problem is valid. A rigorous derivation of the solution will now be presented.\n\nThe impulse response function coefficients, denoted by $\\psi_{h}$, are defined as the response of the system variable $y_t$ at time $t=h$ to a unit shock at time $t=0$, with the system being at rest prior to the shock. Formally, $\\psi_{h} \\equiv y_{h}$ given that $y_{t}=0$ for $t<0$, $\\epsilon_0=1$, and $\\epsilon_t=0$ for $t \\ne 0$.\n\nSubstituting these conditions into the AR($2$) equation yields the dynamic path for the IRF coefficients:\n$$\n\\psi_{h} = \\phi_{1} \\psi_{h-1} + \\phi_{2} \\psi_{h-2} \\quad \\text{for } h \\ge 2\n$$\nThis is a homogeneous second-order linear difference equation. The characteristic equation associated with this difference equation is given in the problem statement as:\n$$\nr^{2} - \\phi_{1} r - \\phi_{2} = 0\n$$\nThe problem specifies that the roots of this equation, $r_1$ and $r_2$, are real and distinct. Consequently, the general solution for $\\psi_h$ is of the form:\n$$\n\\psi_{h} = c_{1} r_{1}^{h} + c_{2} r_{2}^{h}\n$$\nwhere $c_1$ and $c_2$ are constants to be determined from the initial conditions of the impulse response sequence.\n\nWe must find the first two values of the IRF, $\\psi_0$ and $\\psi_1$.\nFor $h=0$:\n$$\n\\psi_{0} = y_{0} = \\phi_{1} y_{-1} + \\phi_{2} y_{-2} + \\epsilon_{0} = \\phi_{1}(0) + \\phi_{2}(0) + 1 = 1\n$$\nFor $h=1$:\n$$\n\\psi_{1} = y_{1} = \\phi_{1} y_{0} + \\phi_{2} y_{-1} + \\epsilon_{1} = \\phi_{1} \\psi_{0} + \\phi_{2}(0) + 0 = \\phi_{1}(1) = \\phi_{1}\n$$\nSo, the initial conditions for the difference equation are $\\psi_0 = 1$ and $\\psi_1 = \\phi_1$.\n\nWe now use these conditions to solve for $c_1$ and $c_2$:\nFor $h=0$: $\\psi_{0} = c_{1} r_{1}^{0} + c_{2} r_{2}^{0} \\implies c_{1} + c_{2} = 1$.\nFor $h=1$: $\\psi_{1} = c_{1} r_{1}^{1} + c_{2} r_{2}^{1} \\implies c_{1} r_{1} + c_{2} r_{2} = \\phi_{1}$.\n\nThis is a system of two linear equations in two variables, $c_1$ and $c_2$. From the first equation, we have $c_2 = 1 - c_1$. Substituting this into the second equation:\n$$\nc_{1} r_{1} + (1 - c_{1}) r_{2} = \\phi_{1}\n$$\n$$\nc_{1} (r_{1} - r_{2}) = \\phi_{1} - r_{2}\n$$\n$$\nc_{1} = \\frac{\\phi_{1} - r_{2}}{r_{1} - r_{2}}\n$$\nAnd for $c_2$:\n$$\nc_{2} = 1 - c_{1} = 1 - \\frac{\\phi_{1} - r_{2}}{r_{1} - r_{2}} = \\frac{(r_{1} - r_{2}) - (\\phi_{1} - r_{2})}{r_{1} - r_{2}} = \\frac{r_{1} - \\phi_{1}}{r_{1} - r_{2}}\n$$\nTo simplify these expressions, we use Vieta's formulas for the roots of the quadratic characteristic equation $r^2 - \\phi_1 r - \\phi_2 = 0$. The sum of the roots is $r_1 + r_2 = \\phi_1$. Substituting $\\phi_1 = r_1 + r_2$ into the expressions for $c_1$ and $c_2$:\n$$\nc_{1} = \\frac{(r_{1} + r_{2}) - r_{2}}{r_{1} - r_{2}} = \\frac{r_{1}}{r_{1} - r_{2}}\n$$\n$$\nc_{2} = \\frac{r_{1} - (r_{1} + r_{2})}{r_{1} - r_{2}} = \\frac{-r_{2}}{r_{1} - r_{2}}\n$$\nNow, substitute these coefficients back into the general solution for $\\psi_h$:\n$$\n\\psi_{h} = \\left( \\frac{r_{1}}{r_{1} - r_{2}} \\right) r_{1}^{h} + \\left( \\frac{-r_{2}}{r_{1} - r_{2}} \\right) r_{2}^{h}\n$$\nCombining the terms gives the final closed-form expression for the IRF coefficient $\\psi_h$ for any integer horizon $h \\ge 0$:\n$$\n\\psi_{h} = \\frac{r_{1}^{h+1} - r_{2}^{h+1}}{r_{1} - r_{2}}\n$$\nThis expression can be recognized as a variant of Binet's formula, which is a specific case for the Fibonacci sequence.\n\nRegarding the qualitative shape of the IRF: The covariance-stationarity of the process requires that the roots of the characteristic polynomial lie inside the unit circle. Since the roots $r_1, r_2$ are real, this means $-1 < r_{1,2} < 1$. This condition ensures that $\\lim_{h \\to \\infty} \\psi_h = 0$, meaning the effect of a shock is transitory. The shape of the decay depends on the signs of the roots.\n1.  If both roots are positive ($0 < r_2 < r_1 < 1$), the IRF coefficients $\\psi_h$ are always positive and decay monotonically to zero. A shock has a persistent but diminishing positive effect.\n2.  If the roots have opposite signs (e.g., $-1 < r_2 < 0 < r_1 < 1$), the term $r_2^h$ alternates in sign. The IRF will thus exhibit oscillations as it decays to zero. The response may initially increase or decrease and can cross the zero axis multiple times.\n3.  If both roots are negative ($-1 < r_2 < r_1 < 0$), both $r_1^h$ and $r_2^h$ alternate in sign. The IRF will start at $\\psi_0=1$, become negative at $\\psi_1 = r_1+r_2 < 0$, become positive at $\\psi_2 = r_1^2 + r_1 r_2 + r_2^2 > 0$, and so on. This produces a pronounced oscillatory decay to zero.", "answer": "$$\n\\boxed{\\frac{r_{1}^{h+1} - r_{2}^{h+1}}{r_{1} - r_{2}}}\n$$"}, {"introduction": "Moving from theory to practice, the next step is to compute an IRF numerically. This hands-on coding challenge asks you to implement the recursive definition of an IRF for an AR($3$) model and observe how different parameter sets generate distinct response patterns. This practice solidifies the concept of shock propagation and is a core skill in empirical economic analysis. [@problem_id:2373828]", "id": "2373828", "problem": "You are given a univariate Autoregressive (AR) model of order $3$, defined by\n$$\ny_t \\;=\\; \\phi_1\\,y_{t-1} \\;+\\; \\phi_2\\,y_{t-2} \\;+\\; \\phi_3\\,y_{t-3} \\;+\\; \\varepsilon_t,\n$$\nwhere $\\{\\varepsilon_t\\}$ is a white-noise sequence with zero mean and finite variance. Consider a one-time unit impulse at time $t=0$, that is, $\\varepsilon_0 = 1$ and $\\varepsilon_t = 0$ for all $t \\neq 0$, and impose zero initial conditions $y_{-1} = y_{-2} = y_{-3} = 0$. The Impulse Response Function (IRF) is the sequence $\\{\\psi_h\\}_{h=0}^H$ where $\\psi_h$ is the response at horizon $h$ to the time-$0$ impulse under these conditions. Construct the IRF numerically for each parameter set in the test suite below up to the specified finite horizon $H$. Although visualization is part of standard analysis, for this task you must provide the numeric IRF values; any plotting you might do is not part of the required output.\n\nTest suite:\n- Case A (stable, monotone): $\\phi_1 = 0.7$, $\\phi_2 = -0.14$, $\\phi_3 = 0.008$, $H = 10$.\n- Case B (stable, oscillatory): $\\phi_1 = 1.1$, $\\phi_2 = -0.88$, $\\phi_3 = 0.192$, $H = 12$.\n- Case C (high persistence, AR of order $1$ special case): $\\phi_1 = 0.98$, $\\phi_2 = 0.0$, $\\phi_3 = 0.0$, $H = 10$.\n\nRequirements:\n- For each case, compute the IRF vector $\\left[\\psi_0,\\psi_1,\\dots,\\psi_H\\right]$ using only the model definition and the stated shock and initial conditions.\n- Round each real number to exactly $6$ decimal places.\n- Final output format: Your program must produce a single line containing a single top-level list of three lists (one per case), with no spaces anywhere. The inner lists must each have length $H+1$ in the order of horizons $h=0,1,\\dots,H$. For example, an output with three lists should look like $[[\\cdot,\\cdot],[\\cdot],[\\cdot]]$ with commas separating numbers and lists, no spaces, and each number printed with exactly $6$ digits after the decimal point.\n\nYour program must implement the above for the following three test cases in this exact order: Case A, Case B, Case C. The only acceptable output is the single line containing the nested list as specified; do not output any other text or characters.", "solution": "The problem statement is subjected to validation and is found to be valid. It is scientifically grounded in the theory of linear time series models, specifically autoregressive (AR) processes. The problem is well-posed, providing all necessary parameters, initial conditions, and a clear objective. The parameters for the given test cases correspond to stable AR processes, ensuring a meaningful, decaying impulse response. The language is objective and precise. Therefore, I will proceed with a full solution.\n\nThe problem requires the numerical computation of the Impulse Response Function (IRF) for a univariate autoregressive model of order $3$, denoted AR($3$). The model is specified by the equation:\n$$\ny_t = \\phi_1 y_{t-1} + \\phi_2 y_{t-2} + \\phi_3 y_{t-3} + \\varepsilon_t\n$$\nwhere $\\{\\varepsilon_t\\}$ is a white-noise process with zero mean, $E[\\varepsilon_t] = 0$, and finite variance.\n\nThe IRF, denoted by the sequence $\\{\\psi_h\\}_{h=0}^\\infty$, describes the evolution of the process $\\{y_t\\}$ in response to a single, one-time shock at time $t=0$, assuming the system was in equilibrium (zero) before the shock. The specified conditions are:\n1.  A unit impulse at time $t=0$: $\\varepsilon_0 = 1$ and $\\varepsilon_t=0$ for all $t \\neq 0$.\n2.  Zero initial conditions: $y_t = 0$ for all $t < 0$. In particular, $y_{-1} = y_{-2} = y_{-3} = 0$.\n\nThe IRF coefficients $\\psi_h$ are simply the values of the process $y_h$ under these specific conditions, i.e., $\\psi_h \\equiv y_h$ for $h \\ge 0$. We can compute these values recursively.\n\nFor horizon $h=0$:\n$$\n\\psi_0 = y_0 = \\phi_1 y_{-1} + \\phi_2 y_{-2} + \\phi_3 y_{-3} + \\varepsilon_0\n$$\nSubstituting the initial conditions and the impulse value:\n$$\n\\psi_0 = \\phi_1(0) + \\phi_2(0) + \\phi_3(0) + 1 = 1\n$$\nThe instantaneous impact of a unit shock on the process is always one.\n\nFor any horizon $h > 0$:\n$$\n\\psi_h = y_h = \\phi_1 y_{h-1} + \\phi_2 y_{h-2} + \\phi_3 y_{h-3} + \\varepsilon_h\n$$\nSince $\\varepsilon_h=0$ for $h > 0$ and $y_k=\\psi_k$ for $k \\ge 0$:\n$$\n\\psi_h = \\phi_1 \\psi_{h-1} + \\phi_2 \\psi_{h-2} + \\phi_3 \\psi_{h-3}\n$$\nThis is a linear homogeneous recurrence relation for the IRF coefficients for $h \\ge 1$. The initial values for this recurrence are derived from the pre-sample history and the initial impact $\\psi_0$. We can formally define $\\psi_k = 0$ for $k < 0$. This allows for a unified computation.\n\nLet's compute the first few terms explicitly:\n-   $\\psi_0 = 1$\n-   $\\psi_1 = \\phi_1 \\psi_0 + \\phi_2 \\psi_{-1} + \\phi_3 \\psi_{-2} = \\phi_1 (1) + \\phi_2(0) + \\phi_3(0) = \\phi_1$\n-   $\\psi_2 = \\phi_1 \\psi_1 + \\phi_2 \\psi_0 + \\phi_3 \\psi_{-1} = \\phi_1(\\phi_1) + \\phi_2(1) + \\phi_3(0) = \\phi_1^2 + \\phi_2$\n-   $\\psi_3 = \\phi_1 \\psi_2 + \\phi_2 \\psi_1 + \\phi_3 \\psi_0 = \\phi_1(\\phi_1^2+\\phi_2) + \\phi_2(\\phi_1) + \\phi_3(1) = \\phi_1^3 + 2\\phi_1\\phi_2 + \\phi_3$\n-   For $h \\ge 3$, the recurrence uses only previously computed positive-indexed $\\psi$ terms: $\\psi_h = \\phi_1 \\psi_{h-1} + \\phi_2 \\psi_{h-2} + \\phi_3 \\psi_{h-3}$.\n\nThe numerical algorithm is a direct implementation of this recursive calculation. For an AR($p$) model (with $p=3$ here), we need to maintain a history of the last $p$ values of the process to compute the next one. We can use an array, say `y_ext`, of size $H+1+p$ to store the full history of the process from time $t=-p$ to $t=H$.\n\nThe algorithm for each test case is as follows:\n1.  Define the parameters $\\boldsymbol{\\phi} = [\\phi_1, \\phi_2, \\phi_3]$ and the horizon $H$. The order of the process is $p=3$.\n2.  Initialize a numerical array `y_ext` of size $H+1+p$ with all elements set to zero. This automatically satisfies the zero initial conditions $y_{-1}=y_{-2}=y_{-3}=0$, which correspond to indices $p-1, p-2, \\dots, 0$ of `y_ext`.\n3.  Iterate for time $t$ from $0$ to $H$. The value $y_t$ will be stored at index $t+p$ in `y_ext`.\n4.  In each iteration $t$:\n    a.  Define the shock $\\varepsilon_t$. It is $1$ if $t=0$, and $0$ otherwise.\n    b.  Compute $y_t$ using the AR($3$) formula. This involves a dot product between the parameter vector $\\boldsymbol{\\phi}$ and the vector of the last $p$ values of the process, $[y_{t-1}, y_{t-2}, y_{t-3}]$. These past values are retrieved from the `y_ext` array.\n    c.  Add the shock $\\varepsilon_t$ to the result.\n    d.  Store the computed $y_t$ at index $t+p$ in `y_ext`.\n5.  After the loop completes, the IRF sequence $\\{\\psi_0, \\psi_1, \\dots, \\psi_H\\}$ corresponds to the values $\\{y_0, y_1, \\dots, y_H\\}$, which are stored in `y_ext` from index $p$ to $p+H$.\n6.  The final numerical values are formatted to $6$ decimal places as required.\nThis procedure is applied to each of the three test cases provided in the problem statement.", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef compute_irf(phis, H):\n    \"\"\"\n    Computes the Impulse Response Function (IRF) for an AR model.\n\n    Args:\n        phis (np.ndarray): Array of AR coefficients [phi_1, phi_2, ...].\n        H (int): The horizon for the IRF calculation (computes up to psi_H).\n\n    Returns:\n        np.ndarray: The IRF sequence [psi_0, psi_1, ..., psi_H].\n    \"\"\"\n    p = len(phis)\n    # Extended history array to hold pre-sample values (y_{-p} to y_{-1})\n    # and the IRF values (y_0 to y_H).\n    # Indices 0 to p-1 hold y_{-p} to y_{-1}.\n    # Indices p to p+H hold y_0 to y_H.\n    y_ext = np.zeros(H + 1 + p)\n\n    # The initial conditions y_t=0 for t<0 are satisfied by np.zeros.\n\n    # Iterate from t=0 to H to compute the IRF.\n    for t in range(H + 1):\n        idx = t + p\n        \n        # Unit impulse at t=0.\n        epsilon = 1.0 if t == 0 else 0.0\n        \n        # The vector of past y values: [y_{t-1}, y_{t-2}, ..., y_{t-p}]\n        # These correspond to y_ext[idx-1], y_ext[idx-2], ..., y_ext[idx-p].\n        # The slice y_ext[t:t+p] gets y_{t-p},...,y_{t-1}. We reverse it for dot product.\n        past_y = y_ext[t:t+p][::-1]\n\n        # Compute y_t = sum(phi_i * y_{t-i}) + epsilon_t\n        y_ext[idx] = np.dot(phis, past_y) + epsilon\n\n    # The IRF is the sequence y_0, ..., y_H, which is stored from index p.\n    return y_ext[p:]\n\ndef solve():\n    \"\"\"\n    Solves the problem for the given test cases and prints the result\n    in the specified format.\n    \"\"\"\n    # Define the test cases from the problem statement.\n    test_cases = [\n        # Case A (stable, monotone)\n        {'phis': [0.7, -0.14, 0.008], 'H': 10},\n        # Case B (stable, oscillatory)\n        {'phis': [1.1, -0.88, 0.192], 'H': 12},\n        # Case C (high persistence, AR(1) special case)\n        {'phis': [0.98, 0.0, 0.0], 'H': 10},\n    ]\n\n    all_results_str = []\n    \n    for case in test_cases:\n        phis_list = case['phis']\n        # Pad with zeros if fewer than 3 phis are given (as in Case C)\n        # to maintain a consistent AR(3) structure.\n        while len(phis_list) < 3:\n            phis_list.append(0.0)\n\n        phis = np.array(phis_list)\n        H = case['H']\n        \n        irf_values = compute_irf(phis, H)\n        \n        # Format the numbers to exactly 6 decimal places.\n        formatted_irf = [\"{:.6f}\".format(v) for v in irf_values]\n        # Create the string for a single case's list, e.g., \"[num1,num2,...]\"\n        case_result_str = \"[\" + \",\".join(formatted_irf) + \"]\"\n        all_results_str.append(case_result_str)\n        \n    # Join the results of all cases into a single list string, e.g., \"[[...],[...]]\"\n    # The requirement is no spaces anywhere.\n    final_output = \"[\" + \",\".join(all_results_str) + \"]\"\n\n    # Final print statement in the exact required format.\n    print(final_output)\n\nsolve()\n```"}, {"introduction": "We now apply our understanding to a scenario involving a structural vector autoregression (SVAR), a workhorse model in macroeconomics. This problem demonstrates how IRFs are used to trace the effects of identified economic shocksâ€”in this hypothetical case, supply versus demand shocksâ€”through a multi-variable system. By computing and comparing cumulative responses, you will practice a key technique used to answer substantive questions in computational economics. [@problem_id:2400780]", "id": "2400780", "problem": "Consider a bivariate linear time-invariant discrete-time structural system used in computational economics and finance to study Impulse Response Functions (IRFs):\n$$\n\\mathbf{x}_t = A \\mathbf{x}_{t-1} + B \\mathbf{e}_t,\n$$\nwhere $\\mathbf{x}_t \\in \\mathbb{R}^2$ stacks the variables $\\mathbf{x}_t = \\begin{bmatrix} p^c_t \\\\ \\pi_t \\end{bmatrix}$ with $p^c_t$ denoting commodity price inflation and $\\pi_t$ denoting aggregate inflation. The structural shocks $\\mathbf{e}_t \\in \\mathbb{R}^2$ satisfy $\\mathbb{E}[\\mathbf{e}_t] = \\mathbf{0}$ and $\\mathbb{E}[\\mathbf{e}_t \\mathbf{e}_t'] = I_2$. The $2 \\times 2$ matrices $A$ and $B$ are constant across time. The structural identification is as follows: the first shock is a supply-side shock and the second shock is a demand-side shock, identified through the impact on commodity prices, with the sign restriction that the first element of the first column of $B$ is negative (a supply-side shock moves $p^c_t$ down on impact), and the first element of the second column of $B$ is positive (a demand-side shock moves $p^c_t$ up on impact).\n\nFor a one-time unit structural shock of type $j \\in \\{1,2\\}$ at time $t=0$, the IRF of $\\mathbf{x}_{h}$ at horizon $h \\in \\{0,1,2,\\ldots\\}$ is defined by\n$$\n\\mathrm{IRF}_j(h) = A^h \\mathbf{b}_j,\n$$\nwhere $\\mathbf{b}_j$ is the $j$-th column of $B$. The IRF of inflation at horizon $h$ to shock $j$ is the second component of $\\mathrm{IRF}_j(h)$, i.e., $\\left[\\mathrm{IRF}_j(h)\\right]_2$.\n\nFor each parameter set below, define the cumulative inflation response to the demand-side shock over horizons $h = 0,1,\\ldots,H$ as\n$$\nC^{\\text{dem}} = \\sum_{h=0}^{H} \\left[\\mathrm{IRF}_2(h)\\right]_2,\n$$\nand the cumulative inflation response to the supply-side shock as\n$$\nC^{\\text{sup}} = \\sum_{h=0}^{H} \\left[\\mathrm{IRF}_1(h)\\right]_2.\n$$\nCompute the comparison scalar\n$$\n\\Delta = C^{\\text{dem}} - C^{\\text{sup}}.\n$$\n\nYour task is to write a complete program that, for each of the following parameter sets, computes $\\Delta$ as a real number. There are no physical units involved.\n\nTest Suite (each case specifies $A$, $B$, and $H$):\n1. Case 1:\n   $$\n   A = \\begin{bmatrix} 0.6 & 0.0 \\\\ 0.2 & 0.5 \\end{bmatrix}, \\quad\n   B = \\begin{bmatrix} -0.5 & 0.6 \\\\ 0.1 & 0.3 \\end{bmatrix}, \\quad\n   H = 20.\n   $$\n2. Case 2:\n   $$\n   A = \\begin{bmatrix} 0.9 & 0.0 \\\\ 0.1 & 0.95 \\end{bmatrix}, \\quad\n   B = \\begin{bmatrix} -0.2 & 0.2 \\\\ 0.05 & 0.25 \\end{bmatrix}, \\quad\n   H = 40.\n   $$\n3. Case 3 (boundary condition with repeated eigenvalue in $A$):\n   $$\n   A = \\begin{bmatrix} 0.8 & 0.0 \\\\ 0.3 & 0.8 \\end{bmatrix}, \\quad\n   B = \\begin{bmatrix} -0.3 & 0.3 \\\\ 0.02 & 0.15 \\end{bmatrix}, \\quad\n   H = 30.\n   $$\n4. Case 4:\n   $$\n   A = \\begin{bmatrix} 0.2 & 0.0 \\\\ 0.5 & 0.3 \\end{bmatrix}, \\quad\n   B = \\begin{bmatrix} -0.1 & 0.1 \\\\ 0.0 & 0.1 \\end{bmatrix}, \\quad\n   H = 10.\n   $$\n\nYour program must compute $\\Delta$ for each case and produce a single line of output containing the four results as a comma-separated list of floats enclosed in square brackets, in the order of the cases. Express each float with six digits after the decimal point. For example, an output with four results should look like\n$$\n[\\delta_1,\\delta_2,\\delta_3,\\delta_4],\n$$\nwhere each $\\delta_i$ denotes the computed value of $\\Delta$ for Case $i$ with six digits after the decimal point.", "solution": "The problem as stated is rigorously defined, self-contained, and consistent with the principles of linear systems theory as applied in computational econometrics. No inconsistencies or fallacies are detected. We may therefore proceed with a formal solution.\n\nThe problem requires the computation of a scalar quantity, $\\Delta$, which represents the difference between the cumulative impulse responses of aggregate inflation ($\\pi_t$) to a demand-side shock and a supply-side shock. The system dynamics are governed by the linear model:\n$$\n\\mathbf{x}_t = A \\mathbf{x}_{t-1} + B \\mathbf{e}_t\n$$\nwhere $\\mathbf{x}_t = \\begin{bmatrix} p^c_t \\\\ \\pi_t \\end{bmatrix}$.\n\nThe impulse response function, $\\mathrm{IRF}_j(h)$, measures the effect of a unit structural shock of type $j \\in \\{1, 2\\}$ at time $t=0$ on the state vector $\\mathbf{x}_h$ at horizon $h$. It is given by:\n$$\n\\mathrm{IRF}_j(h) = A^h \\mathbf{b}_j\n$$\nwhere $\\mathbf{b}_j$ is the $j$-th column of the matrix $B$. The shock $j=1$ corresponds to the supply-side shock, and $j=2$ corresponds to the demand-side shock.\n\nWe are interested in the response of the second variable, aggregate inflation $\\pi_t$. To extract this component from the vector $\\mathrm{IRF}_j(h)$, we use the standard basis vector $\\mathbf{e}_2' = \\begin{bmatrix} 0 & 1 \\end{bmatrix}$. The inflation response at horizon $h$ to shock $j$ is:\n$$\n[\\mathrm{IRF}_j(h)]_2 = \\mathbf{e}_2' \\mathrm{IRF}_j(h) = \\mathbf{e}_2' A^h \\mathbf{b}_j\n$$\n\nThe problem defines the cumulative inflation responses over horizons $h=0, 1, \\ldots, H$. The cumulative response to the demand-side shock ($j=2$) is:\n$$\nC^{\\text{dem}} = \\sum_{h=0}^{H} [\\mathrm{IRF}_2(h)]_2 = \\sum_{h=0}^{H} \\mathbf{e}_2' A^h \\mathbf{b}_2\n$$\nAnd the cumulative response to the supply-side shock ($j=1$) is:\n$$\nC^{\\text{sup}} = \\sum_{h=0}^{H} [\\mathrm{IRF}_1(h)]_2 = \\sum_{h=0}^{H} \\mathbf{e}_2' A^h \\mathbf{b}_1\n$$\n\nBy the linearity of matrix operations, we can factor out the constant terms from the summation:\n$$\nC^{\\text{dem}} = \\mathbf{e}_2' \\left( \\sum_{h=0}^{H} A^h \\right) \\mathbf{b}_2\n$$\n$$\nC^{\\text{sup}} = \\mathbf{e}_2' \\left( \\sum_{h=0}^{H} A^h \\right) \\mathbf{b}_1\n$$\n\nThe target quantity is $\\Delta = C^{\\text{dem}} - C^{\\text{sup}}$. Substituting the expressions above:\n$$\n\\Delta = \\mathbf{e}_2' \\left( \\sum_{h=0}^{H} A^h \\right) \\mathbf{b}_2 - \\mathbf{e}_2' \\left( \\sum_{h=0}^{H} A^h \\right) \\mathbf{b}_1\n$$\nFactoring again yields a more compact expression:\n$$\n\\Delta = \\mathbf{e}_2' \\left( \\sum_{h=0}^{H} A^h \\right) (\\mathbf{b}_2 - \\mathbf{b}_1)\n$$\nThis is the fundamental equation for our computation.\n\nThe term $\\sum_{h=0}^{H} A^h$ is a finite geometric series of matrices. A direct, iterative summation is computationally valid but inefficient. A more elegant and numerically superior approach is to use the closed-form solution for the geometric sum. Let $S_H = \\sum_{h=0}^{H} A^h = I + A + A^2 + \\dots + A^H$. Then we have $(I - A)S_H = (I - A)(I + A + \\dots + A^H) = I - A^{H+1}$.\nProvided that the matrix $(I - A)$ is invertible, we can write:\n$$\nS_H = (I - A^{H+1}) (I - A)^{-1}\n$$\nThe invertibility of $(I - A)$ is guaranteed if $1$ is not an eigenvalue of $A$. For the economic systems given, stability requires that all eigenvalues of $A$ lie inside the unit circle, which implies their moduli are strictly less than $1$. An inspection of the provided matrices $A$ confirms this condition holds for all test cases. Therefore, the use of this closed-form expression is justified and correct.\n\nThe final computational formula for $\\Delta$ is thus:\n$$\n\\Delta = \\mathbf{e}_2' \\left[ (I - A^{H+1}) (I - A)^{-1} \\right] (\\mathbf{b}_2 - \\mathbf{b}_1)\n$$\n\nThe algorithm for each test case is as follows:\n$1$. Given the matrices $A \\in \\mathbb{R}^{2 \\times 2}$, $B \\in \\mathbb{R}^{2 \\times 2}$, and the integer horizon $H$.\n$2$. Extract the column vectors $\\mathbf{b}_1$ and $\\mathbf{b}_2$ from $B$.\n$3$. Compute the difference vector $\\mathbf{b}_{\\text{diff}} = \\mathbf{b}_2 - \\mathbf{b}_1$.\n$4$. Compute the matrix power $A^{H+1}$.\n$5$. Compute the matrix inverse $(I - A)^{-1}$, where $I$ is the $2 \\times 2$ identity matrix.\n$6$. Compute the matrix sum $S_H = (I - A^{H+1}) (I - A)^{-1}$.\n$7$. Compute the resulting vector $\\mathbf{v} = S_H \\mathbf{b}_{\\text{diff}}$.\n$8$. The scalar $\\Delta$ is the second element of $\\mathbf{v}$, i.e., $\\Delta = [\\mathbf{v}]_2$.\n\nThis procedure is robust and will be implemented for all specified test cases. The numerical precision will be handled by standard floating-point arithmetic, with the final output formatted to six decimal places as requested.", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Computes the comparison scalar Delta for each test case according to the problem definition.\n    \"\"\"\n\n    # Define the test cases from the problem statement.\n    test_cases = [\n        {\n            \"A\": np.array([[0.6, 0.0], [0.2, 0.5]]),\n            \"B\": np.array([[-0.5, 0.6], [0.1, 0.3]]),\n            \"H\": 20,\n        },\n        {\n            \"A\": np.array([[0.9, 0.0], [0.1, 0.95]]),\n            \"B\": np.array([[-0.2, 0.2], [0.05, 0.25]]),\n            \"H\": 40,\n        },\n        {\n            \"A\": np.array([[0.8, 0.0], [0.3, 0.8]]),\n            \"B\": np.array([[-0.3, 0.3], [0.02, 0.15]]),\n            \"H\": 30,\n        },\n        {\n            \"A\": np.array([[0.2, 0.0], [0.5, 0.3]]),\n            \"B\": np.array([[-0.1, 0.1], [0.0, 0.1]]),\n            \"H\": 10,\n        },\n    ]\n\n    results = []\n    \n    for case in test_cases:\n        A = case[\"A\"]\n        B = case[\"B\"]\n        H = case[\"H\"]\n\n        # The dimension of the system, n=2.\n        n = A.shape[0]\n        I = np.identity(n)\n\n        # Extract columns of B, corresponding to supply (b1) and demand (b2) shocks.\n        b1 = B[:, 0]\n        b2 = B[:, 1]\n        \n        # Compute the difference vector b_diff = b2 - b1.\n        b_diff = b2 - b1\n\n        # The core calculation is based on the formula:\n        # Delta = e2' * [sum_{h=0 to H} A^h] * (b2 - b1)\n        # where the sum is a finite geometric series of matrices.\n        # sum_{h=0 to H} A^h = (I - A^(H+1)) * (I - A)^(-1)\n\n        # Compute A^(H+1)\n        A_pow_H1 = np.linalg.matrix_power(A, H + 1)\n\n        # Compute (I - A)^(-1)\n        I_minus_A_inv = np.linalg.inv(I - A)\n\n        # Compute the matrix sum S_H\n        S_H = (I - A_pow_H1) @ I_minus_A_inv\n\n        # Compute the cumulative response vector\n        cumulative_response_vector = S_H @ b_diff\n\n        # The scalar Delta is the second component of the response vector (inflation response).\n        delta = cumulative_response_vector[1]\n\n        results.append(delta)\n\n    # Format the final output as a comma-separated list of floats with six decimal places, enclosed in brackets.\n    output_str = f\"[{','.join(f'{r:.6f}' for r in results)}]\"\n    \n    # Final print statement in the exact required format.\n    print(output_str)\n\nsolve()\n```"}]}